
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009a50  08009a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab0  08009ab0  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab8  08009ab8  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08009ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001498  20000104  08009bc4  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000159c  08009bc4  0002159c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015582  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003902  00000000  00000000  000356f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00039000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7a  00000000  00000000  0003a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aad0  00000000  00000000  0003b17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018719  00000000  00000000  00055c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be4b  00000000  00000000  0006e363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004edc  00000000  00000000  0010a1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0010f08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009a38 	.word	0x08009a38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08009a38 	.word	0x08009a38

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <en_InitENG>:
#include "stdlib.h"

_sEng engine;


void en_InitENG(_sEng *engines,void (*PWM_set)(uint16_t dCycle), void(*PIN_set)(_eEngState state), uint16_t max_Speed){
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	807b      	strh	r3, [r7, #2]

	engines->estado  = FREE;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2202      	movs	r2, #2
 80004e6:	701a      	strb	r2, [r3, #0]
	engines->setPins = PIN_set;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	60da      	str	r2, [r3, #12]
	engines->setPWM  = PWM_set;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	611a      	str	r2, [r3, #16]
	engines->speed	 = 0;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
	engines->maxSpeed= max_Speed;
 80004fa:	887a      	ldrh	r2, [r7, #2]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	609a      	str	r2, [r3, #8]

}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <en_HandlerENG>:

void en_HandlerENG(_sEng *engines, int32_t newspeed, uint8_t freno){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	4613      	mov	r3, r2
 8000518:	71fb      	strb	r3, [r7, #7]

	if(engines->setPins == NULL || engines->setPWM == NULL)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d04f      	beq.n	80005c2 <en_HandlerENG+0xb6>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d04b      	beq.n	80005c2 <en_HandlerENG+0xb6>
		return;

	if(newspeed == engines->speed)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	429a      	cmp	r2, r3
 8000532:	d048      	beq.n	80005c6 <en_HandlerENG+0xba>
		return;

	if(freno == 1){
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d103      	bne.n	8000542 <en_HandlerENG+0x36>
		engines->estado = BRAKE;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2203      	movs	r2, #3
 800053e:	701a      	strb	r2, [r3, #0]
		return;
 8000540:	e042      	b.n	80005c8 <en_HandlerENG+0xbc>
	}

	if(newspeed > engines->maxSpeed)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	689a      	ldr	r2, [r3, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	429a      	cmp	r2, r3
 800054a:	d202      	bcs.n	8000552 <en_HandlerENG+0x46>
		newspeed = engines->maxSpeed;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	60bb      	str	r3, [r7, #8]

	engines->speed = newspeed;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	605a      	str	r2, [r3, #4]

	if(newspeed < 0){
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	2b00      	cmp	r3, #0
 800055c:	da10      	bge.n	8000580 <en_HandlerENG+0x74>
		engines->estado = BACK;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2201      	movs	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]
		engines->setPins(BACK);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	2001      	movs	r0, #1
 800056a:	4798      	blx	r3
		engines->setPWM((int16_t)(engines->speed*-1));
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	6852      	ldr	r2, [r2, #4]
 8000574:	b292      	uxth	r2, r2
 8000576:	4252      	negs	r2, r2
 8000578:	b292      	uxth	r2, r2
 800057a:	4610      	mov	r0, r2
 800057c:	4798      	blx	r3
 800057e:	e023      	b.n	80005c8 <en_HandlerENG+0xbc>
	}else if(newspeed > 0){
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b00      	cmp	r3, #0
 8000584:	dd0e      	ble.n	80005a4 <en_HandlerENG+0x98>
		engines->estado = FRONT;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
		engines->setPins(FRONT);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	2000      	movs	r0, #0
 8000592:	4798      	blx	r3
		engines->setPWM((int16_t)engines->speed);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	6852      	ldr	r2, [r2, #4]
 800059c:	b292      	uxth	r2, r2
 800059e:	4610      	mov	r0, r2
 80005a0:	4798      	blx	r3
 80005a2:	e011      	b.n	80005c8 <en_HandlerENG+0xbc>
	}else if(newspeed==0){
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d10e      	bne.n	80005c8 <en_HandlerENG+0xbc>
		engines->estado = FREE;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2202      	movs	r2, #2
 80005ae:	701a      	strb	r2, [r3, #0]
		engines->setPins(FREE);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	2002      	movs	r0, #2
 80005b6:	4798      	blx	r3
		engines->setPWM(0);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	2000      	movs	r0, #0
 80005be:	4798      	blx	r3
 80005c0:	e002      	b.n	80005c8 <en_HandlerENG+0xbc>
		return;
 80005c2:	bf00      	nop
 80005c4:	e000      	b.n	80005c8 <en_HandlerENG+0xbc>
		return;
 80005c6:	bf00      	nop
	}

}
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <CommDatafromUSB>:
/**
 * recibo la informacion enviada por puerto USB (lo enviado por QT), y guardo los bytes recibidos en el buffer circular Rx.buffercomm[] de la estructura datosComSerie
 * UNER = 55 4E 45 52 // Nbytes= 02 // ':' = 3A // Alive= F0 // 0xC4 = checksum
 */

void CommDatafromUSB(uint8_t *buf, uint16_t length){
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	81fb      	strh	r3, [r7, #14]
 80005e0:	e016      	b.n	8000610 <CommDatafromUSB+0x40>
	datosComSerie.Rx.buffercomm[datosComSerie.Rx.indexWrite] = buf[i];
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <CommDatafromUSB+0x58>)
 80005ea:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80005ee:	4611      	mov	r1, r2
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <CommDatafromUSB+0x58>)
 80005f4:	440b      	add	r3, r1
 80005f6:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	datosComSerie.Rx.indexWrite++;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <CommDatafromUSB+0x58>)
 80005fc:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000600:	3301      	adds	r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <CommDatafromUSB+0x58>)
 8000606:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  for (i = 0; i < length; i++) {
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	3301      	adds	r3, #1
 800060e:	81fb      	strh	r3, [r7, #14]
 8000610:	89fa      	ldrh	r2, [r7, #14]
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3e4      	bcc.n	80005e2 <CommDatafromUSB+0x12>
  }

}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000264 	.word	0x20000264

0800062c <CommComunicationsTask>:

void CommComunicationsTask(_sDato *datosCom){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

	//si llegó informacion entonces llamo a decodeheader para el analisis del protocolo "UNER"
	if(datosCom->Rx.indexRead!=datosCom->Rx.indexWrite ){ //si Recepcion write =! Recepcion read => buffer lleno
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000640:	429a      	cmp	r2, r3
 8000642:	d008      	beq.n	8000656 <CommComunicationsTask+0x2a>
		CommDecodeHeader(datosCom);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f80d 	bl	8000664 <CommDecodeHeader>
		datosComSerie.Rx.indexRead=datosComSerie.Rx.indexWrite;
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <CommComunicationsTask+0x34>)
 800064c:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <CommComunicationsTask+0x34>)
 8000652:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
//	}
//
//	if(CDC_Transmit_FS(&datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexRead], datosComSerie.bytesTosend) == USBD_OK){
//		datosComSerie.Tx.indexRead += datosComSerie.bytesTosend;
//	}
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000264 	.word	0x20000264

08000664 <CommDecodeHeader>:

/**
 * Máquina de estados que busca: 'U', 'N', 'E', 'R', nBytes, ':', Payload, Checksum
 * Si todo es válido, llama a: decodeData(datosCom);
 */
void CommDecodeHeader(_sDato *datosCom){ //Recibo un puntero a la estructura de comunicación que contiene los buffers y los índices
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;		//Variable estática para recordar cuántos bytes de payload quedan por procesar

    uint8_t indexWriteRxCopy = datosCom->Rx.indexWrite; //Guardo una copia del índice de escritura para no interferir con interrupciones
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000672:	73fb      	strb	r3, [r7, #15]

    while (datosCom->Rx.indexRead!=indexWriteRxCopy)
 8000674:	e100      	b.n	8000878 <CommDecodeHeader+0x214>
    {
        switch (estadoProtocolo) {					//Mientras haya nuevos datos no leídos en el buffer de recepción...
 8000676:	4b86      	ldr	r3, [pc, #536]	; (8000890 <CommDecodeHeader+0x22c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b06      	cmp	r3, #6
 800067c:	f200 80f8 	bhi.w	8000870 <CommDecodeHeader+0x20c>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <CommDecodeHeader+0x24>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006a5 	.word	0x080006a5
 800068c:	080006d3 	.word	0x080006d3
 8000690:	08000711 	.word	0x08000711
 8000694:	0800074f 	.word	0x0800074f
 8000698:	0800078d 	.word	0x0800078d
 800069c:	080007bd 	.word	0x080007bd
 80006a0:	08000809 	.word	0x08000809
            case START:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='U'){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	b2d1      	uxtb	r1, r2
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80006be:	2b55      	cmp	r3, #85	; 0x55
 80006c0:	f040 80da 	bne.w	8000878 <CommDecodeHeader+0x214>
                    estadoProtocolo=HEADER_1;
 80006c4:	4b72      	ldr	r3, [pc, #456]	; (8000890 <CommDecodeHeader+0x22c>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	709a      	strb	r2, [r3, #2]
                }
                break;
 80006d0:	e0d2      	b.n	8000878 <CommDecodeHeader+0x214>
            case HEADER_1:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='N')
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	b2d1      	uxtb	r1, r2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80006e2:	461a      	mov	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80006ec:	2b4e      	cmp	r3, #78	; 0x4e
 80006ee:	d103      	bne.n	80006f8 <CommDecodeHeader+0x94>
                   estadoProtocolo=HEADER_2;
 80006f0:	4b67      	ldr	r3, [pc, #412]	; (8000890 <CommDecodeHeader+0x22c>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e0bf      	b.n	8000878 <CommDecodeHeader+0x214>
                else{
                    datosCom->Rx.indexRead--;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006fe:	3b01      	subs	r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                    estadoProtocolo=START;
 8000708:	4b61      	ldr	r3, [pc, #388]	; (8000890 <CommDecodeHeader+0x22c>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
                }
                break;
 800070e:	e0b3      	b.n	8000878 <CommDecodeHeader+0x214>
            case HEADER_2:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='E')
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	b2d1      	uxtb	r1, r2
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800072a:	2b45      	cmp	r3, #69	; 0x45
 800072c:	d103      	bne.n	8000736 <CommDecodeHeader+0xd2>
                    estadoProtocolo=HEADER_3;
 800072e:	4b58      	ldr	r3, [pc, #352]	; (8000890 <CommDecodeHeader+0x22c>)
 8000730:	2203      	movs	r2, #3
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	e0a0      	b.n	8000878 <CommDecodeHeader+0x214>
                else{
                    datosCom->Rx.indexRead--;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800073c:	3b01      	subs	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                   estadoProtocolo=START;
 8000746:	4b52      	ldr	r3, [pc, #328]	; (8000890 <CommDecodeHeader+0x22c>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800074c:	e094      	b.n	8000878 <CommDecodeHeader+0x214>
			case HEADER_3:
				if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='R')
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	b2d1      	uxtb	r1, r2
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8000768:	2b52      	cmp	r3, #82	; 0x52
 800076a:	d103      	bne.n	8000774 <CommDecodeHeader+0x110>
					estadoProtocolo=NBYTES;
 800076c:	4b48      	ldr	r3, [pc, #288]	; (8000890 <CommDecodeHeader+0x22c>)
 800076e:	2204      	movs	r2, #4
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e081      	b.n	8000878 <CommDecodeHeader+0x214>
				else{
					datosCom->Rx.indexRead--;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800077a:	3b01      	subs	r3, #1
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				    estadoProtocolo=START;
 8000784:	4b42      	ldr	r3, [pc, #264]	; (8000890 <CommDecodeHeader+0x22c>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
				}
            break;
 800078a:	e075      	b.n	8000878 <CommDecodeHeader+0x214>
            case NBYTES: //Leer byte de cantidad de datos (nBytes) y avanzar
                datosCom->indexStart=datosCom->Rx.indexRead;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->Rx.buffercomm[datosCom->Rx.indexRead++];
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	b2d1      	uxtb	r1, r2
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80007b0:	4b38      	ldr	r3, [pc, #224]	; (8000894 <CommDecodeHeader+0x230>)
 80007b2:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <CommDecodeHeader+0x22c>)
 80007b6:	2205      	movs	r2, #5
 80007b8:	701a      	strb	r2, [r3, #0]
                break;
 80007ba:	e05d      	b.n	8000878 <CommDecodeHeader+0x214>
            case TOKEN:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]==':'){
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	b2d1      	uxtb	r1, r2
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80007d6:	2b3a      	cmp	r3, #58	; 0x3a
 80007d8:	d10a      	bne.n	80007f0 <CommDecodeHeader+0x18c>

                   estadoProtocolo=PAYLOAD;
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <CommDecodeHeader+0x22c>)
 80007dc:	2206      	movs	r2, #6
 80007de:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <CommDecodeHeader+0x230>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	709a      	strb	r2, [r3, #2]
 80007ee:	e043      	b.n	8000878 <CommDecodeHeader+0x214>
                }
                else{
                    datosCom->Rx.indexRead--;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80007f6:	3b01      	subs	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                    estadoProtocolo=START;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <CommDecodeHeader+0x22c>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000806:	e037      	b.n	8000878 <CommDecodeHeader+0x214>
            case PAYLOAD:

                if (nBytes>1){
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <CommDecodeHeader+0x230>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d912      	bls.n	8000836 <CommDecodeHeader+0x1d2>
                    datosCom->cheksumRx ^= datosCom->Rx.buffercomm[datosCom->Rx.indexRead++];
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	b2d1      	uxtb	r1, r2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 8000820:	461a      	mov	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	789b      	ldrb	r3, [r3, #2]
 800082e:	4053      	eors	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <CommDecodeHeader+0x230>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <CommDecodeHeader+0x230>)
 8000840:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){ //Cuando ya se leyeron todos los datos, compara el checksum. Si es correcto, llama a decodeData() para procesar el mensaje.
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <CommDecodeHeader+0x230>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d116      	bne.n	8000878 <CommDecodeHeader+0x214>
                    estadoProtocolo=START;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <CommDecodeHeader+0x22c>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->Rx.buffercomm[datosCom->Rx.indexRead]){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	789a      	ldrb	r2, [r3, #2]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800085a:	4619      	mov	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	440b      	add	r3, r1
 8000860:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8000864:	429a      	cmp	r2, r3
 8000866:	d107      	bne.n	8000878 <CommDecodeHeader+0x214>
                        CommDecodeData(datosCom);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f815 	bl	8000898 <CommDecodeData>
                    }
                }

                break;
 800086e:	e003      	b.n	8000878 <CommDecodeHeader+0x214>
            default:
                estadoProtocolo=START;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <CommDecodeHeader+0x22c>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
                break;
 8000876:	bf00      	nop
    while (datosCom->Rx.indexRead!=indexWriteRxCopy)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	429a      	cmp	r2, r3
 8000882:	f47f aef8 	bne.w	8000676 <CommDecodeHeader+0x12>
        }
    }
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000056c 	.word	0x2000056c
 8000894:	20000124 	.word	0x20000124

08000898 <CommDecodeData>:

//si el protocolo fue valido => preparo respuestas
void CommDecodeData(_sDato *datosCom){ //responde segun el ID recibido. Busca el ID del comando en la tercera posición del payload (después del token y del byte de longitud).
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]


    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	77bb      	strb	r3, [r7, #30]
 80008a4:	2300      	movs	r3, #0
 80008a6:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->Rx.buffercomm[datosCom->indexStart+2])//CMD EN LA POSICION 2, /ID EN LA POSICION 2, porque es donde se adjunta el byte que te dice "ALIVE, FIRMWARE, ETC"
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	785b      	ldrb	r3, [r3, #1]
 80008ac:	3302      	adds	r3, #2
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80008b6:	2bf1      	cmp	r3, #241	; 0xf1
 80008b8:	d018      	beq.n	80008ec <CommDecodeData+0x54>
 80008ba:	2bf1      	cmp	r3, #241	; 0xf1
 80008bc:	dc42      	bgt.n	8000944 <CommDecodeData+0xac>
 80008be:	2ba0      	cmp	r3, #160	; 0xa0
 80008c0:	d01f      	beq.n	8000902 <CommDecodeData+0x6a>
 80008c2:	2bf0      	cmp	r3, #240	; 0xf0
 80008c4:	d13e      	bne.n	8000944 <CommDecodeData+0xac>
    {

	case ALIVE:
		bufAux[indiceAux++] = ALIVE;   	// ID de respuesta
 80008c6:	7fbb      	ldrb	r3, [r7, #30]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	77ba      	strb	r2, [r7, #30]
 80008cc:	3320      	adds	r3, #32
 80008ce:	443b      	add	r3, r7
 80008d0:	22f0      	movs	r2, #240	; 0xf0
 80008d2:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = 0x0D;    	// Respuesta: ACK
 80008d6:	7fbb      	ldrb	r3, [r7, #30]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	77ba      	strb	r2, [r7, #30]
 80008dc:	3320      	adds	r3, #32
 80008de:	443b      	add	r3, r7
 80008e0:	220d      	movs	r2, #13
 80008e2:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 0x03;        			// NBYTES = 3 (ID + Dato + Checksum)
 80008e6:	2303      	movs	r3, #3
 80008e8:	77fb      	strb	r3, [r7, #31]
	break;
 80008ea:	e036      	b.n	800095a <CommDecodeData+0xc2>

    case FIRMWARE:
		bufAux[indiceAux++]=FIRMWARE;
 80008ec:	7fbb      	ldrb	r3, [r7, #30]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	77ba      	strb	r2, [r7, #30]
 80008f2:	3320      	adds	r3, #32
 80008f4:	443b      	add	r3, r7
 80008f6:	22f1      	movs	r2, #241	; 0xf1
 80008f8:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80008fc:	2302      	movs	r3, #2
 80008fe:	77fb      	strb	r3, [r7, #31]
    break;
 8000900:	e02b      	b.n	800095a <CommDecodeData+0xc2>

    break;

    case IR:
		bufAux[indiceAux++] = IR;
 8000902:	7fbb      	ldrb	r3, [r7, #30]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	77ba      	strb	r2, [r7, #30]
 8000908:	3320      	adds	r3, #32
 800090a:	443b      	add	r3, r7
 800090c:	22a0      	movs	r2, #160	; 0xa0
 800090e:	f803 2c18 	strb.w	r2, [r3, #-24]
		//w.u16[0] = IRsensor.bufferADCvalue[0];
		bufAux[indiceAux++] = w.u8[0];
 8000912:	7fbb      	ldrb	r3, [r7, #30]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	77ba      	strb	r2, [r7, #30]
 8000918:	4619      	mov	r1, r3
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <CommDecodeData+0xd8>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	f101 0320 	add.w	r3, r1, #32
 8000922:	443b      	add	r3, r7
 8000924:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = w.u8[1];
 8000928:	7fbb      	ldrb	r3, [r7, #30]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	77ba      	strb	r2, [r7, #30]
 800092e:	4619      	mov	r1, r3
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <CommDecodeData+0xd8>)
 8000932:	785a      	ldrb	r2, [r3, #1]
 8000934:	f101 0320 	add.w	r3, r1, #32
 8000938:	443b      	add	r3, r7
 800093a:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 3;
 800093e:	2303      	movs	r3, #3
 8000940:	77fb      	strb	r3, [r7, #31]
	break;
 8000942:	e00a      	b.n	800095a <CommDecodeData+0xc2>

    default:
        bufAux[indiceAux++]=0xFF;
 8000944:	7fbb      	ldrb	r3, [r7, #30]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	77ba      	strb	r2, [r7, #30]
 800094a:	3320      	adds	r3, #32
 800094c:	443b      	add	r3, r7
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000954:	2302      	movs	r3, #2
 8000956:	77fb      	strb	r3, [r7, #31]
    break;
 8000958:	bf00      	nop
    }

    CommSendInfo(bufAux,bytes);
 800095a:	7ffa      	ldrb	r2, [r7, #31]
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f806 	bl	8000974 <CommSendInfo>
}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000120 	.word	0x20000120

08000974 <CommSendInfo>:

//calculo y envio el checksum
void CommSendInfo(uint8_t bufferAux[], uint8_t bytes){
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[20], indiceAux=0,cks=0,i=0;
 8000980:	2300      	movs	r3, #0
 8000982:	77fb      	strb	r3, [r7, #31]
 8000984:	2300      	movs	r3, #0
 8000986:	77bb      	strb	r3, [r7, #30]
 8000988:	2300      	movs	r3, #0
 800098a:	777b      	strb	r3, [r7, #29]

    bufAux[indiceAux++]='U';
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	77fa      	strb	r2, [r7, #31]
 8000992:	3320      	adds	r3, #32
 8000994:	443b      	add	r3, r7
 8000996:	2255      	movs	r2, #85	; 0x55
 8000998:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 800099c:	7ffb      	ldrb	r3, [r7, #31]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	77fa      	strb	r2, [r7, #31]
 80009a2:	3320      	adds	r3, #32
 80009a4:	443b      	add	r3, r7
 80009a6:	224e      	movs	r2, #78	; 0x4e
 80009a8:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 80009ac:	7ffb      	ldrb	r3, [r7, #31]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	77fa      	strb	r2, [r7, #31]
 80009b2:	3320      	adds	r3, #32
 80009b4:	443b      	add	r3, r7
 80009b6:	2245      	movs	r2, #69	; 0x45
 80009b8:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 80009bc:	7ffb      	ldrb	r3, [r7, #31]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	77fa      	strb	r2, [r7, #31]
 80009c2:	3320      	adds	r3, #32
 80009c4:	443b      	add	r3, r7
 80009c6:	2252      	movs	r2, #82	; 0x52
 80009c8:	f803 2c18 	strb.w	r2, [r3, #-24]

    bufAux[indiceAux++]=bytes;
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	77fa      	strb	r2, [r7, #31]
 80009d2:	3320      	adds	r3, #32
 80009d4:	443b      	add	r3, r7
 80009d6:	78fa      	ldrb	r2, [r7, #3]
 80009d8:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 80009dc:	7ffb      	ldrb	r3, [r7, #31]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	77fa      	strb	r2, [r7, #31]
 80009e2:	3320      	adds	r3, #32
 80009e4:	443b      	add	r3, r7
 80009e6:	223a      	movs	r2, #58	; 0x3a
 80009e8:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(i=0; i<bytes-1; i++){
 80009ec:	2300      	movs	r3, #0
 80009ee:	777b      	strb	r3, [r7, #29]
 80009f0:	e00d      	b.n	8000a0e <CommSendInfo+0x9a>
        bufAux[indiceAux++] = bufferAux[i];
 80009f2:	7f7b      	ldrb	r3, [r7, #29]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	441a      	add	r2, r3
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
 80009fa:	1c59      	adds	r1, r3, #1
 80009fc:	77f9      	strb	r1, [r7, #31]
 80009fe:	7812      	ldrb	r2, [r2, #0]
 8000a00:	3320      	adds	r3, #32
 8000a02:	443b      	add	r3, r7
 8000a04:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(i=0; i<bytes-1; i++){
 8000a08:	7f7b      	ldrb	r3, [r7, #29]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	777b      	strb	r3, [r7, #29]
 8000a0e:	7f7a      	ldrb	r2, [r7, #29]
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbec      	blt.n	80009f2 <CommSendInfo+0x7e>
    }

    cks	= 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	77bb      	strb	r3, [r7, #30]

    //Cargar en Tx.buffercomm con checksum:
    for(i=0 ;i<indiceAux;i++){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	777b      	strb	r3, [r7, #29]
 8000a20:	e01a      	b.n	8000a58 <CommSendInfo+0xe4>
        cks^= bufAux[i];
 8000a22:	7f7b      	ldrb	r3, [r7, #29]
 8000a24:	3320      	adds	r3, #32
 8000a26:	443b      	add	r3, r7
 8000a28:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000a2c:	7fbb      	ldrb	r3, [r7, #30]
 8000a2e:	4053      	eors	r3, r2
 8000a30:	77bb      	strb	r3, [r7, #30]
        datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexWrite++]=bufAux[i];
 8000a32:	7f7a      	ldrb	r2, [r7, #29]
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <CommSendInfo+0x138>)
 8000a36:	78db      	ldrb	r3, [r3, #3]
 8000a38:	1c59      	adds	r1, r3, #1
 8000a3a:	b2c8      	uxtb	r0, r1
 8000a3c:	491b      	ldr	r1, [pc, #108]	; (8000aac <CommSendInfo+0x138>)
 8000a3e:	70c8      	strb	r0, [r1, #3]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f102 0320 	add.w	r3, r2, #32
 8000a46:	443b      	add	r3, r7
 8000a48:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <CommSendInfo+0x138>)
 8000a4e:	440b      	add	r3, r1
 8000a50:	715a      	strb	r2, [r3, #5]
    for(i=0 ;i<indiceAux;i++){
 8000a52:	7f7b      	ldrb	r3, [r7, #29]
 8000a54:	3301      	adds	r3, #1
 8000a56:	777b      	strb	r3, [r7, #29]
 8000a58:	7f7a      	ldrb	r2, [r7, #29]
 8000a5a:	7ffb      	ldrb	r3, [r7, #31]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3e0      	bcc.n	8000a22 <CommSendInfo+0xae>
    }
    // Agregar el checksum al final
    datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexWrite++]=cks;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <CommSendInfo+0x138>)
 8000a62:	78db      	ldrb	r3, [r3, #3]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	b2d1      	uxtb	r1, r2
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <CommSendInfo+0x138>)
 8000a6a:	70d1      	strb	r1, [r2, #3]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <CommSendInfo+0x138>)
 8000a70:	4413      	add	r3, r2
 8000a72:	7fba      	ldrb	r2, [r7, #30]
 8000a74:	715a      	strb	r2, [r3, #5]
    // Cantidad total de bytes a transmitir (incluyendo checksum)
    datosComSerie.bytesTosend = datosComSerie.Tx.indexWrite;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <CommSendInfo+0x138>)
 8000a78:	78da      	ldrb	r2, [r3, #3]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <CommSendInfo+0x138>)
 8000a7c:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307

    // Paquete enviado hacia QT: 55 4E 45 52   01 	 3A     F0         0D          C8
    //							 'U''N''E''R''Nbytes'':''ID:Alive''Payload: ACK''Cheksum'
    CDC_Transmit_FS(&datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexRead], datosComSerie.bytesTosend); //transmision por USB hacia QT
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <CommSendInfo+0x138>)
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <CommSendInfo+0x138>)
 8000a88:	4413      	add	r3, r2
 8000a8a:	3305      	adds	r3, #5
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <CommSendInfo+0x138>)
 8000a8e:	f892 2307 	ldrb.w	r2, [r2, #775]	; 0x307
 8000a92:	b292      	uxth	r2, r2
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fb40 	bl	800911c <CDC_Transmit_FS>
    datosComSerie.Tx.indexWrite = 0;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <CommSendInfo+0x138>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	70da      	strb	r2, [r3, #3]

}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000264 	.word	0x20000264

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
void MotorR_SetPIN(_eEngState estado);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d104      	bne.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ac4:	7813      	ldrb	r3, [r2, #0]
 8000ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aca:	7013      	strb	r3, [r2, #0]
	}

}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	20000260 	.word	0x20000260

08000ae0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	//			adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3],
	//			adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
	//
	//
	//	CDC_Transmit_FS((uint8_t*)usbMsg, strlen(usbMsg));
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	2300      	movs	r3, #0
 8000b00:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b02:	f000 fdaf 	bl	8001664 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_Attach_Rx(&CommDatafromUSB);
 8000b06:	483f      	ldr	r0, [pc, #252]	; (8000c04 <main+0x110>)
 8000b08:	f008 fb40 	bl	800918c <CDC_Attach_Rx>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f898 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 faa4 	bl	800105c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b14:	f000 fa82 	bl	800101c <MX_DMA_Init>
  MX_TIM1_Init();
 8000b18:	f000 f9ae 	bl	8000e78 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000b1c:	f008 f9e2 	bl	8008ee4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000b20:	f000 f8f6 	bl	8000d10 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b24:	f000 f9f8 	bl	8000f18 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000b28:	4837      	ldr	r0, [pc, #220]	; (8000c08 <main+0x114>)
 8000b2a:	f003 ff39 	bl	80049a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000b2e:	4837      	ldr	r0, [pc, #220]	; (8000c0c <main+0x118>)
 8000b30:	f003 ff36 	bl	80049a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b34:	2104      	movs	r1, #4
 8000b36:	4835      	ldr	r0, [pc, #212]	; (8000c0c <main+0x118>)
 8000b38:	f003 ffee 	bl	8004b18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4833      	ldr	r0, [pc, #204]	; (8000c0c <main+0x118>)
 8000b40:	f003 ffea 	bl	8004b18 <HAL_TIM_PWM_Start>
  en_InitENG(&motorL, &MotorL_SetPWM, &MotorL_SetPIN, htim3.Instance->ARR); /*!< asigno a cada motor una direccio de memoria para manejarlo desde la lib */
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <main+0x118>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <main+0x11c>)
 8000b4e:	4931      	ldr	r1, [pc, #196]	; (8000c14 <main+0x120>)
 8000b50:	4831      	ldr	r0, [pc, #196]	; (8000c18 <main+0x124>)
 8000b52:	f7ff fcbf 	bl	80004d4 <en_InitENG>
  en_InitENG(&motorR, &MotorR_SetPWM, &MotorR_SetPIN, htim3.Instance->ARR); /*!< En donde, (htim3.Instance->ARR) es el valor maximo de PWM */
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <main+0x118>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <main+0x128>)
 8000b60:	492f      	ldr	r1, [pc, #188]	; (8000c20 <main+0x12c>)
 8000b62:	4830      	ldr	r0, [pc, #192]	; (8000c24 <main+0x130>)
 8000b64:	f7ff fcb6 	bl	80004d4 <en_InitENG>

  IS10MS = FALSE;
 8000b68:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <main+0x134>)
 8000b6a:	7813      	ldrb	r3, [r2, #0]
 8000b6c:	f36f 1386 	bfc	r3, #6, #1
 8000b70:	7013      	strb	r3, [r2, #0]
  datosComSerie.Rx.indexRead = 0;
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <main+0x138>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
  datosComSerie.Rx.indexWrite =0;
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <main+0x138>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  myFlags.allFlags = 0;
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <main+0x134>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CommComunicationsTask(&datosComSerie);
 8000b88:	4828      	ldr	r0, [pc, #160]	; (8000c2c <main+0x138>)
 8000b8a:	f7ff fd4f 	bl	800062c <CommComunicationsTask>

	  if(IS10MS){
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <main+0x134>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0f5      	beq.n	8000b88 <main+0x94>
		  time250us++;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
		  IS10MS =! IS10MS;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <main+0x134>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	bf0c      	ite	eq
 8000bb0:	2301      	moveq	r3, #1
 8000bb2:	2300      	movne	r3, #0
 8000bb4:	b2d9      	uxtb	r1, r3
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <main+0x134>)
 8000bb8:	7813      	ldrb	r3, [r2, #0]
 8000bba:	f361 1386 	bfi	r3, r1, #6, #1
 8000bbe:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b27      	cmp	r3, #39	; 0x27
 8000bc4:	d9e0      	bls.n	8000b88 <main+0x94>
			  time10ms++;
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	71bb      	strb	r3, [r7, #6]
			  time250us = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	71fb      	strb	r3, [r7, #7]
			  if(time10ms == 10){
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	2b0a      	cmp	r3, #10
 8000bd4:	d1d8      	bne.n	8000b88 <main+0x94>
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bda:	4815      	ldr	r0, [pc, #84]	; (8000c30 <main+0x13c>)
 8000bdc:	f001 fff3 	bl	8002bc6 <HAL_GPIO_TogglePin>
				  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&sensorIR.bufferADCvalue, NUM_CHANNELS_ADC);
 8000be0:	2208      	movs	r2, #8
 8000be2:	4914      	ldr	r1, [pc, #80]	; (8000c34 <main+0x140>)
 8000be4:	4814      	ldr	r0, [pc, #80]	; (8000c38 <main+0x144>)
 8000be6:	f000 fe17 	bl	8001818 <HAL_ADC_Start_DMA>
				  en_HandlerENG(&motorR, -30000, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <main+0x148>)
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <main+0x130>)
 8000bf0:	f7ff fc8c 	bl	800050c <en_HandlerENG>
				  en_HandlerENG(&motorL, -30000, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4911      	ldr	r1, [pc, #68]	; (8000c3c <main+0x148>)
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <main+0x124>)
 8000bfa:	f7ff fc87 	bl	800050c <en_HandlerENG>
				  time10ms = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	71bb      	strb	r3, [r7, #6]
	  CommComunicationsTask(&datosComSerie);
 8000c02:	e7c1      	b.n	8000b88 <main+0x94>
 8000c04:	080005d1 	.word	0x080005d1
 8000c08:	200001d0 	.word	0x200001d0
 8000c0c:	20000218 	.word	0x20000218
 8000c10:	08001175 	.word	0x08001175
 8000c14:	080012b9 	.word	0x080012b9
 8000c18:	20000588 	.word	0x20000588
 8000c1c:	08001215 	.word	0x08001215
 8000c20:	080012dd 	.word	0x080012dd
 8000c24:	2000059c 	.word	0x2000059c
 8000c28:	20000260 	.word	0x20000260
 8000c2c:	20000264 	.word	0x20000264
 8000c30:	40020800 	.word	0x40020800
 8000c34:	20000570 	.word	0x20000570
 8000c38:	20000128 	.word	0x20000128
 8000c3c:	ffff8ad0 	.word	0xffff8ad0

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	; 0x50
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2230      	movs	r2, #48	; 0x30
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fec6 	bl	80099e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cb0:	2319      	movs	r3, #25
 8000cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cb4:	23c0      	movs	r3, #192	; 0xc0
 8000cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 f9eb 	bl	80040a0 <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd0:	f000 fb16 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2103      	movs	r1, #3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fc4d 	bl	8004590 <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cfc:	f000 fb00 	bl	8001300 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3750      	adds	r7, #80	; 0x50
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d22:	4b52      	ldr	r3, [pc, #328]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d24:	4a52      	ldr	r2, [pc, #328]	; (8000e70 <MX_ADC1_Init+0x160>)
 8000d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d28:	4b50      	ldr	r3, [pc, #320]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d30:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d36:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d52:	4a48      	ldr	r2, [pc, #288]	; (8000e74 <MX_ADC1_Init+0x164>)
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d56:	4b45      	ldr	r3, [pc, #276]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000d5c:	4b43      	ldr	r3, [pc, #268]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	483e      	ldr	r0, [pc, #248]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d72:	f000 fd0d 	bl	8001790 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 fac0 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4836      	ldr	r0, [pc, #216]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000d92:	f000 fe49 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d9c:	f000 fab0 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	482f      	ldr	r0, [pc, #188]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000dae:	f000 fe3b 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000db8:	f000 faa2 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4828      	ldr	r0, [pc, #160]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000dca:	f000 fe2d 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000dd4:	f000 fa94 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4821      	ldr	r0, [pc, #132]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000de6:	f000 fe1f 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000df0:	f000 fa86 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000df4:	2304      	movs	r3, #4
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481a      	ldr	r0, [pc, #104]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000e02:	f000 fe11 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e0c:	f000 fa78 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e10:	2305      	movs	r3, #5
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000e14:	2306      	movs	r3, #6
 8000e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000e1e:	f000 fe03 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e28:	f000 fa6a 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000e30:	2307      	movs	r3, #7
 8000e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000e3a:	f000 fdf5 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e44:	f000 fa5c 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC1_Init+0x15c>)
 8000e56:	f000 fde7 	bl	8001a28 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000e60:	f000 fa4e 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000128 	.word	0x20000128
 8000e70:	40012000 	.word	0x40012000
 8000e74:	0f000001 	.word	0x0f000001

08000e78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000e96:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <MX_TIM1_Init+0x9c>)
 8000e98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000ea8:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000eac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ec0:	4813      	ldr	r0, [pc, #76]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000ec2:	f003 fd1d 	bl	8004900 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ecc:	f000 fa18 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000ede:	f004 f87d 	bl	8004fdc <HAL_TIM_ConfigClockSource>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ee8:	f000 fa0a 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_TIM1_Init+0x98>)
 8000efa:	f004 fc31 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f04:	f000 f9fc 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001d0 	.word	0x200001d0
 8000f14:	40010000 	.word	0x40010000

08000f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	; 0x38
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	615a      	str	r2, [r3, #20]
 8000f46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f48:	4b32      	ldr	r3, [pc, #200]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f4a:	4a33      	ldr	r2, [pc, #204]	; (8001018 <MX_TIM3_Init+0x100>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f50:	220f      	movs	r2, #15
 8000f52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f5c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f6e:	4829      	ldr	r0, [pc, #164]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f70:	f003 fcc6 	bl	8004900 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f7a:	f000 f9c1 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4822      	ldr	r0, [pc, #136]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f8c:	f004 f826 	bl	8004fdc <HAL_TIM_ConfigClockSource>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f96:	f000 f9b3 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f9a:	481e      	ldr	r0, [pc, #120]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000f9c:	f003 fd62 	bl	8004a64 <HAL_TIM_PWM_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fa6:	f000 f9ab 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4816      	ldr	r0, [pc, #88]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000fba:	f004 fbd1 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fc4:	f000 f99c 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc8:	2360      	movs	r3, #96	; 0x60
 8000fca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000fe0:	f003 ff3a 	bl	8004e58 <HAL_TIM_PWM_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000fea:	f000 f989 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <MX_TIM3_Init+0xfc>)
 8000ff6:	f003 ff2f 	bl	8004e58 <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001000:	f000 f97e 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <MX_TIM3_Init+0xfc>)
 8001006:	f000 fa65 	bl	80014d4 <HAL_TIM_MspPostInit>

}
 800100a:	bf00      	nop
 800100c:	3738      	adds	r7, #56	; 0x38
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000218 	.word	0x20000218
 8001018:	40000400 	.word	0x40000400

0800101c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_DMA_Init+0x3c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <MX_DMA_Init+0x3c>)
 800102c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_DMA_Init+0x3c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2038      	movs	r0, #56	; 0x38
 8001044:	f001 f87b 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001048:	2038      	movs	r0, #56	; 0x38
 800104a:	f001 f894 	bl	8002176 <HAL_NVIC_EnableIRQ>

}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_GPIO_Init+0x108>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a3a      	ldr	r2, [pc, #232]	; (8001164 <MX_GPIO_Init+0x108>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <MX_GPIO_Init+0x108>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <MX_GPIO_Init+0x108>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a33      	ldr	r2, [pc, #204]	; (8001164 <MX_GPIO_Init+0x108>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b31      	ldr	r3, [pc, #196]	; (8001164 <MX_GPIO_Init+0x108>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <MX_GPIO_Init+0x108>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a2c      	ldr	r2, [pc, #176]	; (8001164 <MX_GPIO_Init+0x108>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <MX_GPIO_Init+0x108>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_GPIO_Init+0x108>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a25      	ldr	r2, [pc, #148]	; (8001164 <MX_GPIO_Init+0x108>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_GPIO_Init+0x108>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <MX_GPIO_Init+0x10c>)
 80010ea:	f001 fd53 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OutEngB_1_Pin|OutEngB_2_Pin|OutEngA_2_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 80010f4:	481d      	ldr	r0, [pc, #116]	; (800116c <MX_GPIO_Init+0x110>)
 80010f6:	f001 fd4d 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	481c      	ldr	r0, [pc, #112]	; (8001170 <MX_GPIO_Init+0x114>)
 8001100:	f001 fd48 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <MX_GPIO_Init+0x10c>)
 800111e:	f001 fbb5 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pins : OutEngB_1_Pin OutEngB_2_Pin OutEngA_2_Pin */
  GPIO_InitStruct.Pin = OutEngB_1_Pin|OutEngB_2_Pin|OutEngA_2_Pin;
 8001122:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_GPIO_Init+0x110>)
 800113c:	f001 fba6 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : OutEngA_1_Pin */
  GPIO_InitStruct.Pin = OutEngA_1_Pin;
 8001140:	2308      	movs	r3, #8
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OutEngA_1_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_GPIO_Init+0x114>)
 8001158:	f001 fb98 	bl	800288c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40020800 	.word	0x40020800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400

08001174 <MotorL_SetPIN>:

/* USER CODE BEGIN 4 */
void MotorL_SetPIN(_eEngState estado){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	switch(motorL.estado){
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MotorL_SetPIN+0x94>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d83a      	bhi.n	80011fc <MotorL_SetPIN+0x88>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <MotorL_SetPIN+0x18>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011b5 	.word	0x080011b5
 8001190:	080011cd 	.word	0x080011cd
 8001194:	080011e5 	.word	0x080011e5
 8001198:	0800119d 	.word	0x0800119d
		case BRAKE:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	2108      	movs	r1, #8
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <MotorL_SetPIN+0x98>)
 80011a2:	f001 fcf7 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 1);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ac:	4818      	ldr	r0, [pc, #96]	; (8001210 <MotorL_SetPIN+0x9c>)
 80011ae:	f001 fcf1 	bl	8002b94 <HAL_GPIO_WritePin>
			break;
 80011b2:	e024      	b.n	80011fe <MotorL_SetPIN+0x8a>

		case FRONT:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2108      	movs	r1, #8
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <MotorL_SetPIN+0x98>)
 80011ba:	f001 fceb 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <MotorL_SetPIN+0x9c>)
 80011c6:	f001 fce5 	bl	8002b94 <HAL_GPIO_WritePin>
			break;
 80011ca:	e018      	b.n	80011fe <MotorL_SetPIN+0x8a>

		case BACK:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2108      	movs	r1, #8
 80011d0:	480e      	ldr	r0, [pc, #56]	; (800120c <MotorL_SetPIN+0x98>)
 80011d2:	f001 fcdf 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <MotorL_SetPIN+0x9c>)
 80011de:	f001 fcd9 	bl	8002b94 <HAL_GPIO_WritePin>
			break;
 80011e2:	e00c      	b.n	80011fe <MotorL_SetPIN+0x8a>

		case FREE:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2108      	movs	r1, #8
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <MotorL_SetPIN+0x98>)
 80011ea:	f001 fcd3 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <MotorL_SetPIN+0x9c>)
 80011f6:	f001 fccd 	bl	8002b94 <HAL_GPIO_WritePin>
			break;
 80011fa:	e000      	b.n	80011fe <MotorL_SetPIN+0x8a>
		default:
			break;
 80011fc:	bf00      	nop
	}
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000588 	.word	0x20000588
 800120c:	40020400 	.word	0x40020400
 8001210:	40020000 	.word	0x40020000

08001214 <MotorR_SetPIN>:
void MotorR_SetPIN(_eEngState estado){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	switch(motorR.estado){
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <MotorR_SetPIN+0x9c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d83e      	bhi.n	80012a4 <MotorR_SetPIN+0x90>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <MotorR_SetPIN+0x18>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	08001257 	.word	0x08001257
 8001230:	08001271 	.word	0x08001271
 8001234:	0800128b 	.word	0x0800128b
 8001238:	0800123d 	.word	0x0800123d
		case BRAKE:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001242:	481c      	ldr	r0, [pc, #112]	; (80012b4 <MotorR_SetPIN+0xa0>)
 8001244:	f001 fca6 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MotorR_SetPIN+0xa0>)
 8001250:	f001 fca0 	bl	8002b94 <HAL_GPIO_WritePin>
			break;
 8001254:	e027      	b.n	80012a6 <MotorR_SetPIN+0x92>

		case FRONT:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125c:	4815      	ldr	r0, [pc, #84]	; (80012b4 <MotorR_SetPIN+0xa0>)
 800125e:	f001 fc99 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001268:	4812      	ldr	r0, [pc, #72]	; (80012b4 <MotorR_SetPIN+0xa0>)
 800126a:	f001 fc93 	bl	8002b94 <HAL_GPIO_WritePin>
			break;
 800126e:	e01a      	b.n	80012a6 <MotorR_SetPIN+0x92>

		case BACK:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <MotorR_SetPIN+0xa0>)
 8001278:	f001 fc8c 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MotorR_SetPIN+0xa0>)
 8001284:	f001 fc86 	bl	8002b94 <HAL_GPIO_WritePin>
			break;
 8001288:	e00d      	b.n	80012a6 <MotorR_SetPIN+0x92>

		case FREE:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <MotorR_SetPIN+0xa0>)
 8001292:	f001 fc7f 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MotorR_SetPIN+0xa0>)
 800129e:	f001 fc79 	bl	8002b94 <HAL_GPIO_WritePin>
			break;
 80012a2:	e000      	b.n	80012a6 <MotorR_SetPIN+0x92>
		default:
			break;
 80012a4:	bf00      	nop
	}
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000059c 	.word	0x2000059c
 80012b4:	40020000 	.word	0x40020000

080012b8 <MotorL_SetPWM>:

void MotorL_SetPWM(uint16_t dCycle){
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <MotorL_SetPWM+0x20>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	88fa      	ldrh	r2, [r7, #6]
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000218 	.word	0x20000218

080012dc <MotorR_SetPWM>:

void MotorR_SetPWM(uint16_t dCycle){
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <MotorR_SetPWM+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000218 	.word	0x20000218

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_MspInit+0x4c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x4c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a2e      	ldr	r2, [pc, #184]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d156      	bne.n	800142c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_ADC_MspInit+0xdc>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a2c      	ldr	r2, [pc, #176]	; (8001438 <HAL_ADC_MspInit+0xdc>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_ADC_MspInit+0xdc>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_ADC_MspInit+0xdc>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a25      	ldr	r2, [pc, #148]	; (8001438 <HAL_ADC_MspInit+0xdc>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_ADC_MspInit+0xdc>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013b6:	23ff      	movs	r3, #255	; 0xff
 80013b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ba:	2303      	movs	r3, #3
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	481c      	ldr	r0, [pc, #112]	; (800143c <HAL_ADC_MspInit+0xe0>)
 80013ca:	f001 fa5f 	bl	800288c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_ADC_MspInit+0xe8>)
 80013d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 80013e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 80013f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 80013f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 8001412:	f000 fecb 	bl	80021ac <HAL_DMA_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800141c:	f7ff ff70 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
 8001426:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40012000 	.word	0x40012000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	20000170 	.word	0x20000170
 8001444:	40026410 	.word	0x40026410

08001448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_TIM_Base_MspInit+0x80>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d116      	bne.n	8001488 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_TIM_Base_MspInit+0x84>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <HAL_TIM_Base_MspInit+0x84>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_TIM_Base_MspInit+0x84>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2019      	movs	r0, #25
 800147c:	f000 fe5f 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001480:	2019      	movs	r0, #25
 8001482:	f000 fe78 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001486:	e01a      	b.n	80014be <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <HAL_TIM_Base_MspInit+0x88>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d115      	bne.n	80014be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_TIM_Base_MspInit+0x84>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <HAL_TIM_Base_MspInit+0x84>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_TIM_Base_MspInit+0x84>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	201d      	movs	r0, #29
 80014b4:	f000 fe43 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014b8:	201d      	movs	r0, #29
 80014ba:	f000 fe5c 	bl	8002176 <HAL_NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010000 	.word	0x40010000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40000400 	.word	0x40000400

080014d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <HAL_TIM_MspPostInit+0x68>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d11d      	bne.n	8001532 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_TIM_MspPostInit+0x6c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_TIM_MspPostInit+0x6c>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_TIM_MspPostInit+0x6c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EngBPWM_Pin|EngAPWM_Pin;
 8001512:	2330      	movs	r3, #48	; 0x30
 8001514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <HAL_TIM_MspPostInit+0x70>)
 800152e:	f001 f9ad 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40000400 	.word	0x40000400
 8001540:	40023800 	.word	0x40023800
 8001544:	40020400 	.word	0x40020400

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f8b8 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015a2:	f003 fb69 	bl	8004c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200001d0 	.word	0x200001d0

080015b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM3_IRQHandler+0x10>)
 80015b6:	f003 fb5f 	bl	8004c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000218 	.word	0x20000218

080015c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <DMA2_Stream0_IRQHandler+0x10>)
 80015ca:	f000 fef5 	bl	80023b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000170 	.word	0x20000170

080015d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <OTG_FS_IRQHandler+0x10>)
 80015de:	f001 fc50 	bl	8002e82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000e98 	.word	0x20000e98

080015ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001614:	f7ff ffea 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	; (800165c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f008 f9d7 	bl	80099f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff fa57 	bl	8000af4 <main>
  bx  lr    
 8001646:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001654:	08009ac0 	.word	0x08009ac0
  ldr r2, =_sbss
 8001658:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800165c:	2000159c 	.word	0x2000159c

08001660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>
	...

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_Init+0x40>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_Init+0x40>)
 800167a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_Init+0x40>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168c:	2003      	movs	r0, #3
 800168e:	f000 fd4b 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001692:	200f      	movs	r0, #15
 8001694:	f000 f808 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001698:	f7ff fe38 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fd63 	bl	8002192 <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 fd2b 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000008 	.word	0x20000008
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008
 800172c:	200005b0 	.word	0x200005b0

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200005b0 	.word	0x200005b0

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008

08001790 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e033      	b.n	800180e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fdd4 	bl	800135c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017d6:	f023 0302 	bic.w	r3, r3, #2
 80017da:	f043 0202 	orr.w	r2, r3, #2
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fa52 	bl	8001c8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f023 0303 	bic.w	r3, r3, #3
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
 80017fe:	e001      	b.n	8001804 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_ADC_Start_DMA+0x22>
 8001836:	2302      	movs	r3, #2
 8001838:	e0d0      	b.n	80019dc <HAL_ADC_Start_DMA+0x1c4>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d018      	beq.n	8001882 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001860:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <HAL_ADC_Start_DMA+0x1cc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a60      	ldr	r2, [pc, #384]	; (80019e8 <HAL_ADC_Start_DMA+0x1d0>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9a      	lsrs	r2, r3, #18
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001874:	e002      	b.n	800187c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3b01      	subs	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001890:	d107      	bne.n	80018a2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	f040 8088 	bne.w	80019c2 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f0:	d106      	bne.n	8001900 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f023 0206 	bic.w	r2, r3, #6
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
 80018fe:	e002      	b.n	8001906 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_ADC_Start_DMA+0x1d4>)
 8001910:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	4a36      	ldr	r2, [pc, #216]	; (80019f0 <HAL_ADC_Start_DMA+0x1d8>)
 8001918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	4a35      	ldr	r2, [pc, #212]	; (80019f4 <HAL_ADC_Start_DMA+0x1dc>)
 8001920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	4a34      	ldr	r2, [pc, #208]	; (80019f8 <HAL_ADC_Start_DMA+0x1e0>)
 8001928:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001932:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001942:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001952:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	334c      	adds	r3, #76	; 0x4c
 800195e:	4619      	mov	r1, r3
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f000 fcd0 	bl	8002308 <HAL_DMA_Start_IT>
 8001968:	4603      	mov	r3, r0
 800196a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10f      	bne.n	8001998 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d129      	bne.n	80019da <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	e020      	b.n	80019da <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_ADC_Start_DMA+0x1e4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11b      	bne.n	80019da <HAL_ADC_Start_DMA+0x1c2>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d114      	bne.n	80019da <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e00b      	b.n	80019da <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f043 0210 	orr.w	r2, r3, #16
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80019da:	7ffb      	ldrb	r3, [r7, #31]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	431bde83 	.word	0x431bde83
 80019ec:	40012300 	.word	0x40012300
 80019f0:	08001e85 	.word	0x08001e85
 80019f4:	08001f3f 	.word	0x08001f3f
 80019f8:	08001f5b 	.word	0x08001f5b
 80019fc:	40012000 	.word	0x40012000

08001a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1c>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e113      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x244>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b09      	cmp	r3, #9
 8001a52:	d925      	bls.n	8001aa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68d9      	ldr	r1, [r3, #12]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	3b1e      	subs	r3, #30
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43da      	mvns	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	400a      	ands	r2, r1
 8001a78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68d9      	ldr	r1, [r3, #12]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4403      	add	r3, r0
 8001a92:	3b1e      	subs	r3, #30
 8001a94:	409a      	lsls	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	e022      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6919      	ldr	r1, [r3, #16]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6919      	ldr	r1, [r3, #16]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4403      	add	r3, r0
 8001adc:	409a      	lsls	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d824      	bhi.n	8001b38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b05      	subs	r3, #5
 8001b00:	221f      	movs	r2, #31
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	3b05      	subs	r3, #5
 8001b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
 8001b36:	e04c      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d824      	bhi.n	8001b8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b23      	subs	r3, #35	; 0x23
 8001b52:	221f      	movs	r2, #31
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	400a      	ands	r2, r1
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b23      	subs	r3, #35	; 0x23
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
 8001b88:	e023      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b41      	subs	r3, #65	; 0x41
 8001b9c:	221f      	movs	r2, #31
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	400a      	ands	r2, r1
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b41      	subs	r3, #65	; 0x41
 8001bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_ADC_ConfigChannel+0x250>)
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_ADC_ConfigChannel+0x254>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d10f      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1d8>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b12      	cmp	r3, #18
 8001be6:	d10b      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_ADC_ConfigChannel+0x254>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12b      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x23a>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <HAL_ADC_ConfigChannel+0x258>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d003      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x1f4>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b11      	cmp	r3, #17
 8001c1a:	d122      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_ADC_ConfigChannel+0x258>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d111      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_ADC_ConfigChannel+0x25c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_ADC_ConfigChannel+0x260>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	0c9a      	lsrs	r2, r3, #18
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c54:	e002      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f9      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	10000012 	.word	0x10000012
 8001c84:	20000000 	.word	0x20000000
 8001c88:	431bde83 	.word	0x431bde83

08001c8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c94:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <ADC_Init+0x1f0>)
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	021a      	lsls	r2, r3, #8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6899      	ldr	r1, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <ADC_Init+0x1f4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d022      	beq.n	8001d6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6899      	ldr	r1, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	e00f      	b.n	8001d8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0202 	bic.w	r2, r2, #2
 8001d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6899      	ldr	r1, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e1b      	ldrb	r3, [r3, #24]
 8001da4:	005a      	lsls	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01b      	beq.n	8001df0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	3b01      	subs	r3, #1
 8001de4:	035a      	lsls	r2, r3, #13
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	e007      	b.n	8001e00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	051a      	lsls	r2, r3, #20
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e42:	025a      	lsls	r2, r3, #9
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	029a      	lsls	r2, r3, #10
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40012300 	.word	0x40012300
 8001e80:	0f000001 	.word	0x0f000001

08001e84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d13c      	bne.n	8001f18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d12b      	bne.n	8001f10 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d127      	bne.n	8001f10 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d119      	bne.n	8001f10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0220 	bic.w	r2, r2, #32
 8001eea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7fe fde5 	bl	8000ae0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f16:	e00e      	b.n	8001f36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff fd75 	bl	8001a14 <HAL_ADC_ErrorCallback>
}
 8001f2a:	e004      	b.n	8001f36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7ff fd57 	bl	8001a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f043 0204 	orr.w	r2, r3, #4
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f7ff fd4a 	bl	8001a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff3e 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff faba 	bl	8001730 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e099      	b.n	80022fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e8:	e00f      	b.n	800220a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ea:	f7ff faa1 	bl	8001730 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d908      	bls.n	800220a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2203      	movs	r2, #3
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e078      	b.n	80022fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e8      	bne.n	80021ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_DMA_Init+0x158>)
 8002224:	4013      	ands	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2b04      	cmp	r3, #4
 8002262:	d107      	bne.n	8002274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4313      	orrs	r3, r2
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f023 0307 	bic.w	r3, r3, #7
 800228a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	2b04      	cmp	r3, #4
 800229c:	d117      	bne.n	80022ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fa6f 	bl	8002794 <DMA_CheckFifoParam>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ca:	2301      	movs	r3, #1
 80022cc:	e016      	b.n	80022fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa26 	bl	8002728 <DMA_CalcBaseAndBitshift>
 80022dc:	4603      	mov	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	223f      	movs	r2, #63	; 0x3f
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	f010803f 	.word	0xf010803f

08002308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_DMA_Start_IT+0x26>
 800232a:	2302      	movs	r3, #2
 800232c:	e040      	b.n	80023b0 <HAL_DMA_Start_IT+0xa8>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d12f      	bne.n	80023a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f9b8 	bl	80026cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0216 	orr.w	r2, r2, #22
 8002376:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0208 	orr.w	r2, r2, #8
 800238e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e005      	b.n	80023ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023c4:	4b8e      	ldr	r3, [pc, #568]	; (8002600 <HAL_DMA_IRQHandler+0x248>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a8e      	ldr	r2, [pc, #568]	; (8002604 <HAL_DMA_IRQHandler+0x24c>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0a9b      	lsrs	r3, r3, #10
 80023d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	2208      	movs	r2, #8
 80023e4:	409a      	lsls	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01a      	beq.n	8002424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2208      	movs	r2, #8
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2201      	movs	r2, #1
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d012      	beq.n	800245a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2201      	movs	r2, #1
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0202 	orr.w	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2204      	movs	r2, #4
 8002460:	409a      	lsls	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d012      	beq.n	8002490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	2204      	movs	r2, #4
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0204 	orr.w	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2210      	movs	r2, #16
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d043      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d03c      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2210      	movs	r2, #16
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d018      	beq.n	80024fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d024      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
 80024e6:	e01f      	b.n	8002528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e016      	b.n	8002528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0208 	bic.w	r2, r2, #8
 8002516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	2220      	movs	r2, #32
 800252e:	409a      	lsls	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 808f 	beq.w	8002658 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8087 	beq.w	8002658 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2220      	movs	r2, #32
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b05      	cmp	r3, #5
 8002560:	d136      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0216 	bic.w	r2, r2, #22
 8002570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_DMA_IRQHandler+0x1da>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0208 	bic.w	r2, r2, #8
 80025a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	223f      	movs	r2, #63	; 0x3f
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d07e      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
        }
        return;
 80025ce:	e079      	b.n	80026c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01d      	beq.n	800261a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10d      	bne.n	8002608 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d031      	beq.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
 80025fc:	e02c      	b.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000
 8002604:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
 8002618:	e01e      	b.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10f      	bne.n	8002648 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0210 	bic.w	r2, r2, #16
 8002636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	2b00      	cmp	r3, #0
 800265e:	d032      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d022      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2205      	movs	r2, #5
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	3301      	adds	r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d307      	bcc.n	80026a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f2      	bne.n	8002684 <HAL_DMA_IRQHandler+0x2cc>
 800269e:	e000      	b.n	80026a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
 80026c2:	e000      	b.n	80026c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026c4:	bf00      	nop
    }
  }
}
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	d108      	bne.n	800270c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800270a:	e007      	b.n	800271c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	60da      	str	r2, [r3, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3b10      	subs	r3, #16
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <DMA_CalcBaseAndBitshift+0x64>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002742:	4a13      	ldr	r2, [pc, #76]	; (8002790 <DMA_CalcBaseAndBitshift+0x68>)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d909      	bls.n	800276a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800275e:	f023 0303 	bic.w	r3, r3, #3
 8002762:	1d1a      	adds	r2, r3, #4
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	659a      	str	r2, [r3, #88]	; 0x58
 8002768:	e007      	b.n	800277a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	aaaaaaab 	.word	0xaaaaaaab
 8002790:	08009aa8 	.word	0x08009aa8

08002794 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d11f      	bne.n	80027ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d856      	bhi.n	8002862 <DMA_CheckFifoParam+0xce>
 80027b4:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <DMA_CheckFifoParam+0x28>)
 80027b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027df 	.word	0x080027df
 80027c4:	080027cd 	.word	0x080027cd
 80027c8:	08002863 	.word	0x08002863
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d046      	beq.n	8002866 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027dc:	e043      	b.n	8002866 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027e6:	d140      	bne.n	800286a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ec:	e03d      	b.n	800286a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f6:	d121      	bne.n	800283c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d837      	bhi.n	800286e <DMA_CheckFifoParam+0xda>
 80027fe:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <DMA_CheckFifoParam+0x70>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	08002815 	.word	0x08002815
 8002808:	0800281b 	.word	0x0800281b
 800280c:	08002815 	.word	0x08002815
 8002810:	0800282d 	.word	0x0800282d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e030      	b.n	800287c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d025      	beq.n	8002872 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282a:	e022      	b.n	8002872 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002834:	d11f      	bne.n	8002876 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800283a:	e01c      	b.n	8002876 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d903      	bls.n	800284a <DMA_CheckFifoParam+0xb6>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d003      	beq.n	8002850 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002848:	e018      	b.n	800287c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      break;
 800284e:	e015      	b.n	800287c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00e      	beq.n	800287a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      break;
 8002860:	e00b      	b.n	800287a <DMA_CheckFifoParam+0xe6>
      break;
 8002862:	bf00      	nop
 8002864:	e00a      	b.n	800287c <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
 8002868:	e008      	b.n	800287c <DMA_CheckFifoParam+0xe8>
      break;
 800286a:	bf00      	nop
 800286c:	e006      	b.n	800287c <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
 8002870:	e004      	b.n	800287c <DMA_CheckFifoParam+0xe8>
      break;
 8002872:	bf00      	nop
 8002874:	e002      	b.n	800287c <DMA_CheckFifoParam+0xe8>
      break;   
 8002876:	bf00      	nop
 8002878:	e000      	b.n	800287c <DMA_CheckFifoParam+0xe8>
      break;
 800287a:	bf00      	nop
    }
  } 
  
  return status; 
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e159      	b.n	8002b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8148 	bne.w	8002b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d005      	beq.n	80028de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d130      	bne.n	8002940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 0201 	and.w	r2, r3, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b03      	cmp	r3, #3
 800294a:	d017      	beq.n	800297c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d123      	bne.n	80029d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a2 	beq.w	8002b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b54      	ldr	r3, [pc, #336]	; (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2e:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_GPIO_Init+0x2ec>)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a49      	ldr	r2, [pc, #292]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d019      	beq.n	8002a8e <HAL_GPIO_Init+0x202>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a48      	ldr	r2, [pc, #288]	; (8002b80 <HAL_GPIO_Init+0x2f4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_GPIO_Init+0x1fe>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a47      	ldr	r2, [pc, #284]	; (8002b84 <HAL_GPIO_Init+0x2f8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00d      	beq.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a46      	ldr	r2, [pc, #280]	; (8002b88 <HAL_GPIO_Init+0x2fc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_GPIO_Init+0x1f6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a45      	ldr	r2, [pc, #276]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_GPIO_Init+0x1f2>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e008      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e004      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e002      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f002 0203 	and.w	r2, r2, #3
 8002a96:	0092      	lsls	r2, r2, #2
 8002a98:	4093      	lsls	r3, r2
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa0:	4935      	ldr	r1, [pc, #212]	; (8002b78 <HAL_GPIO_Init+0x2ec>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b26:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b50:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	f67f aea2 	bls.w	80028a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40013c00 	.word	0x40013c00

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb0:	e003      	b.n	8002bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	041a      	lsls	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	619a      	str	r2, [r3, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd8:	887a      	ldrh	r2, [r7, #2]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	041a      	lsls	r2, r3, #16
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	400b      	ands	r3, r1
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	619a      	str	r2, [r3, #24]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af02      	add	r7, sp, #8
 8002c00:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e101      	b.n	8002e10 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f006 fbd0 	bl	80093cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c3a:	d102      	bne.n	8002c42 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 ff23 	bl	8005a92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7c1a      	ldrb	r2, [r3, #16]
 8002c54:	f88d 2000 	strb.w	r2, [sp]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5c:	f002 fe02 	bl	8005864 <USB_CoreInit>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0ce      	b.n	8002e10 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 ff1b 	bl	8005ab4 <USB_SetCurrentMode>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0bf      	b.n	8002e10 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e04a      	b.n	8002d2c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3315      	adds	r3, #21
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3314      	adds	r3, #20
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	b298      	uxth	r0, r3
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	332e      	adds	r3, #46	; 0x2e
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3318      	adds	r3, #24
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	331c      	adds	r3, #28
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3324      	adds	r3, #36	; 0x24
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	791b      	ldrb	r3, [r3, #4]
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3af      	bcc.n	8002c96 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e044      	b.n	8002dc6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	791b      	ldrb	r3, [r3, #4]
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3b5      	bcc.n	8002d3c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7c1a      	ldrb	r2, [r3, #16]
 8002dd8:	f88d 2000 	strb.w	r2, [sp]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de0:	f002 feb4 	bl	8005b4c <USB_DevInit>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00c      	b.n	8002e10 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fefe 	bl	8006c0a <USB_DevDisconnect>

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_Start+0x1c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e022      	b.n	8002e7a <HAL_PCD_Start+0x62>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fe05 	bl	8005a70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 feac 	bl	8006bc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e82:	b590      	push	{r4, r7, lr}
 8002e84:	b08d      	sub	sp, #52	; 0x34
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 ff6a 	bl	8006d72 <USB_GetMode>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 848c 	bne.w	80037be <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 fece 	bl	8006c4c <USB_ReadInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8482 	beq.w	80037bc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 febb 	bl	8006c4c <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d107      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f002 0202 	and.w	r2, r2, #2
 8002eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 fea9 	bl	8006c4c <USB_ReadInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d161      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0210 	bic.w	r2, r2, #16
 8002f12:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	0c5b      	lsrs	r3, r3, #17
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d124      	bne.n	8002f8a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d035      	beq.n	8002fb8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6a38      	ldr	r0, [r7, #32]
 8002f60:	f003 fce0 	bl	8006924 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f70:	441a      	add	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f82:	441a      	add	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	615a      	str	r2, [r3, #20]
 8002f88:	e016      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	0c5b      	lsrs	r3, r3, #17
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d110      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6a38      	ldr	r0, [r7, #32]
 8002fa2:	f003 fcbf 	bl	8006924 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb2:	441a      	add	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0210 	orr.w	r2, r2, #16
 8002fc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fe3d 	bl	8006c4c <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fdc:	f040 80a7 	bne.w	800312e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 fe42 	bl	8006c72 <USB_ReadDevAllOutEpInterrupt>
 8002fee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ff0:	e099      	b.n	8003126 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 808e 	beq.w	800311a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fe66 	bl	8006cda <USB_ReadDevOutEPInterrupt>
 800300e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00c      	beq.n	8003034 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003026:	461a      	mov	r2, r3
 8003028:	2301      	movs	r3, #1
 800302a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800302c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fea4 	bl	8003d7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304a:	461a      	mov	r2, r3
 800304c:	2308      	movs	r3, #8
 800304e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 ff7a 	bl	8003f4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	461a      	mov	r2, r3
 8003070:	2310      	movs	r3, #16
 8003072:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d030      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d109      	bne.n	800309e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800309e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	3304      	adds	r3, #4
 80030b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	78db      	ldrb	r3, [r3, #3]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d108      	bne.n	80030ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f006 fa7b 	bl	80095c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	461a      	mov	r2, r3
 80030dc:	2302      	movs	r3, #2
 80030de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	2320      	movs	r3, #32
 80030fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	461a      	mov	r2, r3
 8003114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003118:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	3301      	adds	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	f47f af62 	bne.w	8002ff2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fd8a 	bl	8006c4c <USB_ReadInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003142:	f040 80db 	bne.w	80032fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fdab 	bl	8006ca6 <USB_ReadDevAllInEpInterrupt>
 8003150:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003156:	e0cd      	b.n	80032f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80c2 	beq.w	80032e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fdd1 	bl	8006d16 <USB_ReadDevInEPInterrupt>
 8003174:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d057      	beq.n	8003230 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	2201      	movs	r2, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43db      	mvns	r3, r3
 800319a:	69f9      	ldr	r1, [r7, #28]
 800319c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031a0:	4013      	ands	r3, r2
 80031a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b0:	461a      	mov	r2, r3
 80031b2:	2301      	movs	r3, #1
 80031b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	799b      	ldrb	r3, [r3, #6]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d132      	bne.n	8003224 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3320      	adds	r3, #32
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4403      	add	r3, r0
 80031de:	331c      	adds	r3, #28
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4419      	add	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4403      	add	r3, r0
 80031f2:	3320      	adds	r3, #32
 80031f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d113      	bne.n	8003224 <HAL_PCD_IRQHandler+0x3a2>
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3324      	adds	r3, #36	; 0x24
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800321c:	461a      	mov	r2, r3
 800321e:	2101      	movs	r1, #1
 8003220:	f003 fdd8 	bl	8006dd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f006 f94f 	bl	80094ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003246:	461a      	mov	r2, r3
 8003248:	2308      	movs	r3, #8
 800324a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003262:	461a      	mov	r2, r3
 8003264:	2310      	movs	r3, #16
 8003266:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327e:	461a      	mov	r2, r3
 8003280:	2340      	movs	r3, #64	; 0x40
 8003282:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d023      	beq.n	80032d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800328e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003290:	6a38      	ldr	r0, [r7, #32]
 8003292:	f002 fdbf 	bl	8005e14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3310      	adds	r3, #16
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	3304      	adds	r3, #4
 80032a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	78db      	ldrb	r3, [r3, #3]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f006 f992 	bl	80095e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d0:	461a      	mov	r2, r3
 80032d2:	2302      	movs	r3, #2
 80032d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fcbd 	bl	8003c62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	3301      	adds	r3, #1
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f47f af2e 	bne.w	8003158 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f003 fca3 	bl	8006c4c <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800330c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003310:	d122      	bne.n	8003358 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800332c:	2b01      	cmp	r3, #1
 800332e:	d108      	bne.n	8003342 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003338:	2100      	movs	r1, #0
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fea4 	bl	8004088 <HAL_PCDEx_LPM_Callback>
 8003340:	e002      	b.n	8003348 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f006 f930 	bl	80095a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fc75 	bl	8006c4c <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	d112      	bne.n	8003394 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f006 f8ec 	bl	800955c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003392:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fc57 	bl	8006c4c <USB_ReadInterrupts>
 800339e:	4603      	mov	r3, r0
 80033a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a8:	f040 80b7 	bne.w	800351a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2110      	movs	r1, #16
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 fd24 	bl	8005e14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d0:	e046      	b.n	8003460 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033de:	461a      	mov	r2, r3
 80033e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f6:	0151      	lsls	r1, r2, #5
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	440a      	add	r2, r1
 80033fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003400:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003404:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	461a      	mov	r2, r3
 8003414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003418:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800342a:	0151      	lsls	r1, r2, #5
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	440a      	add	r2, r1
 8003430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003438:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344a:	0151      	lsls	r1, r2, #5
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	440a      	add	r2, r1
 8003450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003458:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	3301      	adds	r3, #1
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	791b      	ldrb	r3, [r3, #4]
 8003464:	461a      	mov	r2, r3
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	4293      	cmp	r3, r2
 800346a:	d3b2      	bcc.n	80033d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800347e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7bdb      	ldrb	r3, [r3, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d016      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003498:	f043 030b 	orr.w	r3, r3, #11
 800349c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ae:	f043 030b 	orr.w	r3, r3, #11
 80034b2:	6453      	str	r3, [r2, #68]	; 0x44
 80034b4:	e015      	b.n	80034e2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034c8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034dc:	f043 030b 	orr.w	r3, r3, #11
 80034e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003504:	461a      	mov	r2, r3
 8003506:	f003 fc65 	bl	8006dd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f003 fb94 	bl	8006c4c <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	d123      	bne.n	8003578 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fc2a 	bl	8006d8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f002 fce1 	bl	8005f06 <USB_GetDevSpeed>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681c      	ldr	r4, [r3, #0]
 8003550:	f001 f9ca 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8003554:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800355a:	461a      	mov	r2, r3
 800355c:	4620      	mov	r0, r4
 800355e:	f002 f9e5 	bl	800592c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f005 ffdb 	bl	800951e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003576:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f003 fb65 	bl	8006c4c <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b08      	cmp	r3, #8
 800358a:	d10a      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f005 ffb8 	bl	8009502 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f002 0208 	and.w	r2, r2, #8
 80035a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 fb50 	bl	8006c4c <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d123      	bne.n	80035fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c2:	2301      	movs	r3, #1
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
 80035c6:	e014      	b.n	80035f2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	f203 2357 	addw	r3, r3, #599	; 0x257
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	4619      	mov	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fb0a 	bl	8003c00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	3301      	adds	r3, #1
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	791b      	ldrb	r3, [r3, #4]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d3e4      	bcc.n	80035c8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f003 fb22 	bl	8006c4c <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003612:	d13c      	bne.n	800368e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003614:	2301      	movs	r3, #1
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	e02b      	b.n	8003672 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3318      	adds	r3, #24
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d115      	bne.n	800366c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003640:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	da12      	bge.n	800366c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3317      	adds	r3, #23
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003662:	b2db      	uxtb	r3, r3
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 faca 	bl	8003c00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	3301      	adds	r3, #1
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	791b      	ldrb	r3, [r3, #4]
 8003676:	461a      	mov	r2, r3
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	4293      	cmp	r3, r2
 800367c:	d3cd      	bcc.n	800361a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800368c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fada 	bl	8006c4c <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036a2:	d156      	bne.n	8003752 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a4:	2301      	movs	r3, #1
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
 80036a8:	e045      	b.n	8003736 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d12e      	bne.n	8003730 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da2b      	bge.n	8003730 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	0c1a      	lsrs	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80036e2:	4053      	eors	r3, r2
 80036e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d121      	bne.n	8003730 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	f203 2357 	addw	r3, r3, #599	; 0x257
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800372c:	6053      	str	r3, [r2, #4]
            break;
 800372e:	e008      	b.n	8003742 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	3301      	adds	r3, #1
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	791b      	ldrb	r3, [r3, #4]
 800373a:	461a      	mov	r2, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	4293      	cmp	r3, r2
 8003740:	d3b3      	bcc.n	80036aa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fa78 	bl	8006c4c <USB_ReadInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003766:	d10a      	bne.n	800377e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f005 ff4f 	bl	800960c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800377c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fa62 	bl	8006c4c <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d115      	bne.n	80037be <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f005 ff3f 	bl	8009628 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	e000      	b.n	80037be <HAL_PCD_IRQHandler+0x93c>
      return;
 80037bc:	bf00      	nop
    }
  }
}
 80037be:	3734      	adds	r7, #52	; 0x34
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}

080037c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_PCD_SetAddress+0x1a>
 80037da:	2302      	movs	r3, #2
 80037dc:	e012      	b.n	8003804 <HAL_PCD_SetAddress+0x40>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 f9c1 	bl	8006b7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4603      	mov	r3, r0
 800381c:	70fb      	strb	r3, [r7, #3]
 800381e:	460b      	mov	r3, r1
 8003820:	803b      	strh	r3, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800382a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800382e:	2b00      	cmp	r3, #0
 8003830:	da0f      	bge.n	8003852 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 020f 	and.w	r2, r3, #15
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	3310      	adds	r3, #16
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	705a      	strb	r2, [r3, #1]
 8003850:	e00f      	b.n	8003872 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4413      	add	r3, r2
 8003868:	3304      	adds	r3, #4
 800386a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800387e:	883b      	ldrh	r3, [r7, #0]
 8003880:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	78ba      	ldrb	r2, [r7, #2]
 800388c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038a0:	78bb      	ldrb	r3, [r7, #2]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d102      	bne.n	80038ac <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_PCD_EP_Open+0xae>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e00e      	b.n	80038d8 <HAL_PCD_EP_Open+0xcc>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 fb41 	bl	8005f50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80038d6:	7afb      	ldrb	r3, [r7, #11]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0f      	bge.n	8003914 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 020f 	and.w	r2, r3, #15
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3310      	adds	r3, #16
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	705a      	strb	r2, [r3, #1]
 8003912:	e00f      	b.n	8003934 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 020f 	and.w	r2, r3, #15
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_PCD_EP_Close+0x6e>
 800394a:	2302      	movs	r3, #2
 800394c:	e00e      	b.n	800396c <HAL_PCD_EP_Close+0x8c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	4618      	mov	r0, r3
 800395e:	f002 fb7f 	bl	8006060 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	460b      	mov	r3, r1
 8003982:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	f003 020f 	and.w	r2, r3, #15
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	3304      	adds	r3, #4
 800399c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2200      	movs	r2, #0
 80039b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b6:	7afb      	ldrb	r3, [r7, #11]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	799b      	ldrb	r3, [r3, #6]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d102      	bne.n	80039d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	799b      	ldrb	r3, [r3, #6]
 80039d8:	461a      	mov	r2, r3
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	f002 fc1c 	bl	8006218 <USB_EPStartXfer>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003a0c:	681b      	ldr	r3, [r3, #0]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	460b      	mov	r3, r1
 8003a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2a:	7afb      	ldrb	r3, [r7, #11]
 8003a2c:	f003 020f 	and.w	r2, r3, #15
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	3310      	adds	r3, #16
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3304      	adds	r3, #4
 8003a40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2201      	movs	r2, #1
 8003a58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	799b      	ldrb	r3, [r3, #6]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d102      	bne.n	8003a74 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	799b      	ldrb	r3, [r3, #6]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	f002 fbca 	bl	8006218 <USB_EPStartXfer>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	7912      	ldrb	r2, [r2, #4]
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e04f      	b.n	8003b4c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da0f      	bge.n	8003ad4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	705a      	strb	r2, [r3, #1]
 8003ad2:	e00d      	b.n	8003af0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_PCD_EP_SetStall+0x82>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e01d      	b.n	8003b4c <HAL_PCD_EP_SetStall+0xbe>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68f9      	ldr	r1, [r7, #12]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 ff58 	bl	80069d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7999      	ldrb	r1, [r3, #6]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f003 f949 	bl	8006dd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	7912      	ldrb	r2, [r2, #4]
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e042      	b.n	8003bf8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	da0f      	bge.n	8003b9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	3310      	adds	r3, #16
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
 8003b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	705a      	strb	r2, [r3, #1]
 8003b98:	e00f      	b.n	8003bba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_PCD_EP_ClrStall+0x86>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e00e      	b.n	8003bf8 <HAL_PCD_EP_ClrStall+0xa4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f002 ff61 	bl	8006ab0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	da0c      	bge.n	8003c2e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	3310      	adds	r3, #16
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	e00c      	b.n	8003c48 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68f9      	ldr	r1, [r7, #12]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f002 fd80 	bl	8006754 <USB_EPStopXfer>
 8003c54:	4603      	mov	r3, r0
 8003c56:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c58:	7afb      	ldrb	r3, [r7, #11]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b08a      	sub	sp, #40	; 0x28
 8003c66:	af02      	add	r7, sp, #8
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	3310      	adds	r3, #16
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	3304      	adds	r3, #4
 8003c88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d901      	bls.n	8003c9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06b      	b.n	8003d72 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d902      	bls.n	8003cb6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3303      	adds	r3, #3
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cbe:	e02a      	b.n	8003d16 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d902      	bls.n	8003cdc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	3303      	adds	r3, #3
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68d9      	ldr	r1, [r3, #12]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	6978      	ldr	r0, [r7, #20]
 8003cfa:	f002 fdd5 	bl	80068a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	441a      	add	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	441a      	add	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d809      	bhi.n	8003d40 <PCD_WriteEmptyTxFifo+0xde>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d203      	bcs.n	8003d40 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1bf      	bne.n	8003cc0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d811      	bhi.n	8003d70 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	2201      	movs	r2, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	6939      	ldr	r1, [r7, #16]
 8003d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	333c      	adds	r3, #60	; 0x3c
 8003d94:	3304      	adds	r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	799b      	ldrb	r3, [r3, #6]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d17b      	bne.n	8003eaa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d015      	beq.n	8003de8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4a61      	ldr	r2, [pc, #388]	; (8003f44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	f240 80b9 	bls.w	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80b3 	beq.w	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	461a      	mov	r2, r3
 8003de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de4:	6093      	str	r3, [r2, #8]
 8003de6:	e0a7      	b.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2320      	movs	r3, #32
 8003e02:	6093      	str	r3, [r2, #8]
 8003e04:	e098      	b.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 8093 	bne.w	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	4a4b      	ldr	r2, [pc, #300]	; (8003f44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d90f      	bls.n	8003e3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e30:	461a      	mov	r2, r3
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	6093      	str	r3, [r2, #8]
 8003e38:	e07e      	b.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	0159      	lsls	r1, r3, #5
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e66:	1ad2      	subs	r2, r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d114      	bne.n	8003e9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e84:	461a      	mov	r2, r3
 8003e86:	2101      	movs	r1, #1
 8003e88:	f002 ffa4 	bl	8006dd4 <USB_EP0_OutStart>
 8003e8c:	e006      	b.n	8003e9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	441a      	add	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f005 faf8 	bl	8009498 <HAL_PCD_DataOutStageCallback>
 8003ea8:	e046      	b.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d124      	bne.n	8003efc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ece:	6093      	str	r3, [r2, #8]
 8003ed0:	e032      	b.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2320      	movs	r3, #32
 8003eec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f005 facf 	bl	8009498 <HAL_PCD_DataOutStageCallback>
 8003efa:	e01d      	b.n	8003f38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d114      	bne.n	8003f2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d108      	bne.n	8003f2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003f24:	461a      	mov	r2, r3
 8003f26:	2100      	movs	r1, #0
 8003f28:	f002 ff54 	bl	8006dd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f005 fab0 	bl	8009498 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	4f54300a 	.word	0x4f54300a
 8003f48:	4f54310a 	.word	0x4f54310a

08003f4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	333c      	adds	r3, #60	; 0x3c
 8003f64:	3304      	adds	r3, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d90e      	bls.n	8003fa0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f005 fa67 	bl	8009474 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d90c      	bls.n	8003fc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	799b      	ldrb	r3, [r3, #6]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d108      	bne.n	8003fc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	f002 ff06 	bl	8006dd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	4f54300a 	.word	0x4f54300a

08003fd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d107      	bne.n	8004006 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ff6:	883b      	ldrh	r3, [r7, #0]
 8003ff8:	0419      	lsls	r1, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	430a      	orrs	r2, r1
 8004002:	629a      	str	r2, [r3, #40]	; 0x28
 8004004:	e028      	b.n	8004058 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	4413      	add	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e00d      	b.n	8004036 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	3340      	adds	r3, #64	; 0x40
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	4413      	add	r3, r2
 800402e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	3301      	adds	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	3b01      	subs	r3, #1
 800403c:	429a      	cmp	r2, r3
 800403e:	d3ec      	bcc.n	800401a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004040:	883b      	ldrh	r3, [r7, #0]
 8004042:	0418      	lsls	r0, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6819      	ldr	r1, [r3, #0]
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	3b01      	subs	r3, #1
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4302      	orrs	r2, r0
 8004050:	3340      	adds	r3, #64	; 0x40
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e267      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d075      	beq.n	80041aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040be:	4b88      	ldr	r3, [pc, #544]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d00c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ca:	4b85      	ldr	r3, [pc, #532]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d112      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b82      	ldr	r3, [pc, #520]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e2:	d10b      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	4b7e      	ldr	r3, [pc, #504]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05b      	beq.n	80041a8 <HAL_RCC_OscConfig+0x108>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d157      	bne.n	80041a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e242      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d106      	bne.n	8004114 <HAL_RCC_OscConfig+0x74>
 8004106:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a75      	ldr	r2, [pc, #468]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x98>
 800411e:	4b70      	ldr	r3, [pc, #448]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6f      	ldr	r2, [pc, #444]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b6d      	ldr	r3, [pc, #436]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6c      	ldr	r2, [pc, #432]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004138:	4b69      	ldr	r3, [pc, #420]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a68      	ldr	r2, [pc, #416]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd faea 	bl	8001730 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004160:	f7fd fae6 	bl	8001730 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e207      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xc0>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fd fad6 	bl	8001730 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fd fad2 	bl	8001730 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1f3      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	4b51      	ldr	r3, [pc, #324]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0xe8>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041b6:	4b4a      	ldr	r3, [pc, #296]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b44      	ldr	r3, [pc, #272]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1c7      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4937      	ldr	r1, [pc, #220]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e03a      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCC_OscConfig+0x244>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fd fa8b 	bl	8001730 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421e:	f7fd fa87 	bl	8001730 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1a8      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4925      	ldr	r1, [pc, #148]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x244>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd fa6a 	bl	8001730 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004260:	f7fd fa66 	bl	8001730 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e187      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d036      	beq.n	80042f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_RCC_OscConfig+0x248>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fd fa4a 	bl	8001730 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fd fa46 	bl	8001730 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e167      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_OscConfig+0x240>)
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x200>
 80042be:	e01b      	b.n	80042f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_OscConfig+0x248>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fd fa33 	bl	8001730 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	e00e      	b.n	80042ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fd fa2f 	bl	8001730 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d907      	bls.n	80042ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e150      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	42470000 	.word	0x42470000
 80042e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	4b88      	ldr	r3, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ea      	bne.n	80042ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8097 	beq.w	8004434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430a:	4b81      	ldr	r3, [pc, #516]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10f      	bne.n	8004336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	4b7d      	ldr	r3, [pc, #500]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4a7c      	ldr	r2, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004324:	6413      	str	r3, [r2, #64]	; 0x40
 8004326:	4b7a      	ldr	r3, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	4b77      	ldr	r3, [pc, #476]	; (8004514 <HAL_RCC_OscConfig+0x474>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d118      	bne.n	8004374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004342:	4b74      	ldr	r3, [pc, #464]	; (8004514 <HAL_RCC_OscConfig+0x474>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a73      	ldr	r2, [pc, #460]	; (8004514 <HAL_RCC_OscConfig+0x474>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434e:	f7fd f9ef 	bl	8001730 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004356:	f7fd f9eb 	bl	8001730 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e10c      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004368:	4b6a      	ldr	r3, [pc, #424]	; (8004514 <HAL_RCC_OscConfig+0x474>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x2ea>
 800437c:	4b64      	ldr	r3, [pc, #400]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a63      	ldr	r2, [pc, #396]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
 8004388:	e01c      	b.n	80043c4 <HAL_RCC_OscConfig+0x324>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b05      	cmp	r3, #5
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x30c>
 8004392:	4b5f      	ldr	r3, [pc, #380]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a5e      	ldr	r2, [pc, #376]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
 800439e:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a5b      	ldr	r2, [pc, #364]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0x324>
 80043ac:	4b58      	ldr	r3, [pc, #352]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a57      	ldr	r2, [pc, #348]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	4b55      	ldr	r3, [pc, #340]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a54      	ldr	r2, [pc, #336]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043be:	f023 0304 	bic.w	r3, r3, #4
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fd f9b0 	bl	8001730 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fd f9ac 	bl	8001730 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0cb      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ea:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ee      	beq.n	80043d4 <HAL_RCC_OscConfig+0x334>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f8:	f7fd f99a 	bl	8001730 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fd f996 	bl	8001730 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0b5      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004416:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ee      	bne.n	8004400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	4a38      	ldr	r2, [pc, #224]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 800442e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80a1 	beq.w	8004580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b08      	cmp	r3, #8
 8004448:	d05c      	beq.n	8004504 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d141      	bne.n	80044d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_RCC_OscConfig+0x478>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fd f96a 	bl	8001730 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fd f966 	bl	8001730 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e087      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	3b01      	subs	r3, #1
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	491b      	ldr	r1, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_RCC_OscConfig+0x478>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fd f93f 	bl	8001730 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fd f93b 	bl	8001730 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e05c      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x416>
 80044d4:	e054      	b.n	8004580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <HAL_RCC_OscConfig+0x478>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd f928 	bl	8001730 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fd f924 	bl	8001730 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e045      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCC_OscConfig+0x470>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x444>
 8004502:	e03d      	b.n	8004580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e038      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
 8004510:	40023800 	.word	0x40023800
 8004514:	40007000 	.word	0x40007000
 8004518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800451c:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCC_OscConfig+0x4ec>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d028      	beq.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d121      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d11a      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004554:	4293      	cmp	r3, r2
 8004556:	d111      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	3b01      	subs	r3, #1
 8004566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800

08004590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0cc      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d90c      	bls.n	80045cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b63      	ldr	r3, [pc, #396]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0b8      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d020      	beq.n	800461a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a58      	ldr	r2, [pc, #352]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	494d      	ldr	r1, [pc, #308]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d044      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d119      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e07f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d003      	beq.n	800464e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	2b03      	cmp	r3, #3
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e067      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466e:	4b37      	ldr	r3, [pc, #220]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4934      	ldr	r1, [pc, #208]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004680:	f7fd f856 	bl	8001730 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	e00a      	b.n	800469e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7fd f852 	bl	8001730 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 020c 	and.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d1eb      	bne.n	8004688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d20c      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e032      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4916      	ldr	r1, [pc, #88]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	490e      	ldr	r1, [pc, #56]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004716:	f000 f821 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800471a:	4602      	mov	r2, r0
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	490a      	ldr	r1, [pc, #40]	; (8004750 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	5ccb      	ldrb	r3, [r1, r3]
 800472a:	fa22 f303 	lsr.w	r3, r2, r3
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc ffb6 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023c00 	.word	0x40023c00
 800474c:	40023800 	.word	0x40023800
 8004750:	08009a98 	.word	0x08009a98
 8004754:	20000000 	.word	0x20000000
 8004758:	20000004 	.word	0x20000004

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b090      	sub	sp, #64	; 0x40
 8004762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d00d      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0x40>
 8004780:	2b08      	cmp	r3, #8
 8004782:	f200 80a1 	bhi.w	80048c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x34>
 800478a:	2b04      	cmp	r3, #4
 800478c:	d003      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x3a>
 800478e:	e09b      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004794:	e09b      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004796:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800479a:	e098      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800479c:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a6:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d028      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b2:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	2200      	movs	r2, #0
 80047ba:	623b      	str	r3, [r7, #32]
 80047bc:	627a      	str	r2, [r7, #36]	; 0x24
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047c4:	2100      	movs	r1, #0
 80047c6:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047c8:	fb03 f201 	mul.w	r2, r3, r1
 80047cc:	2300      	movs	r3, #0
 80047ce:	fb00 f303 	mul.w	r3, r0, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	4a43      	ldr	r2, [pc, #268]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047d6:	fba0 1202 	umull	r1, r2, r0, r2
 80047da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047dc:	460a      	mov	r2, r1
 80047de:	62ba      	str	r2, [r7, #40]	; 0x28
 80047e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e2:	4413      	add	r3, r2
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	2200      	movs	r2, #0
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	61fa      	str	r2, [r7, #28]
 80047ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047f6:	f7fb fcef 	bl	80001d8 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4613      	mov	r3, r2
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004802:	e053      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004804:	4b35      	ldr	r3, [pc, #212]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	2200      	movs	r2, #0
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	617a      	str	r2, [r7, #20]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004816:	f04f 0b00 	mov.w	fp, #0
 800481a:	4652      	mov	r2, sl
 800481c:	465b      	mov	r3, fp
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800482c:	0150      	lsls	r0, r2, #5
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	ebb2 080a 	subs.w	r8, r2, sl
 8004836:	eb63 090b 	sbc.w	r9, r3, fp
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004846:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800484a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800484e:	ebb2 0408 	subs.w	r4, r2, r8
 8004852:	eb63 0509 	sbc.w	r5, r3, r9
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	00eb      	lsls	r3, r5, #3
 8004860:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004864:	00e2      	lsls	r2, r4, #3
 8004866:	4614      	mov	r4, r2
 8004868:	461d      	mov	r5, r3
 800486a:	eb14 030a 	adds.w	r3, r4, sl
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	eb45 030b 	adc.w	r3, r5, fp
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004882:	4629      	mov	r1, r5
 8004884:	028b      	lsls	r3, r1, #10
 8004886:	4621      	mov	r1, r4
 8004888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800488c:	4621      	mov	r1, r4
 800488e:	028a      	lsls	r2, r1, #10
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	2200      	movs	r2, #0
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	60fa      	str	r2, [r7, #12]
 800489c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a0:	f7fb fc9a 	bl	80001d8 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_GetSysClockFreq+0x180>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	3301      	adds	r3, #1
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80048bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048c6:	e002      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3740      	adds	r7, #64	; 0x40
 80048d4:	46bd      	mov	sp, r7
 80048d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800
 80048e0:	00f42400 	.word	0x00f42400
 80048e4:	017d7840 	.word	0x017d7840

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000

08004900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e041      	b.n	8004996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fd8e 	bl	8001448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f000 fc3c 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e044      	b.n	8004a42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <HAL_TIM_Base_Start_IT+0xb0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d013      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <HAL_TIM_Base_Start_IT+0xb4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <HAL_TIM_Base_Start_IT+0xb8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_TIM_Base_Start_IT+0xbc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d010      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	e007      	b.n	8004a40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	40000c00 	.word	0x40000c00
 8004a60:	40014000 	.word	0x40014000

08004a64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e041      	b.n	8004afa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f839 	bl	8004b02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f000 fb8a 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <HAL_TIM_PWM_Start+0x24>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	bf14      	ite	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	2300      	moveq	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e022      	b.n	8004b82 <HAL_TIM_PWM_Start+0x6a>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d109      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x3e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	e015      	b.n	8004b82 <HAL_TIM_PWM_Start+0x6a>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d109      	bne.n	8004b70 <HAL_TIM_PWM_Start+0x58>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e008      	b.n	8004b82 <HAL_TIM_PWM_Start+0x6a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e068      	b.n	8004c5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start+0x82>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	e013      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xaa>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start+0x92>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba8:	e00b      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xaa>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start+0xa2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	e003      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fda2 	bl	8005714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <HAL_TIM_PWM_Start+0x14c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d107      	bne.n	8004bea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <HAL_TIM_PWM_Start+0x14c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_TIM_PWM_Start+0x10e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfc:	d013      	beq.n	8004c26 <HAL_TIM_PWM_Start+0x10e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_TIM_PWM_Start+0x150>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIM_PWM_Start+0x10e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <HAL_TIM_PWM_Start+0x154>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIM_PWM_Start+0x10e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <HAL_TIM_PWM_Start+0x158>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_PWM_Start+0x10e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a14      	ldr	r2, [pc, #80]	; (8004c74 <HAL_TIM_PWM_Start+0x15c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d111      	bne.n	8004c4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b06      	cmp	r3, #6
 8004c36:	d010      	beq.n	8004c5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c48:	e007      	b.n	8004c5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40014000 	.word	0x40014000

08004c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d020      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01b      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0202 	mvn.w	r2, #2
 8004cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa5b 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa4d 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fa5e 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d020      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01b      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0204 	mvn.w	r2, #4
 8004cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fa35 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa27 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa38 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0208 	mvn.w	r2, #8
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa0f 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa01 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fa12 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d020      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0210 	mvn.w	r2, #16
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2208      	movs	r2, #8
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f9e9 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9db 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f9ec 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0201 	mvn.w	r2, #1
 8004ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fb fe66 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00c      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fd24 	bl	8005850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00c      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f9bd 	bl	80051a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0220 	mvn.w	r2, #32
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fcf6 	bl	800583c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e0ae      	b.n	8004fd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	f200 809f 	bhi.w	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004ec1 	.word	0x08004ec1
 8004e90:	08004fc5 	.word	0x08004fc5
 8004e94:	08004fc5 	.word	0x08004fc5
 8004e98:	08004fc5 	.word	0x08004fc5
 8004e9c:	08004f01 	.word	0x08004f01
 8004ea0:	08004fc5 	.word	0x08004fc5
 8004ea4:	08004fc5 	.word	0x08004fc5
 8004ea8:	08004fc5 	.word	0x08004fc5
 8004eac:	08004f43 	.word	0x08004f43
 8004eb0:	08004fc5 	.word	0x08004fc5
 8004eb4:	08004fc5 	.word	0x08004fc5
 8004eb8:	08004fc5 	.word	0x08004fc5
 8004ebc:	08004f83 	.word	0x08004f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f9fe 	bl	80052c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0208 	orr.w	r2, r2, #8
 8004eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0204 	bic.w	r2, r2, #4
 8004eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6999      	ldr	r1, [r3, #24]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	619a      	str	r2, [r3, #24]
      break;
 8004efe:	e064      	b.n	8004fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fa44 	bl	8005394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6999      	ldr	r1, [r3, #24]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	021a      	lsls	r2, r3, #8
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	619a      	str	r2, [r3, #24]
      break;
 8004f40:	e043      	b.n	8004fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fa8f 	bl	800546c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0208 	orr.w	r2, r2, #8
 8004f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0204 	bic.w	r2, r2, #4
 8004f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69d9      	ldr	r1, [r3, #28]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	61da      	str	r2, [r3, #28]
      break;
 8004f80:	e023      	b.n	8004fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fad9 	bl	8005540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69d9      	ldr	r1, [r3, #28]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	021a      	lsls	r2, r3, #8
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	61da      	str	r2, [r3, #28]
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e0b4      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x186>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005030:	d03e      	beq.n	80050b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005036:	f200 8087 	bhi.w	8005148 <HAL_TIM_ConfigClockSource+0x16c>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	f000 8086 	beq.w	800514e <HAL_TIM_ConfigClockSource+0x172>
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	d87f      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b70      	cmp	r3, #112	; 0x70
 800504a:	d01a      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0xa6>
 800504c:	2b70      	cmp	r3, #112	; 0x70
 800504e:	d87b      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b60      	cmp	r3, #96	; 0x60
 8005052:	d050      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005054:	2b60      	cmp	r3, #96	; 0x60
 8005056:	d877      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d03c      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0xfa>
 800505c:	2b50      	cmp	r3, #80	; 0x50
 800505e:	d873      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d058      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x13a>
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d86f      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b30      	cmp	r3, #48	; 0x30
 800506a:	d064      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	2b30      	cmp	r3, #48	; 0x30
 800506e:	d86b      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b20      	cmp	r3, #32
 8005072:	d060      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b20      	cmp	r3, #32
 8005076:	d867      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d05c      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15a>
 800507c:	2b10      	cmp	r3, #16
 800507e:	d05a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15a>
 8005080:	e062      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005092:	f000 fb1f 	bl	80056d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	609a      	str	r2, [r3, #8]
      break;
 80050ae:	e04f      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050c0:	f000 fb08 	bl	80056d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050d2:	609a      	str	r2, [r3, #8]
      break;
 80050d4:	e03c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fa7c 	bl	80055e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2150      	movs	r1, #80	; 0x50
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fad5 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80050f4:	e02c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005102:	461a      	mov	r2, r3
 8005104:	f000 fa9b 	bl	800563e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2160      	movs	r1, #96	; 0x60
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fac5 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005114:	e01c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	461a      	mov	r2, r3
 8005124:	f000 fa5c 	bl	80055e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2140      	movs	r1, #64	; 0x40
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fab5 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005134:	e00c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f000 faac 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005146:	e003      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
      break;
 800514c:	e000      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800514e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a37      	ldr	r2, [pc, #220]	; (80052ac <TIM_Base_SetConfig+0xf0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0x38>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x38>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a34      	ldr	r2, [pc, #208]	; (80052b0 <TIM_Base_SetConfig+0xf4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x38>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a33      	ldr	r2, [pc, #204]	; (80052b4 <TIM_Base_SetConfig+0xf8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x38>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a32      	ldr	r2, [pc, #200]	; (80052b8 <TIM_Base_SetConfig+0xfc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a28      	ldr	r2, [pc, #160]	; (80052ac <TIM_Base_SetConfig+0xf0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01b      	beq.n	8005246 <TIM_Base_SetConfig+0x8a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005214:	d017      	beq.n	8005246 <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a25      	ldr	r2, [pc, #148]	; (80052b0 <TIM_Base_SetConfig+0xf4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <TIM_Base_SetConfig+0x8a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a24      	ldr	r2, [pc, #144]	; (80052b4 <TIM_Base_SetConfig+0xf8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_Base_SetConfig+0x8a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a23      	ldr	r2, [pc, #140]	; (80052b8 <TIM_Base_SetConfig+0xfc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_Base_SetConfig+0x8a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <TIM_Base_SetConfig+0x100>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_Base_SetConfig+0x8a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <TIM_Base_SetConfig+0x104>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0x8a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a20      	ldr	r2, [pc, #128]	; (80052c4 <TIM_Base_SetConfig+0x108>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <TIM_Base_SetConfig+0xf0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d103      	bne.n	8005286 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800

080052c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 0201 	bic.w	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 0302 	bic.w	r3, r3, #2
 8005310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <TIM_OC1_SetConfig+0xc8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10c      	bne.n	800533e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0308 	bic.w	r3, r3, #8
 800532a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a13      	ldr	r2, [pc, #76]	; (8005390 <TIM_OC1_SetConfig+0xc8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d111      	bne.n	800536a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40010000 	.word	0x40010000

08005394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	f023 0210 	bic.w	r2, r3, #16
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0320 	bic.w	r3, r3, #32
 80053de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <TIM_OC2_SetConfig+0xd4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10d      	bne.n	8005410 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a15      	ldr	r2, [pc, #84]	; (8005468 <TIM_OC2_SetConfig+0xd4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d113      	bne.n	8005440 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800541e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000

0800546c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1d      	ldr	r2, [pc, #116]	; (800553c <TIM_OC3_SetConfig+0xd0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d10d      	bne.n	80054e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a14      	ldr	r2, [pc, #80]	; (800553c <TIM_OC3_SetConfig+0xd0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d113      	bne.n	8005516 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	621a      	str	r2, [r3, #32]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40010000 	.word	0x40010000

08005540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800558a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	031b      	lsls	r3, r3, #12
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a10      	ldr	r2, [pc, #64]	; (80055dc <TIM_OC4_SetConfig+0x9c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d109      	bne.n	80055b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000

080055e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 030a 	bic.w	r3, r3, #10
 800561c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800563e:	b480      	push	{r7}
 8005640:	b087      	sub	sp, #28
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f023 0210 	bic.w	r2, r3, #16
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800567a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f043 0307 	orr.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2201      	movs	r2, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1a      	ldr	r2, [r3, #32]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	43db      	mvns	r3, r3
 8005736:	401a      	ands	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	431a      	orrs	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e050      	b.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d013      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a18      	ldr	r2, [pc, #96]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a16      	ldr	r2, [pc, #88]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a13      	ldr	r2, [pc, #76]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d10c      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40010000 	.word	0x40010000
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800
 8005834:	40000c00 	.word	0x40000c00
 8005838:	40014000 	.word	0x40014000

0800583c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005864:	b084      	sub	sp, #16
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	f107 001c 	add.w	r0, r7, #28
 8005872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005876:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800587a:	2b01      	cmp	r3, #1
 800587c:	d123      	bne.n	80058c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d105      	bne.n	80058ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f001 fae8 	bl	8006e90 <USB_CoreReset>
 80058c0:	4603      	mov	r3, r0
 80058c2:	73fb      	strb	r3, [r7, #15]
 80058c4:	e01b      	b.n	80058fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fadc 	bl	8006e90 <USB_CoreReset>
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
 80058f0:	e005      	b.n	80058fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058fe:	7fbb      	ldrb	r3, [r7, #30]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10b      	bne.n	800591c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f043 0206 	orr.w	r2, r3, #6
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005928:	b004      	add	sp, #16
 800592a:	4770      	bx	lr

0800592c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d165      	bne.n	8005a0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a41      	ldr	r2, [pc, #260]	; (8005a48 <USB_SetTurnaroundTime+0x11c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d906      	bls.n	8005956 <USB_SetTurnaroundTime+0x2a>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a40      	ldr	r2, [pc, #256]	; (8005a4c <USB_SetTurnaroundTime+0x120>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d202      	bcs.n	8005956 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005950:	230f      	movs	r3, #15
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e062      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <USB_SetTurnaroundTime+0x120>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d306      	bcc.n	800596c <USB_SetTurnaroundTime+0x40>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4a3b      	ldr	r2, [pc, #236]	; (8005a50 <USB_SetTurnaroundTime+0x124>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d202      	bcs.n	800596c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005966:	230e      	movs	r3, #14
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e057      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a38      	ldr	r2, [pc, #224]	; (8005a50 <USB_SetTurnaroundTime+0x124>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d306      	bcc.n	8005982 <USB_SetTurnaroundTime+0x56>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4a37      	ldr	r2, [pc, #220]	; (8005a54 <USB_SetTurnaroundTime+0x128>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d202      	bcs.n	8005982 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800597c:	230d      	movs	r3, #13
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e04c      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4a33      	ldr	r2, [pc, #204]	; (8005a54 <USB_SetTurnaroundTime+0x128>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d306      	bcc.n	8005998 <USB_SetTurnaroundTime+0x6c>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a32      	ldr	r2, [pc, #200]	; (8005a58 <USB_SetTurnaroundTime+0x12c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d802      	bhi.n	8005998 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005992:	230c      	movs	r3, #12
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e041      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4a2f      	ldr	r2, [pc, #188]	; (8005a58 <USB_SetTurnaroundTime+0x12c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d906      	bls.n	80059ae <USB_SetTurnaroundTime+0x82>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4a2e      	ldr	r2, [pc, #184]	; (8005a5c <USB_SetTurnaroundTime+0x130>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d802      	bhi.n	80059ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059a8:	230b      	movs	r3, #11
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e036      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <USB_SetTurnaroundTime+0x130>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d906      	bls.n	80059c4 <USB_SetTurnaroundTime+0x98>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <USB_SetTurnaroundTime+0x134>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d802      	bhi.n	80059c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059be:	230a      	movs	r3, #10
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e02b      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4a26      	ldr	r2, [pc, #152]	; (8005a60 <USB_SetTurnaroundTime+0x134>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d906      	bls.n	80059da <USB_SetTurnaroundTime+0xae>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4a25      	ldr	r2, [pc, #148]	; (8005a64 <USB_SetTurnaroundTime+0x138>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d202      	bcs.n	80059da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059d4:	2309      	movs	r3, #9
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e020      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4a21      	ldr	r2, [pc, #132]	; (8005a64 <USB_SetTurnaroundTime+0x138>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d306      	bcc.n	80059f0 <USB_SetTurnaroundTime+0xc4>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4a20      	ldr	r2, [pc, #128]	; (8005a68 <USB_SetTurnaroundTime+0x13c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d802      	bhi.n	80059f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059ea:	2308      	movs	r3, #8
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e015      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <USB_SetTurnaroundTime+0x13c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d906      	bls.n	8005a06 <USB_SetTurnaroundTime+0xda>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <USB_SetTurnaroundTime+0x140>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d202      	bcs.n	8005a06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a00:	2307      	movs	r3, #7
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e00a      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a06:	2306      	movs	r3, #6
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e007      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a12:	2309      	movs	r3, #9
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e001      	b.n	8005a1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a18:	2309      	movs	r3, #9
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	029b      	lsls	r3, r3, #10
 8005a30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005a34:	431a      	orrs	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	00d8acbf 	.word	0x00d8acbf
 8005a4c:	00e4e1c0 	.word	0x00e4e1c0
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	01067380 	.word	0x01067380
 8005a58:	011a499f 	.word	0x011a499f
 8005a5c:	01312cff 	.word	0x01312cff
 8005a60:	014ca43f 	.word	0x014ca43f
 8005a64:	016e3600 	.word	0x016e3600
 8005a68:	01a6ab1f 	.word	0x01a6ab1f
 8005a6c:	01e84800 	.word	0x01e84800

08005a70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f043 0201 	orr.w	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 0201 	bic.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d115      	bne.n	8005b02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ae2:	200a      	movs	r0, #10
 8005ae4:	f7fb fe30 	bl	8001748 <HAL_Delay>
      ms += 10U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	330a      	adds	r3, #10
 8005aec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 f93f 	bl	8006d72 <USB_GetMode>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d01e      	beq.n	8005b38 <USB_SetCurrentMode+0x84>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2bc7      	cmp	r3, #199	; 0xc7
 8005afe:	d9f0      	bls.n	8005ae2 <USB_SetCurrentMode+0x2e>
 8005b00:	e01a      	b.n	8005b38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d115      	bne.n	8005b34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b14:	200a      	movs	r0, #10
 8005b16:	f7fb fe17 	bl	8001748 <HAL_Delay>
      ms += 10U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	330a      	adds	r3, #10
 8005b1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 f926 	bl	8006d72 <USB_GetMode>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <USB_SetCurrentMode+0x84>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2bc7      	cmp	r3, #199	; 0xc7
 8005b30:	d9f0      	bls.n	8005b14 <USB_SetCurrentMode+0x60>
 8005b32:	e001      	b.n	8005b38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e005      	b.n	8005b44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2bc8      	cmp	r3, #200	; 0xc8
 8005b3c:	d101      	bne.n	8005b42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	e009      	b.n	8005b80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3340      	adds	r3, #64	; 0x40
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b0e      	cmp	r3, #14
 8005b84:	d9f2      	bls.n	8005b6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11c      	bne.n	8005bc8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
 8005bc6:	e00b      	b.n	8005be0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005be6:	461a      	mov	r2, r3
 8005be8:	2300      	movs	r3, #0
 8005bea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d10d      	bne.n	8005c10 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f968 	bl	8005ed4 <USB_SetDevSpeed>
 8005c04:	e008      	b.n	8005c18 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c06:	2101      	movs	r1, #1
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f963 	bl	8005ed4 <USB_SetDevSpeed>
 8005c0e:	e003      	b.n	8005c18 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c10:	2103      	movs	r1, #3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f95e 	bl	8005ed4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c18:	2110      	movs	r1, #16
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f8fa 	bl	8005e14 <USB_FlushTxFifo>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f924 	bl	8005e78 <USB_FlushRxFifo>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c40:	461a      	mov	r2, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c5e:	2300      	movs	r3, #0
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	e043      	b.n	8005cec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7a:	d118      	bne.n	8005cae <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e013      	b.n	8005cc0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	e008      	b.n	8005cc0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	461a      	mov	r2, r3
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d3b5      	bcc.n	8005c64 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e043      	b.n	8005d86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d14:	d118      	bne.n	8005d48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	e013      	b.n	8005d5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e008      	b.n	8005d5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	461a      	mov	r2, r3
 8005d56:	2300      	movs	r3, #0
 8005d58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	461a      	mov	r2, r3
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3301      	adds	r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d3b5      	bcc.n	8005cfe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005db2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f043 0210 	orr.w	r2, r3, #16
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699a      	ldr	r2, [r3, #24]
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <USB_DevInit+0x2c4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005dd4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f043 0208 	orr.w	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005de8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d107      	bne.n	8005e00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df8:	f043 0304 	orr.w	r3, r3, #4
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e0c:	b004      	add	sp, #16
 8005e0e:	4770      	bx	lr
 8005e10:	803c3800 	.word	0x803c3800

08005e14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3301      	adds	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e2e:	d901      	bls.n	8005e34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e01b      	b.n	8005e6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	daf2      	bge.n	8005e22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	019b      	lsls	r3, r3, #6
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e58:	d901      	bls.n	8005e5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e006      	b.n	8005e6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d0f0      	beq.n	8005e4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3301      	adds	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e90:	d901      	bls.n	8005e96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e018      	b.n	8005ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	daf2      	bge.n	8005e84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005eb4:	d901      	bls.n	8005eba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e006      	b.n	8005ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d0f0      	beq.n	8005ea8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b087      	sub	sp, #28
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0306 	and.w	r3, r3, #6
 8005f1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d102      	bne.n	8005f2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
 8005f2a:	e00a      	b.n	8005f42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d002      	beq.n	8005f38 <USB_GetDevSpeed+0x32>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b06      	cmp	r3, #6
 8005f36:	d102      	bne.n	8005f3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	75fb      	strb	r3, [r7, #23]
 8005f3c:	e001      	b.n	8005f42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f3e:	230f      	movs	r3, #15
 8005f40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d13a      	bne.n	8005fe2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d155      	bne.n	8006050 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	791b      	ldrb	r3, [r3, #4]
 8005fbe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fc0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	059b      	lsls	r3, r3, #22
 8005fc6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	e036      	b.n	8006050 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe8:	69da      	ldr	r2, [r3, #28]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006000:	4313      	orrs	r3, r2
 8006002:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d11a      	bne.n	8006050 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	791b      	ldrb	r3, [r3, #4]
 8006034:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006036:	430b      	orrs	r3, r1
 8006038:	4313      	orrs	r3, r2
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d161      	bne.n	8006140 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800608e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006092:	d11f      	bne.n	80060d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	2101      	movs	r1, #1
 80060e6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f4:	4013      	ands	r3, r2
 80060f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	2101      	movs	r1, #1
 800610a:	fa01 f303 	lsl.w	r3, r1, r3
 800610e:	b29b      	uxth	r3, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006118:	4013      	ands	r3, r2
 800611a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	0159      	lsls	r1, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	440b      	add	r3, r1
 8006132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006136:	4619      	mov	r1, r3
 8006138:	4b35      	ldr	r3, [pc, #212]	; (8006210 <USB_DeactivateEndpoint+0x1b0>)
 800613a:	4013      	ands	r3, r2
 800613c:	600b      	str	r3, [r1, #0]
 800613e:	e060      	b.n	8006202 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006156:	d11f      	bne.n	8006198 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006176:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006196:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	2101      	movs	r1, #1
 80061aa:	fa01 f303 	lsl.w	r3, r1, r3
 80061ae:	041b      	lsls	r3, r3, #16
 80061b0:	43db      	mvns	r3, r3
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b8:	4013      	ands	r3, r2
 80061ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	2101      	movs	r1, #1
 80061ce:	fa01 f303 	lsl.w	r3, r1, r3
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	43db      	mvns	r3, r3
 80061d6:	68f9      	ldr	r1, [r7, #12]
 80061d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061dc:	4013      	ands	r3, r2
 80061de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	0159      	lsls	r1, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	440b      	add	r3, r1
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	4619      	mov	r1, r3
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <USB_DeactivateEndpoint+0x1b4>)
 80061fe:	4013      	ands	r3, r2
 8006200:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	ec337800 	.word	0xec337800
 8006214:	eff37800 	.word	0xeff37800

08006218 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	; 0x28
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b01      	cmp	r3, #1
 8006236:	f040 817f 	bne.w	8006538 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d132      	bne.n	80062a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006260:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006264:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	440a      	add	r2, r1
 800627c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006284:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a0:	0cdb      	lsrs	r3, r3, #19
 80062a2:	04db      	lsls	r3, r3, #19
 80062a4:	6113      	str	r3, [r2, #16]
 80062a6:	e097      	b.n	80063d8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c2:	0cdb      	lsrs	r3, r3, #19
 80062c4:	04db      	lsls	r3, r3, #19
 80062c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d11a      	bne.n	8006328 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d903      	bls.n	8006306 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006324:	6113      	str	r3, [r2, #16]
 8006326:	e044      	b.n	80063b2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4413      	add	r3, r2
 8006332:	1e5a      	subs	r2, r3, #1
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	fbb2 f3f3 	udiv	r3, r2, r3
 800633c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	8afb      	ldrh	r3, [r7, #22]
 800634e:	04d9      	lsls	r1, r3, #19
 8006350:	4ba4      	ldr	r3, [pc, #656]	; (80065e4 <USB_EPStartXfer+0x3cc>)
 8006352:	400b      	ands	r3, r1
 8006354:	69b9      	ldr	r1, [r7, #24]
 8006356:	0148      	lsls	r0, r1, #5
 8006358:	69f9      	ldr	r1, [r7, #28]
 800635a:	4401      	add	r1, r0
 800635c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006360:	4313      	orrs	r3, r2
 8006362:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	791b      	ldrb	r3, [r3, #4]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d122      	bne.n	80063b2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006386:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800638a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	8afb      	ldrh	r3, [r7, #22]
 800639c:	075b      	lsls	r3, r3, #29
 800639e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80063a2:	69b9      	ldr	r1, [r7, #24]
 80063a4:	0148      	lsls	r0, r1, #5
 80063a6:	69f9      	ldr	r1, [r7, #28]
 80063a8:	4401      	add	r1, r0
 80063aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063ae:	4313      	orrs	r3, r2
 80063b0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c8:	69b9      	ldr	r1, [r7, #24]
 80063ca:	0148      	lsls	r0, r1, #5
 80063cc:	69f9      	ldr	r1, [r7, #28]
 80063ce:	4401      	add	r1, r0
 80063d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063d4:	4313      	orrs	r3, r2
 80063d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d14b      	bne.n	8006476 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	461a      	mov	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d128      	bne.n	8006454 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640e:	2b00      	cmp	r3, #0
 8006410:	d110      	bne.n	8006434 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e00f      	b.n	8006454 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006452:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e166      	b.n	8006744 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	440a      	add	r2, r1
 800648c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006490:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006494:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	791b      	ldrb	r3, [r3, #4]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d015      	beq.n	80064ca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 814e 	beq.w	8006744 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f303 	lsl.w	r3, r1, r3
 80064be:	69f9      	ldr	r1, [r7, #28]
 80064c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c4:	4313      	orrs	r3, r2
 80064c6:	634b      	str	r3, [r1, #52]	; 0x34
 80064c8:	e13c      	b.n	8006744 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d110      	bne.n	80064fc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	e00f      	b.n	800651c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	68d9      	ldr	r1, [r3, #12]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	781a      	ldrb	r2, [r3, #0]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	b298      	uxth	r0, r3
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4603      	mov	r3, r0
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f9b9 	bl	80068a8 <USB_WritePacket>
 8006536:	e105      	b.n	8006744 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006552:	0cdb      	lsrs	r3, r3, #19
 8006554:	04db      	lsls	r3, r3, #19
 8006556:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006572:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006576:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800657a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d132      	bne.n	80065e8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b0:	69b9      	ldr	r1, [r7, #24]
 80065b2:	0148      	lsls	r0, r1, #5
 80065b4:	69f9      	ldr	r1, [r7, #28]
 80065b6:	4401      	add	r1, r0
 80065b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065bc:	4313      	orrs	r3, r2
 80065be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065de:	6113      	str	r3, [r2, #16]
 80065e0:	e062      	b.n	80066a8 <USB_EPStartXfer+0x490>
 80065e2:	bf00      	nop
 80065e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d123      	bne.n	8006638 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	0148      	lsls	r0, r1, #5
 800660a:	69f9      	ldr	r1, [r7, #28]
 800660c:	4401      	add	r1, r0
 800660e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006612:	4313      	orrs	r3, r2
 8006614:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006634:	6113      	str	r3, [r2, #16]
 8006636:	e037      	b.n	80066a8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	691a      	ldr	r2, [r3, #16]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	4413      	add	r3, r2
 8006642:	1e5a      	subs	r2, r3, #1
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	8afa      	ldrh	r2, [r7, #22]
 8006654:	fb03 f202 	mul.w	r2, r3, r2
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	8afb      	ldrh	r3, [r7, #22]
 800666c:	04d9      	lsls	r1, r3, #19
 800666e:	4b38      	ldr	r3, [pc, #224]	; (8006750 <USB_EPStartXfer+0x538>)
 8006670:	400b      	ands	r3, r1
 8006672:	69b9      	ldr	r1, [r7, #24]
 8006674:	0148      	lsls	r0, r1, #5
 8006676:	69f9      	ldr	r1, [r7, #28]
 8006678:	4401      	add	r1, r0
 800667a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800667e:	4313      	orrs	r3, r2
 8006680:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006698:	69b9      	ldr	r1, [r7, #24]
 800669a:	0148      	lsls	r0, r1, #5
 800669c:	69f9      	ldr	r1, [r7, #28]
 800669e:	4401      	add	r1, r0
 80066a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066a4:	4313      	orrs	r3, r2
 80066a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10d      	bne.n	80066ca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	68d9      	ldr	r1, [r3, #12]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c6:	460a      	mov	r2, r1
 80066c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	791b      	ldrb	r3, [r3, #4]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d128      	bne.n	8006724 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d110      	bne.n	8006704 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	0151      	lsls	r1, r2, #5
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	440a      	add	r2, r1
 80066f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e00f      	b.n	8006724 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006722:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800673e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	1ff80000 	.word	0x1ff80000

08006754 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d14a      	bne.n	8006808 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800678a:	f040 8086 	bne.w	800689a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	7812      	ldrb	r2, [r2, #0]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f242 7210 	movw	r2, #10000	; 0x2710
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d902      	bls.n	80067ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ea:	e056      	b.n	800689a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006804:	d0e7      	beq.n	80067d6 <USB_EPStopXfer+0x82>
 8006806:	e048      	b.n	800689a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800681c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006820:	d13b      	bne.n	800689a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006844:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	7812      	ldrb	r2, [r2, #0]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006868:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f242 7210 	movw	r2, #10000	; 0x2710
 8006876:	4293      	cmp	r3, r2
 8006878:	d902      	bls.n	8006880 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
          break;
 800687e:	e00c      	b.n	800689a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006898:	d0e7      	beq.n	800686a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
}
 800689c:	4618      	mov	r0, r3
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4611      	mov	r1, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	460b      	mov	r3, r1
 80068b8:	71fb      	strb	r3, [r7, #7]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d123      	bne.n	8006916 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068ce:	88bb      	ldrh	r3, [r7, #4]
 80068d0:	3303      	adds	r3, #3
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	e018      	b.n	800690e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	031a      	lsls	r2, r3, #12
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e8:	461a      	mov	r2, r3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	3301      	adds	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	3301      	adds	r3, #1
 80068fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	3301      	adds	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	3301      	adds	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	429a      	cmp	r2, r3
 8006914:	d3e2      	bcc.n	80068dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3724      	adds	r7, #36	; 0x24
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006924:	b480      	push	{r7}
 8006926:	b08b      	sub	sp, #44	; 0x2c
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	b29b      	uxth	r3, r3
 8006940:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800694a:	2300      	movs	r3, #0
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	e014      	b.n	800697a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	601a      	str	r2, [r3, #0]
    pDest++;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	3301      	adds	r3, #1
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	3301      	adds	r3, #1
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	3301      	adds	r3, #1
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	3301      	adds	r3, #1
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	3301      	adds	r3, #1
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	6a3a      	ldr	r2, [r7, #32]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	429a      	cmp	r2, r3
 8006980:	d3e6      	bcc.n	8006950 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006982:	8bfb      	ldrh	r3, [r7, #30]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01e      	beq.n	80069c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006992:	461a      	mov	r2, r3
 8006994:	f107 0310 	add.w	r3, r7, #16
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	701a      	strb	r2, [r3, #0]
      i++;
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	3301      	adds	r3, #1
 80069b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	3301      	adds	r3, #1
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80069ba:	8bfb      	ldrh	r3, [r7, #30]
 80069bc:	3b01      	subs	r3, #1
 80069be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069c0:	8bfb      	ldrh	r3, [r7, #30]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ea      	bne.n	800699c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	372c      	adds	r7, #44	; 0x2c
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d12c      	bne.n	8006a4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	db12      	blt.n	8006a28 <USB_EPSetStall+0x54>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00f      	beq.n	8006a28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	e02b      	b.n	8006aa2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	db12      	blt.n	8006a82 <USB_EPSetStall+0xae>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00f      	beq.n	8006a82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006aa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d128      	bne.n	8006b1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	791b      	ldrb	r3, [r3, #4]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d003      	beq.n	8006afc <USB_EPClearStall+0x4c>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	791b      	ldrb	r3, [r3, #4]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d138      	bne.n	8006b6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	e027      	b.n	8006b6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	791b      	ldrb	r3, [r3, #4]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d003      	beq.n	8006b4e <USB_EPClearStall+0x9e>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	791b      	ldrb	r3, [r3, #4]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d10f      	bne.n	8006b6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf6:	f023 0302 	bic.w	r3, r3, #2
 8006bfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c24:	f023 0303 	bic.w	r3, r3, #3
 8006c28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c38:	f043 0302 	orr.w	r3, r3, #2
 8006c3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4013      	ands	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c64:	68fb      	ldr	r3, [r7, #12]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	4013      	ands	r3, r2
 8006c94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	0c1b      	lsrs	r3, r3, #16
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	b29b      	uxth	r3, r3
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b085      	sub	sp, #20
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	4013      	ands	r3, r2
 8006d06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d08:	68bb      	ldr	r3, [r7, #8]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b087      	sub	sp, #28
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	fa22 f303 	lsr.w	r3, r2, r3
 8006d46:	01db      	lsls	r3, r3, #7
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4013      	ands	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d64:	68bb      	ldr	r3, [r7, #8]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006dac:	f023 0307 	bic.w	r3, r3, #7
 8006db0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	333c      	adds	r3, #60	; 0x3c
 8006dea:	3304      	adds	r3, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4a26      	ldr	r2, [pc, #152]	; (8006e8c <USB_EP0_OutStart+0xb8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d90a      	bls.n	8006e0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d101      	bne.n	8006e0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e037      	b.n	8006e7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e14:	461a      	mov	r2, r3
 8006e16:	2300      	movs	r3, #0
 8006e18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3c:	f043 0318 	orr.w	r3, r3, #24
 8006e40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10f      	bne.n	8006e7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e62:	461a      	mov	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006e7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	4f54300a 	.word	0x4f54300a

08006e90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ea8:	d901      	bls.n	8006eae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e022      	b.n	8006ef4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	daf2      	bge.n	8006e9c <USB_CoreReset+0xc>

  count = 10U;
 8006eb6:	230a      	movs	r3, #10
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006eba:	e002      	b.n	8006ec2 <USB_CoreReset+0x32>
  {
    count--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f9      	bne.n	8006ebc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f043 0201 	orr.w	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ee0:	d901      	bls.n	8006ee6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e006      	b.n	8006ef4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d0f0      	beq.n	8006ed4 <USB_CoreReset+0x44>

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f10:	f002 fd22 	bl	8009958 <USBD_static_malloc>
 8006f14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	32b0      	adds	r2, #176	; 0xb0
 8006f26:	2100      	movs	r1, #0
 8006f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e0d4      	b.n	80070da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f30:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006f34:	2100      	movs	r1, #0
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f002 fd52 	bl	80099e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	32b0      	adds	r2, #176	; 0xb0
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	32b0      	adds	r2, #176	; 0xb0
 8006f56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7c1b      	ldrb	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d138      	bne.n	8006fda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f68:	4b5e      	ldr	r3, [pc, #376]	; (80070e4 <USBD_CDC_Init+0x1e4>)
 8006f6a:	7819      	ldrb	r1, [r3, #0]
 8006f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f70:	2202      	movs	r2, #2
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f002 fbcd 	bl	8009712 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f78:	4b5a      	ldr	r3, [pc, #360]	; (80070e4 <USBD_CDC_Init+0x1e4>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	f003 020f 	and.w	r2, r3, #15
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3323      	adds	r3, #35	; 0x23
 8006f8e:	2201      	movs	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f92:	4b55      	ldr	r3, [pc, #340]	; (80070e8 <USBD_CDC_Init+0x1e8>)
 8006f94:	7819      	ldrb	r1, [r3, #0]
 8006f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f002 fbb8 	bl	8009712 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fa2:	4b51      	ldr	r3, [pc, #324]	; (80070e8 <USBD_CDC_Init+0x1e8>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	f003 020f 	and.w	r2, r3, #15
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006fba:	2201      	movs	r2, #1
 8006fbc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006fbe:	4b4b      	ldr	r3, [pc, #300]	; (80070ec <USBD_CDC_Init+0x1ec>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 020f 	and.w	r2, r3, #15
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	331c      	adds	r3, #28
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	e035      	b.n	8007046 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fda:	4b42      	ldr	r3, [pc, #264]	; (80070e4 <USBD_CDC_Init+0x1e4>)
 8006fdc:	7819      	ldrb	r1, [r3, #0]
 8006fde:	2340      	movs	r3, #64	; 0x40
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f002 fb95 	bl	8009712 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	; (80070e4 <USBD_CDC_Init+0x1e4>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f003 020f 	and.w	r2, r3, #15
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	3323      	adds	r3, #35	; 0x23
 8006ffe:	2201      	movs	r2, #1
 8007000:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007002:	4b39      	ldr	r3, [pc, #228]	; (80070e8 <USBD_CDC_Init+0x1e8>)
 8007004:	7819      	ldrb	r1, [r3, #0]
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	2202      	movs	r2, #2
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f002 fb81 	bl	8009712 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007010:	4b35      	ldr	r3, [pc, #212]	; (80070e8 <USBD_CDC_Init+0x1e8>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 020f 	and.w	r2, r3, #15
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	f203 1363 	addw	r3, r3, #355	; 0x163
 8007028:	2201      	movs	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800702c:	4b2f      	ldr	r3, [pc, #188]	; (80070ec <USBD_CDC_Init+0x1ec>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f003 020f 	and.w	r2, r3, #15
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	331c      	adds	r3, #28
 8007042:	2210      	movs	r2, #16
 8007044:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007046:	4b29      	ldr	r3, [pc, #164]	; (80070ec <USBD_CDC_Init+0x1ec>)
 8007048:	7819      	ldrb	r1, [r3, #0]
 800704a:	2308      	movs	r3, #8
 800704c:	2203      	movs	r2, #3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f002 fb5f 	bl	8009712 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007054:	4b25      	ldr	r3, [pc, #148]	; (80070ec <USBD_CDC_Init+0x1ec>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f003 020f 	and.w	r2, r3, #15
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	3323      	adds	r3, #35	; 0x23
 800706a:	2201      	movs	r2, #1
 800706c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	33b0      	adds	r3, #176	; 0xb0
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80070a4:	2302      	movs	r3, #2
 80070a6:	e018      	b.n	80070da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7c1b      	ldrb	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <USBD_CDC_Init+0x1e8>)
 80070b2:	7819      	ldrb	r1, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f002 fc16 	bl	80098f0 <USBD_LL_PrepareReceive>
 80070c4:	e008      	b.n	80070d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070c6:	4b08      	ldr	r3, [pc, #32]	; (80070e8 <USBD_CDC_Init+0x1e8>)
 80070c8:	7819      	ldrb	r1, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070d0:	2340      	movs	r3, #64	; 0x40
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f002 fc0c 	bl	80098f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000093 	.word	0x20000093
 80070e8:	20000094 	.word	0x20000094
 80070ec:	20000095 	.word	0x20000095

080070f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80070fc:	4b3a      	ldr	r3, [pc, #232]	; (80071e8 <USBD_CDC_DeInit+0xf8>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f002 fb2b 	bl	800975e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007108:	4b37      	ldr	r3, [pc, #220]	; (80071e8 <USBD_CDC_DeInit+0xf8>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f003 020f 	and.w	r2, r3, #15
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	440b      	add	r3, r1
 800711c:	3323      	adds	r3, #35	; 0x23
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007122:	4b32      	ldr	r3, [pc, #200]	; (80071ec <USBD_CDC_DeInit+0xfc>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f002 fb18 	bl	800975e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800712e:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <USBD_CDC_DeInit+0xfc>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	f003 020f 	and.w	r2, r3, #15
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	f203 1363 	addw	r3, r3, #355	; 0x163
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800714a:	4b29      	ldr	r3, [pc, #164]	; (80071f0 <USBD_CDC_DeInit+0x100>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f002 fb04 	bl	800975e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007156:	4b26      	ldr	r3, [pc, #152]	; (80071f0 <USBD_CDC_DeInit+0x100>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	f003 020f 	and.w	r2, r3, #15
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	3323      	adds	r3, #35	; 0x23
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007170:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <USBD_CDC_DeInit+0x100>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f003 020f 	and.w	r2, r3, #15
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	440b      	add	r3, r1
 8007184:	331c      	adds	r3, #28
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	32b0      	adds	r2, #176	; 0xb0
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01f      	beq.n	80071dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	33b0      	adds	r3, #176	; 0xb0
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	32b0      	adds	r2, #176	; 0xb0
 80071ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071be:	4618      	mov	r0, r3
 80071c0:	f002 fbd8 	bl	8009974 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	32b0      	adds	r2, #176	; 0xb0
 80071ce:	2100      	movs	r1, #0
 80071d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000093 	.word	0x20000093
 80071ec:	20000094 	.word	0x20000094
 80071f0:	20000095 	.word	0x20000095

080071f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	32b0      	adds	r2, #176	; 0xb0
 8007208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007220:	2303      	movs	r3, #3
 8007222:	e0bf      	b.n	80073a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800722c:	2b00      	cmp	r3, #0
 800722e:	d050      	beq.n	80072d2 <USBD_CDC_Setup+0xde>
 8007230:	2b20      	cmp	r3, #32
 8007232:	f040 80af 	bne.w	8007394 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	88db      	ldrh	r3, [r3, #6]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d03a      	beq.n	80072b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	b25b      	sxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	da1b      	bge.n	8007280 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	33b0      	adds	r3, #176	; 0xb0
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800725e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	88d2      	ldrh	r2, [r2, #6]
 8007264:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	88db      	ldrh	r3, [r3, #6]
 800726a:	2b07      	cmp	r3, #7
 800726c:	bf28      	it	cs
 800726e:	2307      	movcs	r3, #7
 8007270:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	89fa      	ldrh	r2, [r7, #14]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fdab 	bl	8008dd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800727e:	e090      	b.n	80073a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	785a      	ldrb	r2, [r3, #1]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	88db      	ldrh	r3, [r3, #6]
 800728e:	2b3f      	cmp	r3, #63	; 0x3f
 8007290:	d803      	bhi.n	800729a <USBD_CDC_Setup+0xa6>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	b2da      	uxtb	r2, r3
 8007298:	e000      	b.n	800729c <USBD_CDC_Setup+0xa8>
 800729a:	2240      	movs	r2, #64	; 0x40
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80072a2:	6939      	ldr	r1, [r7, #16]
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80072aa:	461a      	mov	r2, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 fdc0 	bl	8008e32 <USBD_CtlPrepareRx>
      break;
 80072b2:	e076      	b.n	80073a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	33b0      	adds	r3, #176	; 0xb0
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	7850      	ldrb	r0, [r2, #1]
 80072ca:	2200      	movs	r2, #0
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	4798      	blx	r3
      break;
 80072d0:	e067      	b.n	80073a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b0b      	cmp	r3, #11
 80072d8:	d851      	bhi.n	800737e <USBD_CDC_Setup+0x18a>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <USBD_CDC_Setup+0xec>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007311 	.word	0x08007311
 80072e4:	0800738d 	.word	0x0800738d
 80072e8:	0800737f 	.word	0x0800737f
 80072ec:	0800737f 	.word	0x0800737f
 80072f0:	0800737f 	.word	0x0800737f
 80072f4:	0800737f 	.word	0x0800737f
 80072f8:	0800737f 	.word	0x0800737f
 80072fc:	0800737f 	.word	0x0800737f
 8007300:	0800737f 	.word	0x0800737f
 8007304:	0800737f 	.word	0x0800737f
 8007308:	0800733b 	.word	0x0800733b
 800730c:	08007365 	.word	0x08007365
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b03      	cmp	r3, #3
 800731a:	d107      	bne.n	800732c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800731c:	f107 030a 	add.w	r3, r7, #10
 8007320:	2202      	movs	r2, #2
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fd55 	bl	8008dd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800732a:	e032      	b.n	8007392 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 fcd3 	bl	8008cda <USBD_CtlError>
            ret = USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	75fb      	strb	r3, [r7, #23]
          break;
 8007338:	e02b      	b.n	8007392 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b03      	cmp	r3, #3
 8007344:	d107      	bne.n	8007356 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007346:	f107 030d 	add.w	r3, r7, #13
 800734a:	2201      	movs	r2, #1
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 fd40 	bl	8008dd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007354:	e01d      	b.n	8007392 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 fcbe 	bl	8008cda <USBD_CtlError>
            ret = USBD_FAIL;
 800735e:	2303      	movs	r3, #3
 8007360:	75fb      	strb	r3, [r7, #23]
          break;
 8007362:	e016      	b.n	8007392 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b03      	cmp	r3, #3
 800736e:	d00f      	beq.n	8007390 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fcb1 	bl	8008cda <USBD_CtlError>
            ret = USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800737c:	e008      	b.n	8007390 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 fcaa 	bl	8008cda <USBD_CtlError>
          ret = USBD_FAIL;
 8007386:	2303      	movs	r3, #3
 8007388:	75fb      	strb	r3, [r7, #23]
          break;
 800738a:	e002      	b.n	8007392 <USBD_CDC_Setup+0x19e>
          break;
 800738c:	bf00      	nop
 800738e:	e008      	b.n	80073a2 <USBD_CDC_Setup+0x1ae>
          break;
 8007390:	bf00      	nop
      }
      break;
 8007392:	e006      	b.n	80073a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fc9f 	bl	8008cda <USBD_CtlError>
      ret = USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	75fb      	strb	r3, [r7, #23]
      break;
 80073a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	32b0      	adds	r2, #176	; 0xb0
 80073ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e065      	b.n	80074a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	32b0      	adds	r2, #176	; 0xb0
 80073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	3314      	adds	r3, #20
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d02f      	beq.n	8007460 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	f003 020f 	and.w	r2, r3, #15
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	3314      	adds	r3, #20
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	f003 010f 	and.w	r1, r3, #15
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	460b      	mov	r3, r1
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	440b      	add	r3, r1
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4403      	add	r3, r0
 8007428:	331c      	adds	r3, #28
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007436:	2b00      	cmp	r3, #0
 8007438:	d112      	bne.n	8007460 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	f003 020f 	and.w	r2, r3, #15
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	3314      	adds	r3, #20
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007452:	78f9      	ldrb	r1, [r7, #3]
 8007454:	2300      	movs	r3, #0
 8007456:	2200      	movs	r2, #0
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f002 fa28 	bl	80098ae <USBD_LL_Transmit>
 800745e:	e01f      	b.n	80074a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	33b0      	adds	r3, #176	; 0xb0
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d010      	beq.n	80074a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	33b0      	adds	r3, #176	; 0xb0
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	32b0      	adds	r2, #176	; 0xb0
 80074c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32b0      	adds	r2, #176	; 0xb0
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	e01a      	b.n	8007512 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 fa26 	bl	8009932 <USBD_LL_GetRxDataSize>
 80074e6:	4602      	mov	r2, r0
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	33b0      	adds	r3, #176	; 0xb0
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800750c:	4611      	mov	r1, r2
 800750e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	32b0      	adds	r2, #176	; 0xb0
 800752c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007530:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	e025      	b.n	8007588 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	33b0      	adds	r3, #176	; 0xb0
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01a      	beq.n	8007586 <USBD_CDC_EP0_RxReady+0x6c>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007556:	2bff      	cmp	r3, #255	; 0xff
 8007558:	d015      	beq.n	8007586 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	33b0      	adds	r3, #176	; 0xb0
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007572:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800757a:	b292      	uxth	r2, r2
 800757c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	22ff      	movs	r2, #255	; 0xff
 8007582:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007598:	2182      	movs	r1, #130	; 0x82
 800759a:	4818      	ldr	r0, [pc, #96]	; (80075fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800759c:	f000 fd62 	bl	8008064 <USBD_GetEpDesc>
 80075a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075a2:	2101      	movs	r1, #1
 80075a4:	4815      	ldr	r0, [pc, #84]	; (80075fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075a6:	f000 fd5d 	bl	8008064 <USBD_GetEpDesc>
 80075aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075ac:	2181      	movs	r1, #129	; 0x81
 80075ae:	4813      	ldr	r0, [pc, #76]	; (80075fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075b0:	f000 fd58 	bl	8008064 <USBD_GetEpDesc>
 80075b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2210      	movs	r2, #16
 80075c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d006      	beq.n	80075d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d0:	711a      	strb	r2, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d006      	beq.n	80075ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e4:	711a      	strb	r2, [r3, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2243      	movs	r2, #67	; 0x43
 80075ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075f0:	4b02      	ldr	r3, [pc, #8]	; (80075fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20000050 	.word	0x20000050

08007600 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007608:	2182      	movs	r1, #130	; 0x82
 800760a:	4818      	ldr	r0, [pc, #96]	; (800766c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800760c:	f000 fd2a 	bl	8008064 <USBD_GetEpDesc>
 8007610:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007612:	2101      	movs	r1, #1
 8007614:	4815      	ldr	r0, [pc, #84]	; (800766c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007616:	f000 fd25 	bl	8008064 <USBD_GetEpDesc>
 800761a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800761c:	2181      	movs	r1, #129	; 0x81
 800761e:	4813      	ldr	r0, [pc, #76]	; (800766c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007620:	f000 fd20 	bl	8008064 <USBD_GetEpDesc>
 8007624:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2210      	movs	r2, #16
 8007630:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d006      	beq.n	8007646 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2200      	movs	r2, #0
 800763c:	711a      	strb	r2, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f042 0202 	orr.w	r2, r2, #2
 8007644:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d006      	beq.n	800765a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	711a      	strb	r2, [r3, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f042 0202 	orr.w	r2, r2, #2
 8007658:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2243      	movs	r2, #67	; 0x43
 800765e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007660:	4b02      	ldr	r3, [pc, #8]	; (800766c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000050 	.word	0x20000050

08007670 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007678:	2182      	movs	r1, #130	; 0x82
 800767a:	4818      	ldr	r0, [pc, #96]	; (80076dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800767c:	f000 fcf2 	bl	8008064 <USBD_GetEpDesc>
 8007680:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007682:	2101      	movs	r1, #1
 8007684:	4815      	ldr	r0, [pc, #84]	; (80076dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007686:	f000 fced 	bl	8008064 <USBD_GetEpDesc>
 800768a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800768c:	2181      	movs	r1, #129	; 0x81
 800768e:	4813      	ldr	r0, [pc, #76]	; (80076dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007690:	f000 fce8 	bl	8008064 <USBD_GetEpDesc>
 8007694:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2210      	movs	r2, #16
 80076a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d006      	beq.n	80076b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076b0:	711a      	strb	r2, [r3, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d006      	beq.n	80076ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076c4:	711a      	strb	r2, [r3, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2243      	movs	r2, #67	; 0x43
 80076ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076d0:	4b02      	ldr	r3, [pc, #8]	; (80076dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000050 	.word	0x20000050

080076e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	220a      	movs	r2, #10
 80076ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076ee:	4b03      	ldr	r3, [pc, #12]	; (80076fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	2000000c 	.word	0x2000000c

08007700 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007710:	2303      	movs	r3, #3
 8007712:	e009      	b.n	8007728 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	33b0      	adds	r3, #176	; 0xb0
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	32b0      	adds	r2, #176	; 0xb0
 800774a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	e008      	b.n	800776c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	32b0      	adds	r2, #176	; 0xb0
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e004      	b.n	80077a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32b0      	adds	r2, #176	; 0xb0
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80077cc:	2301      	movs	r3, #1
 80077ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e025      	b.n	8007826 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11f      	bne.n	8007824 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80077ec:	4b10      	ldr	r3, [pc, #64]	; (8007830 <USBD_CDC_TransmitPacket+0x7c>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f003 020f 	and.w	r2, r3, #15
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4403      	add	r3, r0
 8007806:	3314      	adds	r3, #20
 8007808:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <USBD_CDC_TransmitPacket+0x7c>)
 800780c:	7819      	ldrb	r1, [r3, #0]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f002 f847 	bl	80098ae <USBD_LL_Transmit>

    ret = USBD_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000093 	.word	0x20000093

08007834 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	32b0      	adds	r2, #176	; 0xb0
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	32b0      	adds	r2, #176	; 0xb0
 8007856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	e018      	b.n	8007894 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c1b      	ldrb	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800786a:	4b0c      	ldr	r3, [pc, #48]	; (800789c <USBD_CDC_ReceivePacket+0x68>)
 800786c:	7819      	ldrb	r1, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f002 f839 	bl	80098f0 <USBD_LL_PrepareReceive>
 800787e:	e008      	b.n	8007892 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <USBD_CDC_ReceivePacket+0x68>)
 8007882:	7819      	ldrb	r1, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800788a:	2340      	movs	r3, #64	; 0x40
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f002 f82f 	bl	80098f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20000094 	.word	0x20000094

080078a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e01f      	b.n	80078f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	79fa      	ldrb	r2, [r7, #7]
 80078ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f001 fea9 	bl	8009644 <USBD_LL_Init>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	e025      	b.n	8007964 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	32ae      	adds	r2, #174	; 0xae
 800792a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00f      	beq.n	8007954 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32ae      	adds	r2, #174	; 0xae
 800793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	f107 020e 	add.w	r2, r7, #14
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	4602      	mov	r2, r0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 feb1 	bl	80096dc <USBD_LL_Start>
 800797a:	4603      	mov	r3, r0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800798c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	4611      	mov	r1, r2
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	4798      	blx	r3
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	78fa      	ldrb	r2, [r7, #3]
 80079ec:	4611      	mov	r1, r2
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f924 	bl	8008c66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d01a      	beq.n	8007a78 <USBD_LL_SetupStage+0x72>
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d822      	bhi.n	8007a8c <USBD_LL_SetupStage+0x86>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <USBD_LL_SetupStage+0x4a>
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d00a      	beq.n	8007a64 <USBD_LL_SetupStage+0x5e>
 8007a4e:	e01d      	b.n	8007a8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fb79 	bl	8008150 <USBD_StdDevReq>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73fb      	strb	r3, [r7, #15]
      break;
 8007a62:	e020      	b.n	8007aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fbe1 	bl	8008234 <USBD_StdItfReq>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]
      break;
 8007a76:	e016      	b.n	8007aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc43 	bl	800830c <USBD_StdEPReq>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8a:	e00c      	b.n	8007aa6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 fe7e 	bl	800979c <USBD_LL_StallEP>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa4:	bf00      	nop
  }

  return ret;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d177      	bne.n	8007bb8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	f040 80a1 	bne.w	8007c1e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	8992      	ldrh	r2, [r2, #12]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d91c      	bls.n	8007b22 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	8992      	ldrh	r2, [r2, #12]
 8007af0:	1a9a      	subs	r2, r3, r2
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	8992      	ldrh	r2, [r2, #12]
 8007afe:	441a      	add	r2, r3
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	6919      	ldr	r1, [r3, #16]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	899b      	ldrh	r3, [r3, #12]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4293      	cmp	r3, r2
 8007b14:	bf38      	it	cc
 8007b16:	4613      	movcc	r3, r2
 8007b18:	461a      	mov	r2, r3
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 f9aa 	bl	8008e74 <USBD_CtlContinueRx>
 8007b20:	e07d      	b.n	8007c1e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b28:	f003 031f 	and.w	r3, r3, #31
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d014      	beq.n	8007b5a <USBD_LL_DataOutStage+0xaa>
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d81d      	bhi.n	8007b70 <USBD_LL_DataOutStage+0xc0>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <USBD_LL_DataOutStage+0x8e>
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d003      	beq.n	8007b44 <USBD_LL_DataOutStage+0x94>
 8007b3c:	e018      	b.n	8007b70 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75bb      	strb	r3, [r7, #22]
            break;
 8007b42:	e018      	b.n	8007b76 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 fa6e 	bl	8008030 <USBD_CoreFindIF>
 8007b54:	4603      	mov	r3, r0
 8007b56:	75bb      	strb	r3, [r7, #22]
            break;
 8007b58:	e00d      	b.n	8007b76 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	4619      	mov	r1, r3
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fa70 	bl	800804a <USBD_CoreFindEP>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75bb      	strb	r3, [r7, #22]
            break;
 8007b6e:	e002      	b.n	8007b76 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	75bb      	strb	r3, [r7, #22]
            break;
 8007b74:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b76:	7dbb      	ldrb	r3, [r7, #22]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d119      	bne.n	8007bb0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d113      	bne.n	8007bb0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b88:	7dba      	ldrb	r2, [r7, #22]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	32ae      	adds	r2, #174	; 0xae
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007b98:	7dba      	ldrb	r2, [r7, #22]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ba0:	7dba      	ldrb	r2, [r7, #22]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	32ae      	adds	r2, #174	; 0xae
 8007ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f001 f970 	bl	8008e96 <USBD_CtlSendStatus>
 8007bb6:	e032      	b.n	8007c1e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007bb8:	7afb      	ldrb	r3, [r7, #11]
 8007bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fa41 	bl	800804a <USBD_CoreFindEP>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bcc:	7dbb      	ldrb	r3, [r7, #22]
 8007bce:	2bff      	cmp	r3, #255	; 0xff
 8007bd0:	d025      	beq.n	8007c1e <USBD_LL_DataOutStage+0x16e>
 8007bd2:	7dbb      	ldrb	r3, [r7, #22]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d122      	bne.n	8007c1e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d117      	bne.n	8007c14 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007be4:	7dba      	ldrb	r2, [r7, #22]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	32ae      	adds	r2, #174	; 0xae
 8007bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00f      	beq.n	8007c14 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007bf4:	7dba      	ldrb	r2, [r7, #22]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007bfc:	7dba      	ldrb	r2, [r7, #22]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	32ae      	adds	r2, #174	; 0xae
 8007c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	7afa      	ldrb	r2, [r7, #11]
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	4798      	blx	r3
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	e000      	b.n	8007c20 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	460b      	mov	r3, r1
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007c36:	7afb      	ldrb	r3, [r7, #11]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d178      	bne.n	8007d2e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3314      	adds	r3, #20
 8007c40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d163      	bne.n	8007d14 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	8992      	ldrh	r2, [r2, #12]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d91c      	bls.n	8007c92 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	8992      	ldrh	r2, [r2, #12]
 8007c60:	1a9a      	subs	r2, r3, r2
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	8992      	ldrh	r2, [r2, #12]
 8007c6e:	441a      	add	r2, r3
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6919      	ldr	r1, [r3, #16]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f001 f8c6 	bl	8008e10 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c84:	2300      	movs	r3, #0
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f001 fe30 	bl	80098f0 <USBD_LL_PrepareReceive>
 8007c90:	e040      	b.n	8007d14 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	899b      	ldrh	r3, [r3, #12]
 8007c96:	461a      	mov	r2, r3
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d11c      	bne.n	8007cda <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d316      	bcc.n	8007cda <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d20f      	bcs.n	8007cda <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f001 f8a6 	bl	8008e10 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ccc:	2300      	movs	r3, #0
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f001 fe0c 	bl	80098f0 <USBD_LL_PrepareReceive>
 8007cd8:	e01c      	b.n	8007d14 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d10f      	bne.n	8007d06 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d009      	beq.n	8007d06 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d06:	2180      	movs	r1, #128	; 0x80
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f001 fd47 	bl	800979c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f001 f8d4 	bl	8008ebc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d03a      	beq.n	8007d94 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fe30 	bl	8007984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d2c:	e032      	b.n	8007d94 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d2e:	7afb      	ldrb	r3, [r7, #11]
 8007d30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	4619      	mov	r1, r3
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f986 	bl	800804a <USBD_CoreFindEP>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	2bff      	cmp	r3, #255	; 0xff
 8007d46:	d025      	beq.n	8007d94 <USBD_LL_DataInStage+0x16c>
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d122      	bne.n	8007d94 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d11c      	bne.n	8007d94 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d5a:	7dfa      	ldrb	r2, [r7, #23]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	32ae      	adds	r2, #174	; 0xae
 8007d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d014      	beq.n	8007d94 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007d6a:	7dfa      	ldrb	r2, [r7, #23]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d72:	7dfa      	ldrb	r2, [r7, #23]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	32ae      	adds	r2, #174	; 0xae
 8007d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	7afa      	ldrb	r2, [r7, #11]
 8007d80:	4611      	mov	r1, r2
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	4798      	blx	r3
 8007d86:	4603      	mov	r3, r0
 8007d88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d8a:	7dbb      	ldrb	r3, [r7, #22]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007d90:	7dbb      	ldrb	r3, [r7, #22]
 8007d92:	e000      	b.n	8007d96 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d014      	beq.n	8007e04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00e      	beq.n	8007e04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6852      	ldr	r2, [r2, #4]
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	4611      	mov	r1, r2
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	4798      	blx	r3
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e04:	2340      	movs	r3, #64	; 0x40
 8007e06:	2200      	movs	r2, #0
 8007e08:	2100      	movs	r1, #0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 fc81 	bl	8009712 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2240      	movs	r2, #64	; 0x40
 8007e1c:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e20:	2340      	movs	r3, #64	; 0x40
 8007e22:	2200      	movs	r2, #0
 8007e24:	2180      	movs	r1, #128	; 0x80
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fc73 	bl	8009712 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2240      	movs	r2, #64	; 0x40
 8007e38:	841a      	strh	r2, [r3, #32]

  return ret;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	78fa      	ldrb	r2, [r7, #3]
 8007e54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d006      	beq.n	8007e86 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2204      	movs	r2, #4
 8007e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d106      	bne.n	8007ebe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d110      	bne.n	8007f02 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	32ae      	adds	r2, #174	; 0xae
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e01c      	b.n	8007f68 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d115      	bne.n	8007f66 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	32ae      	adds	r2, #174	; 0xae
 8007f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	32ae      	adds	r2, #174	; 0xae
 8007f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	78fa      	ldrb	r2, [r7, #3]
 8007f60:	4611      	mov	r1, r2
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	32ae      	adds	r2, #174	; 0xae
 8007f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e01c      	b.n	8007fcc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d115      	bne.n	8007fca <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	32ae      	adds	r2, #174	; 0xae
 8007fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00b      	beq.n	8007fca <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	32ae      	adds	r2, #174	; 0xae
 8007fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	78fa      	ldrb	r2, [r7, #3]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00e      	beq.n	8008026 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6852      	ldr	r2, [r2, #4]
 8008014:	b2d2      	uxtb	r2, r2
 8008016:	4611      	mov	r1, r2
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008022:	2303      	movs	r3, #3
 8008024:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800803c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008056:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008078:	2300      	movs	r3, #0
 800807a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	885b      	ldrh	r3, [r3, #2]
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	429a      	cmp	r2, r3
 800808a:	d920      	bls.n	80080ce <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008094:	e013      	b.n	80080be <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008096:	f107 030a 	add.w	r3, r7, #10
 800809a:	4619      	mov	r1, r3
 800809c:	6978      	ldr	r0, [r7, #20]
 800809e:	f000 f81b 	bl	80080d8 <USBD_GetNextDesc>
 80080a2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	785b      	ldrb	r3, [r3, #1]
 80080a8:	2b05      	cmp	r3, #5
 80080aa:	d108      	bne.n	80080be <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	789b      	ldrb	r3, [r3, #2]
 80080b4:	78fa      	ldrb	r2, [r7, #3]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d008      	beq.n	80080cc <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	885b      	ldrh	r3, [r3, #2]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	897b      	ldrh	r3, [r7, #10]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d8e5      	bhi.n	8008096 <USBD_GetEpDesc+0x32>
 80080ca:	e000      	b.n	80080ce <USBD_GetEpDesc+0x6a>
          break;
 80080cc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80080ce:	693b      	ldr	r3, [r7, #16]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	881a      	ldrh	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	4413      	add	r3, r2
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008104:	68fb      	ldr	r3, [r7, #12]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008112:	b480      	push	{r7}
 8008114:	b087      	sub	sp, #28
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	3301      	adds	r3, #1
 8008128:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008130:	8a3b      	ldrh	r3, [r7, #16]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	b21a      	sxth	r2, r3
 8008136:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800813a:	4313      	orrs	r3, r2
 800813c:	b21b      	sxth	r3, r3
 800813e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008140:	89fb      	ldrh	r3, [r7, #14]
}
 8008142:	4618      	mov	r0, r3
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008166:	2b40      	cmp	r3, #64	; 0x40
 8008168:	d005      	beq.n	8008176 <USBD_StdDevReq+0x26>
 800816a:	2b40      	cmp	r3, #64	; 0x40
 800816c:	d857      	bhi.n	800821e <USBD_StdDevReq+0xce>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00f      	beq.n	8008192 <USBD_StdDevReq+0x42>
 8008172:	2b20      	cmp	r3, #32
 8008174:	d153      	bne.n	800821e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	32ae      	adds	r2, #174	; 0xae
 8008180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]
      break;
 8008190:	e04a      	b.n	8008228 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b09      	cmp	r3, #9
 8008198:	d83b      	bhi.n	8008212 <USBD_StdDevReq+0xc2>
 800819a:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <USBD_StdDevReq+0x50>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081f5 	.word	0x080081f5
 80081a4:	08008209 	.word	0x08008209
 80081a8:	08008213 	.word	0x08008213
 80081ac:	080081ff 	.word	0x080081ff
 80081b0:	08008213 	.word	0x08008213
 80081b4:	080081d3 	.word	0x080081d3
 80081b8:	080081c9 	.word	0x080081c9
 80081bc:	08008213 	.word	0x08008213
 80081c0:	080081eb 	.word	0x080081eb
 80081c4:	080081dd 	.word	0x080081dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa3e 	bl	800864c <USBD_GetDescriptor>
          break;
 80081d0:	e024      	b.n	800821c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fba3 	bl	8008920 <USBD_SetAddress>
          break;
 80081da:	e01f      	b.n	800821c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fbe2 	bl	80089a8 <USBD_SetConfig>
 80081e4:	4603      	mov	r3, r0
 80081e6:	73fb      	strb	r3, [r7, #15]
          break;
 80081e8:	e018      	b.n	800821c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fc85 	bl	8008afc <USBD_GetConfig>
          break;
 80081f2:	e013      	b.n	800821c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fcb6 	bl	8008b68 <USBD_GetStatus>
          break;
 80081fc:	e00e      	b.n	800821c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fce5 	bl	8008bd0 <USBD_SetFeature>
          break;
 8008206:	e009      	b.n	800821c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fd09 	bl	8008c22 <USBD_ClrFeature>
          break;
 8008210:	e004      	b.n	800821c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fd60 	bl	8008cda <USBD_CtlError>
          break;
 800821a:	bf00      	nop
      }
      break;
 800821c:	e004      	b.n	8008228 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fd5a 	bl	8008cda <USBD_CtlError>
      break;
 8008226:	bf00      	nop
  }

  return ret;
 8008228:	7bfb      	ldrb	r3, [r7, #15]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop

08008234 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d005      	beq.n	800825a <USBD_StdItfReq+0x26>
 800824e:	2b40      	cmp	r3, #64	; 0x40
 8008250:	d852      	bhi.n	80082f8 <USBD_StdItfReq+0xc4>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <USBD_StdItfReq+0x26>
 8008256:	2b20      	cmp	r3, #32
 8008258:	d14e      	bne.n	80082f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008260:	b2db      	uxtb	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	2b02      	cmp	r3, #2
 8008266:	d840      	bhi.n	80082ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	889b      	ldrh	r3, [r3, #4]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b01      	cmp	r3, #1
 8008270:	d836      	bhi.n	80082e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	889b      	ldrh	r3, [r3, #4]
 8008276:	b2db      	uxtb	r3, r3
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fed8 	bl	8008030 <USBD_CoreFindIF>
 8008280:	4603      	mov	r3, r0
 8008282:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	2bff      	cmp	r3, #255	; 0xff
 8008288:	d01d      	beq.n	80082c6 <USBD_StdItfReq+0x92>
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d11a      	bne.n	80082c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008290:	7bba      	ldrb	r2, [r7, #14]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	32ae      	adds	r2, #174	; 0xae
 8008296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00f      	beq.n	80082c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80082a0:	7bba      	ldrb	r2, [r7, #14]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082a8:	7bba      	ldrb	r2, [r7, #14]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32ae      	adds	r2, #174	; 0xae
 80082ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082be:	e004      	b.n	80082ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80082c0:	2303      	movs	r3, #3
 80082c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082c4:	e001      	b.n	80082ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80082c6:	2303      	movs	r3, #3
 80082c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	88db      	ldrh	r3, [r3, #6]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d110      	bne.n	80082f4 <USBD_StdItfReq+0xc0>
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10d      	bne.n	80082f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fddc 	bl	8008e96 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082de:	e009      	b.n	80082f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fcf9 	bl	8008cda <USBD_CtlError>
          break;
 80082e8:	e004      	b.n	80082f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fcf4 	bl	8008cda <USBD_CtlError>
          break;
 80082f2:	e000      	b.n	80082f6 <USBD_StdItfReq+0xc2>
          break;
 80082f4:	bf00      	nop
      }
      break;
 80082f6:	e004      	b.n	8008302 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fced 	bl	8008cda <USBD_CtlError>
      break;
 8008300:	bf00      	nop
  }

  return ret;
 8008302:	7bfb      	ldrb	r3, [r7, #15]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	889b      	ldrh	r3, [r3, #4]
 800831e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	d007      	beq.n	800833c <USBD_StdEPReq+0x30>
 800832c:	2b40      	cmp	r3, #64	; 0x40
 800832e:	f200 8181 	bhi.w	8008634 <USBD_StdEPReq+0x328>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d02a      	beq.n	800838c <USBD_StdEPReq+0x80>
 8008336:	2b20      	cmp	r3, #32
 8008338:	f040 817c 	bne.w	8008634 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff fe82 	bl	800804a <USBD_CoreFindEP>
 8008346:	4603      	mov	r3, r0
 8008348:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800834a:	7b7b      	ldrb	r3, [r7, #13]
 800834c:	2bff      	cmp	r3, #255	; 0xff
 800834e:	f000 8176 	beq.w	800863e <USBD_StdEPReq+0x332>
 8008352:	7b7b      	ldrb	r3, [r7, #13]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f040 8172 	bne.w	800863e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800835a:	7b7a      	ldrb	r2, [r7, #13]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008362:	7b7a      	ldrb	r2, [r7, #13]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	32ae      	adds	r2, #174	; 0xae
 8008368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 8165 	beq.w	800863e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008374:	7b7a      	ldrb	r2, [r7, #13]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32ae      	adds	r2, #174	; 0xae
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
 8008386:	4603      	mov	r3, r0
 8008388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800838a:	e158      	b.n	800863e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d008      	beq.n	80083a6 <USBD_StdEPReq+0x9a>
 8008394:	2b03      	cmp	r3, #3
 8008396:	f300 8147 	bgt.w	8008628 <USBD_StdEPReq+0x31c>
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 809b 	beq.w	80084d6 <USBD_StdEPReq+0x1ca>
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d03c      	beq.n	800841e <USBD_StdEPReq+0x112>
 80083a4:	e140      	b.n	8008628 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d002      	beq.n	80083b8 <USBD_StdEPReq+0xac>
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d016      	beq.n	80083e4 <USBD_StdEPReq+0xd8>
 80083b6:	e02c      	b.n	8008412 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00d      	beq.n	80083da <USBD_StdEPReq+0xce>
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b80      	cmp	r3, #128	; 0x80
 80083c2:	d00a      	beq.n	80083da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 f9e7 	bl	800979c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083ce:	2180      	movs	r1, #128	; 0x80
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 f9e3 	bl	800979c <USBD_LL_StallEP>
 80083d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083d8:	e020      	b.n	800841c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fc7c 	bl	8008cda <USBD_CtlError>
              break;
 80083e2:	e01b      	b.n	800841c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	885b      	ldrh	r3, [r3, #2]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10e      	bne.n	800840a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <USBD_StdEPReq+0xfe>
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b80      	cmp	r3, #128	; 0x80
 80083f6:	d008      	beq.n	800840a <USBD_StdEPReq+0xfe>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	88db      	ldrh	r3, [r3, #6]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f9c9 	bl	800979c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fd43 	bl	8008e96 <USBD_CtlSendStatus>

              break;
 8008410:	e004      	b.n	800841c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fc60 	bl	8008cda <USBD_CtlError>
              break;
 800841a:	bf00      	nop
          }
          break;
 800841c:	e109      	b.n	8008632 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d002      	beq.n	8008430 <USBD_StdEPReq+0x124>
 800842a:	2b03      	cmp	r3, #3
 800842c:	d016      	beq.n	800845c <USBD_StdEPReq+0x150>
 800842e:	e04b      	b.n	80084c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00d      	beq.n	8008452 <USBD_StdEPReq+0x146>
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b80      	cmp	r3, #128	; 0x80
 800843a:	d00a      	beq.n	8008452 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 f9ab 	bl	800979c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008446:	2180      	movs	r1, #128	; 0x80
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f9a7 	bl	800979c <USBD_LL_StallEP>
 800844e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008450:	e040      	b.n	80084d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fc40 	bl	8008cda <USBD_CtlError>
              break;
 800845a:	e03b      	b.n	80084d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	885b      	ldrh	r3, [r3, #2]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d136      	bne.n	80084d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 f9b1 	bl	80097da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fd0c 	bl	8008e96 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fde1 	bl	800804a <USBD_CoreFindEP>
 8008488:	4603      	mov	r3, r0
 800848a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800848c:	7b7b      	ldrb	r3, [r7, #13]
 800848e:	2bff      	cmp	r3, #255	; 0xff
 8008490:	d01f      	beq.n	80084d2 <USBD_StdEPReq+0x1c6>
 8008492:	7b7b      	ldrb	r3, [r7, #13]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d11c      	bne.n	80084d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008498:	7b7a      	ldrb	r2, [r7, #13]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80084a0:	7b7a      	ldrb	r2, [r7, #13]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	32ae      	adds	r2, #174	; 0xae
 80084a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d010      	beq.n	80084d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084b0:	7b7a      	ldrb	r2, [r7, #13]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	32ae      	adds	r2, #174	; 0xae
 80084b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80084c6:	e004      	b.n	80084d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fc05 	bl	8008cda <USBD_CtlError>
              break;
 80084d0:	e000      	b.n	80084d4 <USBD_StdEPReq+0x1c8>
              break;
 80084d2:	bf00      	nop
          }
          break;
 80084d4:	e0ad      	b.n	8008632 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d002      	beq.n	80084e8 <USBD_StdEPReq+0x1dc>
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d033      	beq.n	800854e <USBD_StdEPReq+0x242>
 80084e6:	e099      	b.n	800861c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d007      	beq.n	80084fe <USBD_StdEPReq+0x1f2>
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b80      	cmp	r3, #128	; 0x80
 80084f2:	d004      	beq.n	80084fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fbef 	bl	8008cda <USBD_CtlError>
                break;
 80084fc:	e093      	b.n	8008626 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008502:	2b00      	cmp	r3, #0
 8008504:	da0b      	bge.n	800851e <USBD_StdEPReq+0x212>
 8008506:	7bbb      	ldrb	r3, [r7, #14]
 8008508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	3310      	adds	r3, #16
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	4413      	add	r3, r2
 800851a:	3304      	adds	r3, #4
 800851c:	e00b      	b.n	8008536 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	4413      	add	r3, r2
 8008534:	3304      	adds	r3, #4
 8008536:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2200      	movs	r2, #0
 800853c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	330e      	adds	r3, #14
 8008542:	2202      	movs	r2, #2
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fc44 	bl	8008dd4 <USBD_CtlSendData>
              break;
 800854c:	e06b      	b.n	8008626 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800854e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008552:	2b00      	cmp	r3, #0
 8008554:	da11      	bge.n	800857a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	f003 020f 	and.w	r2, r3, #15
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	3323      	adds	r3, #35	; 0x23
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d117      	bne.n	80085a0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fbb1 	bl	8008cda <USBD_CtlError>
                  break;
 8008578:	e055      	b.n	8008626 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	f003 020f 	and.w	r2, r3, #15
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	440b      	add	r3, r1
 800858c:	f203 1363 	addw	r3, r3, #355	; 0x163
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d104      	bne.n	80085a0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fb9e 	bl	8008cda <USBD_CtlError>
                  break;
 800859e:	e042      	b.n	8008626 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	da0b      	bge.n	80085c0 <USBD_StdEPReq+0x2b4>
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	3310      	adds	r3, #16
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4413      	add	r3, r2
 80085bc:	3304      	adds	r3, #4
 80085be:	e00b      	b.n	80085d8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	4413      	add	r3, r2
 80085d6:	3304      	adds	r3, #4
 80085d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <USBD_StdEPReq+0x2da>
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b80      	cmp	r3, #128	; 0x80
 80085e4:	d103      	bne.n	80085ee <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2200      	movs	r2, #0
 80085ea:	739a      	strb	r2, [r3, #14]
 80085ec:	e00e      	b.n	800860c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 f910 	bl	8009818 <USBD_LL_IsStallEP>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2201      	movs	r2, #1
 8008602:	739a      	strb	r2, [r3, #14]
 8008604:	e002      	b.n	800860c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2200      	movs	r2, #0
 800860a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	330e      	adds	r3, #14
 8008610:	2202      	movs	r2, #2
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fbdd 	bl	8008dd4 <USBD_CtlSendData>
              break;
 800861a:	e004      	b.n	8008626 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fb5b 	bl	8008cda <USBD_CtlError>
              break;
 8008624:	bf00      	nop
          }
          break;
 8008626:	e004      	b.n	8008632 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fb55 	bl	8008cda <USBD_CtlError>
          break;
 8008630:	bf00      	nop
      }
      break;
 8008632:	e005      	b.n	8008640 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fb4f 	bl	8008cda <USBD_CtlError>
      break;
 800863c:	e000      	b.n	8008640 <USBD_StdEPReq+0x334>
      break;
 800863e:	bf00      	nop
  }

  return ret;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	b29b      	uxth	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	2b06      	cmp	r3, #6
 800866e:	f200 8128 	bhi.w	80088c2 <USBD_GetDescriptor+0x276>
 8008672:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <USBD_GetDescriptor+0x2c>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	08008695 	.word	0x08008695
 800867c:	080086ad 	.word	0x080086ad
 8008680:	080086ed 	.word	0x080086ed
 8008684:	080088c3 	.word	0x080088c3
 8008688:	080088c3 	.word	0x080088c3
 800868c:	08008863 	.word	0x08008863
 8008690:	0800888f 	.word	0x0800888f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	f107 0108 	add.w	r1, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
      break;
 80086aa:	e112      	b.n	80088d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7c1b      	ldrb	r3, [r3, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10d      	bne.n	80086d0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	f107 0208 	add.w	r2, r7, #8
 80086c0:	4610      	mov	r0, r2
 80086c2:	4798      	blx	r3
 80086c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	2202      	movs	r2, #2
 80086cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086ce:	e100      	b.n	80088d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	f107 0208 	add.w	r2, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3301      	adds	r3, #1
 80086e6:	2202      	movs	r2, #2
 80086e8:	701a      	strb	r2, [r3, #0]
      break;
 80086ea:	e0f2      	b.n	80088d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	885b      	ldrh	r3, [r3, #2]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b05      	cmp	r3, #5
 80086f4:	f200 80ac 	bhi.w	8008850 <USBD_GetDescriptor+0x204>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <USBD_GetDescriptor+0xb4>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008719 	.word	0x08008719
 8008704:	0800874d 	.word	0x0800874d
 8008708:	08008781 	.word	0x08008781
 800870c:	080087b5 	.word	0x080087b5
 8008710:	080087e9 	.word	0x080087e9
 8008714:	0800881d 	.word	0x0800881d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00b      	beq.n	800873c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7c12      	ldrb	r2, [r2, #16]
 8008730:	f107 0108 	add.w	r1, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873a:	e091      	b.n	8008860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 facb 	bl	8008cda <USBD_CtlError>
            err++;
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	3301      	adds	r3, #1
 8008748:	72fb      	strb	r3, [r7, #11]
          break;
 800874a:	e089      	b.n	8008860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	7c12      	ldrb	r2, [r2, #16]
 8008764:	f107 0108 	add.w	r1, r7, #8
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
 800876c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800876e:	e077      	b.n	8008860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fab1 	bl	8008cda <USBD_CtlError>
            err++;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	3301      	adds	r3, #1
 800877c:	72fb      	strb	r3, [r7, #11]
          break;
 800877e:	e06f      	b.n	8008860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	7c12      	ldrb	r2, [r2, #16]
 8008798:	f107 0108 	add.w	r1, r7, #8
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
 80087a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a2:	e05d      	b.n	8008860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa97 	bl	8008cda <USBD_CtlError>
            err++;
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	3301      	adds	r3, #1
 80087b0:	72fb      	strb	r3, [r7, #11]
          break;
 80087b2:	e055      	b.n	8008860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	7c12      	ldrb	r2, [r2, #16]
 80087cc:	f107 0108 	add.w	r1, r7, #8
 80087d0:	4610      	mov	r0, r2
 80087d2:	4798      	blx	r3
 80087d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d6:	e043      	b.n	8008860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa7d 	bl	8008cda <USBD_CtlError>
            err++;
 80087e0:	7afb      	ldrb	r3, [r7, #11]
 80087e2:	3301      	adds	r3, #1
 80087e4:	72fb      	strb	r3, [r7, #11]
          break;
 80087e6:	e03b      	b.n	8008860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	7c12      	ldrb	r2, [r2, #16]
 8008800:	f107 0108 	add.w	r1, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880a:	e029      	b.n	8008860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa63 	bl	8008cda <USBD_CtlError>
            err++;
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	3301      	adds	r3, #1
 8008818:	72fb      	strb	r3, [r7, #11]
          break;
 800881a:	e021      	b.n	8008860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00b      	beq.n	8008840 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	7c12      	ldrb	r2, [r2, #16]
 8008834:	f107 0108 	add.w	r1, r7, #8
 8008838:	4610      	mov	r0, r2
 800883a:	4798      	blx	r3
 800883c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800883e:	e00f      	b.n	8008860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fa49 	bl	8008cda <USBD_CtlError>
            err++;
 8008848:	7afb      	ldrb	r3, [r7, #11]
 800884a:	3301      	adds	r3, #1
 800884c:	72fb      	strb	r3, [r7, #11]
          break;
 800884e:	e007      	b.n	8008860 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa41 	bl	8008cda <USBD_CtlError>
          err++;
 8008858:	7afb      	ldrb	r3, [r7, #11]
 800885a:	3301      	adds	r3, #1
 800885c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800885e:	bf00      	nop
      }
      break;
 8008860:	e037      	b.n	80088d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	7c1b      	ldrb	r3, [r3, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d109      	bne.n	800887e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008872:	f107 0208 	add.w	r2, r7, #8
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
 800887a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800887c:	e029      	b.n	80088d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fa2a 	bl	8008cda <USBD_CtlError>
        err++;
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	3301      	adds	r3, #1
 800888a:	72fb      	strb	r3, [r7, #11]
      break;
 800888c:	e021      	b.n	80088d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7c1b      	ldrb	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10d      	bne.n	80088b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f107 0208 	add.w	r2, r7, #8
 80088a2:	4610      	mov	r0, r2
 80088a4:	4798      	blx	r3
 80088a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	2207      	movs	r2, #7
 80088ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b0:	e00f      	b.n	80088d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fa10 	bl	8008cda <USBD_CtlError>
        err++;
 80088ba:	7afb      	ldrb	r3, [r7, #11]
 80088bc:	3301      	adds	r3, #1
 80088be:	72fb      	strb	r3, [r7, #11]
      break;
 80088c0:	e007      	b.n	80088d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa08 	bl	8008cda <USBD_CtlError>
      err++;
 80088ca:	7afb      	ldrb	r3, [r7, #11]
 80088cc:	3301      	adds	r3, #1
 80088ce:	72fb      	strb	r3, [r7, #11]
      break;
 80088d0:	bf00      	nop
  }

  if (err != 0U)
 80088d2:	7afb      	ldrb	r3, [r7, #11]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d11e      	bne.n	8008916 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	88db      	ldrh	r3, [r3, #6]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d016      	beq.n	800890e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088e0:	893b      	ldrh	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00e      	beq.n	8008904 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88da      	ldrh	r2, [r3, #6]
 80088ea:	893b      	ldrh	r3, [r7, #8]
 80088ec:	4293      	cmp	r3, r2
 80088ee:	bf28      	it	cs
 80088f0:	4613      	movcs	r3, r2
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088f6:	893b      	ldrh	r3, [r7, #8]
 80088f8:	461a      	mov	r2, r3
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fa69 	bl	8008dd4 <USBD_CtlSendData>
 8008902:	e009      	b.n	8008918 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f9e7 	bl	8008cda <USBD_CtlError>
 800890c:	e004      	b.n	8008918 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fac1 	bl	8008e96 <USBD_CtlSendStatus>
 8008914:	e000      	b.n	8008918 <USBD_GetDescriptor+0x2cc>
    return;
 8008916:	bf00      	nop
  }
}
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop

08008920 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	889b      	ldrh	r3, [r3, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d131      	bne.n	8008996 <USBD_SetAddress+0x76>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	88db      	ldrh	r3, [r3, #6]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d12d      	bne.n	8008996 <USBD_SetAddress+0x76>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	2b7f      	cmp	r3, #127	; 0x7f
 8008940:	d829      	bhi.n	8008996 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b03      	cmp	r3, #3
 8008958:	d104      	bne.n	8008964 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f9bc 	bl	8008cda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008962:	e01d      	b.n	80089a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7bfa      	ldrb	r2, [r7, #15]
 8008968:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 ff7d 	bl	8009870 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa8d 	bl	8008e96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898a:	e009      	b.n	80089a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008994:	e004      	b.n	80089a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f99e 	bl	8008cda <USBD_CtlError>
  }
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	885b      	ldrh	r3, [r3, #2]
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	4b4e      	ldr	r3, [pc, #312]	; (8008af8 <USBD_SetConfig+0x150>)
 80089be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089c0:	4b4d      	ldr	r3, [pc, #308]	; (8008af8 <USBD_SetConfig+0x150>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d905      	bls.n	80089d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f985 	bl	8008cda <USBD_CtlError>
    return USBD_FAIL;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e08c      	b.n	8008aee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d002      	beq.n	80089e6 <USBD_SetConfig+0x3e>
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d029      	beq.n	8008a38 <USBD_SetConfig+0x90>
 80089e4:	e075      	b.n	8008ad2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089e6:	4b44      	ldr	r3, [pc, #272]	; (8008af8 <USBD_SetConfig+0x150>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d020      	beq.n	8008a30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80089ee:	4b42      	ldr	r3, [pc, #264]	; (8008af8 <USBD_SetConfig+0x150>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089f8:	4b3f      	ldr	r3, [pc, #252]	; (8008af8 <USBD_SetConfig+0x150>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fe ffcb 	bl	800799a <USBD_SetClassConfig>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f962 	bl	8008cda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a1e:	e065      	b.n	8008aec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fa38 	bl	8008e96 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2203      	movs	r2, #3
 8008a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a2e:	e05d      	b.n	8008aec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fa30 	bl	8008e96 <USBD_CtlSendStatus>
      break;
 8008a36:	e059      	b.n	8008aec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a38:	4b2f      	ldr	r3, [pc, #188]	; (8008af8 <USBD_SetConfig+0x150>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d112      	bne.n	8008a66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a48:	4b2b      	ldr	r3, [pc, #172]	; (8008af8 <USBD_SetConfig+0x150>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a52:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <USBD_SetConfig+0x150>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7fe ffba 	bl	80079d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa19 	bl	8008e96 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a64:	e042      	b.n	8008aec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a66:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <USBD_SetConfig+0x150>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d02a      	beq.n	8008aca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7fe ffa8 	bl	80079d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a82:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <USBD_SetConfig+0x150>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <USBD_SetConfig+0x150>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7fe ff81 	bl	800799a <USBD_SetClassConfig>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00f      	beq.n	8008ac2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f918 	bl	8008cda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7fe ff8d 	bl	80079d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ac0:	e014      	b.n	8008aec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f9e7 	bl	8008e96 <USBD_CtlSendStatus>
      break;
 8008ac8:	e010      	b.n	8008aec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9e3 	bl	8008e96 <USBD_CtlSendStatus>
      break;
 8008ad0:	e00c      	b.n	8008aec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f900 	bl	8008cda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <USBD_SetConfig+0x150>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7fe ff76 	bl	80079d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8008aea:	bf00      	nop
  }

  return ret;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	200005b4 	.word	0x200005b4

08008afc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	88db      	ldrh	r3, [r3, #6]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d004      	beq.n	8008b18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f8e2 	bl	8008cda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b16:	e023      	b.n	8008b60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	dc02      	bgt.n	8008b2a <USBD_GetConfig+0x2e>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc03      	bgt.n	8008b30 <USBD_GetConfig+0x34>
 8008b28:	e015      	b.n	8008b56 <USBD_GetConfig+0x5a>
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d00b      	beq.n	8008b46 <USBD_GetConfig+0x4a>
 8008b2e:	e012      	b.n	8008b56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f948 	bl	8008dd4 <USBD_CtlSendData>
        break;
 8008b44:	e00c      	b.n	8008b60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f940 	bl	8008dd4 <USBD_CtlSendData>
        break;
 8008b54:	e004      	b.n	8008b60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f8be 	bl	8008cda <USBD_CtlError>
        break;
 8008b5e:	bf00      	nop
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d81e      	bhi.n	8008bbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	88db      	ldrh	r3, [r3, #6]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d004      	beq.n	8008b92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f8a5 	bl	8008cda <USBD_CtlError>
        break;
 8008b90:	e01a      	b.n	8008bc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f043 0202 	orr.w	r2, r3, #2
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f90c 	bl	8008dd4 <USBD_CtlSendData>
      break;
 8008bbc:	e004      	b.n	8008bc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f88a 	bl	8008cda <USBD_CtlError>
      break;
 8008bc6:	bf00      	nop
  }
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	885b      	ldrh	r3, [r3, #2]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d107      	bne.n	8008bf2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f953 	bl	8008e96 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008bf0:	e013      	b.n	8008c1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	885b      	ldrh	r3, [r3, #2]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d10b      	bne.n	8008c12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	889b      	ldrh	r3, [r3, #4]
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f943 	bl	8008e96 <USBD_CtlSendStatus>
}
 8008c10:	e003      	b.n	8008c1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f860 	bl	8008cda <USBD_CtlError>
}
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	3b01      	subs	r3, #1
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d80b      	bhi.n	8008c52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d10c      	bne.n	8008c5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f923 	bl	8008e96 <USBD_CtlSendStatus>
      }
      break;
 8008c50:	e004      	b.n	8008c5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f840 	bl	8008cda <USBD_CtlError>
      break;
 8008c5a:	e000      	b.n	8008c5e <USBD_ClrFeature+0x3c>
      break;
 8008c5c:	bf00      	nop
  }
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	781a      	ldrb	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7ff fa3e 	bl	8008112 <SWAPBYTE>
 8008c96:	4603      	mov	r3, r0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff fa31 	bl	8008112 <SWAPBYTE>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7ff fa24 	bl	8008112 <SWAPBYTE>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	461a      	mov	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	80da      	strh	r2, [r3, #6]
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ce4:	2180      	movs	r1, #128	; 0x80
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fd58 	bl	800979c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cec:	2100      	movs	r1, #0
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fd54 	bl	800979c <USBD_LL_StallEP>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d042      	beq.n	8008d98 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008d16:	6938      	ldr	r0, [r7, #16]
 8008d18:	f000 f842 	bl	8008da0 <USBD_GetLen>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	3301      	adds	r3, #1
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d26:	d808      	bhi.n	8008d3a <USBD_GetString+0x3e>
 8008d28:	6938      	ldr	r0, [r7, #16]
 8008d2a:	f000 f839 	bl	8008da0 <USBD_GetLen>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	3301      	adds	r3, #1
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	e001      	b.n	8008d3e <USBD_GetString+0x42>
 8008d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	4413      	add	r3, r2
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	3301      	adds	r3, #1
 8008d52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	4413      	add	r3, r2
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	3301      	adds	r3, #1
 8008d62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d64:	e013      	b.n	8008d8e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	7812      	ldrb	r2, [r2, #0]
 8008d70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	3301      	adds	r3, #1
 8008d76:	613b      	str	r3, [r7, #16]
    idx++;
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	4413      	add	r3, r2
 8008d84:	2200      	movs	r2, #0
 8008d86:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e7      	bne.n	8008d66 <USBD_GetString+0x6a>
 8008d96:	e000      	b.n	8008d9a <USBD_GetString+0x9e>
    return;
 8008d98:	bf00      	nop
  }
}
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008db0:	e005      	b.n	8008dbe <USBD_GetLen+0x1e>
  {
    len++;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	3301      	adds	r3, #1
 8008db6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1f5      	bne.n	8008db2 <USBD_GetLen+0x12>
  }

  return len;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	2100      	movs	r1, #0
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fd54 	bl	80098ae <USBD_LL_Transmit>

  return USBD_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	2100      	movs	r1, #0
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 fd43 	bl	80098ae <USBD_LL_Transmit>

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2203      	movs	r2, #3
 8008e42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	2100      	movs	r1, #0
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 fd43 	bl	80098f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	2100      	movs	r1, #0
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fd32 	bl	80098f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2204      	movs	r2, #4
 8008ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fcfe 	bl	80098ae <USBD_LL_Transmit>

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2205      	movs	r2, #5
 8008ec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ecc:	2300      	movs	r3, #0
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fd0c 	bl	80098f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4912      	ldr	r1, [pc, #72]	; (8008f34 <MX_USB_DEVICE_Init+0x50>)
 8008eec:	4812      	ldr	r0, [pc, #72]	; (8008f38 <MX_USB_DEVICE_Init+0x54>)
 8008eee:	f7fe fcd7 	bl	80078a0 <USBD_Init>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ef8:	f7f8 fa02 	bl	8001300 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008efc:	490f      	ldr	r1, [pc, #60]	; (8008f3c <MX_USB_DEVICE_Init+0x58>)
 8008efe:	480e      	ldr	r0, [pc, #56]	; (8008f38 <MX_USB_DEVICE_Init+0x54>)
 8008f00:	f7fe fcfe 	bl	8007900 <USBD_RegisterClass>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f0a:	f7f8 f9f9 	bl	8001300 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f0e:	490c      	ldr	r1, [pc, #48]	; (8008f40 <MX_USB_DEVICE_Init+0x5c>)
 8008f10:	4809      	ldr	r0, [pc, #36]	; (8008f38 <MX_USB_DEVICE_Init+0x54>)
 8008f12:	f7fe fbf5 	bl	8007700 <USBD_CDC_RegisterInterface>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f1c:	f7f8 f9f0 	bl	8001300 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f20:	4805      	ldr	r0, [pc, #20]	; (8008f38 <MX_USB_DEVICE_Init+0x54>)
 8008f22:	f7fe fd23 	bl	800796c <USBD_Start>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f2c:	f7f8 f9e8 	bl	8001300 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f30:	bf00      	nop
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200000b4 	.word	0x200000b4
 8008f38:	200005b8 	.word	0x200005b8
 8008f3c:	20000018 	.word	0x20000018
 8008f40:	200000a0 	.word	0x200000a0

08008f44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f48:	2200      	movs	r2, #0
 8008f4a:	4905      	ldr	r1, [pc, #20]	; (8008f60 <CDC_Init_FS+0x1c>)
 8008f4c:	4805      	ldr	r0, [pc, #20]	; (8008f64 <CDC_Init_FS+0x20>)
 8008f4e:	f7fe fbf1 	bl	8007734 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f52:	4905      	ldr	r1, [pc, #20]	; (8008f68 <CDC_Init_FS+0x24>)
 8008f54:	4803      	ldr	r0, [pc, #12]	; (8008f64 <CDC_Init_FS+0x20>)
 8008f56:	f7fe fc0f 	bl	8007778 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000a94 	.word	0x20000a94
 8008f64:	200005b8 	.word	0x200005b8
 8008f68:	20000894 	.word	0x20000894

08008f6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	2b23      	cmp	r3, #35	; 0x23
 8008f90:	f200 8098 	bhi.w	80090c4 <CDC_Control_FS+0x148>
 8008f94:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <CDC_Control_FS+0x20>)
 8008f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9a:	bf00      	nop
 8008f9c:	080090c5 	.word	0x080090c5
 8008fa0:	080090c5 	.word	0x080090c5
 8008fa4:	080090c5 	.word	0x080090c5
 8008fa8:	080090c5 	.word	0x080090c5
 8008fac:	080090c5 	.word	0x080090c5
 8008fb0:	080090c5 	.word	0x080090c5
 8008fb4:	080090c5 	.word	0x080090c5
 8008fb8:	080090c5 	.word	0x080090c5
 8008fbc:	080090c5 	.word	0x080090c5
 8008fc0:	080090c5 	.word	0x080090c5
 8008fc4:	080090c5 	.word	0x080090c5
 8008fc8:	080090c5 	.word	0x080090c5
 8008fcc:	080090c5 	.word	0x080090c5
 8008fd0:	080090c5 	.word	0x080090c5
 8008fd4:	080090c5 	.word	0x080090c5
 8008fd8:	080090c5 	.word	0x080090c5
 8008fdc:	080090c5 	.word	0x080090c5
 8008fe0:	080090c5 	.word	0x080090c5
 8008fe4:	080090c5 	.word	0x080090c5
 8008fe8:	080090c5 	.word	0x080090c5
 8008fec:	080090c5 	.word	0x080090c5
 8008ff0:	080090c5 	.word	0x080090c5
 8008ff4:	080090c5 	.word	0x080090c5
 8008ff8:	080090c5 	.word	0x080090c5
 8008ffc:	080090c5 	.word	0x080090c5
 8009000:	080090c5 	.word	0x080090c5
 8009004:	080090c5 	.word	0x080090c5
 8009008:	080090c5 	.word	0x080090c5
 800900c:	080090c5 	.word	0x080090c5
 8009010:	080090c5 	.word	0x080090c5
 8009014:	080090c5 	.word	0x080090c5
 8009018:	080090c5 	.word	0x080090c5
 800901c:	0800902d 	.word	0x0800902d
 8009020:	08009071 	.word	0x08009071
 8009024:	080090c5 	.word	0x080090c5
 8009028:	080090c5 	.word	0x080090c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	431a      	orrs	r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	3302      	adds	r3, #2
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	041b      	lsls	r3, r3, #16
 8009044:	431a      	orrs	r2, r3
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	3303      	adds	r3, #3
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	061b      	lsls	r3, r3, #24
 800904e:	4313      	orrs	r3, r2
 8009050:	461a      	mov	r2, r3
 8009052:	4b20      	ldr	r3, [pc, #128]	; (80090d4 <CDC_Control_FS+0x158>)
 8009054:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	791a      	ldrb	r2, [r3, #4]
 800905a:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <CDC_Control_FS+0x158>)
 800905c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	795a      	ldrb	r2, [r3, #5]
 8009062:	4b1c      	ldr	r3, [pc, #112]	; (80090d4 <CDC_Control_FS+0x158>)
 8009064:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	799a      	ldrb	r2, [r3, #6]
 800906a:	4b1a      	ldr	r3, [pc, #104]	; (80090d4 <CDC_Control_FS+0x158>)
 800906c:	719a      	strb	r2, [r3, #6]
    break;
 800906e:	e02a      	b.n	80090c6 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8009070:	4b18      	ldr	r3, [pc, #96]	; (80090d4 <CDC_Control_FS+0x158>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b2da      	uxtb	r2, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800907a:	4b16      	ldr	r3, [pc, #88]	; (80090d4 <CDC_Control_FS+0x158>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	0a1a      	lsrs	r2, r3, #8
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	b2d2      	uxtb	r2, r2
 8009086:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8009088:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <CDC_Control_FS+0x158>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	0c1a      	lsrs	r2, r3, #16
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	3302      	adds	r3, #2
 8009092:	b2d2      	uxtb	r2, r2
 8009094:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8009096:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <CDC_Control_FS+0x158>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	0e1a      	lsrs	r2, r3, #24
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	3303      	adds	r3, #3
 80090a0:	b2d2      	uxtb	r2, r2
 80090a2:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4a0a      	ldr	r2, [pc, #40]	; (80090d4 <CDC_Control_FS+0x158>)
 80090aa:	7912      	ldrb	r2, [r2, #4]
 80090ac:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	3305      	adds	r3, #5
 80090b2:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <CDC_Control_FS+0x158>)
 80090b4:	7952      	ldrb	r2, [r2, #5]
 80090b6:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	3306      	adds	r3, #6
 80090bc:	4a05      	ldr	r2, [pc, #20]	; (80090d4 <CDC_Control_FS+0x158>)
 80090be:	7992      	ldrb	r2, [r2, #6]
 80090c0:	701a      	strb	r2, [r3, #0]
    break;
 80090c2:	e000      	b.n	80090c6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80090c4:	bf00      	nop
  }

  return (USBD_OK);
 80090c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20000098 	.word	0x20000098

080090d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 80090e2:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <CDC_Receive_FS+0x3c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d007      	beq.n	80090fa <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <CDC_Receive_FS+0x3c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	6812      	ldr	r2, [r2, #0]
 80090f2:	b292      	uxth	r2, r2
 80090f4:	4611      	mov	r1, r2
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	4806      	ldr	r0, [pc, #24]	; (8009118 <CDC_Receive_FS+0x40>)
 80090fe:	f7fe fb3b 	bl	8007778 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009102:	4805      	ldr	r0, [pc, #20]	; (8009118 <CDC_Receive_FS+0x40>)
 8009104:	f7fe fb96 	bl	8007834 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009108:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000c94 	.word	0x20000c94
 8009118:	200005b8 	.word	0x200005b8

0800911c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800912c:	4b0d      	ldr	r3, [pc, #52]	; (8009164 <CDC_Transmit_FS+0x48>)
 800912e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009132:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800913e:	2301      	movs	r3, #1
 8009140:	e00b      	b.n	800915a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009142:	887b      	ldrh	r3, [r7, #2]
 8009144:	461a      	mov	r2, r3
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	4806      	ldr	r0, [pc, #24]	; (8009164 <CDC_Transmit_FS+0x48>)
 800914a:	f7fe faf3 	bl	8007734 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800914e:	4805      	ldr	r0, [pc, #20]	; (8009164 <CDC_Transmit_FS+0x48>)
 8009150:	f7fe fb30 	bl	80077b4 <USBD_CDC_TransmitPacket>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009158:	7bfb      	ldrb	r3, [r7, #15]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200005b8 	.word	0x200005b8

08009168 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800917a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800917e:	4618      	mov	r0, r3
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
	...

0800918c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*PtrRx)(uint8_t *buf, uint16_t Len)) //la interfaZ va a llamar cada vez que se envian datos desde el USB hacia la PC
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8009194:	4a04      	ldr	r2, [pc, #16]	; (80091a8 <CDC_Attach_Rx+0x1c>)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6013      	str	r3, [r2, #0]
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20000c94 	.word	0x20000c94

080091ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	6039      	str	r1, [r7, #0]
 80091b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2212      	movs	r2, #18
 80091bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091be:	4b03      	ldr	r3, [pc, #12]	; (80091cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	200000d0 	.word	0x200000d0

080091d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	6039      	str	r1, [r7, #0]
 80091da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2204      	movs	r2, #4
 80091e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091e2:	4b03      	ldr	r3, [pc, #12]	; (80091f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	200000e4 	.word	0x200000e4

080091f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009200:	79fb      	ldrb	r3, [r7, #7]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d105      	bne.n	8009212 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	4907      	ldr	r1, [pc, #28]	; (8009228 <USBD_FS_ProductStrDescriptor+0x34>)
 800920a:	4808      	ldr	r0, [pc, #32]	; (800922c <USBD_FS_ProductStrDescriptor+0x38>)
 800920c:	f7ff fd76 	bl	8008cfc <USBD_GetString>
 8009210:	e004      	b.n	800921c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	4904      	ldr	r1, [pc, #16]	; (8009228 <USBD_FS_ProductStrDescriptor+0x34>)
 8009216:	4805      	ldr	r0, [pc, #20]	; (800922c <USBD_FS_ProductStrDescriptor+0x38>)
 8009218:	f7ff fd70 	bl	8008cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20000c98 	.word	0x20000c98
 800922c:	08009a50 	.word	0x08009a50

08009230 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	4904      	ldr	r1, [pc, #16]	; (8009250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009240:	4804      	ldr	r0, [pc, #16]	; (8009254 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009242:	f7ff fd5b 	bl	8008cfc <USBD_GetString>
  return USBD_StrDesc;
 8009246:	4b02      	ldr	r3, [pc, #8]	; (8009250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20000c98 	.word	0x20000c98
 8009254:	08009a68 	.word	0x08009a68

08009258 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	221a      	movs	r2, #26
 8009268:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800926a:	f000 f843 	bl	80092f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800926e:	4b02      	ldr	r3, [pc, #8]	; (8009278 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	200000e8 	.word	0x200000e8

0800927c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	4907      	ldr	r1, [pc, #28]	; (80092b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009292:	4808      	ldr	r0, [pc, #32]	; (80092b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009294:	f7ff fd32 	bl	8008cfc <USBD_GetString>
 8009298:	e004      	b.n	80092a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	4904      	ldr	r1, [pc, #16]	; (80092b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800929e:	4805      	ldr	r0, [pc, #20]	; (80092b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092a0:	f7ff fd2c 	bl	8008cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a4:	4b02      	ldr	r3, [pc, #8]	; (80092b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000c98 	.word	0x20000c98
 80092b4:	08009a7c 	.word	0x08009a7c

080092b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d105      	bne.n	80092d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4907      	ldr	r1, [pc, #28]	; (80092ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ce:	4808      	ldr	r0, [pc, #32]	; (80092f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092d0:	f7ff fd14 	bl	8008cfc <USBD_GetString>
 80092d4:	e004      	b.n	80092e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4904      	ldr	r1, [pc, #16]	; (80092ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092da:	4805      	ldr	r0, [pc, #20]	; (80092f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092dc:	f7ff fd0e 	bl	8008cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e0:	4b02      	ldr	r3, [pc, #8]	; (80092ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20000c98 	.word	0x20000c98
 80092f0:	08009a88 	.word	0x08009a88

080092f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092fa:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <Get_SerialNum+0x44>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009300:	4b0e      	ldr	r3, [pc, #56]	; (800933c <Get_SerialNum+0x48>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009306:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <Get_SerialNum+0x4c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4413      	add	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d009      	beq.n	800932e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800931a:	2208      	movs	r2, #8
 800931c:	4909      	ldr	r1, [pc, #36]	; (8009344 <Get_SerialNum+0x50>)
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f814 	bl	800934c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009324:	2204      	movs	r2, #4
 8009326:	4908      	ldr	r1, [pc, #32]	; (8009348 <Get_SerialNum+0x54>)
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f000 f80f 	bl	800934c <IntToUnicode>
  }
}
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	1fff7a10 	.word	0x1fff7a10
 800933c:	1fff7a14 	.word	0x1fff7a14
 8009340:	1fff7a18 	.word	0x1fff7a18
 8009344:	200000ea 	.word	0x200000ea
 8009348:	200000fa 	.word	0x200000fa

0800934c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	4613      	mov	r3, r2
 8009358:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800935e:	2300      	movs	r3, #0
 8009360:	75fb      	strb	r3, [r7, #23]
 8009362:	e027      	b.n	80093b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	0f1b      	lsrs	r3, r3, #28
 8009368:	2b09      	cmp	r3, #9
 800936a:	d80b      	bhi.n	8009384 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	0f1b      	lsrs	r3, r3, #28
 8009370:	b2da      	uxtb	r2, r3
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4619      	mov	r1, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	440b      	add	r3, r1
 800937c:	3230      	adds	r2, #48	; 0x30
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	701a      	strb	r2, [r3, #0]
 8009382:	e00a      	b.n	800939a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	0f1b      	lsrs	r3, r3, #28
 8009388:	b2da      	uxtb	r2, r3
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	4619      	mov	r1, r3
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	440b      	add	r3, r1
 8009394:	3237      	adds	r2, #55	; 0x37
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	3301      	adds	r3, #1
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	4413      	add	r3, r2
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	3301      	adds	r3, #1
 80093b2:	75fb      	strb	r3, [r7, #23]
 80093b4:	7dfa      	ldrb	r2, [r7, #23]
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d3d3      	bcc.n	8009364 <IntToUnicode+0x18>
  }
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
	...

080093cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	; 0x28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093d4:	f107 0314 	add.w	r3, r7, #20
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	605a      	str	r2, [r3, #4]
 80093de:	609a      	str	r2, [r3, #8]
 80093e0:	60da      	str	r2, [r3, #12]
 80093e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ec:	d13a      	bne.n	8009464 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ee:	2300      	movs	r3, #0
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	4b1e      	ldr	r3, [pc, #120]	; (800946c <HAL_PCD_MspInit+0xa0>)
 80093f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f6:	4a1d      	ldr	r2, [pc, #116]	; (800946c <HAL_PCD_MspInit+0xa0>)
 80093f8:	f043 0301 	orr.w	r3, r3, #1
 80093fc:	6313      	str	r3, [r2, #48]	; 0x30
 80093fe:	4b1b      	ldr	r3, [pc, #108]	; (800946c <HAL_PCD_MspInit+0xa0>)
 8009400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800940a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800940e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009410:	2302      	movs	r3, #2
 8009412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009414:	2300      	movs	r3, #0
 8009416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009418:	2303      	movs	r3, #3
 800941a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800941c:	230a      	movs	r3, #10
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009420:	f107 0314 	add.w	r3, r7, #20
 8009424:	4619      	mov	r1, r3
 8009426:	4812      	ldr	r0, [pc, #72]	; (8009470 <HAL_PCD_MspInit+0xa4>)
 8009428:	f7f9 fa30 	bl	800288c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800942c:	4b0f      	ldr	r3, [pc, #60]	; (800946c <HAL_PCD_MspInit+0xa0>)
 800942e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009430:	4a0e      	ldr	r2, [pc, #56]	; (800946c <HAL_PCD_MspInit+0xa0>)
 8009432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009436:	6353      	str	r3, [r2, #52]	; 0x34
 8009438:	2300      	movs	r3, #0
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	4b0b      	ldr	r3, [pc, #44]	; (800946c <HAL_PCD_MspInit+0xa0>)
 800943e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009440:	4a0a      	ldr	r2, [pc, #40]	; (800946c <HAL_PCD_MspInit+0xa0>)
 8009442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009446:	6453      	str	r3, [r2, #68]	; 0x44
 8009448:	4b08      	ldr	r3, [pc, #32]	; (800946c <HAL_PCD_MspInit+0xa0>)
 800944a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009454:	2200      	movs	r2, #0
 8009456:	2100      	movs	r1, #0
 8009458:	2043      	movs	r0, #67	; 0x43
 800945a:	f7f8 fe70 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800945e:	2043      	movs	r0, #67	; 0x43
 8009460:	f7f8 fe89 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009464:	bf00      	nop
 8009466:	3728      	adds	r7, #40	; 0x28
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	40023800 	.word	0x40023800
 8009470:	40020000 	.word	0x40020000

08009474 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f7fe fabb 	bl	8007a06 <USBD_LL_SetupStage>
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80094aa:	78fa      	ldrb	r2, [r7, #3]
 80094ac:	6879      	ldr	r1, [r7, #4]
 80094ae:	4613      	mov	r3, r2
 80094b0:	00db      	lsls	r3, r3, #3
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	440b      	add	r3, r1
 80094b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	4619      	mov	r1, r3
 80094c2:	f7fe faf5 	bl	8007ab0 <USBD_LL_DataOutStage>
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	4613      	mov	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	3320      	adds	r3, #32
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	4619      	mov	r1, r3
 80094f6:	f7fe fb97 	bl	8007c28 <USBD_LL_DataInStage>
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe fcdb 	bl	8007ecc <USBD_LL_SOF>
}
 8009516:	bf00      	nop
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009526:	2301      	movs	r3, #1
 8009528:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	79db      	ldrb	r3, [r3, #7]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d001      	beq.n	8009536 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009532:	f7f7 fee5 	bl	8001300 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800953c:	7bfa      	ldrb	r2, [r7, #15]
 800953e:	4611      	mov	r1, r2
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fc7f 	bl	8007e44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fc26 	bl	8007d9e <USBD_LL_Reset>
}
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe fc7a 	bl	8007e64 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	6812      	ldr	r2, [r2, #0]
 800957e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7adb      	ldrb	r3, [r3, #11]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d005      	beq.n	800959c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009590:	4b04      	ldr	r3, [pc, #16]	; (80095a4 <HAL_PCD_SuspendCallback+0x48>)
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	4a03      	ldr	r2, [pc, #12]	; (80095a4 <HAL_PCD_SuspendCallback+0x48>)
 8009596:	f043 0306 	orr.w	r3, r3, #6
 800959a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	e000ed00 	.word	0xe000ed00

080095a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fc70 	bl	8007e9c <USBD_LL_Resume>
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fcc8 	bl	8007f70 <USBD_LL_IsoOUTIncomplete>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fc84 	bl	8007f0c <USBD_LL_IsoINIncomplete>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fcda 	bl	8007fd4 <USBD_LL_DevConnected>
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe fcd7 	bl	8007fea <USBD_LL_DevDisconnected>
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d13c      	bne.n	80096ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009654:	4a20      	ldr	r2, [pc, #128]	; (80096d8 <USBD_LL_Init+0x94>)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a1e      	ldr	r2, [pc, #120]	; (80096d8 <USBD_LL_Init+0x94>)
 8009660:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009664:	4b1c      	ldr	r3, [pc, #112]	; (80096d8 <USBD_LL_Init+0x94>)
 8009666:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800966a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800966c:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <USBD_LL_Init+0x94>)
 800966e:	2204      	movs	r2, #4
 8009670:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009672:	4b19      	ldr	r3, [pc, #100]	; (80096d8 <USBD_LL_Init+0x94>)
 8009674:	2202      	movs	r2, #2
 8009676:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009678:	4b17      	ldr	r3, [pc, #92]	; (80096d8 <USBD_LL_Init+0x94>)
 800967a:	2200      	movs	r2, #0
 800967c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800967e:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <USBD_LL_Init+0x94>)
 8009680:	2202      	movs	r2, #2
 8009682:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009684:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <USBD_LL_Init+0x94>)
 8009686:	2200      	movs	r2, #0
 8009688:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800968a:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <USBD_LL_Init+0x94>)
 800968c:	2200      	movs	r2, #0
 800968e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009690:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <USBD_LL_Init+0x94>)
 8009692:	2200      	movs	r2, #0
 8009694:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009696:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <USBD_LL_Init+0x94>)
 8009698:	2200      	movs	r2, #0
 800969a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800969c:	4b0e      	ldr	r3, [pc, #56]	; (80096d8 <USBD_LL_Init+0x94>)
 800969e:	2200      	movs	r2, #0
 80096a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80096a2:	480d      	ldr	r0, [pc, #52]	; (80096d8 <USBD_LL_Init+0x94>)
 80096a4:	f7f9 faa9 	bl	8002bfa <HAL_PCD_Init>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80096ae:	f7f7 fe27 	bl	8001300 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80096b2:	2180      	movs	r1, #128	; 0x80
 80096b4:	4808      	ldr	r0, [pc, #32]	; (80096d8 <USBD_LL_Init+0x94>)
 80096b6:	f7fa fcd6 	bl	8004066 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80096ba:	2240      	movs	r2, #64	; 0x40
 80096bc:	2100      	movs	r1, #0
 80096be:	4806      	ldr	r0, [pc, #24]	; (80096d8 <USBD_LL_Init+0x94>)
 80096c0:	f7fa fc8a 	bl	8003fd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096c4:	2280      	movs	r2, #128	; 0x80
 80096c6:	2101      	movs	r1, #1
 80096c8:	4803      	ldr	r0, [pc, #12]	; (80096d8 <USBD_LL_Init+0x94>)
 80096ca:	f7fa fc85 	bl	8003fd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000e98 	.word	0x20000e98

080096dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7f9 fb90 	bl	8002e18 <HAL_PCD_Start>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 f942 	bl	8009988 <USBD_Get_USB_Status>
 8009704:	4603      	mov	r3, r0
 8009706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009708:	7bbb      	ldrb	r3, [r7, #14]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	4608      	mov	r0, r1
 800971c:	4611      	mov	r1, r2
 800971e:	461a      	mov	r2, r3
 8009720:	4603      	mov	r3, r0
 8009722:	70fb      	strb	r3, [r7, #3]
 8009724:	460b      	mov	r3, r1
 8009726:	70bb      	strb	r3, [r7, #2]
 8009728:	4613      	mov	r3, r2
 800972a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800973a:	78bb      	ldrb	r3, [r7, #2]
 800973c:	883a      	ldrh	r2, [r7, #0]
 800973e:	78f9      	ldrb	r1, [r7, #3]
 8009740:	f7fa f864 	bl	800380c <HAL_PCD_EP_Open>
 8009744:	4603      	mov	r3, r0
 8009746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 f91c 	bl	8009988 <USBD_Get_USB_Status>
 8009750:	4603      	mov	r3, r0
 8009752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009754:	7bbb      	ldrb	r3, [r7, #14]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	460b      	mov	r3, r1
 8009768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f7fa f8af 	bl	80038e0 <HAL_PCD_EP_Close>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	4618      	mov	r0, r3
 800978a:	f000 f8fd 	bl	8009988 <USBD_Get_USB_Status>
 800978e:	4603      	mov	r3, r0
 8009790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009792:	7bbb      	ldrb	r3, [r7, #14]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097b6:	78fa      	ldrb	r2, [r7, #3]
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fa f967 	bl	8003a8e <HAL_PCD_EP_SetStall>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f8de 	bl	8009988 <USBD_Get_USB_Status>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	460b      	mov	r3, r1
 80097e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	4611      	mov	r1, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fa f9ab 	bl	8003b54 <HAL_PCD_EP_ClrStall>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	4618      	mov	r0, r3
 8009806:	f000 f8bf 	bl	8009988 <USBD_Get_USB_Status>
 800980a:	4603      	mov	r3, r0
 800980c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800982a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800982c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009830:	2b00      	cmp	r3, #0
 8009832:	da0b      	bge.n	800984c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800983a:	68f9      	ldr	r1, [r7, #12]
 800983c:	4613      	mov	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	3316      	adds	r3, #22
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	e00b      	b.n	8009864 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009852:	68f9      	ldr	r1, [r7, #12]
 8009854:	4613      	mov	r3, r2
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009862:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7f9 ff98 	bl	80037c4 <HAL_PCD_SetAddress>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f874 	bl	8009988 <USBD_Get_USB_Status>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b086      	sub	sp, #24
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]
 80098ba:	460b      	mov	r3, r1
 80098bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098cc:	7af9      	ldrb	r1, [r7, #11]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	f7fa f8a2 	bl	8003a1a <HAL_PCD_EP_Transmit>
 80098d6:	4603      	mov	r3, r0
 80098d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f853 	bl	8009988 <USBD_Get_USB_Status>
 80098e2:	4603      	mov	r3, r0
 80098e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	607a      	str	r2, [r7, #4]
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	460b      	mov	r3, r1
 80098fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800990e:	7af9      	ldrb	r1, [r7, #11]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	f7fa f82e 	bl	8003974 <HAL_PCD_EP_Receive>
 8009918:	4603      	mov	r3, r0
 800991a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	4618      	mov	r0, r3
 8009920:	f000 f832 	bl	8009988 <USBD_Get_USB_Status>
 8009924:	4603      	mov	r3, r0
 8009926:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009928:	7dbb      	ldrb	r3, [r7, #22]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7fa f84e 	bl	80039ea <HAL_PCD_EP_GetRxCount>
 800994e:	4603      	mov	r3, r0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009960:	4b03      	ldr	r3, [pc, #12]	; (8009970 <USBD_static_malloc+0x18>)
}
 8009962:	4618      	mov	r0, r3
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	2000137c 	.word	0x2000137c

08009974 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]

}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d817      	bhi.n	80099cc <USBD_Get_USB_Status+0x44>
 800999c:	a201      	add	r2, pc, #4	; (adr r2, 80099a4 <USBD_Get_USB_Status+0x1c>)
 800999e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a2:	bf00      	nop
 80099a4:	080099b5 	.word	0x080099b5
 80099a8:	080099bb 	.word	0x080099bb
 80099ac:	080099c1 	.word	0x080099c1
 80099b0:	080099c7 	.word	0x080099c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
    break;
 80099b8:	e00b      	b.n	80099d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099ba:	2303      	movs	r3, #3
 80099bc:	73fb      	strb	r3, [r7, #15]
    break;
 80099be:	e008      	b.n	80099d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099c0:	2301      	movs	r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]
    break;
 80099c4:	e005      	b.n	80099d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099c6:	2303      	movs	r3, #3
 80099c8:	73fb      	strb	r3, [r7, #15]
    break;
 80099ca:	e002      	b.n	80099d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099cc:	2303      	movs	r3, #3
 80099ce:	73fb      	strb	r3, [r7, #15]
    break;
 80099d0:	bf00      	nop
  }
  return usb_status;
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <memset>:
 80099e0:	4402      	add	r2, r0
 80099e2:	4603      	mov	r3, r0
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d100      	bne.n	80099ea <memset+0xa>
 80099e8:	4770      	bx	lr
 80099ea:	f803 1b01 	strb.w	r1, [r3], #1
 80099ee:	e7f9      	b.n	80099e4 <memset+0x4>

080099f0 <__libc_init_array>:
 80099f0:	b570      	push	{r4, r5, r6, lr}
 80099f2:	4d0d      	ldr	r5, [pc, #52]	; (8009a28 <__libc_init_array+0x38>)
 80099f4:	4c0d      	ldr	r4, [pc, #52]	; (8009a2c <__libc_init_array+0x3c>)
 80099f6:	1b64      	subs	r4, r4, r5
 80099f8:	10a4      	asrs	r4, r4, #2
 80099fa:	2600      	movs	r6, #0
 80099fc:	42a6      	cmp	r6, r4
 80099fe:	d109      	bne.n	8009a14 <__libc_init_array+0x24>
 8009a00:	4d0b      	ldr	r5, [pc, #44]	; (8009a30 <__libc_init_array+0x40>)
 8009a02:	4c0c      	ldr	r4, [pc, #48]	; (8009a34 <__libc_init_array+0x44>)
 8009a04:	f000 f818 	bl	8009a38 <_init>
 8009a08:	1b64      	subs	r4, r4, r5
 8009a0a:	10a4      	asrs	r4, r4, #2
 8009a0c:	2600      	movs	r6, #0
 8009a0e:	42a6      	cmp	r6, r4
 8009a10:	d105      	bne.n	8009a1e <__libc_init_array+0x2e>
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a18:	4798      	blx	r3
 8009a1a:	3601      	adds	r6, #1
 8009a1c:	e7ee      	b.n	80099fc <__libc_init_array+0xc>
 8009a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a22:	4798      	blx	r3
 8009a24:	3601      	adds	r6, #1
 8009a26:	e7f2      	b.n	8009a0e <__libc_init_array+0x1e>
 8009a28:	08009ab8 	.word	0x08009ab8
 8009a2c:	08009ab8 	.word	0x08009ab8
 8009a30:	08009ab8 	.word	0x08009ab8
 8009a34:	08009abc 	.word	0x08009abc

08009a38 <_init>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr

08009a44 <_fini>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	bf00      	nop
 8009a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4a:	bc08      	pop	{r3}
 8009a4c:	469e      	mov	lr, r3
 8009a4e:	4770      	bx	lr
