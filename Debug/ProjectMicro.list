
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009644  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080097e4  080097e4  000197e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098bc  080098bc  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c4  080098c4  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  080098cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  20000154  08009a20  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  08009a20  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fd0  00000000  00000000  000201c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003835  00000000  00000000  00035197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  000389d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3f  00000000  00000000  00039c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa6b  00000000  00000000  0003aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184b1  00000000  00000000  00055532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c06a  00000000  00000000  0006d9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052cc  00000000  00000000  00109a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0010ed1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097cc 	.word	0x080097cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	080097cc 	.word	0x080097cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <datafromUSB>:
/**
 * recibo la informacion enviada por puerto USB (lo enviado por QT), y guardo los bytes recibidos en el buffer circular bufferRx[] de la estructura datosComSerie
 * UNER = 55 4E 45 52 // Nbytes= 02 // ':' = 3A // Alive= F0 // 0xC4 = checksum
 */

void datafromUSB(uint8_t *buf, uint16_t length){
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000598:	2300      	movs	r3, #0
 800059a:	81fb      	strh	r3, [r7, #14]
 800059c:	e014      	b.n	80005c8 <datafromUSB+0x3c>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <datafromUSB+0x54>)
 80005a6:	78d2      	ldrb	r2, [r2, #3]
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	4611      	mov	r1, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <datafromUSB+0x54>)
 80005b0:	440b      	add	r3, r1
 80005b2:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <datafromUSB+0x54>)
 80005b6:	78db      	ldrb	r3, [r3, #3]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	3301      	adds	r3, #1
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <datafromUSB+0x54>)
 80005c0:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	3301      	adds	r3, #1
 80005c6:	81fb      	strh	r3, [r7, #14]
 80005c8:	89fa      	ldrh	r2, [r7, #14]
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d3e6      	bcc.n	800059e <datafromUSB+0x12>
  }

}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000268 	.word	0x20000268

080005e4 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

	//si llegó informacion entonces llamo a decodeheader para el analisis del protocolo "UNER"
	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){ //si Recepcion write =! Recepcion read => buffer lleno
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791a      	ldrb	r2, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	78db      	ldrb	r3, [r3, #3]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d007      	beq.n	800060a <comunicationsTask+0x26>
		DecodeHeader(datosCom);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f80c 	bl	8000618 <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <comunicationsTask+0x30>)
 8000602:	78db      	ldrb	r3, [r3, #3]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b03      	ldr	r3, [pc, #12]	; (8000614 <comunicationsTask+0x30>)
 8000608:	711a      	strb	r2, [r3, #4]
//	}
//
//	if(CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend) == USBD_OK){
//		datosComSerie.indexReadTx += datosComSerie.bytesTosend;
//	}
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000268 	.word	0x20000268

08000618 <DecodeHeader>:

/**
 * Máquina de estados que busca: 'U', 'N', 'E', 'R', nBytes, ':', Payload, Checksum
 * Si todo es válido, llama a: decodeData(datosCom);
 */
void DecodeHeader(_sDato *datosCom){ //Recibo un puntero a la estructura de comunicación que contiene los buffers y los índices
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;		//Variable estática para recordar cuántos bytes de payload quedan por procesar

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx; //Guardo una copia del índice de escritura para no interferir con interrupciones
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000626:	e0df      	b.n	80007e8 <DecodeHeader+0x1d0>
    {
        switch (estadoProtocolo) {					//Mientras haya nuevos datos no leídos en el buffer de recepción...
 8000628:	4b75      	ldr	r3, [pc, #468]	; (8000800 <DecodeHeader+0x1e8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b06      	cmp	r3, #6
 800062e:	f200 80d7 	bhi.w	80007e0 <DecodeHeader+0x1c8>
 8000632:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <DecodeHeader+0x20>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000655 	.word	0x08000655
 800063c:	0800067d 	.word	0x0800067d
 8000640:	080006b1 	.word	0x080006b1
 8000644:	080006e5 	.word	0x080006e5
 8000648:	08000719 	.word	0x08000719
 800064c:	08000741 	.word	0x08000741
 8000650:	08000783 	.word	0x08000783
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	b2d1      	uxtb	r1, r2
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	7111      	strb	r1, [r2, #4]
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	79db      	ldrb	r3, [r3, #7]
 8000668:	2b55      	cmp	r3, #85	; 0x55
 800066a:	f040 80bd 	bne.w	80007e8 <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 800066e:	4b64      	ldr	r3, [pc, #400]	; (8000800 <DecodeHeader+0x1e8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	709a      	strb	r2, [r3, #2]
                }
                break;
 800067a:	e0b5      	b.n	80007e8 <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	7111      	strb	r1, [r2, #4]
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	79db      	ldrb	r3, [r3, #7]
 8000690:	2b4e      	cmp	r3, #78	; 0x4e
 8000692:	d103      	bne.n	800069c <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000694:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <DecodeHeader+0x1e8>)
 8000696:	2202      	movs	r2, #2
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e0a5      	b.n	80007e8 <DecodeHeader+0x1d0>
                else{
                    datosCom->indexReadRx--;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80006a8:	4b55      	ldr	r3, [pc, #340]	; (8000800 <DecodeHeader+0x1e8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006ae:	e09b      	b.n	80007e8 <DecodeHeader+0x1d0>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	b2d1      	uxtb	r1, r2
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7111      	strb	r1, [r2, #4]
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	79db      	ldrb	r3, [r3, #7]
 80006c4:	2b45      	cmp	r3, #69	; 0x45
 80006c6:	d103      	bne.n	80006d0 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 80006c8:	4b4d      	ldr	r3, [pc, #308]	; (8000800 <DecodeHeader+0x1e8>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e08b      	b.n	80007e8 <DecodeHeader+0x1d0>
                else{
                    datosCom->indexReadRx--;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 80006dc:	4b48      	ldr	r3, [pc, #288]	; (8000800 <DecodeHeader+0x1e8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006e2:	e081      	b.n	80007e8 <DecodeHeader+0x1d0>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	b2d1      	uxtb	r1, r2
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	7111      	strb	r1, [r2, #4]
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	79db      	ldrb	r3, [r3, #7]
 80006f8:	2b52      	cmp	r3, #82	; 0x52
 80006fa:	d103      	bne.n	8000704 <DecodeHeader+0xec>
					estadoProtocolo=NBYTES;
 80006fc:	4b40      	ldr	r3, [pc, #256]	; (8000800 <DecodeHeader+0x1e8>)
 80006fe:	2204      	movs	r2, #4
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e071      	b.n	80007e8 <DecodeHeader+0x1d0>
				else{
					datosCom->indexReadRx--;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	3b01      	subs	r3, #1
 800070a:	b2da      	uxtb	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000710:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <DecodeHeader+0x1e8>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
				}
            break;
 8000716:	e067      	b.n	80007e8 <DecodeHeader+0x1d0>
            case NBYTES: //Leer byte de cantidad de datos (nBytes) y avanzar
                datosCom->indexStart=datosCom->indexReadRx;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791a      	ldrb	r2, [r3, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	b2d1      	uxtb	r1, r2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	7111      	strb	r1, [r2, #4]
 800072c:	461a      	mov	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	79da      	ldrb	r2, [r3, #7]
 8000734:	4b33      	ldr	r3, [pc, #204]	; (8000804 <DecodeHeader+0x1ec>)
 8000736:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000738:	4b31      	ldr	r3, [pc, #196]	; (8000800 <DecodeHeader+0x1e8>)
 800073a:	2205      	movs	r2, #5
 800073c:	701a      	strb	r2, [r3, #0]
                break;
 800073e:	e053      	b.n	80007e8 <DecodeHeader+0x1d0>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	1c5a      	adds	r2, r3, #1
 8000746:	b2d1      	uxtb	r1, r2
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	7111      	strb	r1, [r2, #4]
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	79db      	ldrb	r3, [r3, #7]
 8000754:	2b3a      	cmp	r3, #58	; 0x3a
 8000756:	d10a      	bne.n	800076e <DecodeHeader+0x156>

                   estadoProtocolo=PAYLOAD;
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <DecodeHeader+0x1e8>)
 800075a:	2206      	movs	r2, #6
 800075c:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <DecodeHeader+0x1ec>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000766:	b2da      	uxtb	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	709a      	strb	r2, [r3, #2]
 800076c:	e03c      	b.n	80007e8 <DecodeHeader+0x1d0>
                }
                else{
                    datosCom->indexReadRx--;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	b2da      	uxtb	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <DecodeHeader+0x1e8>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000780:	e032      	b.n	80007e8 <DecodeHeader+0x1d0>
            case PAYLOAD:

                if (nBytes>1){
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <DecodeHeader+0x1ec>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d90f      	bls.n	80007aa <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	b2d1      	uxtb	r1, r2
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	7111      	strb	r1, [r2, #4]
 8000796:	461a      	mov	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	79da      	ldrb	r2, [r3, #7]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	789b      	ldrb	r3, [r3, #2]
 80007a2:	4053      	eors	r3, r2
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <DecodeHeader+0x1ec>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <DecodeHeader+0x1ec>)
 80007b4:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){ //Cuando ya se leyeron todos los datos, compara el checksum. Si es correcto, llama a decodeData() para procesar el mensaje.
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <DecodeHeader+0x1ec>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d114      	bne.n	80007e8 <DecodeHeader+0x1d0>
                    estadoProtocolo=START;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <DecodeHeader+0x1e8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	789a      	ldrb	r2, [r3, #2]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	440b      	add	r3, r1
 80007d2:	79db      	ldrb	r3, [r3, #7]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d107      	bne.n	80007e8 <DecodeHeader+0x1d0>
                        decodeData(datosCom);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f815 	bl	8000808 <decodeData>
                    }
                }

                break;
 80007de:	e003      	b.n	80007e8 <DecodeHeader+0x1d0>
            default:
                estadoProtocolo=START;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <DecodeHeader+0x1e8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
                break;
 80007e6:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	f47f af1a 	bne.w	8000628 <DecodeHeader+0x10>
        }
    }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000470 	.word	0x20000470
 8000804:	20000170 	.word	0x20000170

08000808 <decodeData>:

//si el protocolo fue valido => preparo respuestas
void decodeData(_sDato *datosCom){ //responde segun el ID recibido. Busca el ID del comando en la tercera posición del payload (después del token y del byte de longitud).
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]


    uint8_t bufAux[20], indiceAux=0,bytes=0;
 8000810:	2300      	movs	r3, #0
 8000812:	77bb      	strb	r3, [r7, #30]
 8000814:	2300      	movs	r3, #0
 8000816:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2, /ID EN LA POSICION 2, porque es donde se adjunta el byte que te dice "ALIVE, FIRMWARE, ETC"
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	3302      	adds	r3, #2
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	79db      	ldrb	r3, [r3, #7]
 8000824:	2bf2      	cmp	r3, #242	; 0xf2
 8000826:	d024      	beq.n	8000872 <decodeData+0x6a>
 8000828:	2bf2      	cmp	r3, #242	; 0xf2
 800082a:	dc2b      	bgt.n	8000884 <decodeData+0x7c>
 800082c:	2bf0      	cmp	r3, #240	; 0xf0
 800082e:	d002      	beq.n	8000836 <decodeData+0x2e>
 8000830:	2bf1      	cmp	r3, #241	; 0xf1
 8000832:	d013      	beq.n	800085c <decodeData+0x54>
 8000834:	e026      	b.n	8000884 <decodeData+0x7c>
    {

	case ALIVE:
		bufAux[indiceAux++] = ALIVE;   	// ID de respuesta
 8000836:	7fbb      	ldrb	r3, [r7, #30]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	77ba      	strb	r2, [r7, #30]
 800083c:	3320      	adds	r3, #32
 800083e:	443b      	add	r3, r7
 8000840:	22f0      	movs	r2, #240	; 0xf0
 8000842:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = 0x0D;    	// Respuesta: ACK
 8000846:	7fbb      	ldrb	r3, [r7, #30]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	77ba      	strb	r2, [r7, #30]
 800084c:	3320      	adds	r3, #32
 800084e:	443b      	add	r3, r7
 8000850:	220d      	movs	r2, #13
 8000852:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 0x03;        			// NBYTES = 3 (ID + Dato + Checksum)
 8000856:	2303      	movs	r3, #3
 8000858:	77fb      	strb	r3, [r7, #31]
	break;
 800085a:	e01e      	b.n	800089a <decodeData+0x92>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 800085c:	7fbb      	ldrb	r3, [r7, #30]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	77ba      	strb	r2, [r7, #30]
 8000862:	3320      	adds	r3, #32
 8000864:	443b      	add	r3, r7
 8000866:	22f1      	movs	r2, #241	; 0xf1
 8000868:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 800086c:	2302      	movs	r3, #2
 800086e:	77fb      	strb	r3, [r7, #31]

    break;
 8000870:	e013      	b.n	800089a <decodeData+0x92>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 8000872:	7fbb      	ldrb	r3, [r7, #30]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	77ba      	strb	r2, [r7, #30]
 8000878:	3320      	adds	r3, #32
 800087a:	443b      	add	r3, r7
 800087c:	22f2      	movs	r2, #242	; 0xf2
 800087e:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 8000882:	e00a      	b.n	800089a <decodeData+0x92>

    default:

        bufAux[indiceAux++]=0xFF;
 8000884:	7fbb      	ldrb	r3, [r7, #30]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	77ba      	strb	r2, [r7, #30]
 800088a:	3320      	adds	r3, #32
 800088c:	443b      	add	r3, r7
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000894:	2302      	movs	r3, #2
 8000896:	77fb      	strb	r3, [r7, #31]

    break;
 8000898:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 800089a:	7ffa      	ldrb	r2, [r7, #31]
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f804 	bl	80008b0 <SendInfo>
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SendInfo>:

//calculo y envio el checksum
void SendInfo(uint8_t bufferAux[], uint8_t bytes){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[20], indiceAux=0,cks=0,i=0;
 80008bc:	2300      	movs	r3, #0
 80008be:	77fb      	strb	r3, [r7, #31]
 80008c0:	2300      	movs	r3, #0
 80008c2:	77bb      	strb	r3, [r7, #30]
 80008c4:	2300      	movs	r3, #0
 80008c6:	777b      	strb	r3, [r7, #29]

    bufAux[indiceAux++]='U';
 80008c8:	7ffb      	ldrb	r3, [r7, #31]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	77fa      	strb	r2, [r7, #31]
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	2255      	movs	r2, #85	; 0x55
 80008d4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 80008d8:	7ffb      	ldrb	r3, [r7, #31]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	77fa      	strb	r2, [r7, #31]
 80008de:	3320      	adds	r3, #32
 80008e0:	443b      	add	r3, r7
 80008e2:	224e      	movs	r2, #78	; 0x4e
 80008e4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 80008e8:	7ffb      	ldrb	r3, [r7, #31]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	77fa      	strb	r2, [r7, #31]
 80008ee:	3320      	adds	r3, #32
 80008f0:	443b      	add	r3, r7
 80008f2:	2245      	movs	r2, #69	; 0x45
 80008f4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 80008f8:	7ffb      	ldrb	r3, [r7, #31]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	77fa      	strb	r2, [r7, #31]
 80008fe:	3320      	adds	r3, #32
 8000900:	443b      	add	r3, r7
 8000902:	2252      	movs	r2, #82	; 0x52
 8000904:	f803 2c18 	strb.w	r2, [r3, #-24]

    bufAux[indiceAux++]=bytes;
 8000908:	7ffb      	ldrb	r3, [r7, #31]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	77fa      	strb	r2, [r7, #31]
 800090e:	3320      	adds	r3, #32
 8000910:	443b      	add	r3, r7
 8000912:	78fa      	ldrb	r2, [r7, #3]
 8000914:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000918:	7ffb      	ldrb	r3, [r7, #31]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	77fa      	strb	r2, [r7, #31]
 800091e:	3320      	adds	r3, #32
 8000920:	443b      	add	r3, r7
 8000922:	223a      	movs	r2, #58	; 0x3a
 8000924:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(i=0; i<bytes-1; i++){
 8000928:	2300      	movs	r3, #0
 800092a:	777b      	strb	r3, [r7, #29]
 800092c:	e00d      	b.n	800094a <SendInfo+0x9a>
        bufAux[indiceAux++] = bufferAux[i];
 800092e:	7f7b      	ldrb	r3, [r7, #29]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	441a      	add	r2, r3
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	1c59      	adds	r1, r3, #1
 8000938:	77f9      	strb	r1, [r7, #31]
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	3320      	adds	r3, #32
 800093e:	443b      	add	r3, r7
 8000940:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(i=0; i<bytes-1; i++){
 8000944:	7f7b      	ldrb	r3, [r7, #29]
 8000946:	3301      	adds	r3, #1
 8000948:	777b      	strb	r3, [r7, #29]
 800094a:	7f7a      	ldrb	r2, [r7, #29]
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	3b01      	subs	r3, #1
 8000950:	429a      	cmp	r2, r3
 8000952:	dbec      	blt.n	800092e <SendInfo+0x7e>
    }

    cks	= 0;
 8000954:	2300      	movs	r3, #0
 8000956:	77bb      	strb	r3, [r7, #30]

    //Cargar en bufferTx con checksum:
    for(i=0 ;i<indiceAux;i++){
 8000958:	2300      	movs	r3, #0
 800095a:	777b      	strb	r3, [r7, #29]
 800095c:	e01b      	b.n	8000996 <SendInfo+0xe6>
        cks^= bufAux[i];
 800095e:	7f7b      	ldrb	r3, [r7, #29]
 8000960:	3320      	adds	r3, #32
 8000962:	443b      	add	r3, r7
 8000964:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000968:	7fbb      	ldrb	r3, [r7, #30]
 800096a:	4053      	eors	r3, r2
 800096c:	77bb      	strb	r3, [r7, #30]
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 800096e:	7f7a      	ldrb	r2, [r7, #29]
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <SendInfo+0x13c>)
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	1c59      	adds	r1, r3, #1
 8000976:	b2c8      	uxtb	r0, r1
 8000978:	491c      	ldr	r1, [pc, #112]	; (80009ec <SendInfo+0x13c>)
 800097a:	7148      	strb	r0, [r1, #5]
 800097c:	4619      	mov	r1, r3
 800097e:	f102 0320 	add.w	r3, r2, #32
 8000982:	443b      	add	r3, r7
 8000984:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <SendInfo+0x13c>)
 800098a:	440b      	add	r3, r1
 800098c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    for(i=0 ;i<indiceAux;i++){
 8000990:	7f7b      	ldrb	r3, [r7, #29]
 8000992:	3301      	adds	r3, #1
 8000994:	777b      	strb	r3, [r7, #29]
 8000996:	7f7a      	ldrb	r2, [r7, #29]
 8000998:	7ffb      	ldrb	r3, [r7, #31]
 800099a:	429a      	cmp	r2, r3
 800099c:	d3df      	bcc.n	800095e <SendInfo+0xae>
    }
    // Agregar el checksum al final
    datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <SendInfo+0x13c>)
 80009a0:	795b      	ldrb	r3, [r3, #5]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	b2d1      	uxtb	r1, r2
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <SendInfo+0x13c>)
 80009a8:	7151      	strb	r1, [r2, #5]
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <SendInfo+0x13c>)
 80009ae:	4413      	add	r3, r2
 80009b0:	7fba      	ldrb	r2, [r7, #30]
 80009b2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    // Cantidad total de bytes a transmitir (incluyendo checksum)
    datosComSerie.bytesTosend = datosComSerie.indexWriteTx;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <SendInfo+0x13c>)
 80009b8:	795a      	ldrb	r2, [r3, #5]
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <SendInfo+0x13c>)
 80009bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207

    // Paquete enviado hacia QT: 55 4E 45 52   01 	 3A     F0         0D          C8
    //							 'U''N''E''R''Nbytes'':''ID:Alive''Payload: ACK''Cheksum'
    CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend); //transmision por USB hacia QT
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <SendInfo+0x13c>)
 80009c2:	799b      	ldrb	r3, [r3, #6]
 80009c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <SendInfo+0x13c>)
 80009ca:	4413      	add	r3, r2
 80009cc:	3307      	adds	r3, #7
 80009ce:	4a07      	ldr	r2, [pc, #28]	; (80009ec <SendInfo+0x13c>)
 80009d0:	f892 2207 	ldrb.w	r2, [r2, #519]	; 0x207
 80009d4:	b292      	uxth	r2, r2
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f007 fdf1 	bl	80085c0 <CDC_Transmit_FS>
    datosComSerie.indexWriteTx = 0;
 80009de:	4b03      	ldr	r3, [pc, #12]	; (80009ec <SendInfo+0x13c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	715a      	strb	r2, [r3, #5]

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000268 	.word	0x20000268

080009f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d104      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a04:	7813      	ldrb	r3, [r2, #0]
 8000a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0a:	7013      	strb	r3, [r2, #0]
	}

}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	20000264 	.word	0x20000264

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	b0a9      	sub	sp, #164	; 0xa4
 8000a24:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f000 fbf7 	bl	8001224 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_Attach_Rx(&datafromUSB);
 8000a36:	4842      	ldr	r0, [pc, #264]	; (8000b40 <main+0x120>)
 8000a38:	f007 fdfa 	bl	8008630 <CDC_Attach_Rx>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f88e 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a40:	f000 fa18 	bl	8000e74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a44:	f000 f9f6 	bl	8000e34 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a48:	f000 f9a4 	bl	8000d94 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000a4c:	f007 fc9c 	bl	8008388 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000a50:	f000 f8ec 	bl	8000c2c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000a54:	483b      	ldr	r0, [pc, #236]	; (8000b44 <main+0x124>)
 8000a56:	f003 fd73 	bl	8004540 <HAL_TIM_Base_Start_IT>

  IS10MS = FALSE;
 8000a5a:	4a3b      	ldr	r2, [pc, #236]	; (8000b48 <main+0x128>)
 8000a5c:	7813      	ldrb	r3, [r2, #0]
 8000a5e:	f36f 1386 	bfc	r3, #6, #1
 8000a62:	7013      	strb	r3, [r2, #0]
  datosComSerie.indexReadRx = 0;
 8000a64:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <main+0x12c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 8000a6a:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <main+0x12c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	70da      	strb	r2, [r3, #3]
  myFlags.allFlags = 0;
 8000a70:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <main+0x128>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, NUM_CHANNELS);
 8000a76:	2208      	movs	r2, #8
 8000a78:	4935      	ldr	r1, [pc, #212]	; (8000b50 <main+0x130>)
 8000a7a:	4836      	ldr	r0, [pc, #216]	; (8000b54 <main+0x134>)
 8000a7c:	f000 fcac 	bl	80013d8 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  comunicationsTask(&datosComSerie);
 8000a80:	4832      	ldr	r0, [pc, #200]	; (8000b4c <main+0x12c>)
 8000a82:	f7ff fdaf 	bl	80005e4 <comunicationsTask>

	  if(IS10MS){
 8000a86:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <main+0x128>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f5      	beq.n	8000a80 <main+0x60>
		  time250us++;
 8000a94:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a98:	3301      	adds	r3, #1
 8000a9a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  IS10MS =! IS10MS;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <main+0x128>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2d9      	uxtb	r1, r3
 8000ab2:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <main+0x128>)
 8000ab4:	7813      	ldrb	r3, [r2, #0]
 8000ab6:	f361 1386 	bfi	r3, r1, #6, #1
 8000aba:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 8000abc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000ac0:	2b27      	cmp	r3, #39	; 0x27
 8000ac2:	d9dd      	bls.n	8000a80 <main+0x60>
			  time10ms++;
 8000ac4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			  time250us = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			  if(time10ms == 100){
 8000ad4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000ad8:	2b64      	cmp	r3, #100	; 0x64
 8000ada:	d1d1      	bne.n	8000a80 <main+0x60>
				  sprintf(usbMsg,
				          "PA0:%4u PA1:%4u PA2:%4u PA3:%4u PA4:%4u PA5:%4u PA6:%4u PA7:%4u\r\n",
						  adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3],
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <main+0x130>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
				  sprintf(usbMsg,
 8000ae0:	469c      	mov	ip, r3
						  adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3],
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <main+0x130>)
 8000ae4:	885b      	ldrh	r3, [r3, #2]
				  sprintf(usbMsg,
 8000ae6:	469e      	mov	lr, r3
						  adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3],
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <main+0x130>)
 8000aea:	889b      	ldrh	r3, [r3, #4]
				  sprintf(usbMsg,
 8000aec:	461a      	mov	r2, r3
						  adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3],
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <main+0x130>)
 8000af0:	88db      	ldrh	r3, [r3, #6]
				  sprintf(usbMsg,
 8000af2:	4619      	mov	r1, r3
						  adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <main+0x130>)
 8000af6:	891b      	ldrh	r3, [r3, #8]
				  sprintf(usbMsg,
 8000af8:	461c      	mov	r4, r3
						  adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <main+0x130>)
 8000afc:	895b      	ldrh	r3, [r3, #10]
				  sprintf(usbMsg,
 8000afe:	461d      	mov	r5, r3
						  adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <main+0x130>)
 8000b02:	899b      	ldrh	r3, [r3, #12]
				  sprintf(usbMsg,
 8000b04:	461e      	mov	r6, r3
						  adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <main+0x130>)
 8000b08:	89db      	ldrh	r3, [r3, #14]
				  sprintf(usbMsg,
 8000b0a:	1d38      	adds	r0, r7, #4
 8000b0c:	9305      	str	r3, [sp, #20]
 8000b0e:	9604      	str	r6, [sp, #16]
 8000b10:	9503      	str	r5, [sp, #12]
 8000b12:	9402      	str	r4, [sp, #8]
 8000b14:	9101      	str	r1, [sp, #4]
 8000b16:	9200      	str	r2, [sp, #0]
 8000b18:	4673      	mov	r3, lr
 8000b1a:	4662      	mov	r2, ip
 8000b1c:	490e      	ldr	r1, [pc, #56]	; (8000b58 <main+0x138>)
 8000b1e:	f008 f9b1 	bl	8008e84 <siprintf>

				  CDC_Transmit_FS((uint8_t*)usbMsg, strlen(usbMsg));
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb5b 	bl	80001e0 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f007 fd44 	bl	80085c0 <CDC_Transmit_FS>
				  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
				  time10ms = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	  comunicationsTask(&datosComSerie);
 8000b3e:	e79f      	b.n	8000a80 <main+0x60>
 8000b40:	0800058d 	.word	0x0800058d
 8000b44:	2000021c 	.word	0x2000021c
 8000b48:	20000264 	.word	0x20000264
 8000b4c:	20000268 	.word	0x20000268
 8000b50:	20000474 	.word	0x20000474
 8000b54:	20000174 	.word	0x20000174
 8000b58:	080097e4 	.word	0x080097e4

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	; 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2230      	movs	r2, #48	; 0x30
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f008 f9aa 	bl	8008ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <SystemClock_Config+0xc8>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <SystemClock_Config+0xc8>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <SystemClock_Config+0xc8>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <SystemClock_Config+0xcc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <SystemClock_Config+0xcc>)
 8000ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <SystemClock_Config+0xcc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bcc:	2319      	movs	r3, #25
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bd0:	23c0      	movs	r3, #192	; 0xc0
 8000bd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 f82d 	bl	8003c40 <HAL_RCC_OscConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bec:	f000 f994 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fa8f 	bl	8004130 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c18:	f000 f97e 	bl	8000f18 <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3750      	adds	r7, #80	; 0x50
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c3e:	4b52      	ldr	r3, [pc, #328]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c40:	4a52      	ldr	r2, [pc, #328]	; (8000d8c <MX_ADC1_Init+0x160>)
 8000c42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c44:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4c:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c52:	4b4d      	ldr	r3, [pc, #308]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c58:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c5e:	4b4a      	ldr	r3, [pc, #296]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c66:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6c:	4b46      	ldr	r3, [pc, #280]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c6e:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <MX_ADC1_Init+0x164>)
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c72:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000c78:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c7e:	4b42      	ldr	r3, [pc, #264]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c86:	4b40      	ldr	r3, [pc, #256]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c8c:	483e      	ldr	r0, [pc, #248]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000c8e:	f000 fb5f 	bl	8001350 <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c98:	f000 f93e 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4836      	ldr	r0, [pc, #216]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000cae:	f000 fca5 	bl	80015fc <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f000 f92e 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	482f      	ldr	r0, [pc, #188]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000cca:	f000 fc97 	bl	80015fc <HAL_ADC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000cd4:	f000 f920 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4828      	ldr	r0, [pc, #160]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000ce6:	f000 fc89 	bl	80015fc <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000cf0:	f000 f912 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4821      	ldr	r0, [pc, #132]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000d02:	f000 fc7b 	bl	80015fc <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d0c:	f000 f904 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d10:	2304      	movs	r3, #4
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d14:	2305      	movs	r3, #5
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	481a      	ldr	r0, [pc, #104]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000d1e:	f000 fc6d 	bl	80015fc <HAL_ADC_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000d28:	f000 f8f6 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000d30:	2306      	movs	r3, #6
 8000d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	4619      	mov	r1, r3
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000d3a:	f000 fc5f 	bl	80015fc <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000d44:	f000 f8e8 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000d56:	f000 fc51 	bl	80015fc <HAL_ADC_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000d60:	f000 f8da 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d64:	2307      	movs	r3, #7
 8000d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_ADC1_Init+0x15c>)
 8000d72:	f000 fc43 	bl	80015fc <HAL_ADC_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000d7c:	f000 f8cc 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000174 	.word	0x20000174
 8000d8c:	40012000 	.word	0x40012000
 8000d90:	0f000001 	.word	0x0f000001

08000d94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000db2:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <MX_TIM1_Init+0x9c>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000dc4:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000dc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000dde:	f003 fb5f 	bl	80044a0 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000de8:	f000 f896 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000dfa:	f003 fcf3 	bl	80047e4 <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e04:	f000 f888 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_TIM1_Init+0x98>)
 8000e16:	f003 fef5 	bl	8004c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e20:	f000 f87a 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000021c 	.word	0x2000021c
 8000e30:	40010000 	.word	0x40010000

08000e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_DMA_Init+0x3c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <MX_DMA_Init+0x3c>)
 8000e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_DMA_Init+0x3c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2038      	movs	r0, #56	; 0x38
 8000e5c:	f000 ff59 	bl	8001d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e60:	2038      	movs	r0, #56	; 0x38
 8000e62:	f000 ff72 	bl	8001d4a <HAL_NVIC_EnableIRQ>

}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_GPIO_Init+0x9c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <MX_GPIO_Init+0xa0>)
 8000ee6:	f001 fc3f 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_GPIO_Init+0xa0>)
 8000f04:	f001 faac 	bl	8002460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020800 	.word	0x40020800

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a2e      	ldr	r2, [pc, #184]	; (800104c <HAL_ADC_MspInit+0xd8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d156      	bne.n	8001044 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a25      	ldr	r2, [pc, #148]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fce:	23ff      	movs	r3, #255	; 0xff
 8000fd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481c      	ldr	r0, [pc, #112]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000fe2:	f001 fa3d 	bl	8002460 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8000fea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8001008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800100c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8001010:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001014:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 800102a:	f000 fea9 	bl	8001d80 <HAL_DMA_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001034:	f7ff ff70 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 800103c:	639a      	str	r2, [r3, #56]	; 0x38
 800103e:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012000 	.word	0x40012000
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	200001bc 	.word	0x200001bc
 800105c:	40026410 	.word	0x40026410

08001060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_TIM_Base_MspInit+0x48>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d115      	bne.n	800109e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_TIM_Base_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_TIM_Base_MspInit+0x4c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_TIM_Base_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2019      	movs	r0, #25
 8001094:	f000 fe3d 	bl	8001d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001098:	2019      	movs	r0, #25
 800109a:	f000 fe56 	bl	8001d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000
 80010ac:	40023800 	.word	0x40023800

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f8e4 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800110a:	f003 fa7b 	bl	8004604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000021c 	.word	0x2000021c

08001118 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <DMA2_Stream0_IRQHandler+0x10>)
 800111e:	f000 ff35 	bl	8001f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001bc 	.word	0x200001bc

0800112c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <OTG_FS_IRQHandler+0x10>)
 8001132:	f001 fc76 	bl	8002a22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000d70 	.word	0x20000d70

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f007 feb0 	bl	8008ed4 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20020000 	.word	0x20020000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000484 	.word	0x20000484
 80011a8:	200015c0 	.word	0x200015c0

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d4:	f7ff ffea 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f007 fe6f 	bl	8008ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff fc0d 	bl	8000a20 <main>
  bx  lr    
 8001206:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8001214:	080098cc 	.word	0x080098cc
  ldr r2, =_sbss
 8001218:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 800121c:	200015bc 	.word	0x200015bc

08001220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_Init+0x40>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_Init+0x40>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x40>)
 8001246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 fd55 	bl	8001cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	200f      	movs	r0, #15
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fe64 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fd6d 	bl	8001d66 <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 fd35 	bl	8001d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000488 	.word	0x20000488

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000488 	.word	0x20000488

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e033      	b.n	80013ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fe00 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	d118      	bne.n	80013c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001396:	f023 0302 	bic.w	r3, r3, #2
 800139a:	f043 0202 	orr.w	r2, r3, #2
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fa5c 	bl	8001860 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f023 0303 	bic.w	r3, r3, #3
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
 80013be:	e001      	b.n	80013c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_Start_DMA+0x22>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e0d0      	b.n	800159c <HAL_ADC_Start_DMA+0x1c4>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d018      	beq.n	8001442 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001420:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <HAL_ADC_Start_DMA+0x1cc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a60      	ldr	r2, [pc, #384]	; (80015a8 <HAL_ADC_Start_DMA+0x1d0>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0c9a      	lsrs	r2, r3, #18
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001434:	e002      	b.n	800143c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3b01      	subs	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f9      	bne.n	8001436 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001450:	d107      	bne.n	8001462 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001460:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b01      	cmp	r3, #1
 800146e:	f040 8088 	bne.w	8001582 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800149c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b0:	d106      	bne.n	80014c0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f023 0206 	bic.w	r2, r3, #6
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
 80014be:	e002      	b.n	80014c6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_ADC_Start_DMA+0x1d4>)
 80014d0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	4a36      	ldr	r2, [pc, #216]	; (80015b0 <HAL_ADC_Start_DMA+0x1d8>)
 80014d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	4a35      	ldr	r2, [pc, #212]	; (80015b4 <HAL_ADC_Start_DMA+0x1dc>)
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	4a34      	ldr	r2, [pc, #208]	; (80015b8 <HAL_ADC_Start_DMA+0x1e0>)
 80014e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001502:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001512:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	334c      	adds	r3, #76	; 0x4c
 800151e:	4619      	mov	r1, r3
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f000 fcda 	bl	8001edc <HAL_DMA_Start_IT>
 8001528:	4603      	mov	r3, r0
 800152a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 031f 	and.w	r3, r3, #31
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10f      	bne.n	8001558 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d129      	bne.n	800159a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	e020      	b.n	800159a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_ADC_Start_DMA+0x1e4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d11b      	bne.n	800159a <HAL_ADC_Start_DMA+0x1c2>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d114      	bne.n	800159a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	e00b      	b.n	800159a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800159a:	7ffb      	ldrb	r3, [r7, #31]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000000 	.word	0x20000000
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	40012300 	.word	0x40012300
 80015b0:	08001a59 	.word	0x08001a59
 80015b4:	08001b13 	.word	0x08001b13
 80015b8:	08001b2f 	.word	0x08001b2f
 80015bc:	40012000 	.word	0x40012000

080015c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x1c>
 8001614:	2302      	movs	r3, #2
 8001616:	e113      	b.n	8001840 <HAL_ADC_ConfigChannel+0x244>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b09      	cmp	r3, #9
 8001626:	d925      	bls.n	8001674 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68d9      	ldr	r1, [r3, #12]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	3b1e      	subs	r3, #30
 800163e:	2207      	movs	r2, #7
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43da      	mvns	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	400a      	ands	r2, r1
 800164c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68d9      	ldr	r1, [r3, #12]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	4603      	mov	r3, r0
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4403      	add	r3, r0
 8001666:	3b1e      	subs	r3, #30
 8001668:	409a      	lsls	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	e022      	b.n	80016ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6919      	ldr	r1, [r3, #16]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	2207      	movs	r2, #7
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	400a      	ands	r2, r1
 8001696:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6919      	ldr	r1, [r3, #16]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4403      	add	r3, r0
 80016b0:	409a      	lsls	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d824      	bhi.n	800170c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	3b05      	subs	r3, #5
 80016d4:	221f      	movs	r2, #31
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	400a      	ands	r2, r1
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	3b05      	subs	r3, #5
 80016fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
 800170a:	e04c      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d824      	bhi.n	800175e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3b23      	subs	r3, #35	; 0x23
 8001726:	221f      	movs	r2, #31
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43da      	mvns	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	400a      	ands	r2, r1
 8001734:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b23      	subs	r3, #35	; 0x23
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
 800175c:	e023      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b41      	subs	r3, #65	; 0x41
 8001770:	221f      	movs	r2, #31
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	400a      	ands	r2, r1
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b41      	subs	r3, #65	; 0x41
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017a6:	4b29      	ldr	r3, [pc, #164]	; (800184c <HAL_ADC_ConfigChannel+0x250>)
 80017a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a28      	ldr	r2, [pc, #160]	; (8001850 <HAL_ADC_ConfigChannel+0x254>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d10f      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1d8>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d10b      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_ADC_ConfigChannel+0x254>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12b      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x23a>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_ADC_ConfigChannel+0x258>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d003      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x1f4>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b11      	cmp	r3, #17
 80017ee:	d122      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_ADC_ConfigChannel+0x258>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d111      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_ADC_ConfigChannel+0x25c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_ADC_ConfigChannel+0x260>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9a      	lsrs	r2, r3, #18
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001828:	e002      	b.n	8001830 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3b01      	subs	r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f9      	bne.n	800182a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40012300 	.word	0x40012300
 8001850:	40012000 	.word	0x40012000
 8001854:	10000012 	.word	0x10000012
 8001858:	20000000 	.word	0x20000000
 800185c:	431bde83 	.word	0x431bde83

08001860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001868:	4b79      	ldr	r3, [pc, #484]	; (8001a50 <ADC_Init+0x1f0>)
 800186a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	431a      	orrs	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	021a      	lsls	r2, r3, #8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6899      	ldr	r1, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <ADC_Init+0x1f4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d022      	beq.n	800193e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6899      	ldr	r1, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6899      	ldr	r1, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	e00f      	b.n	800195e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800194c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800195c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0202 	bic.w	r2, r2, #2
 800196c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6899      	ldr	r1, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	005a      	lsls	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01b      	beq.n	80019c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800199a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	3b01      	subs	r3, #1
 80019b8:	035a      	lsls	r2, r3, #13
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	e007      	b.n	80019d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	051a      	lsls	r2, r3, #20
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6899      	ldr	r1, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a16:	025a      	lsls	r2, r3, #9
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6899      	ldr	r1, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	029a      	lsls	r2, r3, #10
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	609a      	str	r2, [r3, #8]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	40012300 	.word	0x40012300
 8001a54:	0f000001 	.word	0x0f000001

08001a58 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d13c      	bne.n	8001aec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d12b      	bne.n	8001ae4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d127      	bne.n	8001ae4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d119      	bne.n	8001ae4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0220 	bic.w	r2, r2, #32
 8001abe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7ff fd6b 	bl	80015c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001aea:	e00e      	b.n	8001b0a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fd75 	bl	80015e8 <HAL_ADC_ErrorCallback>
}
 8001afe:	e004      	b.n	8001b0a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7ff fd57 	bl	80015d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2240      	movs	r2, #64	; 0x40
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0204 	orr.w	r2, r3, #4
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f7ff fd4a 	bl	80015e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <__NVIC_EnableIRQ+0x38>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	; (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc8:	d301      	bcc.n	8001cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00f      	b.n	8001cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <SysTick_Config+0x40>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f7ff ff8e 	bl	8001bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce8:	2207      	movs	r2, #7
 8001cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	e000e010 	.word	0xe000e010

08001cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff29 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d24:	f7ff ff3e 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	6978      	ldr	r0, [r7, #20]
 8001d30:	f7ff ff8e 	bl	8001c50 <NVIC_EncodePriority>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff5d 	bl	8001bfc <__NVIC_SetPriority>
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff31 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ffa2 	bl	8001cb8 <SysTick_Config>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff fab0 	bl	80012f0 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e099      	b.n	8001ed0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbc:	e00f      	b.n	8001dde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dbe:	f7ff fa97 	bl	80012f0 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d908      	bls.n	8001dde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e078      	b.n	8001ed0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e8      	bne.n	8001dbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_DMA_Init+0x158>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d107      	bne.n	8001e48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4313      	orrs	r3, r2
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f023 0307 	bic.w	r3, r3, #7
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d117      	bne.n	8001ea2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00e      	beq.n	8001ea2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fa6f 	bl	8002368 <DMA_CheckFifoParam>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e016      	b.n	8001ed0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fa26 	bl	80022fc <DMA_CalcBaseAndBitshift>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	223f      	movs	r2, #63	; 0x3f
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	f010803f 	.word	0xf010803f

08001edc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_DMA_Start_IT+0x26>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e040      	b.n	8001f84 <HAL_DMA_Start_IT+0xa8>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d12f      	bne.n	8001f76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f9b8 	bl	80022a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	223f      	movs	r2, #63	; 0x3f
 8001f36:	409a      	lsls	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0216 	orr.w	r2, r2, #22
 8001f4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0208 	orr.w	r2, r2, #8
 8001f62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e005      	b.n	8001f82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f98:	4b8e      	ldr	r3, [pc, #568]	; (80021d4 <HAL_DMA_IRQHandler+0x248>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a8e      	ldr	r2, [pc, #568]	; (80021d8 <HAL_DMA_IRQHandler+0x24c>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a9b      	lsrs	r3, r3, #10
 8001fa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01a      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0204 	bic.w	r2, r2, #4
 8001fde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d012      	beq.n	800202e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2201      	movs	r2, #1
 800201c:	409a      	lsls	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0202 	orr.w	r2, r3, #2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	2204      	movs	r2, #4
 8002034:	409a      	lsls	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2204      	movs	r2, #4
 8002052:	409a      	lsls	r2, r3
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	f043 0204 	orr.w	r2, r3, #4
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2210      	movs	r2, #16
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d043      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d03c      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2210      	movs	r2, #16
 8002088:	409a      	lsls	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d018      	beq.n	80020ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d108      	bne.n	80020bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d024      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
 80020ba:	e01f      	b.n	80020fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
 80020cc:	e016      	b.n	80020fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d107      	bne.n	80020ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0208 	bic.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	2220      	movs	r2, #32
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 808f 	beq.w	800222c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8087 	beq.w	800222c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	2220      	movs	r2, #32
 8002124:	409a      	lsls	r2, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b05      	cmp	r3, #5
 8002134:	d136      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0216 	bic.w	r2, r2, #22
 8002144:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002154:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <HAL_DMA_IRQHandler+0x1da>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0208 	bic.w	r2, r2, #8
 8002174:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	223f      	movs	r2, #63	; 0x3f
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002196:	2b00      	cmp	r3, #0
 8002198:	d07e      	beq.n	8002298 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4798      	blx	r3
        }
        return;
 80021a2:	e079      	b.n	8002298 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01d      	beq.n	80021ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10d      	bne.n	80021dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d031      	beq.n	800222c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
 80021d0:	e02c      	b.n	800222c <HAL_DMA_IRQHandler+0x2a0>
 80021d2:	bf00      	nop
 80021d4:	20000000 	.word	0x20000000
 80021d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d023      	beq.n	800222c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
 80021ec:	e01e      	b.n	800222c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10f      	bne.n	800221c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0210 	bic.w	r2, r2, #16
 800220a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	2b00      	cmp	r3, #0
 8002232:	d032      	beq.n	800229a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d022      	beq.n	8002286 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2205      	movs	r2, #5
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3301      	adds	r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	d307      	bcc.n	8002274 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f2      	bne.n	8002258 <HAL_DMA_IRQHandler+0x2cc>
 8002272:	e000      	b.n	8002276 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002274:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
 8002296:	e000      	b.n	800229a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002298:	bf00      	nop
    }
  }
}
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b40      	cmp	r3, #64	; 0x40
 80022cc:	d108      	bne.n	80022e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022de:	e007      	b.n	80022f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	60da      	str	r2, [r3, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3b10      	subs	r3, #16
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <DMA_CalcBaseAndBitshift+0x64>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002316:	4a13      	ldr	r2, [pc, #76]	; (8002364 <DMA_CalcBaseAndBitshift+0x68>)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d909      	bls.n	800233e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	1d1a      	adds	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	659a      	str	r2, [r3, #88]	; 0x58
 800233c:	e007      	b.n	800234e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	aaaaaaab 	.word	0xaaaaaaab
 8002364:	08009880 	.word	0x08009880

08002368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11f      	bne.n	80023c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d856      	bhi.n	8002436 <DMA_CheckFifoParam+0xce>
 8002388:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <DMA_CheckFifoParam+0x28>)
 800238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238e:	bf00      	nop
 8002390:	080023a1 	.word	0x080023a1
 8002394:	080023b3 	.word	0x080023b3
 8002398:	080023a1 	.word	0x080023a1
 800239c:	08002437 	.word	0x08002437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d046      	beq.n	800243a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b0:	e043      	b.n	800243a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ba:	d140      	bne.n	800243e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e03d      	b.n	800243e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ca:	d121      	bne.n	8002410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d837      	bhi.n	8002442 <DMA_CheckFifoParam+0xda>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <DMA_CheckFifoParam+0x70>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	080023e9 	.word	0x080023e9
 80023dc:	080023ef 	.word	0x080023ef
 80023e0:	080023e9 	.word	0x080023e9
 80023e4:	08002401 	.word	0x08002401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      break;
 80023ec:	e030      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d025      	beq.n	8002446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fe:	e022      	b.n	8002446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002408:	d11f      	bne.n	800244a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800240e:	e01c      	b.n	800244a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d903      	bls.n	800241e <DMA_CheckFifoParam+0xb6>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d003      	beq.n	8002424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800241c:	e018      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
      break;
 8002422:	e015      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00e      	beq.n	800244e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      break;
 8002434:	e00b      	b.n	800244e <DMA_CheckFifoParam+0xe6>
      break;
 8002436:	bf00      	nop
 8002438:	e00a      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
 800243c:	e008      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e006      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e004      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e002      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;   
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
    }
  } 
  
  return status; 
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e159      	b.n	8002730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	f040 8148 	bne.w	800272a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d005      	beq.n	80024b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d130      	bne.n	8002514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0201 	and.w	r2, r3, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b03      	cmp	r3, #3
 800251e:	d017      	beq.n	8002550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d123      	bne.n	80025a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	08da      	lsrs	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3208      	adds	r2, #8
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	08da      	lsrs	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a2 	beq.w	800272a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b57      	ldr	r3, [pc, #348]	; (8002748 <HAL_GPIO_Init+0x2e8>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a56      	ldr	r2, [pc, #344]	; (8002748 <HAL_GPIO_Init+0x2e8>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b54      	ldr	r3, [pc, #336]	; (8002748 <HAL_GPIO_Init+0x2e8>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002602:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_GPIO_Init+0x2ec>)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a49      	ldr	r2, [pc, #292]	; (8002750 <HAL_GPIO_Init+0x2f0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d019      	beq.n	8002662 <HAL_GPIO_Init+0x202>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a48      	ldr	r2, [pc, #288]	; (8002754 <HAL_GPIO_Init+0x2f4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <HAL_GPIO_Init+0x1fe>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a47      	ldr	r2, [pc, #284]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00d      	beq.n	800265a <HAL_GPIO_Init+0x1fa>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a46      	ldr	r2, [pc, #280]	; (800275c <HAL_GPIO_Init+0x2fc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <HAL_GPIO_Init+0x1f6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a45      	ldr	r2, [pc, #276]	; (8002760 <HAL_GPIO_Init+0x300>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_GPIO_Init+0x1f2>
 800264e:	2304      	movs	r3, #4
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x204>
 8002652:	2307      	movs	r3, #7
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x204>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x204>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x204>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x204>
 8002662:	2300      	movs	r3, #0
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002674:	4935      	ldr	r1, [pc, #212]	; (800274c <HAL_GPIO_Init+0x2ec>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <HAL_GPIO_Init+0x304>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a24      	ldr	r2, [pc, #144]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_GPIO_Init+0x304>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002724:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <HAL_GPIO_Init+0x304>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f aea2 	bls.w	800247c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40013c00 	.word	0x40013c00

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002784:	e003      	b.n	800278e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	041a      	lsls	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af02      	add	r7, sp, #8
 80027a0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e101      	b.n	80029b0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f006 f852 	bl	8008870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2203      	movs	r2, #3
 80027d0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027da:	d102      	bne.n	80027e2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fba5 	bl	8004f36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7c1a      	ldrb	r2, [r3, #16]
 80027f4:	f88d 2000 	strb.w	r2, [sp]
 80027f8:	3304      	adds	r3, #4
 80027fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027fc:	f002 fa84 	bl	8004d08 <USB_CoreInit>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0ce      	b.n	80029b0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f002 fb9d 	bl	8004f58 <USB_SetCurrentMode>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0bf      	b.n	80029b0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e04a      	b.n	80028cc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3315      	adds	r3, #21
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3314      	adds	r3, #20
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	b298      	uxth	r0, r3
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	332e      	adds	r3, #46	; 0x2e
 8002872:	4602      	mov	r2, r0
 8002874:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3318      	adds	r3, #24
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	331c      	adds	r3, #28
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	3320      	adds	r3, #32
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3324      	adds	r3, #36	; 0x24
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	3301      	adds	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	791b      	ldrb	r3, [r3, #4]
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d3af      	bcc.n	8002836 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e044      	b.n	8002966 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	f203 2355 	addw	r3, r3, #597	; 0x255
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	3301      	adds	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	791b      	ldrb	r3, [r3, #4]
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	429a      	cmp	r2, r3
 800296e:	d3b5      	bcc.n	80028dc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7c1a      	ldrb	r2, [r3, #16]
 8002978:	f88d 2000 	strb.w	r2, [sp]
 800297c:	3304      	adds	r3, #4
 800297e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002980:	f002 fb36 	bl	8004ff0 <USB_DevInit>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00c      	b.n	80029b0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fb80 	bl	80060ae <USB_DevDisconnect>

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_Start+0x1c>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e022      	b.n	8002a1a <HAL_PCD_Start+0x62>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d009      	beq.n	80029fc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fa87 	bl	8004f14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 fb2e 	bl	800606c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a22:	b590      	push	{r4, r7, lr}
 8002a24:	b08d      	sub	sp, #52	; 0x34
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 fbec 	bl	8006216 <USB_GetMode>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f040 848c 	bne.w	800335e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fb50 	bl	80060f0 <USB_ReadInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8482 	beq.w	800335c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fb3d 	bl	80060f0 <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d107      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f002 0202 	and.w	r2, r2, #2
 8002a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fb2b 	bl	80060f0 <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d161      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0210 	bic.w	r2, r2, #16
 8002ab2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	0c5b      	lsrs	r3, r3, #17
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d124      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d035      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6a38      	ldr	r0, [r7, #32]
 8002b00:	f003 f962 	bl	8005dc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b10:	441a      	add	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b22:	441a      	add	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	615a      	str	r2, [r3, #20]
 8002b28:	e016      	b.n	8002b58 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	0c5b      	lsrs	r3, r3, #17
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d110      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6a38      	ldr	r0, [r7, #32]
 8002b42:	f003 f941 	bl	8005dc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b52:	441a      	add	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0210 	orr.w	r2, r2, #16
 8002b66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 fabf 	bl	80060f0 <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b7c:	f040 80a7 	bne.w	8002cce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fac4 	bl	8006116 <USB_ReadDevAllOutEpInterrupt>
 8002b8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b90:	e099      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 808e 	beq.w	8002cba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fae8 	bl	800617e <USB_ReadDevOutEPInterrupt>
 8002bae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2301      	movs	r3, #1
 8002bca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fea4 	bl	800391c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bea:	461a      	mov	r2, r3
 8002bec:	2308      	movs	r3, #8
 8002bee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 ff7a 	bl	8003aec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2310      	movs	r3, #16
 8002c12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d030      	beq.n	8002c80 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d109      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3304      	adds	r3, #4
 8002c52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	78db      	ldrb	r3, [r3, #3]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d108      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f005 fefd 	bl	8008a68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c96:	461a      	mov	r2, r3
 8002c98:	2320      	movs	r3, #32
 8002c9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f47f af62 	bne.w	8002b92 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fa0c 	bl	80060f0 <USB_ReadInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ce2:	f040 80db 	bne.w	8002e9c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fa2d 	bl	800614a <USB_ReadDevAllInEpInterrupt>
 8002cf0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cf6:	e0cd      	b.n	8002e94 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80c2 	beq.w	8002e88 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 fa53 	bl	80061ba <USB_ReadDevInEPInterrupt>
 8002d14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d057      	beq.n	8002dd0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	2201      	movs	r2, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69f9      	ldr	r1, [r7, #28]
 8002d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d40:	4013      	ands	r3, r2
 8002d42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d50:	461a      	mov	r2, r3
 8002d52:	2301      	movs	r3, #1
 8002d54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	799b      	ldrb	r3, [r3, #6]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d132      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3320      	adds	r3, #32
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4403      	add	r3, r0
 8002d7e:	331c      	adds	r3, #28
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4419      	add	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4403      	add	r3, r0
 8002d92:	3320      	adds	r3, #32
 8002d94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d113      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x3a2>
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3324      	adds	r3, #36	; 0x24
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	f003 fa5a 	bl	8006278 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f005 fdd1 	bl	8008972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de6:	461a      	mov	r2, r3
 8002de8:	2308      	movs	r3, #8
 8002dea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e02:	461a      	mov	r2, r3
 8002e04:	2310      	movs	r3, #16
 8002e06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2340      	movs	r3, #64	; 0x40
 8002e22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d023      	beq.n	8002e76 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e30:	6a38      	ldr	r0, [r7, #32]
 8002e32:	f002 fa41 	bl	80052b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	3310      	adds	r3, #16
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	78db      	ldrb	r3, [r3, #3]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f005 fe14 	bl	8008a8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e70:	461a      	mov	r2, r3
 8002e72:	2302      	movs	r3, #2
 8002e74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fcbd 	bl	8003802 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f47f af2e 	bne.w	8002cf8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 f925 	bl	80060f0 <USB_ReadInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb0:	d122      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d108      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fea4 	bl	8003c28 <HAL_PCDEx_LPM_Callback>
 8002ee0:	e002      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f005 fdb2 	bl	8008a4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 f8f7 	bl	80060f0 <USB_ReadInterrupts>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0c:	d112      	bne.n	8002f34 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d102      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f005 fd6e 	bl	8008a00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f32:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 f8d9 	bl	80060f0 <USB_ReadInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f48:	f040 80b7 	bne.w	80030ba <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2110      	movs	r1, #16
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 f9a6 	bl	80052b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f70:	e046      	b.n	8003000 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f96:	0151      	lsls	r1, r2, #5
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	440a      	add	r2, r1
 8002f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fb8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	0151      	lsls	r1, r2, #5
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	440a      	add	r2, r1
 8002fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fea:	0151      	lsls	r1, r2, #5
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	440a      	add	r2, r1
 8002ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ff4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ff8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	791b      	ldrb	r3, [r3, #4]
 8003004:	461a      	mov	r2, r3
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	4293      	cmp	r3, r2
 800300a:	d3b2      	bcc.n	8002f72 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800301a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800301e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7bdb      	ldrb	r3, [r3, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d016      	beq.n	8003056 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003038:	f043 030b 	orr.w	r3, r3, #11
 800303c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304e:	f043 030b 	orr.w	r3, r3, #11
 8003052:	6453      	str	r3, [r2, #68]	; 0x44
 8003054:	e015      	b.n	8003082 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003064:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003068:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800306c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307c:	f043 030b 	orr.w	r3, r3, #11
 8003080:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003090:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003094:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030a4:	461a      	mov	r2, r3
 80030a6:	f003 f8e7 	bl	8006278 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 f816 	bl	80060f0 <USB_ReadInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ce:	d123      	bne.n	8003118 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 f8ac 	bl	8006232 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 f963 	bl	80053aa <USB_GetDevSpeed>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681c      	ldr	r4, [r3, #0]
 80030f0:	f001 f9ca 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80030f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030fa:	461a      	mov	r2, r3
 80030fc:	4620      	mov	r0, r4
 80030fe:	f001 fe67 	bl	8004dd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f005 fc5d 	bl	80089c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003116:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f002 ffe7 	bl	80060f0 <USB_ReadInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d10a      	bne.n	8003142 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f005 fc3a 	bl	80089a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f002 0208 	and.w	r2, r2, #8
 8003140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f002 ffd2 	bl	80060f0 <USB_ReadInterrupts>
 800314c:	4603      	mov	r3, r0
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d123      	bne.n	800319e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003162:	2301      	movs	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	e014      	b.n	8003192 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	f203 2357 	addw	r3, r3, #599	; 0x257
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	b2db      	uxtb	r3, r3
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fb0a 	bl	80037a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	3301      	adds	r3, #1
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	791b      	ldrb	r3, [r3, #4]
 8003196:	461a      	mov	r2, r3
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	4293      	cmp	r3, r2
 800319c:	d3e4      	bcc.n	8003168 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f002 ffa4 	bl	80060f0 <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b2:	d13c      	bne.n	800322e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b4:	2301      	movs	r3, #1
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	e02b      	b.n	8003212 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3318      	adds	r3, #24
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d115      	bne.n	800320c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da12      	bge.n	800320c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3317      	adds	r3, #23
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 faca 	bl	80037a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	3301      	adds	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	791b      	ldrb	r3, [r3, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	4293      	cmp	r3, r2
 800321c:	d3cd      	bcc.n	80031ba <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800322c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f002 ff5c 	bl	80060f0 <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003242:	d156      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003244:	2301      	movs	r3, #1
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
 8003248:	e045      	b.n	80032d6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d12e      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003272:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003274:	2b00      	cmp	r3, #0
 8003276:	da2b      	bge.n	80032d0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	0c1a      	lsrs	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003282:	4053      	eors	r3, r2
 8003284:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003288:	2b00      	cmp	r3, #0
 800328a:	d121      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032cc:	6053      	str	r3, [r2, #4]
            break;
 80032ce:	e008      	b.n	80032e2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	3301      	adds	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	791b      	ldrb	r3, [r3, #4]
 80032da:	461a      	mov	r2, r3
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	4293      	cmp	r3, r2
 80032e0:	d3b3      	bcc.n	800324a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f002 fefa 	bl	80060f0 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003306:	d10a      	bne.n	800331e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f005 fbd1 	bl	8008ab0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800331c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f002 fee4 	bl	80060f0 <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d115      	bne.n	800335e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f005 fbc1 	bl	8008acc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	e000      	b.n	800335e <HAL_PCD_IRQHandler+0x93c>
      return;
 800335c:	bf00      	nop
    }
  }
}
 800335e:	3734      	adds	r7, #52	; 0x34
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}

08003364 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_PCD_SetAddress+0x1a>
 800337a:	2302      	movs	r3, #2
 800337c:	e012      	b.n	80033a4 <HAL_PCD_SetAddress+0x40>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f002 fe43 	bl	8006020 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	70fb      	strb	r3, [r7, #3]
 80033be:	460b      	mov	r3, r1
 80033c0:	803b      	strh	r3, [r7, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	da0f      	bge.n	80033f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	3310      	adds	r3, #16
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	3304      	adds	r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	705a      	strb	r2, [r3, #1]
 80033f0:	e00f      	b.n	8003412 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	b2da      	uxtb	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800341e:	883b      	ldrh	r3, [r7, #0]
 8003420:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	78ba      	ldrb	r2, [r7, #2]
 800342c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003440:	78bb      	ldrb	r3, [r7, #2]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d102      	bne.n	800344c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_PCD_EP_Open+0xae>
 8003456:	2302      	movs	r3, #2
 8003458:	e00e      	b.n	8003478 <HAL_PCD_EP_Open+0xcc>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	4618      	mov	r0, r3
 800346a:	f001 ffc3 	bl	80053f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003476:	7afb      	ldrb	r3, [r7, #11]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800348c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003490:	2b00      	cmp	r3, #0
 8003492:	da0f      	bge.n	80034b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3310      	adds	r3, #16
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	705a      	strb	r2, [r3, #1]
 80034b2:	e00f      	b.n	80034d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_PCD_EP_Close+0x6e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e00e      	b.n	800350c <HAL_PCD_EP_Close+0x8c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f002 f801 	bl	8005504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	460b      	mov	r3, r1
 8003522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2200      	movs	r2, #0
 8003554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003556:	7afb      	ldrb	r3, [r7, #11]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	b2da      	uxtb	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	799b      	ldrb	r3, [r3, #6]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	799b      	ldrb	r3, [r3, #6]
 8003578:	461a      	mov	r2, r3
 800357a:	6979      	ldr	r1, [r7, #20]
 800357c:	f002 f89e 	bl	80056bc <USB_EPStartXfer>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80035ac:	681b      	ldr	r3, [r3, #0]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	460b      	mov	r3, r1
 80035c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ca:	7afb      	ldrb	r3, [r7, #11]
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	3310      	adds	r3, #16
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2201      	movs	r2, #1
 80035f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	b2da      	uxtb	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	799b      	ldrb	r3, [r3, #6]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	799b      	ldrb	r3, [r3, #6]
 800361c:	461a      	mov	r2, r3
 800361e:	6979      	ldr	r1, [r7, #20]
 8003620:	f002 f84c 	bl	80056bc <USB_EPStartXfer>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	7912      	ldrb	r2, [r2, #4]
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e04f      	b.n	80036ec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800364c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003650:	2b00      	cmp	r3, #0
 8003652:	da0f      	bge.n	8003674 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 020f 	and.w	r2, r3, #15
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	3310      	adds	r3, #16
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	3304      	adds	r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	705a      	strb	r2, [r3, #1]
 8003672:	e00d      	b.n	8003690 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_PCD_EP_SetStall+0x82>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e01d      	b.n	80036ec <HAL_PCD_EP_SetStall+0xbe>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68f9      	ldr	r1, [r7, #12]
 80036be:	4618      	mov	r0, r3
 80036c0:	f002 fbda 	bl	8005e78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7999      	ldrb	r1, [r3, #6]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036dc:	461a      	mov	r2, r3
 80036de:	f002 fdcb 	bl	8006278 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	7912      	ldrb	r2, [r2, #4]
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e042      	b.n	8003798 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003716:	2b00      	cmp	r3, #0
 8003718:	da0f      	bge.n	800373a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	f003 020f 	and.w	r2, r3, #15
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	3310      	adds	r3, #16
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	705a      	strb	r2, [r3, #1]
 8003738:	e00f      	b.n	800375a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_PCD_EP_ClrStall+0x86>
 8003776:	2302      	movs	r3, #2
 8003778:	e00e      	b.n	8003798 <HAL_PCD_EP_ClrStall+0xa4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	4618      	mov	r0, r3
 800378a:	f002 fbe3 	bl	8005f54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da0c      	bge.n	80037ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	f003 020f 	and.w	r2, r3, #15
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	3310      	adds	r3, #16
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e00c      	b.n	80037e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 020f 	and.w	r2, r3, #15
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	3304      	adds	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68f9      	ldr	r1, [r7, #12]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 fa02 	bl	8005bf8 <USB_EPStopXfer>
 80037f4:	4603      	mov	r3, r0
 80037f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037f8:	7afb      	ldrb	r3, [r7, #11]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b08a      	sub	sp, #40	; 0x28
 8003806:	af02      	add	r7, sp, #8
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	3310      	adds	r3, #16
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d901      	bls.n	800383a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e06b      	b.n	8003912 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	429a      	cmp	r2, r3
 800384e:	d902      	bls.n	8003856 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3303      	adds	r3, #3
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800385e:	e02a      	b.n	80038b6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	429a      	cmp	r2, r3
 8003874:	d902      	bls.n	800387c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3303      	adds	r3, #3
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68d9      	ldr	r1, [r3, #12]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4603      	mov	r3, r0
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	f002 fa57 	bl	8005d4c <USB_WritePacket>

    ep->xfer_buff  += len;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	441a      	add	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d809      	bhi.n	80038e0 <PCD_WriteEmptyTxFifo+0xde>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d203      	bcs.n	80038e0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1bf      	bne.n	8003860 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d811      	bhi.n	8003910 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	2201      	movs	r2, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	43db      	mvns	r3, r3
 8003906:	6939      	ldr	r1, [r7, #16]
 8003908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800390c:	4013      	ands	r3, r2
 800390e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	333c      	adds	r3, #60	; 0x3c
 8003934:	3304      	adds	r3, #4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	799b      	ldrb	r3, [r3, #6]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d17b      	bne.n	8003a4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4a61      	ldr	r2, [pc, #388]	; (8003ae4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	f240 80b9 	bls.w	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80b3 	beq.w	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	461a      	mov	r2, r3
 8003980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003984:	6093      	str	r3, [r2, #8]
 8003986:	e0a7      	b.n	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	461a      	mov	r2, r3
 80039a0:	2320      	movs	r3, #32
 80039a2:	6093      	str	r3, [r2, #8]
 80039a4:	e098      	b.n	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 8093 	bne.w	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4a4b      	ldr	r2, [pc, #300]	; (8003ae4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d90f      	bls.n	80039da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	461a      	mov	r2, r3
 80039d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d6:	6093      	str	r3, [r2, #8]
 80039d8:	e07e      	b.n	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	3304      	adds	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1a      	ldr	r2, [r3, #32]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	0159      	lsls	r1, r3, #5
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	440b      	add	r3, r1
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a06:	1ad2      	subs	r2, r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d114      	bne.n	8003a3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a24:	461a      	mov	r2, r3
 8003a26:	2101      	movs	r1, #1
 8003a28:	f002 fc26 	bl	8006278 <USB_EP0_OutStart>
 8003a2c:	e006      	b.n	8003a3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	441a      	add	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f004 ff7a 	bl	800893c <HAL_PCD_DataOutStageCallback>
 8003a48:	e046      	b.n	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4a26      	ldr	r2, [pc, #152]	; (8003ae8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d124      	bne.n	8003a9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6e:	6093      	str	r3, [r2, #8]
 8003a70:	e032      	b.n	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f004 ff51 	bl	800893c <HAL_PCD_DataOutStageCallback>
 8003a9a:	e01d      	b.n	8003ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f002 fbd6 	bl	8006278 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f004 ff32 	bl	800893c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	4f54300a 	.word	0x4f54300a
 8003ae8:	4f54310a 	.word	0x4f54310a

08003aec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	333c      	adds	r3, #60	; 0x3c
 8003b04:	3304      	adds	r3, #4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d90e      	bls.n	8003b40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d009      	beq.n	8003b40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f004 fee9 	bl	8008918 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d90c      	bls.n	8003b68 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	799b      	ldrb	r3, [r3, #6]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d108      	bne.n	8003b68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b60:	461a      	mov	r2, r3
 8003b62:	2101      	movs	r1, #1
 8003b64:	f002 fb88 	bl	8006278 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	4f54300a 	.word	0x4f54300a

08003b78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	70fb      	strb	r3, [r7, #3]
 8003b84:	4613      	mov	r3, r2
 8003b86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d107      	bne.n	8003ba6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b96:	883b      	ldrh	r3, [r7, #0]
 8003b98:	0419      	lsls	r1, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ba4:	e028      	b.n	8003bf8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e00d      	b.n	8003bd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	3340      	adds	r3, #64	; 0x40
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	4413      	add	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3ec      	bcc.n	8003bba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003be0:	883b      	ldrh	r3, [r7, #0]
 8003be2:	0418      	lsls	r0, r3, #16
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4302      	orrs	r2, r0
 8003bf0:	3340      	adds	r3, #64	; 0x40
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e267      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d075      	beq.n	8003d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c5e:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d112      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b82      	ldr	r3, [pc, #520]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	4b7e      	ldr	r3, [pc, #504]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x108>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d157      	bne.n	8003d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e242      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x74>
 8003ca6:	4b76      	ldr	r3, [pc, #472]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a75      	ldr	r2, [pc, #468]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x98>
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6f      	ldr	r2, [pc, #444]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b6d      	ldr	r3, [pc, #436]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a6c      	ldr	r2, [pc, #432]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cd8:	4b69      	ldr	r3, [pc, #420]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a68      	ldr	r2, [pc, #416]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fafa 	bl	80012f0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fd faf6 	bl	80012f0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e207      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xc0>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fd fae6 	bl	80012f0 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fd fae2 	bl	80012f0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1f3      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0xe8>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d56:	4b4a      	ldr	r3, [pc, #296]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b44      	ldr	r3, [pc, #272]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1c7      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4937      	ldr	r1, [pc, #220]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e03a      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <HAL_RCC_OscConfig+0x244>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd fa9b 	bl	80012f0 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fa97 	bl	80012f0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1a8      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4925      	ldr	r1, [pc, #148]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	e015      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCC_OscConfig+0x244>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd fa7a 	bl	80012f0 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e00:	f7fd fa76 	bl	80012f0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e187      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d036      	beq.n	8003e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_RCC_OscConfig+0x248>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd fa5a 	bl	80012f0 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fd fa56 	bl	80012f0 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e167      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x200>
 8003e5e:	e01b      	b.n	8003e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_OscConfig+0x248>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fd fa43 	bl	80012f0 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	e00e      	b.n	8003e8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6e:	f7fd fa3f 	bl	80012f0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d907      	bls.n	8003e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e150      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	42470000 	.word	0x42470000
 8003e88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ea      	bne.n	8003e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8097 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4b81      	ldr	r3, [pc, #516]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	4b7d      	ldr	r3, [pc, #500]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a7c      	ldr	r2, [pc, #496]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec6:	4b7a      	ldr	r3, [pc, #488]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b77      	ldr	r3, [pc, #476]	; (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee2:	4b74      	ldr	r3, [pc, #464]	; (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a73      	ldr	r2, [pc, #460]	; (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eee:	f7fd f9ff 	bl	80012f0 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fd f9fb 	bl	80012f0 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e10c      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x2ea>
 8003f1c:	4b64      	ldr	r3, [pc, #400]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a63      	ldr	r2, [pc, #396]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e01c      	b.n	8003f64 <HAL_RCC_OscConfig+0x324>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x30c>
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a5e      	ldr	r2, [pc, #376]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4a5b      	ldr	r2, [pc, #364]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCC_OscConfig+0x324>
 8003f4c:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a57      	ldr	r2, [pc, #348]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a54      	ldr	r2, [pc, #336]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 0304 	bic.w	r3, r3, #4
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d015      	beq.n	8003f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fd f9c0 	bl	80012f0 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f74:	f7fd f9bc 	bl	80012f0 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0cb      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8a:	4b49      	ldr	r3, [pc, #292]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ee      	beq.n	8003f74 <HAL_RCC_OscConfig+0x334>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f98:	f7fd f9aa 	bl	80012f0 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7fd f9a6 	bl	80012f0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e0b5      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb6:	4b3e      	ldr	r3, [pc, #248]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ee      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc8:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80a1 	beq.w	8004120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fde:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d05c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d141      	bne.n	8004076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <HAL_RCC_OscConfig+0x478>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fd f97a 	bl	80012f0 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd f976 	bl	80012f0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e087      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	019b      	lsls	r3, r3, #6
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	491b      	ldr	r1, [pc, #108]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_RCC_OscConfig+0x478>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7fd f94f 	bl	80012f0 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004056:	f7fd f94b 	bl	80012f0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e05c      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x416>
 8004074:	e054      	b.n	8004120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_RCC_OscConfig+0x478>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fd f938 	bl	80012f0 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd f934 	bl	80012f0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e045      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x444>
 80040a2:	e03d      	b.n	8004120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e038      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40007000 	.word	0x40007000
 80040b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x4ec>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d028      	beq.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d121      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11a      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d111      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	3b01      	subs	r3, #1
 8004106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d107      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0cc      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b68      	ldr	r3, [pc, #416]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90c      	bls.n	800416c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b65      	ldr	r3, [pc, #404]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b59      	ldr	r3, [pc, #356]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800418e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e067      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b37      	ldr	r3, [pc, #220]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4934      	ldr	r1, [pc, #208]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004220:	f7fd f866 	bl	80012f0 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fd f862 	bl	80012f0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e04f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d20c      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f821 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fc ffc6 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023c00 	.word	0x40023c00
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08009870 	.word	0x08009870
 80042f4:	20000000 	.word	0x20000000
 80042f8:	20000004 	.word	0x20000004

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b090      	sub	sp, #64	; 0x40
 8004302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d00d      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x40>
 8004320:	2b08      	cmp	r3, #8
 8004322:	f200 80a1 	bhi.w	8004468 <HAL_RCC_GetSysClockFreq+0x16c>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x34>
 800432a:	2b04      	cmp	r3, #4
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x3a>
 800432e:	e09b      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b53      	ldr	r3, [pc, #332]	; (8004480 <HAL_RCC_GetSysClockFreq+0x184>)
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004334:	e09b      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004336:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800433a:	e098      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004346:	4b4d      	ldr	r3, [pc, #308]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d028      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	2200      	movs	r2, #0
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	627a      	str	r2, [r7, #36]	; 0x24
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004364:	2100      	movs	r1, #0
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004368:	fb03 f201 	mul.w	r2, r3, r1
 800436c:	2300      	movs	r3, #0
 800436e:	fb00 f303 	mul.w	r3, r0, r3
 8004372:	4413      	add	r3, r2
 8004374:	4a43      	ldr	r2, [pc, #268]	; (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004376:	fba0 1202 	umull	r1, r2, r0, r2
 800437a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800437c:	460a      	mov	r2, r1
 800437e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004382:	4413      	add	r3, r2
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	2200      	movs	r2, #0
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	61fa      	str	r2, [r7, #28]
 800438e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004396:	f7fb ff7b 	bl	8000290 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4613      	mov	r3, r2
 80043a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a2:	e053      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	2200      	movs	r2, #0
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	617a      	str	r2, [r7, #20]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043b6:	f04f 0b00 	mov.w	fp, #0
 80043ba:	4652      	mov	r2, sl
 80043bc:	465b      	mov	r3, fp
 80043be:	f04f 0000 	mov.w	r0, #0
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	0159      	lsls	r1, r3, #5
 80043c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043cc:	0150      	lsls	r0, r2, #5
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	ebb2 080a 	subs.w	r8, r2, sl
 80043d6:	eb63 090b 	sbc.w	r9, r3, fp
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043ee:	ebb2 0408 	subs.w	r4, r2, r8
 80043f2:	eb63 0509 	sbc.w	r5, r3, r9
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	00eb      	lsls	r3, r5, #3
 8004400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004404:	00e2      	lsls	r2, r4, #3
 8004406:	4614      	mov	r4, r2
 8004408:	461d      	mov	r5, r3
 800440a:	eb14 030a 	adds.w	r3, r4, sl
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	eb45 030b 	adc.w	r3, r5, fp
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004422:	4629      	mov	r1, r5
 8004424:	028b      	lsls	r3, r1, #10
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800442c:	4621      	mov	r1, r4
 800442e:	028a      	lsls	r2, r1, #10
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004436:	2200      	movs	r2, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	60fa      	str	r2, [r7, #12]
 800443c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004440:	f7fb ff26 	bl	8000290 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800445c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004466:	e002      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetSysClockFreq+0x184>)
 800446a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800446c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004470:	4618      	mov	r0, r3
 8004472:	3740      	adds	r7, #64	; 0x40
 8004474:	46bd      	mov	sp, r7
 8004476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	00f42400 	.word	0x00f42400
 8004484:	017d7840 	.word	0x017d7840

08004488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_GetHCLKFreq+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000000 	.word	0x20000000

080044a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e041      	b.n	8004536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc fdca 	bl	8001060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fa70 	bl	80049c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d001      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e044      	b.n	80045e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d018      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x6c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004582:	d013      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x6c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00e      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x6c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x6c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a17      	ldr	r2, [pc, #92]	; (80045fc <HAL_TIM_Base_Start_IT+0xbc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x6c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a16      	ldr	r2, [pc, #88]	; (8004600 <HAL_TIM_Base_Start_IT+0xc0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d111      	bne.n	80045d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d010      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ce:	e007      	b.n	80045e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40014000 	.word	0x40014000

08004604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d020      	beq.n	8004668 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01b      	beq.n	8004668 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0202 	mvn.w	r2, #2
 8004638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f999 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f98b 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f99c 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0204 	mvn.w	r2, #4
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2202      	movs	r2, #2
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f973 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f965 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f976 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d020      	beq.n	8004700 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0208 	mvn.w	r2, #8
 80046d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2204      	movs	r2, #4
 80046d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f94d 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f93f 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f950 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d020      	beq.n	800474c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0210 	mvn.w	r2, #16
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2208      	movs	r2, #8
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f927 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f919 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f92a 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0201 	mvn.w	r2, #1
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc f940 	bl	80009f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00c      	beq.n	8004794 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fab0 	bl	8004cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8fb 	bl	80049ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0220 	mvn.w	r2, #32
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa82 	bl	8004ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_TIM_ConfigClockSource+0x1c>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e0b4      	b.n	800496a <HAL_TIM_ConfigClockSource+0x186>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800481e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004838:	d03e      	beq.n	80048b8 <HAL_TIM_ConfigClockSource+0xd4>
 800483a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483e:	f200 8087 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x16c>
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	f000 8086 	beq.w	8004956 <HAL_TIM_ConfigClockSource+0x172>
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	d87f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b70      	cmp	r3, #112	; 0x70
 8004852:	d01a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0xa6>
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d87b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b60      	cmp	r3, #96	; 0x60
 800485a:	d050      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x11a>
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d877      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b50      	cmp	r3, #80	; 0x50
 8004862:	d03c      	beq.n	80048de <HAL_TIM_ConfigClockSource+0xfa>
 8004864:	2b50      	cmp	r3, #80	; 0x50
 8004866:	d873      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d058      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x13a>
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d86f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b30      	cmp	r3, #48	; 0x30
 8004872:	d064      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15a>
 8004874:	2b30      	cmp	r3, #48	; 0x30
 8004876:	d86b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x16c>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d060      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15a>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d867      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x16c>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05c      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15a>
 8004884:	2b10      	cmp	r3, #16
 8004886:	d05a      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15a>
 8004888:	e062      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800489a:	f000 f993 	bl	8004bc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	609a      	str	r2, [r3, #8]
      break;
 80048b6:	e04f      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048c8:	f000 f97c 	bl	8004bc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048da:	609a      	str	r2, [r3, #8]
      break;
 80048dc:	e03c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 f8f0 	bl	8004ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2150      	movs	r1, #80	; 0x50
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f949 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 80048fc:	e02c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800490a:	461a      	mov	r2, r3
 800490c:	f000 f90f 	bl	8004b2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2160      	movs	r1, #96	; 0x60
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f939 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 800491c:	e01c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	461a      	mov	r2, r3
 800492c:	f000 f8d0 	bl	8004ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2140      	movs	r1, #64	; 0x40
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f929 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 800493c:	e00c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 f920 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 800494e:	e003      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e000      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a37      	ldr	r2, [pc, #220]	; (8004ab4 <TIM_Base_SetConfig+0xf0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00f      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d00b      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a34      	ldr	r2, [pc, #208]	; (8004ab8 <TIM_Base_SetConfig+0xf4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a33      	ldr	r2, [pc, #204]	; (8004abc <TIM_Base_SetConfig+0xf8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a32      	ldr	r2, [pc, #200]	; (8004ac0 <TIM_Base_SetConfig+0xfc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d108      	bne.n	8004a0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a28      	ldr	r2, [pc, #160]	; (8004ab4 <TIM_Base_SetConfig+0xf0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01b      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1c:	d017      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <TIM_Base_SetConfig+0xf4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a24      	ldr	r2, [pc, #144]	; (8004abc <TIM_Base_SetConfig+0xf8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00f      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a23      	ldr	r2, [pc, #140]	; (8004ac0 <TIM_Base_SetConfig+0xfc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a22      	ldr	r2, [pc, #136]	; (8004ac4 <TIM_Base_SetConfig+0x100>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a21      	ldr	r2, [pc, #132]	; (8004ac8 <TIM_Base_SetConfig+0x104>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <TIM_Base_SetConfig+0x108>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <TIM_Base_SetConfig+0xf0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d103      	bne.n	8004a8e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f043 0204 	orr.w	r2, r3, #4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0201 	bic.w	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 030a 	bic.w	r3, r3, #10
 8004b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b087      	sub	sp, #28
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f023 0210 	bic.w	r2, r3, #16
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	031b      	lsls	r3, r3, #12
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f043 0307 	orr.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	021a      	lsls	r2, r3, #8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e050      	b.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d018      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c68:	d013      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d10c      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40014000 	.word	0x40014000

08004ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d08:	b084      	sub	sp, #16
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	f107 001c 	add.w	r0, r7, #28
 8004d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d1a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d123      	bne.n	8004d6a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f001 fae8 	bl	8006334 <USB_CoreReset>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]
 8004d68:	e01b      	b.n	8004da2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 fadc 	bl	8006334 <USB_CoreReset>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
 8004d94:	e005      	b.n	8004da2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004da2:	7fbb      	ldrb	r3, [r7, #30]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d10b      	bne.n	8004dc0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f043 0206 	orr.w	r2, r3, #6
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dcc:	b004      	add	sp, #16
 8004dce:	4770      	bx	lr

08004dd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d165      	bne.n	8004eb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a41      	ldr	r2, [pc, #260]	; (8004eec <USB_SetTurnaroundTime+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d906      	bls.n	8004dfa <USB_SetTurnaroundTime+0x2a>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a40      	ldr	r2, [pc, #256]	; (8004ef0 <USB_SetTurnaroundTime+0x120>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d202      	bcs.n	8004dfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004df4:	230f      	movs	r3, #15
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e062      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4a3c      	ldr	r2, [pc, #240]	; (8004ef0 <USB_SetTurnaroundTime+0x120>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d306      	bcc.n	8004e10 <USB_SetTurnaroundTime+0x40>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a3b      	ldr	r2, [pc, #236]	; (8004ef4 <USB_SetTurnaroundTime+0x124>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d202      	bcs.n	8004e10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e0a:	230e      	movs	r3, #14
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e057      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a38      	ldr	r2, [pc, #224]	; (8004ef4 <USB_SetTurnaroundTime+0x124>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d306      	bcc.n	8004e26 <USB_SetTurnaroundTime+0x56>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a37      	ldr	r2, [pc, #220]	; (8004ef8 <USB_SetTurnaroundTime+0x128>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d202      	bcs.n	8004e26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e20:	230d      	movs	r3, #13
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e04c      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a33      	ldr	r2, [pc, #204]	; (8004ef8 <USB_SetTurnaroundTime+0x128>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d306      	bcc.n	8004e3c <USB_SetTurnaroundTime+0x6c>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a32      	ldr	r2, [pc, #200]	; (8004efc <USB_SetTurnaroundTime+0x12c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d802      	bhi.n	8004e3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e36:	230c      	movs	r3, #12
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e041      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	; (8004efc <USB_SetTurnaroundTime+0x12c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d906      	bls.n	8004e52 <USB_SetTurnaroundTime+0x82>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a2e      	ldr	r2, [pc, #184]	; (8004f00 <USB_SetTurnaroundTime+0x130>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d802      	bhi.n	8004e52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e4c:	230b      	movs	r3, #11
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e036      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <USB_SetTurnaroundTime+0x130>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d906      	bls.n	8004e68 <USB_SetTurnaroundTime+0x98>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <USB_SetTurnaroundTime+0x134>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d802      	bhi.n	8004e68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e62:	230a      	movs	r3, #10
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e02b      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a26      	ldr	r2, [pc, #152]	; (8004f04 <USB_SetTurnaroundTime+0x134>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d906      	bls.n	8004e7e <USB_SetTurnaroundTime+0xae>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <USB_SetTurnaroundTime+0x138>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d202      	bcs.n	8004e7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e78:	2309      	movs	r3, #9
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e020      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <USB_SetTurnaroundTime+0x138>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d306      	bcc.n	8004e94 <USB_SetTurnaroundTime+0xc4>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <USB_SetTurnaroundTime+0x13c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d802      	bhi.n	8004e94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e8e:	2308      	movs	r3, #8
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e015      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <USB_SetTurnaroundTime+0x13c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d906      	bls.n	8004eaa <USB_SetTurnaroundTime+0xda>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a1c      	ldr	r2, [pc, #112]	; (8004f10 <USB_SetTurnaroundTime+0x140>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d202      	bcs.n	8004eaa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ea4:	2307      	movs	r3, #7
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e00a      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004eaa:	2306      	movs	r3, #6
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e007      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004eb6:	2309      	movs	r3, #9
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e001      	b.n	8004ec0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ebc:	2309      	movs	r3, #9
 8004ebe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	029b      	lsls	r3, r3, #10
 8004ed4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	00d8acbf 	.word	0x00d8acbf
 8004ef0:	00e4e1c0 	.word	0x00e4e1c0
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	01067380 	.word	0x01067380
 8004efc:	011a499f 	.word	0x011a499f
 8004f00:	01312cff 	.word	0x01312cff
 8004f04:	014ca43f 	.word	0x014ca43f
 8004f08:	016e3600 	.word	0x016e3600
 8004f0c:	01a6ab1f 	.word	0x01a6ab1f
 8004f10:	01e84800 	.word	0x01e84800

08004f14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d115      	bne.n	8004fa6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f86:	200a      	movs	r0, #10
 8004f88:	f7fc f9be 	bl	8001308 <HAL_Delay>
      ms += 10U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	330a      	adds	r3, #10
 8004f90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 f93f 	bl	8006216 <USB_GetMode>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d01e      	beq.n	8004fdc <USB_SetCurrentMode+0x84>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2bc7      	cmp	r3, #199	; 0xc7
 8004fa2:	d9f0      	bls.n	8004f86 <USB_SetCurrentMode+0x2e>
 8004fa4:	e01a      	b.n	8004fdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d115      	bne.n	8004fd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fb8:	200a      	movs	r0, #10
 8004fba:	f7fc f9a5 	bl	8001308 <HAL_Delay>
      ms += 10U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	330a      	adds	r3, #10
 8004fc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 f926 	bl	8006216 <USB_GetMode>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <USB_SetCurrentMode+0x84>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2bc7      	cmp	r3, #199	; 0xc7
 8004fd4:	d9f0      	bls.n	8004fb8 <USB_SetCurrentMode+0x60>
 8004fd6:	e001      	b.n	8004fdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e005      	b.n	8004fe8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2bc8      	cmp	r3, #200	; 0xc8
 8004fe0:	d101      	bne.n	8004fe6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	e009      	b.n	8005024 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3340      	adds	r3, #64	; 0x40
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	2200      	movs	r2, #0
 800501c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3301      	adds	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b0e      	cmp	r3, #14
 8005028:	d9f2      	bls.n	8005010 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800502a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11c      	bne.n	800506c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005040:	f043 0302 	orr.w	r3, r3, #2
 8005044:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
 800506a:	e00b      	b.n	8005084 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800508a:	461a      	mov	r2, r3
 800508c:	2300      	movs	r3, #0
 800508e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005090:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005094:	2b01      	cmp	r3, #1
 8005096:	d10d      	bne.n	80050b4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050a0:	2100      	movs	r1, #0
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f968 	bl	8005378 <USB_SetDevSpeed>
 80050a8:	e008      	b.n	80050bc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050aa:	2101      	movs	r1, #1
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f963 	bl	8005378 <USB_SetDevSpeed>
 80050b2:	e003      	b.n	80050bc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050b4:	2103      	movs	r1, #3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f95e 	bl	8005378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050bc:	2110      	movs	r1, #16
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f8fa 	bl	80052b8 <USB_FlushTxFifo>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f924 	bl	800531c <USB_FlushRxFifo>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	461a      	mov	r2, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e043      	b.n	8005190 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800511a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800511e:	d118      	bne.n	8005152 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	461a      	mov	r2, r3
 8005134:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e013      	b.n	8005164 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e008      	b.n	8005164 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	461a      	mov	r2, r3
 8005160:	2300      	movs	r3, #0
 8005162:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	461a      	mov	r2, r3
 8005172:	2300      	movs	r3, #0
 8005174:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	461a      	mov	r2, r3
 8005184:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005188:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	3301      	adds	r3, #1
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005194:	461a      	mov	r2, r3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4293      	cmp	r3, r2
 800519a:	d3b5      	bcc.n	8005108 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e043      	b.n	800522a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b8:	d118      	bne.n	80051ec <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	461a      	mov	r2, r3
 80051ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e013      	b.n	80051fe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	461a      	mov	r2, r3
 80051e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e008      	b.n	80051fe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	461a      	mov	r2, r3
 80051fa:	2300      	movs	r3, #0
 80051fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	461a      	mov	r2, r3
 800520c:	2300      	movs	r3, #0
 800520e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005222:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3301      	adds	r3, #1
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800522e:	461a      	mov	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4293      	cmp	r3, r2
 8005234:	d3b5      	bcc.n	80051a2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005248:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005256:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f043 0210 	orr.w	r2, r3, #16
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <USB_DevInit+0x2c4>)
 8005272:	4313      	orrs	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005278:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f043 0208 	orr.w	r2, r3, #8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800528c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005290:	2b01      	cmp	r3, #1
 8005292:	d107      	bne.n	80052a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052b0:	b004      	add	sp, #16
 80052b2:	4770      	bx	lr
 80052b4:	803c3800 	.word	0x803c3800

080052b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3301      	adds	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052d2:	d901      	bls.n	80052d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e01b      	b.n	8005310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	daf2      	bge.n	80052c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	019b      	lsls	r3, r3, #6
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052fc:	d901      	bls.n	8005302 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e006      	b.n	8005310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b20      	cmp	r3, #32
 800530c:	d0f0      	beq.n	80052f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005334:	d901      	bls.n	800533a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e018      	b.n	800536c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	daf2      	bge.n	8005328 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2210      	movs	r2, #16
 800534a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005358:	d901      	bls.n	800535e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e006      	b.n	800536c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b10      	cmp	r3, #16
 8005368:	d0f0      	beq.n	800534c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b087      	sub	sp, #28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0306 	and.w	r3, r3, #6
 80053c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]
 80053ce:	e00a      	b.n	80053e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d002      	beq.n	80053dc <USB_GetDevSpeed+0x32>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b06      	cmp	r3, #6
 80053da:	d102      	bne.n	80053e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053dc:	2302      	movs	r3, #2
 80053de:	75fb      	strb	r3, [r7, #23]
 80053e0:	e001      	b.n	80053e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053e2:	230f      	movs	r3, #15
 80053e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d13a      	bne.n	8005486 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	2101      	movs	r1, #1
 8005422:	fa01 f303 	lsl.w	r3, r1, r3
 8005426:	b29b      	uxth	r3, r3
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800542e:	4313      	orrs	r3, r2
 8005430:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d155      	bne.n	80054f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	791b      	ldrb	r3, [r3, #4]
 8005462:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005464:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	059b      	lsls	r3, r3, #22
 800546a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800546c:	4313      	orrs	r3, r2
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e036      	b.n	80054f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	2101      	movs	r1, #1
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	041b      	lsls	r3, r3, #16
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11a      	bne.n	80054f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	791b      	ldrb	r3, [r3, #4]
 80054d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054da:	430b      	orrs	r3, r1
 80054dc:	4313      	orrs	r3, r2
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d161      	bne.n	80055e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005536:	d11f      	bne.n	8005578 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005552:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005556:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005576:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	2101      	movs	r1, #1
 800558a:	fa01 f303 	lsl.w	r3, r1, r3
 800558e:	b29b      	uxth	r3, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005598:	4013      	ands	r3, r2
 800559a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	2101      	movs	r1, #1
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055bc:	4013      	ands	r3, r2
 80055be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0159      	lsls	r1, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	440b      	add	r3, r1
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	4619      	mov	r1, r3
 80055dc:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <USB_DeactivateEndpoint+0x1b0>)
 80055de:	4013      	ands	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
 80055e2:	e060      	b.n	80056a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fa:	d11f      	bne.n	800563c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800561a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800563a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	2101      	movs	r1, #1
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	43db      	mvns	r3, r3
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565c:	4013      	ands	r3, r2
 800565e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	43db      	mvns	r3, r3
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005680:	4013      	ands	r3, r2
 8005682:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	0159      	lsls	r1, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	440b      	add	r3, r1
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	4619      	mov	r1, r3
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <USB_DeactivateEndpoint+0x1b4>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	ec337800 	.word	0xec337800
 80056b8:	eff37800 	.word	0xeff37800

080056bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	f040 817f 	bne.w	80059dc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d132      	bne.n	800574c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005700:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005704:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005708:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	440a      	add	r2, r1
 8005720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	0cdb      	lsrs	r3, r3, #19
 8005746:	04db      	lsls	r3, r3, #19
 8005748:	6113      	str	r3, [r2, #16]
 800574a:	e097      	b.n	800587c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005766:	0cdb      	lsrs	r3, r3, #19
 8005768:	04db      	lsls	r3, r3, #19
 800576a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005786:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800578a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800578e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11a      	bne.n	80057cc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d903      	bls.n	80057aa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c8:	6113      	str	r3, [r2, #16]
 80057ca:	e044      	b.n	8005856 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	4413      	add	r3, r2
 80057d6:	1e5a      	subs	r2, r3, #1
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	8afb      	ldrh	r3, [r7, #22]
 80057f2:	04d9      	lsls	r1, r3, #19
 80057f4:	4ba4      	ldr	r3, [pc, #656]	; (8005a88 <USB_EPStartXfer+0x3cc>)
 80057f6:	400b      	ands	r3, r1
 80057f8:	69b9      	ldr	r1, [r7, #24]
 80057fa:	0148      	lsls	r0, r1, #5
 80057fc:	69f9      	ldr	r1, [r7, #28]
 80057fe:	4401      	add	r1, r0
 8005800:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005804:	4313      	orrs	r3, r2
 8005806:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d122      	bne.n	8005856 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800582e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	8afb      	ldrh	r3, [r7, #22]
 8005840:	075b      	lsls	r3, r3, #29
 8005842:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005846:	69b9      	ldr	r1, [r7, #24]
 8005848:	0148      	lsls	r0, r1, #5
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	4401      	add	r1, r0
 800584e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005852:	4313      	orrs	r3, r2
 8005854:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800586c:	69b9      	ldr	r1, [r7, #24]
 800586e:	0148      	lsls	r0, r1, #5
 8005870:	69f9      	ldr	r1, [r7, #28]
 8005872:	4401      	add	r1, r0
 8005874:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005878:	4313      	orrs	r3, r2
 800587a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d14b      	bne.n	800591a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005896:	461a      	mov	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	791b      	ldrb	r3, [r3, #4]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d128      	bne.n	80058f8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d110      	bne.n	80058d8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	e00f      	b.n	80058f8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005912:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	e166      	b.n	8005be8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005934:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005938:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	791b      	ldrb	r3, [r3, #4]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d015      	beq.n	800596e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 814e 	beq.w	8005be8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	2101      	movs	r1, #1
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	69f9      	ldr	r1, [r7, #28]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4313      	orrs	r3, r2
 800596a:	634b      	str	r3, [r1, #52]	; 0x34
 800596c:	e13c      	b.n	8005be8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	2b00      	cmp	r3, #0
 800597c:	d110      	bne.n	80059a0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005998:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e00f      	b.n	80059c0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059be:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	68d9      	ldr	r1, [r3, #12]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	781a      	ldrb	r2, [r3, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	b298      	uxth	r0, r3
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	4603      	mov	r3, r0
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f9b9 	bl	8005d4c <USB_WritePacket>
 80059da:	e105      	b.n	8005be8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f6:	0cdb      	lsrs	r3, r3, #19
 80059f8:	04db      	lsls	r3, r3, #19
 80059fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a1e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d132      	bne.n	8005a8c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a54:	69b9      	ldr	r1, [r7, #24]
 8005a56:	0148      	lsls	r0, r1, #5
 8005a58:	69f9      	ldr	r1, [r7, #28]
 8005a5a:	4401      	add	r1, r0
 8005a5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a60:	4313      	orrs	r3, r2
 8005a62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a82:	6113      	str	r3, [r2, #16]
 8005a84:	e062      	b.n	8005b4c <USB_EPStartXfer+0x490>
 8005a86:	bf00      	nop
 8005a88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d123      	bne.n	8005adc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aaa:	69b9      	ldr	r1, [r7, #24]
 8005aac:	0148      	lsls	r0, r1, #5
 8005aae:	69f9      	ldr	r1, [r7, #28]
 8005ab0:	4401      	add	r1, r0
 8005ab2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad8:	6113      	str	r3, [r2, #16]
 8005ada:	e037      	b.n	8005b4c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	1e5a      	subs	r2, r3, #1
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	8afa      	ldrh	r2, [r7, #22]
 8005af8:	fb03 f202 	mul.w	r2, r3, r2
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	8afb      	ldrh	r3, [r7, #22]
 8005b10:	04d9      	lsls	r1, r3, #19
 8005b12:	4b38      	ldr	r3, [pc, #224]	; (8005bf4 <USB_EPStartXfer+0x538>)
 8005b14:	400b      	ands	r3, r1
 8005b16:	69b9      	ldr	r1, [r7, #24]
 8005b18:	0148      	lsls	r0, r1, #5
 8005b1a:	69f9      	ldr	r1, [r7, #28]
 8005b1c:	4401      	add	r1, r0
 8005b1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b22:	4313      	orrs	r3, r2
 8005b24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3c:	69b9      	ldr	r1, [r7, #24]
 8005b3e:	0148      	lsls	r0, r1, #5
 8005b40:	69f9      	ldr	r1, [r7, #28]
 8005b42:	4401      	add	r1, r0
 8005b44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d10d      	bne.n	8005b6e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	68d9      	ldr	r1, [r3, #12]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6a:	460a      	mov	r2, r1
 8005b6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	791b      	ldrb	r3, [r3, #4]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d128      	bne.n	8005bc8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d110      	bne.n	8005ba8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e00f      	b.n	8005bc8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005be6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	1ff80000 	.word	0x1ff80000

08005bf8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d14a      	bne.n	8005cac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c2e:	f040 8086 	bne.w	8005d3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	7812      	ldrb	r2, [r2, #0]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d902      	bls.n	8005c90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c8e:	e056      	b.n	8005d3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca8:	d0e7      	beq.n	8005c7a <USB_EPStopXfer+0x82>
 8005caa:	e048      	b.n	8005d3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc4:	d13b      	bne.n	8005d3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	7812      	ldrb	r2, [r2, #0]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ce8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	7812      	ldrb	r2, [r2, #0]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d902      	bls.n	8005d24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	75fb      	strb	r3, [r7, #23]
          break;
 8005d22:	e00c      	b.n	8005d3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3c:	d0e7      	beq.n	8005d0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b089      	sub	sp, #36	; 0x24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4611      	mov	r1, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	71fb      	strb	r3, [r7, #7]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d123      	bne.n	8005dba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d72:	88bb      	ldrh	r3, [r7, #4]
 8005d74:	3303      	adds	r3, #3
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	e018      	b.n	8005db2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	031a      	lsls	r2, r3, #12
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	3301      	adds	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3301      	adds	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	3301      	adds	r3, #1
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3e2      	bcc.n	8005d80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3724      	adds	r7, #36	; 0x24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b08b      	sub	sp, #44	; 0x2c
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	089b      	lsrs	r3, r3, #2
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	e014      	b.n	8005e1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	3301      	adds	r3, #1
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	3301      	adds	r3, #1
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	3301      	adds	r3, #1
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	3301      	adds	r3, #1
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	6a3a      	ldr	r2, [r7, #32]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d3e6      	bcc.n	8005df4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e26:	8bfb      	ldrh	r3, [r7, #30]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01e      	beq.n	8005e6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e36:	461a      	mov	r2, r3
 8005e38:	f107 0310 	add.w	r3, r7, #16
 8005e3c:	6812      	ldr	r2, [r2, #0]
 8005e3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	701a      	strb	r2, [r3, #0]
      i++;
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	3301      	adds	r3, #1
 8005e56:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e5e:	8bfb      	ldrh	r3, [r7, #30]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e64:	8bfb      	ldrh	r3, [r7, #30]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1ea      	bne.n	8005e40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	372c      	adds	r7, #44	; 0x2c
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d12c      	bne.n	8005eee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	db12      	blt.n	8005ecc <USB_EPSetStall+0x54>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00f      	beq.n	8005ecc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	e02b      	b.n	8005f46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	db12      	blt.n	8005f26 <USB_EPSetStall+0xae>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d128      	bne.n	8005fc2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	791b      	ldrb	r3, [r3, #4]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d003      	beq.n	8005fa0 <USB_EPClearStall+0x4c>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	791b      	ldrb	r3, [r3, #4]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d138      	bne.n	8006012 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e027      	b.n	8006012 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fe0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	791b      	ldrb	r3, [r3, #4]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d003      	beq.n	8005ff2 <USB_EPClearStall+0x9e>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	791b      	ldrb	r3, [r3, #4]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d10f      	bne.n	8006012 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006010:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800603e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006042:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006054:	68f9      	ldr	r1, [r7, #12]
 8006056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800609a:	f023 0302 	bic.w	r3, r3, #2
 800609e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060c8:	f023 0303 	bic.w	r3, r3, #3
 80060cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060dc:	f043 0302 	orr.w	r3, r3, #2
 80060e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4013      	ands	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006108:	68fb      	ldr	r3, [r7, #12]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	0c1b      	lsrs	r3, r3, #16
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	4013      	ands	r3, r2
 800616c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	b29b      	uxth	r3, r3
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061ac:	68bb      	ldr	r3, [r7, #8]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ea:	01db      	lsls	r3, r3, #7
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4013      	ands	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006208:	68bb      	ldr	r3, [r7, #8]
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f003 0301 	and.w	r3, r3, #1
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006250:	f023 0307 	bic.w	r3, r3, #7
 8006254:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006268:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	460b      	mov	r3, r1
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	333c      	adds	r3, #60	; 0x3c
 800628e:	3304      	adds	r3, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4a26      	ldr	r2, [pc, #152]	; (8006330 <USB_EP0_OutStart+0xb8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d90a      	bls.n	80062b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ac:	d101      	bne.n	80062b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e037      	b.n	8006322 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e0:	f043 0318 	orr.w	r3, r3, #24
 80062e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062fa:	7afb      	ldrb	r3, [r7, #11]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d10f      	bne.n	8006320 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006306:	461a      	mov	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800631e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	4f54300a 	.word	0x4f54300a

08006334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800634c:	d901      	bls.n	8006352 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e022      	b.n	8006398 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	daf2      	bge.n	8006340 <USB_CoreReset+0xc>

  count = 10U;
 800635a:	230a      	movs	r3, #10
 800635c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800635e:	e002      	b.n	8006366 <USB_CoreReset+0x32>
  {
    count--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3b01      	subs	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f9      	bne.n	8006360 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f043 0201 	orr.w	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006384:	d901      	bls.n	800638a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e006      	b.n	8006398 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b01      	cmp	r3, #1
 8006394:	d0f0      	beq.n	8006378 <USB_CoreReset+0x44>

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063b4:	f002 fd22 	bl	8008dfc <USBD_static_malloc>
 80063b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d109      	bne.n	80063d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	32b0      	adds	r2, #176	; 0xb0
 80063ca:	2100      	movs	r1, #0
 80063cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0d4      	b.n	800657e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80063d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80063d8:	2100      	movs	r1, #0
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f002 fd72 	bl	8008ec4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32b0      	adds	r2, #176	; 0xb0
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32b0      	adds	r2, #176	; 0xb0
 80063fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	7c1b      	ldrb	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d138      	bne.n	800647e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800640c:	4b5e      	ldr	r3, [pc, #376]	; (8006588 <USBD_CDC_Init+0x1e4>)
 800640e:	7819      	ldrb	r1, [r3, #0]
 8006410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006414:	2202      	movs	r2, #2
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f002 fbcd 	bl	8008bb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800641c:	4b5a      	ldr	r3, [pc, #360]	; (8006588 <USBD_CDC_Init+0x1e4>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	3323      	adds	r3, #35	; 0x23
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006436:	4b55      	ldr	r3, [pc, #340]	; (800658c <USBD_CDC_Init+0x1e8>)
 8006438:	7819      	ldrb	r1, [r3, #0]
 800643a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800643e:	2202      	movs	r2, #2
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f002 fbb8 	bl	8008bb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006446:	4b51      	ldr	r3, [pc, #324]	; (800658c <USBD_CDC_Init+0x1e8>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	f003 020f 	and.w	r2, r3, #15
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	f203 1363 	addw	r3, r3, #355	; 0x163
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006462:	4b4b      	ldr	r3, [pc, #300]	; (8006590 <USBD_CDC_Init+0x1ec>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	f003 020f 	and.w	r2, r3, #15
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	331c      	adds	r3, #28
 8006478:	2210      	movs	r2, #16
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e035      	b.n	80064ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800647e:	4b42      	ldr	r3, [pc, #264]	; (8006588 <USBD_CDC_Init+0x1e4>)
 8006480:	7819      	ldrb	r1, [r3, #0]
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	2202      	movs	r2, #2
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f002 fb95 	bl	8008bb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800648c:	4b3e      	ldr	r3, [pc, #248]	; (8006588 <USBD_CDC_Init+0x1e4>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f003 020f 	and.w	r2, r3, #15
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	3323      	adds	r3, #35	; 0x23
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064a6:	4b39      	ldr	r3, [pc, #228]	; (800658c <USBD_CDC_Init+0x1e8>)
 80064a8:	7819      	ldrb	r1, [r3, #0]
 80064aa:	2340      	movs	r3, #64	; 0x40
 80064ac:	2202      	movs	r2, #2
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f002 fb81 	bl	8008bb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064b4:	4b35      	ldr	r3, [pc, #212]	; (800658c <USBD_CDC_Init+0x1e8>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f003 020f 	and.w	r2, r3, #15
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	f203 1363 	addw	r3, r3, #355	; 0x163
 80064cc:	2201      	movs	r2, #1
 80064ce:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064d0:	4b2f      	ldr	r3, [pc, #188]	; (8006590 <USBD_CDC_Init+0x1ec>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f003 020f 	and.w	r2, r3, #15
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	331c      	adds	r3, #28
 80064e6:	2210      	movs	r2, #16
 80064e8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064ea:	4b29      	ldr	r3, [pc, #164]	; (8006590 <USBD_CDC_Init+0x1ec>)
 80064ec:	7819      	ldrb	r1, [r3, #0]
 80064ee:	2308      	movs	r3, #8
 80064f0:	2203      	movs	r2, #3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f002 fb5f 	bl	8008bb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <USBD_CDC_Init+0x1ec>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 020f 	and.w	r2, r3, #15
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	3323      	adds	r3, #35	; 0x23
 800650e:	2201      	movs	r2, #1
 8006510:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	33b0      	adds	r3, #176	; 0xb0
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006548:	2302      	movs	r3, #2
 800654a:	e018      	b.n	800657e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	7c1b      	ldrb	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <USBD_CDC_Init+0x1e8>)
 8006556:	7819      	ldrb	r1, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800655e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f002 fc16 	bl	8008d94 <USBD_LL_PrepareReceive>
 8006568:	e008      	b.n	800657c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800656a:	4b08      	ldr	r3, [pc, #32]	; (800658c <USBD_CDC_Init+0x1e8>)
 800656c:	7819      	ldrb	r1, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f002 fc0c 	bl	8008d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20000093 	.word	0x20000093
 800658c:	20000094 	.word	0x20000094
 8006590:	20000095 	.word	0x20000095

08006594 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80065a0:	4b3a      	ldr	r3, [pc, #232]	; (800668c <USBD_CDC_DeInit+0xf8>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f002 fb2b 	bl	8008c02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80065ac:	4b37      	ldr	r3, [pc, #220]	; (800668c <USBD_CDC_DeInit+0xf8>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	3323      	adds	r3, #35	; 0x23
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80065c6:	4b32      	ldr	r3, [pc, #200]	; (8006690 <USBD_CDC_DeInit+0xfc>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f002 fb18 	bl	8008c02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80065d2:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <USBD_CDC_DeInit+0xfc>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	f003 020f 	and.w	r2, r3, #15
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	f203 1363 	addw	r3, r3, #355	; 0x163
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80065ee:	4b29      	ldr	r3, [pc, #164]	; (8006694 <USBD_CDC_DeInit+0x100>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f002 fb04 	bl	8008c02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80065fa:	4b26      	ldr	r3, [pc, #152]	; (8006694 <USBD_CDC_DeInit+0x100>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	3323      	adds	r3, #35	; 0x23
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006614:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <USBD_CDC_DeInit+0x100>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	331c      	adds	r3, #28
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	32b0      	adds	r2, #176	; 0xb0
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01f      	beq.n	8006680 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	33b0      	adds	r3, #176	; 0xb0
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	32b0      	adds	r2, #176	; 0xb0
 800665e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006662:	4618      	mov	r0, r3
 8006664:	f002 fbd8 	bl	8008e18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32b0      	adds	r2, #176	; 0xb0
 8006672:	2100      	movs	r1, #0
 8006674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000093 	.word	0x20000093
 8006690:	20000094 	.word	0x20000094
 8006694:	20000095 	.word	0x20000095

08006698 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	32b0      	adds	r2, #176	; 0xb0
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e0bf      	b.n	8006848 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d050      	beq.n	8006776 <USBD_CDC_Setup+0xde>
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	f040 80af 	bne.w	8006838 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	88db      	ldrh	r3, [r3, #6]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d03a      	beq.n	8006758 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	b25b      	sxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da1b      	bge.n	8006724 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	33b0      	adds	r3, #176	; 0xb0
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006702:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	88d2      	ldrh	r2, [r2, #6]
 8006708:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	88db      	ldrh	r3, [r3, #6]
 800670e:	2b07      	cmp	r3, #7
 8006710:	bf28      	it	cs
 8006712:	2307      	movcs	r3, #7
 8006714:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	89fa      	ldrh	r2, [r7, #14]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fdab 	bl	8008278 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006722:	e090      	b.n	8006846 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	785a      	ldrb	r2, [r3, #1]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	88db      	ldrh	r3, [r3, #6]
 8006732:	2b3f      	cmp	r3, #63	; 0x3f
 8006734:	d803      	bhi.n	800673e <USBD_CDC_Setup+0xa6>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	e000      	b.n	8006740 <USBD_CDC_Setup+0xa8>
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006746:	6939      	ldr	r1, [r7, #16]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800674e:	461a      	mov	r2, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 fdc0 	bl	80082d6 <USBD_CtlPrepareRx>
      break;
 8006756:	e076      	b.n	8006846 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	33b0      	adds	r3, #176	; 0xb0
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	7850      	ldrb	r0, [r2, #1]
 800676e:	2200      	movs	r2, #0
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	4798      	blx	r3
      break;
 8006774:	e067      	b.n	8006846 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b0b      	cmp	r3, #11
 800677c:	d851      	bhi.n	8006822 <USBD_CDC_Setup+0x18a>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <USBD_CDC_Setup+0xec>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067b5 	.word	0x080067b5
 8006788:	08006831 	.word	0x08006831
 800678c:	08006823 	.word	0x08006823
 8006790:	08006823 	.word	0x08006823
 8006794:	08006823 	.word	0x08006823
 8006798:	08006823 	.word	0x08006823
 800679c:	08006823 	.word	0x08006823
 80067a0:	08006823 	.word	0x08006823
 80067a4:	08006823 	.word	0x08006823
 80067a8:	08006823 	.word	0x08006823
 80067ac:	080067df 	.word	0x080067df
 80067b0:	08006809 	.word	0x08006809
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d107      	bne.n	80067d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067c0:	f107 030a 	add.w	r3, r7, #10
 80067c4:	2202      	movs	r2, #2
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fd55 	bl	8008278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ce:	e032      	b.n	8006836 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 fcd3 	bl	800817e <USBD_CtlError>
            ret = USBD_FAIL;
 80067d8:	2303      	movs	r3, #3
 80067da:	75fb      	strb	r3, [r7, #23]
          break;
 80067dc:	e02b      	b.n	8006836 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d107      	bne.n	80067fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067ea:	f107 030d 	add.w	r3, r7, #13
 80067ee:	2201      	movs	r2, #1
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fd40 	bl	8008278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067f8:	e01d      	b.n	8006836 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fcbe 	bl	800817e <USBD_CtlError>
            ret = USBD_FAIL;
 8006802:	2303      	movs	r3, #3
 8006804:	75fb      	strb	r3, [r7, #23]
          break;
 8006806:	e016      	b.n	8006836 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b03      	cmp	r3, #3
 8006812:	d00f      	beq.n	8006834 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fcb1 	bl	800817e <USBD_CtlError>
            ret = USBD_FAIL;
 800681c:	2303      	movs	r3, #3
 800681e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006820:	e008      	b.n	8006834 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fcaa 	bl	800817e <USBD_CtlError>
          ret = USBD_FAIL;
 800682a:	2303      	movs	r3, #3
 800682c:	75fb      	strb	r3, [r7, #23]
          break;
 800682e:	e002      	b.n	8006836 <USBD_CDC_Setup+0x19e>
          break;
 8006830:	bf00      	nop
 8006832:	e008      	b.n	8006846 <USBD_CDC_Setup+0x1ae>
          break;
 8006834:	bf00      	nop
      }
      break;
 8006836:	e006      	b.n	8006846 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fc9f 	bl	800817e <USBD_CtlError>
      ret = USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	bf00      	nop
  }

  return (uint8_t)ret;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006862:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32b0      	adds	r2, #176	; 0xb0
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006876:	2303      	movs	r3, #3
 8006878:	e065      	b.n	8006946 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	32b0      	adds	r2, #176	; 0xb0
 8006884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006888:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3314      	adds	r3, #20
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02f      	beq.n	8006904 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	f003 020f 	and.w	r2, r3, #15
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	3314      	adds	r3, #20
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	f003 010f 	and.w	r1, r3, #15
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	460b      	mov	r3, r1
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	440b      	add	r3, r1
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4403      	add	r3, r0
 80068cc:	331c      	adds	r3, #28
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d112      	bne.n	8006904 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	f003 020f 	and.w	r2, r3, #15
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	3314      	adds	r3, #20
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068f6:	78f9      	ldrb	r1, [r7, #3]
 80068f8:	2300      	movs	r3, #0
 80068fa:	2200      	movs	r2, #0
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 fa28 	bl	8008d52 <USBD_LL_Transmit>
 8006902:	e01f      	b.n	8006944 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	33b0      	adds	r3, #176	; 0xb0
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d010      	beq.n	8006944 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	33b0      	adds	r3, #176	; 0xb0
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	32b0      	adds	r2, #176	; 0xb0
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	32b0      	adds	r2, #176	; 0xb0
 8006974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800697c:	2303      	movs	r3, #3
 800697e:	e01a      	b.n	80069b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 fa26 	bl	8008dd6 <USBD_LL_GetRxDataSize>
 800698a:	4602      	mov	r2, r0
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	33b0      	adds	r3, #176	; 0xb0
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069b0:	4611      	mov	r1, r2
 80069b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	32b0      	adds	r2, #176	; 0xb0
 80069d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e025      	b.n	8006a2c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	33b0      	adds	r3, #176	; 0xb0
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01a      	beq.n	8006a2a <USBD_CDC_EP0_RxReady+0x6c>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80069fa:	2bff      	cmp	r3, #255	; 0xff
 80069fc:	d015      	beq.n	8006a2a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	33b0      	adds	r3, #176	; 0xb0
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	22ff      	movs	r2, #255	; 0xff
 8006a26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a3c:	2182      	movs	r1, #130	; 0x82
 8006a3e:	4818      	ldr	r0, [pc, #96]	; (8006aa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a40:	f000 fd62 	bl	8007508 <USBD_GetEpDesc>
 8006a44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a46:	2101      	movs	r1, #1
 8006a48:	4815      	ldr	r0, [pc, #84]	; (8006aa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a4a:	f000 fd5d 	bl	8007508 <USBD_GetEpDesc>
 8006a4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a50:	2181      	movs	r1, #129	; 0x81
 8006a52:	4813      	ldr	r0, [pc, #76]	; (8006aa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a54:	f000 fd58 	bl	8007508 <USBD_GetEpDesc>
 8006a58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2210      	movs	r2, #16
 8006a64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a74:	711a      	strb	r2, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d006      	beq.n	8006a8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a88:	711a      	strb	r2, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2243      	movs	r2, #67	; 0x43
 8006a92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000050 	.word	0x20000050

08006aa4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006aac:	2182      	movs	r1, #130	; 0x82
 8006aae:	4818      	ldr	r0, [pc, #96]	; (8006b10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ab0:	f000 fd2a 	bl	8007508 <USBD_GetEpDesc>
 8006ab4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4815      	ldr	r0, [pc, #84]	; (8006b10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006aba:	f000 fd25 	bl	8007508 <USBD_GetEpDesc>
 8006abe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ac0:	2181      	movs	r1, #129	; 0x81
 8006ac2:	4813      	ldr	r0, [pc, #76]	; (8006b10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ac4:	f000 fd20 	bl	8007508 <USBD_GetEpDesc>
 8006ac8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	711a      	strb	r2, [r3, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f042 0202 	orr.w	r2, r2, #2
 8006ae8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d006      	beq.n	8006afe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	711a      	strb	r2, [r3, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f042 0202 	orr.w	r2, r2, #2
 8006afc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2243      	movs	r2, #67	; 0x43
 8006b02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b04:	4b02      	ldr	r3, [pc, #8]	; (8006b10 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000050 	.word	0x20000050

08006b14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b1c:	2182      	movs	r1, #130	; 0x82
 8006b1e:	4818      	ldr	r0, [pc, #96]	; (8006b80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b20:	f000 fcf2 	bl	8007508 <USBD_GetEpDesc>
 8006b24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b26:	2101      	movs	r1, #1
 8006b28:	4815      	ldr	r0, [pc, #84]	; (8006b80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b2a:	f000 fced 	bl	8007508 <USBD_GetEpDesc>
 8006b2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b30:	2181      	movs	r1, #129	; 0x81
 8006b32:	4813      	ldr	r0, [pc, #76]	; (8006b80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b34:	f000 fce8 	bl	8007508 <USBD_GetEpDesc>
 8006b38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2210      	movs	r2, #16
 8006b44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b54:	711a      	strb	r2, [r3, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b68:	711a      	strb	r2, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2243      	movs	r2, #67	; 0x43
 8006b72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000050 	.word	0x20000050

08006b84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	220a      	movs	r2, #10
 8006b90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b92:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	2000000c 	.word	0x2000000c

08006ba4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e009      	b.n	8006bcc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	33b0      	adds	r3, #176	; 0xb0
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	32b0      	adds	r2, #176	; 0xb0
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e008      	b.n	8006c10 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	32b0      	adds	r2, #176	; 0xb0
 8006c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e004      	b.n	8006c4a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32b0      	adds	r2, #176	; 0xb0
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e025      	b.n	8006cca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d11f      	bne.n	8006cc8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c90:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <USBD_CDC_TransmitPacket+0x7c>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 020f 	and.w	r2, r3, #15
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4403      	add	r3, r0
 8006caa:	3314      	adds	r3, #20
 8006cac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <USBD_CDC_TransmitPacket+0x7c>)
 8006cb0:	7819      	ldrb	r1, [r3, #0]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f002 f847 	bl	8008d52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000093 	.word	0x20000093

08006cd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32b0      	adds	r2, #176	; 0xb0
 8006cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32b0      	adds	r2, #176	; 0xb0
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e018      	b.n	8006d38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7c1b      	ldrb	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <USBD_CDC_ReceivePacket+0x68>)
 8006d10:	7819      	ldrb	r1, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f002 f839 	bl	8008d94 <USBD_LL_PrepareReceive>
 8006d22:	e008      	b.n	8006d36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <USBD_CDC_ReceivePacket+0x68>)
 8006d26:	7819      	ldrb	r1, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d2e:	2340      	movs	r3, #64	; 0x40
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f002 f82f 	bl	8008d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000094 	.word	0x20000094

08006d44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e01f      	b.n	8006d9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	79fa      	ldrb	r2, [r7, #7]
 8006d8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f001 fea9 	bl	8008ae8 <USBD_LL_Init>
 8006d96:	4603      	mov	r3, r0
 8006d98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e025      	b.n	8006e08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32ae      	adds	r2, #174	; 0xae
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00f      	beq.n	8006df8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	32ae      	adds	r2, #174	; 0xae
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	f107 020e 	add.w	r2, r7, #14
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	4602      	mov	r2, r0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 feb1 	bl	8008b80 <USBD_LL_Start>
 8006e1e:	4603      	mov	r3, r0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d009      	beq.n	8006e6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	78fa      	ldrb	r2, [r7, #3]
 8006e62:	4611      	mov	r1, r2
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	78fa      	ldrb	r2, [r7, #3]
 8006e90:	4611      	mov	r1, r2
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 f924 	bl	800810a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d01a      	beq.n	8006f1c <USBD_LL_SetupStage+0x72>
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d822      	bhi.n	8006f30 <USBD_LL_SetupStage+0x86>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <USBD_LL_SetupStage+0x4a>
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d00a      	beq.n	8006f08 <USBD_LL_SetupStage+0x5e>
 8006ef2:	e01d      	b.n	8006f30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fb79 	bl	80075f4 <USBD_StdDevReq>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
      break;
 8006f06:	e020      	b.n	8006f4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fbe1 	bl	80076d8 <USBD_StdItfReq>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1a:	e016      	b.n	8006f4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc43 	bl	80077b0 <USBD_StdEPReq>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2e:	e00c      	b.n	8006f4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 fe7e 	bl	8008c40 <USBD_LL_StallEP>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73fb      	strb	r3, [r7, #15]
      break;
 8006f48:	bf00      	nop
  }

  return ret;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d177      	bne.n	800705c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	f040 80a1 	bne.w	80070c2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	8992      	ldrh	r2, [r2, #12]
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d91c      	bls.n	8006fc6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	8992      	ldrh	r2, [r2, #12]
 8006f94:	1a9a      	subs	r2, r3, r2
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	8992      	ldrh	r2, [r2, #12]
 8006fa2:	441a      	add	r2, r3
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6919      	ldr	r1, [r3, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	899b      	ldrh	r3, [r3, #12]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	bf38      	it	cc
 8006fba:	4613      	movcc	r3, r2
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f001 f9aa 	bl	8008318 <USBD_CtlContinueRx>
 8006fc4:	e07d      	b.n	80070c2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d014      	beq.n	8006ffe <USBD_LL_DataOutStage+0xaa>
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d81d      	bhi.n	8007014 <USBD_LL_DataOutStage+0xc0>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <USBD_LL_DataOutStage+0x8e>
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d003      	beq.n	8006fe8 <USBD_LL_DataOutStage+0x94>
 8006fe0:	e018      	b.n	8007014 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75bb      	strb	r3, [r7, #22]
            break;
 8006fe6:	e018      	b.n	800701a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fa6e 	bl	80074d4 <USBD_CoreFindIF>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	75bb      	strb	r3, [r7, #22]
            break;
 8006ffc:	e00d      	b.n	800701a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007004:	b2db      	uxtb	r3, r3
 8007006:	4619      	mov	r1, r3
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fa70 	bl	80074ee <USBD_CoreFindEP>
 800700e:	4603      	mov	r3, r0
 8007010:	75bb      	strb	r3, [r7, #22]
            break;
 8007012:	e002      	b.n	800701a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	75bb      	strb	r3, [r7, #22]
            break;
 8007018:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800701a:	7dbb      	ldrb	r3, [r7, #22]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d119      	bne.n	8007054 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b03      	cmp	r3, #3
 800702a:	d113      	bne.n	8007054 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800702c:	7dba      	ldrb	r2, [r7, #22]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	32ae      	adds	r2, #174	; 0xae
 8007032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800703c:	7dba      	ldrb	r2, [r7, #22]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007044:	7dba      	ldrb	r2, [r7, #22]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	32ae      	adds	r2, #174	; 0xae
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f001 f970 	bl	800833a <USBD_CtlSendStatus>
 800705a:	e032      	b.n	80070c2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800705c:	7afb      	ldrb	r3, [r7, #11]
 800705e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007062:	b2db      	uxtb	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fa41 	bl	80074ee <USBD_CoreFindEP>
 800706c:	4603      	mov	r3, r0
 800706e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007070:	7dbb      	ldrb	r3, [r7, #22]
 8007072:	2bff      	cmp	r3, #255	; 0xff
 8007074:	d025      	beq.n	80070c2 <USBD_LL_DataOutStage+0x16e>
 8007076:	7dbb      	ldrb	r3, [r7, #22]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d122      	bne.n	80070c2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b03      	cmp	r3, #3
 8007086:	d117      	bne.n	80070b8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007088:	7dba      	ldrb	r2, [r7, #22]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	32ae      	adds	r2, #174	; 0xae
 800708e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00f      	beq.n	80070b8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007098:	7dba      	ldrb	r2, [r7, #22]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070a0:	7dba      	ldrb	r2, [r7, #22]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	32ae      	adds	r2, #174	; 0xae
 80070a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	7afa      	ldrb	r2, [r7, #11]
 80070ae:	4611      	mov	r1, r2
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	4798      	blx	r3
 80070b4:	4603      	mov	r3, r0
 80070b6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	e000      	b.n	80070c4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	460b      	mov	r3, r1
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d178      	bne.n	80071d2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3314      	adds	r3, #20
 80070e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d163      	bne.n	80071b8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	8992      	ldrh	r2, [r2, #12]
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d91c      	bls.n	8007136 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	8992      	ldrh	r2, [r2, #12]
 8007104:	1a9a      	subs	r2, r3, r2
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	8992      	ldrh	r2, [r2, #12]
 8007112:	441a      	add	r2, r3
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6919      	ldr	r1, [r3, #16]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	461a      	mov	r2, r3
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 f8c6 	bl	80082b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007128:	2300      	movs	r3, #0
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 fe30 	bl	8008d94 <USBD_LL_PrepareReceive>
 8007134:	e040      	b.n	80071b8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	899b      	ldrh	r3, [r3, #12]
 800713a:	461a      	mov	r2, r3
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d11c      	bne.n	800717e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800714c:	4293      	cmp	r3, r2
 800714e:	d316      	bcc.n	800717e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800715a:	429a      	cmp	r2, r3
 800715c:	d20f      	bcs.n	800717e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f001 f8a6 	bl	80082b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007170:	2300      	movs	r3, #0
 8007172:	2200      	movs	r2, #0
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f001 fe0c 	bl	8008d94 <USBD_LL_PrepareReceive>
 800717c:	e01c      	b.n	80071b8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b03      	cmp	r3, #3
 8007188:	d10f      	bne.n	80071aa <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f001 fd47 	bl	8008c40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f001 f8d4 	bl	8008360 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d03a      	beq.n	8007238 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fe30 	bl	8006e28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071d0:	e032      	b.n	8007238 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071d2:	7afb      	ldrb	r3, [r7, #11]
 80071d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f986 	bl	80074ee <USBD_CoreFindEP>
 80071e2:	4603      	mov	r3, r0
 80071e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2bff      	cmp	r3, #255	; 0xff
 80071ea:	d025      	beq.n	8007238 <USBD_LL_DataInStage+0x16c>
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d122      	bne.n	8007238 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d11c      	bne.n	8007238 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80071fe:	7dfa      	ldrb	r2, [r7, #23]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	32ae      	adds	r2, #174	; 0xae
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d014      	beq.n	8007238 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800720e:	7dfa      	ldrb	r2, [r7, #23]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007216:	7dfa      	ldrb	r2, [r7, #23]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	32ae      	adds	r2, #174	; 0xae
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	7afa      	ldrb	r2, [r7, #11]
 8007224:	4611      	mov	r1, r2
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	4798      	blx	r3
 800722a:	4603      	mov	r3, r0
 800722c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800722e:	7dbb      	ldrb	r3, [r7, #22]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007234:	7dbb      	ldrb	r3, [r7, #22]
 8007236:	e000      	b.n	800723a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d014      	beq.n	80072a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00e      	beq.n	80072a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6852      	ldr	r2, [r2, #4]
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	4611      	mov	r1, r2
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072a8:	2340      	movs	r3, #64	; 0x40
 80072aa:	2200      	movs	r2, #0
 80072ac:	2100      	movs	r1, #0
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fc81 	bl	8008bb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2240      	movs	r2, #64	; 0x40
 80072c0:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072c4:	2340      	movs	r3, #64	; 0x40
 80072c6:	2200      	movs	r2, #0
 80072c8:	2180      	movs	r1, #128	; 0x80
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fc73 	bl	8008bb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2240      	movs	r2, #64	; 0x40
 80072dc:	841a      	strh	r2, [r3, #32]

  return ret;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	78fa      	ldrb	r2, [r7, #3]
 80072f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b04      	cmp	r3, #4
 800731a:	d006      	beq.n	800732a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007322:	b2da      	uxtb	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2204      	movs	r2, #4
 800732e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b04      	cmp	r3, #4
 8007352:	d106      	bne.n	8007362 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800735a:	b2da      	uxtb	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b03      	cmp	r3, #3
 8007382:	d110      	bne.n	80073a6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	32ae      	adds	r2, #174	; 0xae
 80073c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e01c      	b.n	800740c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d115      	bne.n	800740a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	32ae      	adds	r2, #174	; 0xae
 80073e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00b      	beq.n	800740a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	32ae      	adds	r2, #174	; 0xae
 80073fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	32ae      	adds	r2, #174	; 0xae
 800742a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007432:	2303      	movs	r3, #3
 8007434:	e01c      	b.n	8007470 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b03      	cmp	r3, #3
 8007440:	d115      	bne.n	800746e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	32ae      	adds	r2, #174	; 0xae
 800744c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	32ae      	adds	r2, #174	; 0xae
 8007460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	4611      	mov	r1, r2
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00e      	beq.n	80074ca <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6852      	ldr	r2, [r2, #4]
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	4611      	mov	r1, r2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074c6:	2303      	movs	r3, #3
 80074c8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	885b      	ldrh	r3, [r3, #2]
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	429a      	cmp	r2, r3
 800752e:	d920      	bls.n	8007572 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	b29b      	uxth	r3, r3
 8007536:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007538:	e013      	b.n	8007562 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800753a:	f107 030a 	add.w	r3, r7, #10
 800753e:	4619      	mov	r1, r3
 8007540:	6978      	ldr	r0, [r7, #20]
 8007542:	f000 f81b 	bl	800757c <USBD_GetNextDesc>
 8007546:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b05      	cmp	r3, #5
 800754e:	d108      	bne.n	8007562 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	789b      	ldrb	r3, [r3, #2]
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	429a      	cmp	r2, r3
 800755c:	d008      	beq.n	8007570 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	b29a      	uxth	r2, r3
 8007568:	897b      	ldrh	r3, [r7, #10]
 800756a:	429a      	cmp	r2, r3
 800756c:	d8e5      	bhi.n	800753a <USBD_GetEpDesc+0x32>
 800756e:	e000      	b.n	8007572 <USBD_GetEpDesc+0x6a>
          break;
 8007570:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007572:	693b      	ldr	r3, [r7, #16]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	881a      	ldrh	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	4413      	add	r3, r2
 8007596:	b29a      	uxth	r2, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4413      	add	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075a8:	68fb      	ldr	r3, [r7, #12]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b087      	sub	sp, #28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	3301      	adds	r3, #1
 80075cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075d4:	8a3b      	ldrh	r3, [r7, #16]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	b21a      	sxth	r2, r3
 80075da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075de:	4313      	orrs	r3, r2
 80075e0:	b21b      	sxth	r3, r3
 80075e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075e4:	89fb      	ldrh	r3, [r7, #14]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d005      	beq.n	800761a <USBD_StdDevReq+0x26>
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d857      	bhi.n	80076c2 <USBD_StdDevReq+0xce>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00f      	beq.n	8007636 <USBD_StdDevReq+0x42>
 8007616:	2b20      	cmp	r3, #32
 8007618:	d153      	bne.n	80076c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	32ae      	adds	r2, #174	; 0xae
 8007624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	4798      	blx	r3
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]
      break;
 8007634:	e04a      	b.n	80076cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b09      	cmp	r3, #9
 800763c:	d83b      	bhi.n	80076b6 <USBD_StdDevReq+0xc2>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <USBD_StdDevReq+0x50>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007699 	.word	0x08007699
 8007648:	080076ad 	.word	0x080076ad
 800764c:	080076b7 	.word	0x080076b7
 8007650:	080076a3 	.word	0x080076a3
 8007654:	080076b7 	.word	0x080076b7
 8007658:	08007677 	.word	0x08007677
 800765c:	0800766d 	.word	0x0800766d
 8007660:	080076b7 	.word	0x080076b7
 8007664:	0800768f 	.word	0x0800768f
 8007668:	08007681 	.word	0x08007681
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa3e 	bl	8007af0 <USBD_GetDescriptor>
          break;
 8007674:	e024      	b.n	80076c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fba3 	bl	8007dc4 <USBD_SetAddress>
          break;
 800767e:	e01f      	b.n	80076c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fbe2 	bl	8007e4c <USBD_SetConfig>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
          break;
 800768c:	e018      	b.n	80076c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fc85 	bl	8007fa0 <USBD_GetConfig>
          break;
 8007696:	e013      	b.n	80076c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fcb6 	bl	800800c <USBD_GetStatus>
          break;
 80076a0:	e00e      	b.n	80076c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fce5 	bl	8008074 <USBD_SetFeature>
          break;
 80076aa:	e009      	b.n	80076c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fd09 	bl	80080c6 <USBD_ClrFeature>
          break;
 80076b4:	e004      	b.n	80076c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fd60 	bl	800817e <USBD_CtlError>
          break;
 80076be:	bf00      	nop
      }
      break;
 80076c0:	e004      	b.n	80076cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fd5a 	bl	800817e <USBD_CtlError>
      break;
 80076ca:	bf00      	nop
  }

  return ret;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop

080076d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ee:	2b40      	cmp	r3, #64	; 0x40
 80076f0:	d005      	beq.n	80076fe <USBD_StdItfReq+0x26>
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d852      	bhi.n	800779c <USBD_StdItfReq+0xc4>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <USBD_StdItfReq+0x26>
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d14e      	bne.n	800779c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	2b02      	cmp	r3, #2
 800770a:	d840      	bhi.n	800778e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	889b      	ldrh	r3, [r3, #4]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b01      	cmp	r3, #1
 8007714:	d836      	bhi.n	8007784 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	889b      	ldrh	r3, [r3, #4]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fed8 	bl	80074d4 <USBD_CoreFindIF>
 8007724:	4603      	mov	r3, r0
 8007726:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	2bff      	cmp	r3, #255	; 0xff
 800772c:	d01d      	beq.n	800776a <USBD_StdItfReq+0x92>
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11a      	bne.n	800776a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007734:	7bba      	ldrb	r2, [r7, #14]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	32ae      	adds	r2, #174	; 0xae
 800773a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00f      	beq.n	8007764 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007744:	7bba      	ldrb	r2, [r7, #14]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800774c:	7bba      	ldrb	r2, [r7, #14]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	32ae      	adds	r2, #174	; 0xae
 8007752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007762:	e004      	b.n	800776e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007764:	2303      	movs	r3, #3
 8007766:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007768:	e001      	b.n	800776e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88db      	ldrh	r3, [r3, #6]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d110      	bne.n	8007798 <USBD_StdItfReq+0xc0>
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10d      	bne.n	8007798 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fddc 	bl	800833a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007782:	e009      	b.n	8007798 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fcf9 	bl	800817e <USBD_CtlError>
          break;
 800778c:	e004      	b.n	8007798 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fcf4 	bl	800817e <USBD_CtlError>
          break;
 8007796:	e000      	b.n	800779a <USBD_StdItfReq+0xc2>
          break;
 8007798:	bf00      	nop
      }
      break;
 800779a:	e004      	b.n	80077a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fced 	bl	800817e <USBD_CtlError>
      break;
 80077a4:	bf00      	nop
  }

  return ret;
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	889b      	ldrh	r3, [r3, #4]
 80077c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	d007      	beq.n	80077e0 <USBD_StdEPReq+0x30>
 80077d0:	2b40      	cmp	r3, #64	; 0x40
 80077d2:	f200 8181 	bhi.w	8007ad8 <USBD_StdEPReq+0x328>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d02a      	beq.n	8007830 <USBD_StdEPReq+0x80>
 80077da:	2b20      	cmp	r3, #32
 80077dc:	f040 817c 	bne.w	8007ad8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff fe82 	bl	80074ee <USBD_CoreFindEP>
 80077ea:	4603      	mov	r3, r0
 80077ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077ee:	7b7b      	ldrb	r3, [r7, #13]
 80077f0:	2bff      	cmp	r3, #255	; 0xff
 80077f2:	f000 8176 	beq.w	8007ae2 <USBD_StdEPReq+0x332>
 80077f6:	7b7b      	ldrb	r3, [r7, #13]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f040 8172 	bne.w	8007ae2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80077fe:	7b7a      	ldrb	r2, [r7, #13]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007806:	7b7a      	ldrb	r2, [r7, #13]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	32ae      	adds	r2, #174	; 0xae
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 8165 	beq.w	8007ae2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007818:	7b7a      	ldrb	r2, [r7, #13]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	32ae      	adds	r2, #174	; 0xae
 800781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800782e:	e158      	b.n	8007ae2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d008      	beq.n	800784a <USBD_StdEPReq+0x9a>
 8007838:	2b03      	cmp	r3, #3
 800783a:	f300 8147 	bgt.w	8007acc <USBD_StdEPReq+0x31c>
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 809b 	beq.w	800797a <USBD_StdEPReq+0x1ca>
 8007844:	2b01      	cmp	r3, #1
 8007846:	d03c      	beq.n	80078c2 <USBD_StdEPReq+0x112>
 8007848:	e140      	b.n	8007acc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d002      	beq.n	800785c <USBD_StdEPReq+0xac>
 8007856:	2b03      	cmp	r3, #3
 8007858:	d016      	beq.n	8007888 <USBD_StdEPReq+0xd8>
 800785a:	e02c      	b.n	80078b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00d      	beq.n	800787e <USBD_StdEPReq+0xce>
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b80      	cmp	r3, #128	; 0x80
 8007866:	d00a      	beq.n	800787e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 f9e7 	bl	8008c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007872:	2180      	movs	r1, #128	; 0x80
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 f9e3 	bl	8008c40 <USBD_LL_StallEP>
 800787a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800787c:	e020      	b.n	80078c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fc7c 	bl	800817e <USBD_CtlError>
              break;
 8007886:	e01b      	b.n	80078c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	885b      	ldrh	r3, [r3, #2]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10e      	bne.n	80078ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00b      	beq.n	80078ae <USBD_StdEPReq+0xfe>
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b80      	cmp	r3, #128	; 0x80
 800789a:	d008      	beq.n	80078ae <USBD_StdEPReq+0xfe>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	88db      	ldrh	r3, [r3, #6]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f9c9 	bl	8008c40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fd43 	bl	800833a <USBD_CtlSendStatus>

              break;
 80078b4:	e004      	b.n	80078c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fc60 	bl	800817e <USBD_CtlError>
              break;
 80078be:	bf00      	nop
          }
          break;
 80078c0:	e109      	b.n	8007ad6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d002      	beq.n	80078d4 <USBD_StdEPReq+0x124>
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d016      	beq.n	8007900 <USBD_StdEPReq+0x150>
 80078d2:	e04b      	b.n	800796c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00d      	beq.n	80078f6 <USBD_StdEPReq+0x146>
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b80      	cmp	r3, #128	; 0x80
 80078de:	d00a      	beq.n	80078f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 f9ab 	bl	8008c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ea:	2180      	movs	r1, #128	; 0x80
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f9a7 	bl	8008c40 <USBD_LL_StallEP>
 80078f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f4:	e040      	b.n	8007978 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc40 	bl	800817e <USBD_CtlError>
              break;
 80078fe:	e03b      	b.n	8007978 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	885b      	ldrh	r3, [r3, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d136      	bne.n	8007976 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790e:	2b00      	cmp	r3, #0
 8007910:	d004      	beq.n	800791c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 f9b1 	bl	8008c7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fd0c 	bl	800833a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fde1 	bl	80074ee <USBD_CoreFindEP>
 800792c:	4603      	mov	r3, r0
 800792e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007930:	7b7b      	ldrb	r3, [r7, #13]
 8007932:	2bff      	cmp	r3, #255	; 0xff
 8007934:	d01f      	beq.n	8007976 <USBD_StdEPReq+0x1c6>
 8007936:	7b7b      	ldrb	r3, [r7, #13]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11c      	bne.n	8007976 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800793c:	7b7a      	ldrb	r2, [r7, #13]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007944:	7b7a      	ldrb	r2, [r7, #13]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	32ae      	adds	r2, #174	; 0xae
 800794a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d010      	beq.n	8007976 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007954:	7b7a      	ldrb	r2, [r7, #13]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	32ae      	adds	r2, #174	; 0xae
 800795a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800796a:	e004      	b.n	8007976 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc05 	bl	800817e <USBD_CtlError>
              break;
 8007974:	e000      	b.n	8007978 <USBD_StdEPReq+0x1c8>
              break;
 8007976:	bf00      	nop
          }
          break;
 8007978:	e0ad      	b.n	8007ad6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d002      	beq.n	800798c <USBD_StdEPReq+0x1dc>
 8007986:	2b03      	cmp	r3, #3
 8007988:	d033      	beq.n	80079f2 <USBD_StdEPReq+0x242>
 800798a:	e099      	b.n	8007ac0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <USBD_StdEPReq+0x1f2>
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	2b80      	cmp	r3, #128	; 0x80
 8007996:	d004      	beq.n	80079a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fbef 	bl	800817e <USBD_CtlError>
                break;
 80079a0:	e093      	b.n	8007aca <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da0b      	bge.n	80079c2 <USBD_StdEPReq+0x212>
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	3310      	adds	r3, #16
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	3304      	adds	r3, #4
 80079c0:	e00b      	b.n	80079da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	3304      	adds	r3, #4
 80079da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2200      	movs	r2, #0
 80079e0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	330e      	adds	r3, #14
 80079e6:	2202      	movs	r2, #2
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fc44 	bl	8008278 <USBD_CtlSendData>
              break;
 80079f0:	e06b      	b.n	8007aca <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da11      	bge.n	8007a1e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	f003 020f 	and.w	r2, r3, #15
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	3323      	adds	r3, #35	; 0x23
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d117      	bne.n	8007a44 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fbb1 	bl	800817e <USBD_CtlError>
                  break;
 8007a1c:	e055      	b.n	8007aca <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	f003 020f 	and.w	r2, r3, #15
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	f203 1363 	addw	r3, r3, #355	; 0x163
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fb9e 	bl	800817e <USBD_CtlError>
                  break;
 8007a42:	e042      	b.n	8007aca <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	da0b      	bge.n	8007a64 <USBD_StdEPReq+0x2b4>
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	3310      	adds	r3, #16
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	3304      	adds	r3, #4
 8007a62:	e00b      	b.n	8007a7c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <USBD_StdEPReq+0x2da>
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b80      	cmp	r3, #128	; 0x80
 8007a88:	d103      	bne.n	8007a92 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	739a      	strb	r2, [r3, #14]
 8007a90:	e00e      	b.n	8007ab0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f910 	bl	8008cbc <USBD_LL_IsStallEP>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	739a      	strb	r2, [r3, #14]
 8007aa8:	e002      	b.n	8007ab0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	330e      	adds	r3, #14
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fbdd 	bl	8008278 <USBD_CtlSendData>
              break;
 8007abe:	e004      	b.n	8007aca <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fb5b 	bl	800817e <USBD_CtlError>
              break;
 8007ac8:	bf00      	nop
          }
          break;
 8007aca:	e004      	b.n	8007ad6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb55 	bl	800817e <USBD_CtlError>
          break;
 8007ad4:	bf00      	nop
      }
      break;
 8007ad6:	e005      	b.n	8007ae4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fb4f 	bl	800817e <USBD_CtlError>
      break;
 8007ae0:	e000      	b.n	8007ae4 <USBD_StdEPReq+0x334>
      break;
 8007ae2:	bf00      	nop
  }

  return ret;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	885b      	ldrh	r3, [r3, #2]
 8007b0a:	0a1b      	lsrs	r3, r3, #8
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b06      	cmp	r3, #6
 8007b12:	f200 8128 	bhi.w	8007d66 <USBD_GetDescriptor+0x276>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <USBD_GetDescriptor+0x2c>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b91 	.word	0x08007b91
 8007b28:	08007d67 	.word	0x08007d67
 8007b2c:	08007d67 	.word	0x08007d67
 8007b30:	08007d07 	.word	0x08007d07
 8007b34:	08007d33 	.word	0x08007d33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7c12      	ldrb	r2, [r2, #16]
 8007b44:	f107 0108 	add.w	r1, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
      break;
 8007b4e:	e112      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7c1b      	ldrb	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10d      	bne.n	8007b74 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b72:	e100      	b.n	8007d76 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	f107 0208 	add.w	r2, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e0f2      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	885b      	ldrh	r3, [r3, #2]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	f200 80ac 	bhi.w	8007cf4 <USBD_GetDescriptor+0x204>
 8007b9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBD_GetDescriptor+0xb4>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007bbd 	.word	0x08007bbd
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007c25 	.word	0x08007c25
 8007bb0:	08007c59 	.word	0x08007c59
 8007bb4:	08007c8d 	.word	0x08007c8d
 8007bb8:	08007cc1 	.word	0x08007cc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bde:	e091      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 facb 	bl	800817e <USBD_CtlError>
            err++;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	3301      	adds	r3, #1
 8007bec:	72fb      	strb	r3, [r7, #11]
          break;
 8007bee:	e089      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e077      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fab1 	bl	800817e <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e06f      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c46:	e05d      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa97 	bl	800817e <USBD_CtlError>
            err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
          break;
 8007c56:	e055      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	7c12      	ldrb	r2, [r2, #16]
 8007c70:	f107 0108 	add.w	r1, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7a:	e043      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa7d 	bl	800817e <USBD_CtlError>
            err++;
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	3301      	adds	r3, #1
 8007c88:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8a:	e03b      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7c12      	ldrb	r2, [r2, #16]
 8007ca4:	f107 0108 	add.w	r1, r7, #8
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
 8007cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cae:	e029      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa63 	bl	800817e <USBD_CtlError>
            err++;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cbe:	e021      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e00f      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa49 	bl	800817e <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e007      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa41 	bl	800817e <USBD_CtlError>
          err++;
 8007cfc:	7afb      	ldrb	r3, [r7, #11]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d02:	bf00      	nop
      }
      break;
 8007d04:	e037      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7c1b      	ldrb	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	f107 0208 	add.w	r2, r7, #8
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4798      	blx	r3
 8007d1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d20:	e029      	b.n	8007d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fa2a 	bl	800817e <USBD_CtlError>
        err++;
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d30:	e021      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	7c1b      	ldrb	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10d      	bne.n	8007d56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	f107 0208 	add.w	r2, r7, #8
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
 8007d4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2207      	movs	r2, #7
 8007d52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d54:	e00f      	b.n	8007d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fa10 	bl	800817e <USBD_CtlError>
        err++;
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	3301      	adds	r3, #1
 8007d62:	72fb      	strb	r3, [r7, #11]
      break;
 8007d64:	e007      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fa08 	bl	800817e <USBD_CtlError>
      err++;
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	3301      	adds	r3, #1
 8007d72:	72fb      	strb	r3, [r7, #11]
      break;
 8007d74:	bf00      	nop
  }

  if (err != 0U)
 8007d76:	7afb      	ldrb	r3, [r7, #11]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d11e      	bne.n	8007dba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	88db      	ldrh	r3, [r3, #6]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d016      	beq.n	8007db2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d84:	893b      	ldrh	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00e      	beq.n	8007da8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88da      	ldrh	r2, [r3, #6]
 8007d8e:	893b      	ldrh	r3, [r7, #8]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bf28      	it	cs
 8007d94:	4613      	movcs	r3, r2
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa69 	bl	8008278 <USBD_CtlSendData>
 8007da6:	e009      	b.n	8007dbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9e7 	bl	800817e <USBD_CtlError>
 8007db0:	e004      	b.n	8007dbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fac1 	bl	800833a <USBD_CtlSendStatus>
 8007db8:	e000      	b.n	8007dbc <USBD_GetDescriptor+0x2cc>
    return;
 8007dba:	bf00      	nop
  }
}
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop

08007dc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	889b      	ldrh	r3, [r3, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d131      	bne.n	8007e3a <USBD_SetAddress+0x76>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	88db      	ldrh	r3, [r3, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d12d      	bne.n	8007e3a <USBD_SetAddress+0x76>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	2b7f      	cmp	r3, #127	; 0x7f
 8007de4:	d829      	bhi.n	8007e3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	885b      	ldrh	r3, [r3, #2]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d104      	bne.n	8007e08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9bc 	bl	800817e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	e01d      	b.n	8007e44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7bfa      	ldrb	r2, [r7, #15]
 8007e0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 ff7d 	bl	8008d14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa8d 	bl	800833a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2e:	e009      	b.n	8007e44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e38:	e004      	b.n	8007e44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f99e 	bl	800817e <USBD_CtlError>
  }
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	4b4e      	ldr	r3, [pc, #312]	; (8007f9c <USBD_SetConfig+0x150>)
 8007e62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e64:	4b4d      	ldr	r3, [pc, #308]	; (8007f9c <USBD_SetConfig+0x150>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d905      	bls.n	8007e78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f985 	bl	800817e <USBD_CtlError>
    return USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e08c      	b.n	8007f92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d002      	beq.n	8007e8a <USBD_SetConfig+0x3e>
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d029      	beq.n	8007edc <USBD_SetConfig+0x90>
 8007e88:	e075      	b.n	8007f76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e8a:	4b44      	ldr	r3, [pc, #272]	; (8007f9c <USBD_SetConfig+0x150>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d020      	beq.n	8007ed4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e92:	4b42      	ldr	r3, [pc, #264]	; (8007f9c <USBD_SetConfig+0x150>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e9c:	4b3f      	ldr	r3, [pc, #252]	; (8007f9c <USBD_SetConfig+0x150>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fe ffcb 	bl	8006e3e <USBD_SetClassConfig>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f962 	bl	800817e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ec2:	e065      	b.n	8007f90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fa38 	bl	800833a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ed2:	e05d      	b.n	8007f90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fa30 	bl	800833a <USBD_CtlSendStatus>
      break;
 8007eda:	e059      	b.n	8007f90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007edc:	4b2f      	ldr	r3, [pc, #188]	; (8007f9c <USBD_SetConfig+0x150>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d112      	bne.n	8007f0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007eec:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <USBD_SetConfig+0x150>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ef6:	4b29      	ldr	r3, [pc, #164]	; (8007f9c <USBD_SetConfig+0x150>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7fe ffba 	bl	8006e76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa19 	bl	800833a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f08:	e042      	b.n	8007f90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <USBD_SetConfig+0x150>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d02a      	beq.n	8007f6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fe ffa8 	bl	8006e76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f26:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <USBD_SetConfig+0x150>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f30:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <USBD_SetConfig+0x150>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7fe ff81 	bl	8006e3e <USBD_SetClassConfig>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f918 	bl	800817e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fe ff8d 	bl	8006e76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f64:	e014      	b.n	8007f90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f9e7 	bl	800833a <USBD_CtlSendStatus>
      break;
 8007f6c:	e010      	b.n	8007f90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9e3 	bl	800833a <USBD_CtlSendStatus>
      break;
 8007f74:	e00c      	b.n	8007f90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f900 	bl	800817e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f7e:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <USBD_SetConfig+0x150>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7fe ff76 	bl	8006e76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8e:	bf00      	nop
  }

  return ret;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	2000048c 	.word	0x2000048c

08007fa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d004      	beq.n	8007fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f8e2 	bl	800817e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fba:	e023      	b.n	8008004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	dc02      	bgt.n	8007fce <USBD_GetConfig+0x2e>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dc03      	bgt.n	8007fd4 <USBD_GetConfig+0x34>
 8007fcc:	e015      	b.n	8007ffa <USBD_GetConfig+0x5a>
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d00b      	beq.n	8007fea <USBD_GetConfig+0x4a>
 8007fd2:	e012      	b.n	8007ffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f948 	bl	8008278 <USBD_CtlSendData>
        break;
 8007fe8:	e00c      	b.n	8008004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3304      	adds	r3, #4
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f940 	bl	8008278 <USBD_CtlSendData>
        break;
 8007ff8:	e004      	b.n	8008004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f8be 	bl	800817e <USBD_CtlError>
        break;
 8008002:	bf00      	nop
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	b2db      	uxtb	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b02      	cmp	r3, #2
 8008022:	d81e      	bhi.n	8008062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	88db      	ldrh	r3, [r3, #6]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d004      	beq.n	8008036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8a5 	bl	800817e <USBD_CtlError>
        break;
 8008034:	e01a      	b.n	800806c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f043 0202 	orr.w	r2, r3, #2
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	330c      	adds	r3, #12
 8008056:	2202      	movs	r2, #2
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f90c 	bl	8008278 <USBD_CtlSendData>
      break;
 8008060:	e004      	b.n	800806c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f88a 	bl	800817e <USBD_CtlError>
      break;
 800806a:	bf00      	nop
  }
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	885b      	ldrh	r3, [r3, #2]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d107      	bne.n	8008096 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f953 	bl	800833a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008094:	e013      	b.n	80080be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d10b      	bne.n	80080b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	889b      	ldrh	r3, [r3, #4]
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f943 	bl	800833a <USBD_CtlSendStatus>
}
 80080b4:	e003      	b.n	80080be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f860 	bl	800817e <USBD_CtlError>
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d80b      	bhi.n	80080f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	885b      	ldrh	r3, [r3, #2]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10c      	bne.n	8008100 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f923 	bl	800833a <USBD_CtlSendStatus>
      }
      break;
 80080f4:	e004      	b.n	8008100 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f840 	bl	800817e <USBD_CtlError>
      break;
 80080fe:	e000      	b.n	8008102 <USBD_ClrFeature+0x3c>
      break;
 8008100:	bf00      	nop
  }
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	781a      	ldrb	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff fa3e 	bl	80075b6 <SWAPBYTE>
 800813a:	4603      	mov	r3, r0
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fa31 	bl	80075b6 <SWAPBYTE>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fa24 	bl	80075b6 <SWAPBYTE>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	80da      	strh	r2, [r3, #6]
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008188:	2180      	movs	r1, #128	; 0x80
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fd58 	bl	8008c40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008190:	2100      	movs	r1, #0
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fd54 	bl	8008c40 <USBD_LL_StallEP>
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d042      	beq.n	800823c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f000 f842 	bl	8008244 <USBD_GetLen>
 80081c0:	4603      	mov	r3, r0
 80081c2:	3301      	adds	r3, #1
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ca:	d808      	bhi.n	80081de <USBD_GetString+0x3e>
 80081cc:	6938      	ldr	r0, [r7, #16]
 80081ce:	f000 f839 	bl	8008244 <USBD_GetLen>
 80081d2:	4603      	mov	r3, r0
 80081d4:	3301      	adds	r3, #1
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	e001      	b.n	80081e2 <USBD_GetString+0x42>
 80081de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	4413      	add	r3, r2
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	3301      	adds	r3, #1
 80081f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	2203      	movs	r2, #3
 8008200:	701a      	strb	r2, [r3, #0]
  idx++;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	3301      	adds	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008208:	e013      	b.n	8008232 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	4413      	add	r3, r2
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	7812      	ldrb	r2, [r2, #0]
 8008214:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	3301      	adds	r3, #1
 800821a:	613b      	str	r3, [r7, #16]
    idx++;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	3301      	adds	r3, #1
 8008220:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	4413      	add	r3, r2
 8008228:	2200      	movs	r2, #0
 800822a:	701a      	strb	r2, [r3, #0]
    idx++;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	3301      	adds	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e7      	bne.n	800820a <USBD_GetString+0x6a>
 800823a:	e000      	b.n	800823e <USBD_GetString+0x9e>
    return;
 800823c:	bf00      	nop
  }
}
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008254:	e005      	b.n	8008262 <USBD_GetLen+0x1e>
  {
    len++;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	3301      	adds	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	3301      	adds	r3, #1
 8008260:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f5      	bne.n	8008256 <USBD_GetLen+0x12>
  }

  return len;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2202      	movs	r2, #2
 8008288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	2100      	movs	r1, #0
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 fd54 	bl	8008d52 <USBD_LL_Transmit>

  return USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fd43 	bl	8008d52 <USBD_LL_Transmit>

  return USBD_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2203      	movs	r2, #3
 80082e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	2100      	movs	r1, #0
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fd43 	bl	8008d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	2100      	movs	r1, #0
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fd32 	bl	8008d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2204      	movs	r2, #4
 8008346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800834a:	2300      	movs	r3, #0
 800834c:	2200      	movs	r2, #0
 800834e:	2100      	movs	r1, #0
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fcfe 	bl	8008d52 <USBD_LL_Transmit>

  return USBD_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2205      	movs	r2, #5
 800836c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008370:	2300      	movs	r3, #0
 8008372:	2200      	movs	r2, #0
 8008374:	2100      	movs	r1, #0
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fd0c 	bl	8008d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800838c:	2200      	movs	r2, #0
 800838e:	4912      	ldr	r1, [pc, #72]	; (80083d8 <MX_USB_DEVICE_Init+0x50>)
 8008390:	4812      	ldr	r0, [pc, #72]	; (80083dc <MX_USB_DEVICE_Init+0x54>)
 8008392:	f7fe fcd7 	bl	8006d44 <USBD_Init>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800839c:	f7f8 fdbc 	bl	8000f18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083a0:	490f      	ldr	r1, [pc, #60]	; (80083e0 <MX_USB_DEVICE_Init+0x58>)
 80083a2:	480e      	ldr	r0, [pc, #56]	; (80083dc <MX_USB_DEVICE_Init+0x54>)
 80083a4:	f7fe fcfe 	bl	8006da4 <USBD_RegisterClass>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083ae:	f7f8 fdb3 	bl	8000f18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083b2:	490c      	ldr	r1, [pc, #48]	; (80083e4 <MX_USB_DEVICE_Init+0x5c>)
 80083b4:	4809      	ldr	r0, [pc, #36]	; (80083dc <MX_USB_DEVICE_Init+0x54>)
 80083b6:	f7fe fbf5 	bl	8006ba4 <USBD_CDC_RegisterInterface>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083c0:	f7f8 fdaa 	bl	8000f18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083c4:	4805      	ldr	r0, [pc, #20]	; (80083dc <MX_USB_DEVICE_Init+0x54>)
 80083c6:	f7fe fd23 	bl	8006e10 <USBD_Start>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083d0:	f7f8 fda2 	bl	8000f18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083d4:	bf00      	nop
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	200000b4 	.word	0x200000b4
 80083dc:	20000490 	.word	0x20000490
 80083e0:	20000018 	.word	0x20000018
 80083e4:	200000a0 	.word	0x200000a0

080083e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083ec:	2200      	movs	r2, #0
 80083ee:	4905      	ldr	r1, [pc, #20]	; (8008404 <CDC_Init_FS+0x1c>)
 80083f0:	4805      	ldr	r0, [pc, #20]	; (8008408 <CDC_Init_FS+0x20>)
 80083f2:	f7fe fbf1 	bl	8006bd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083f6:	4905      	ldr	r1, [pc, #20]	; (800840c <CDC_Init_FS+0x24>)
 80083f8:	4803      	ldr	r0, [pc, #12]	; (8008408 <CDC_Init_FS+0x20>)
 80083fa:	f7fe fc0f 	bl	8006c1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008400:	4618      	mov	r0, r3
 8008402:	bd80      	pop	{r7, pc}
 8008404:	2000096c 	.word	0x2000096c
 8008408:	20000490 	.word	0x20000490
 800840c:	2000076c 	.word	0x2000076c

08008410 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008414:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008416:	4618      	mov	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
 800842c:	4613      	mov	r3, r2
 800842e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2b23      	cmp	r3, #35	; 0x23
 8008434:	f200 8098 	bhi.w	8008568 <CDC_Control_FS+0x148>
 8008438:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <CDC_Control_FS+0x20>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	08008569 	.word	0x08008569
 8008444:	08008569 	.word	0x08008569
 8008448:	08008569 	.word	0x08008569
 800844c:	08008569 	.word	0x08008569
 8008450:	08008569 	.word	0x08008569
 8008454:	08008569 	.word	0x08008569
 8008458:	08008569 	.word	0x08008569
 800845c:	08008569 	.word	0x08008569
 8008460:	08008569 	.word	0x08008569
 8008464:	08008569 	.word	0x08008569
 8008468:	08008569 	.word	0x08008569
 800846c:	08008569 	.word	0x08008569
 8008470:	08008569 	.word	0x08008569
 8008474:	08008569 	.word	0x08008569
 8008478:	08008569 	.word	0x08008569
 800847c:	08008569 	.word	0x08008569
 8008480:	08008569 	.word	0x08008569
 8008484:	08008569 	.word	0x08008569
 8008488:	08008569 	.word	0x08008569
 800848c:	08008569 	.word	0x08008569
 8008490:	08008569 	.word	0x08008569
 8008494:	08008569 	.word	0x08008569
 8008498:	08008569 	.word	0x08008569
 800849c:	08008569 	.word	0x08008569
 80084a0:	08008569 	.word	0x08008569
 80084a4:	08008569 	.word	0x08008569
 80084a8:	08008569 	.word	0x08008569
 80084ac:	08008569 	.word	0x08008569
 80084b0:	08008569 	.word	0x08008569
 80084b4:	08008569 	.word	0x08008569
 80084b8:	08008569 	.word	0x08008569
 80084bc:	08008569 	.word	0x08008569
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	08008515 	.word	0x08008515
 80084c8:	08008569 	.word	0x08008569
 80084cc:	08008569 	.word	0x08008569
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	431a      	orrs	r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	3302      	adds	r3, #2
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	431a      	orrs	r2, r3
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	3303      	adds	r3, #3
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	061b      	lsls	r3, r3, #24
 80084f2:	4313      	orrs	r3, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	4b20      	ldr	r3, [pc, #128]	; (8008578 <CDC_Control_FS+0x158>)
 80084f8:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	791a      	ldrb	r2, [r3, #4]
 80084fe:	4b1e      	ldr	r3, [pc, #120]	; (8008578 <CDC_Control_FS+0x158>)
 8008500:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	795a      	ldrb	r2, [r3, #5]
 8008506:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <CDC_Control_FS+0x158>)
 8008508:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	799a      	ldrb	r2, [r3, #6]
 800850e:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <CDC_Control_FS+0x158>)
 8008510:	719a      	strb	r2, [r3, #6]
    break;
 8008512:	e02a      	b.n	800856a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008514:	4b18      	ldr	r3, [pc, #96]	; (8008578 <CDC_Control_FS+0x158>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	b2da      	uxtb	r2, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800851e:	4b16      	ldr	r3, [pc, #88]	; (8008578 <CDC_Control_FS+0x158>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	0a1a      	lsrs	r2, r3, #8
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	b2d2      	uxtb	r2, r2
 800852a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800852c:	4b12      	ldr	r3, [pc, #72]	; (8008578 <CDC_Control_FS+0x158>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	0c1a      	lsrs	r2, r3, #16
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	3302      	adds	r3, #2
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800853a:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <CDC_Control_FS+0x158>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	0e1a      	lsrs	r2, r3, #24
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	3303      	adds	r3, #3
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	3304      	adds	r3, #4
 800854c:	4a0a      	ldr	r2, [pc, #40]	; (8008578 <CDC_Control_FS+0x158>)
 800854e:	7912      	ldrb	r2, [r2, #4]
 8008550:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	3305      	adds	r3, #5
 8008556:	4a08      	ldr	r2, [pc, #32]	; (8008578 <CDC_Control_FS+0x158>)
 8008558:	7952      	ldrb	r2, [r2, #5]
 800855a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	3306      	adds	r3, #6
 8008560:	4a05      	ldr	r2, [pc, #20]	; (8008578 <CDC_Control_FS+0x158>)
 8008562:	7992      	ldrb	r2, [r2, #6]
 8008564:	701a      	strb	r2, [r3, #0]
    break;
 8008566:	e000      	b.n	800856a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008568:	bf00      	nop
  }

  return (USBD_OK);
 800856a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	20000098 	.word	0x20000098

0800857c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <CDC_Receive_FS+0x3c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d007      	beq.n	800859e <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 800858e:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <CDC_Receive_FS+0x3c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	b292      	uxth	r2, r2
 8008598:	4611      	mov	r1, r2
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	4806      	ldr	r0, [pc, #24]	; (80085bc <CDC_Receive_FS+0x40>)
 80085a2:	f7fe fb3b 	bl	8006c1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085a6:	4805      	ldr	r0, [pc, #20]	; (80085bc <CDC_Receive_FS+0x40>)
 80085a8:	f7fe fb96 	bl	8006cd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000b6c 	.word	0x20000b6c
 80085bc:	20000490 	.word	0x20000490

080085c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085d0:	4b0d      	ldr	r3, [pc, #52]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e00b      	b.n	80085fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4806      	ldr	r0, [pc, #24]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085ee:	f7fe faf3 	bl	8006bd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085f4:	f7fe fb30 	bl	8006c58 <USBD_CDC_TransmitPacket>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000490 	.word	0x20000490

0800860c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800861e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*PtrRx)(uint8_t *buf, uint16_t Len)) //la interfaZ va a llamar cada vez que se envian datos desde el USB hacia la PC
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8008638:	4a04      	ldr	r2, [pc, #16]	; (800864c <CDC_Attach_Rx+0x1c>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6013      	str	r3, [r2, #0]
}
 800863e:	bf00      	nop
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20000b6c 	.word	0x20000b6c

08008650 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2212      	movs	r2, #18
 8008660:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008662:	4b03      	ldr	r3, [pc, #12]	; (8008670 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	200000d0 	.word	0x200000d0

08008674 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2204      	movs	r2, #4
 8008684:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008686:	4b03      	ldr	r3, [pc, #12]	; (8008694 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	200000e4 	.word	0x200000e4

08008698 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4907      	ldr	r1, [pc, #28]	; (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
 80086ae:	4808      	ldr	r0, [pc, #32]	; (80086d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086b0:	f7ff fd76 	bl	80081a0 <USBD_GetString>
 80086b4:	e004      	b.n	80086c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4904      	ldr	r1, [pc, #16]	; (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
 80086ba:	4805      	ldr	r0, [pc, #20]	; (80086d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086bc:	f7ff fd70 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c0:	4b02      	ldr	r3, [pc, #8]	; (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000b70 	.word	0x20000b70
 80086d0:	08009828 	.word	0x08009828

080086d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	4904      	ldr	r1, [pc, #16]	; (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086e4:	4804      	ldr	r0, [pc, #16]	; (80086f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086e6:	f7ff fd5b 	bl	80081a0 <USBD_GetString>
  return USBD_StrDesc;
 80086ea:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000b70 	.word	0x20000b70
 80086f8:	08009840 	.word	0x08009840

080086fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	6039      	str	r1, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	221a      	movs	r2, #26
 800870c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800870e:	f000 f843 	bl	8008798 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008712:	4b02      	ldr	r3, [pc, #8]	; (800871c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	200000e8 	.word	0x200000e8

08008720 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4907      	ldr	r1, [pc, #28]	; (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008736:	4808      	ldr	r0, [pc, #32]	; (8008758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008738:	f7ff fd32 	bl	80081a0 <USBD_GetString>
 800873c:	e004      	b.n	8008748 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4904      	ldr	r1, [pc, #16]	; (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008742:	4805      	ldr	r0, [pc, #20]	; (8008758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008744:	f7ff fd2c 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008748:	4b02      	ldr	r3, [pc, #8]	; (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000b70 	.word	0x20000b70
 8008758:	08009854 	.word	0x08009854

0800875c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d105      	bne.n	800877a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4907      	ldr	r1, [pc, #28]	; (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008772:	4808      	ldr	r0, [pc, #32]	; (8008794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008774:	f7ff fd14 	bl	80081a0 <USBD_GetString>
 8008778:	e004      	b.n	8008784 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4904      	ldr	r1, [pc, #16]	; (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800877e:	4805      	ldr	r0, [pc, #20]	; (8008794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008780:	f7ff fd0e 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000b70 	.word	0x20000b70
 8008794:	08009860 	.word	0x08009860

08008798 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <Get_SerialNum+0x44>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087a4:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <Get_SerialNum+0x48>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087aa:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <Get_SerialNum+0x4c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4413      	add	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087be:	2208      	movs	r2, #8
 80087c0:	4909      	ldr	r1, [pc, #36]	; (80087e8 <Get_SerialNum+0x50>)
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f814 	bl	80087f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087c8:	2204      	movs	r2, #4
 80087ca:	4908      	ldr	r1, [pc, #32]	; (80087ec <Get_SerialNum+0x54>)
 80087cc:	68b8      	ldr	r0, [r7, #8]
 80087ce:	f000 f80f 	bl	80087f0 <IntToUnicode>
  }
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	1fff7a10 	.word	0x1fff7a10
 80087e0:	1fff7a14 	.word	0x1fff7a14
 80087e4:	1fff7a18 	.word	0x1fff7a18
 80087e8:	200000ea 	.word	0x200000ea
 80087ec:	200000fa 	.word	0x200000fa

080087f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008802:	2300      	movs	r3, #0
 8008804:	75fb      	strb	r3, [r7, #23]
 8008806:	e027      	b.n	8008858 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0f1b      	lsrs	r3, r3, #28
 800880c:	2b09      	cmp	r3, #9
 800880e:	d80b      	bhi.n	8008828 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	0f1b      	lsrs	r3, r3, #28
 8008814:	b2da      	uxtb	r2, r3
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	4619      	mov	r1, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	440b      	add	r3, r1
 8008820:	3230      	adds	r2, #48	; 0x30
 8008822:	b2d2      	uxtb	r2, r2
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e00a      	b.n	800883e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	0f1b      	lsrs	r3, r3, #28
 800882c:	b2da      	uxtb	r2, r3
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	4619      	mov	r1, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	440b      	add	r3, r1
 8008838:	3237      	adds	r2, #55	; 0x37
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	3301      	adds	r3, #1
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	4413      	add	r3, r2
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	3301      	adds	r3, #1
 8008856:	75fb      	strb	r3, [r7, #23]
 8008858:	7dfa      	ldrb	r2, [r7, #23]
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	429a      	cmp	r2, r3
 800885e:	d3d3      	bcc.n	8008808 <IntToUnicode+0x18>
  }
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
	...

08008870 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08a      	sub	sp, #40	; 0x28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008878:	f107 0314 	add.w	r3, r7, #20
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	605a      	str	r2, [r3, #4]
 8008882:	609a      	str	r2, [r3, #8]
 8008884:	60da      	str	r2, [r3, #12]
 8008886:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008890:	d13a      	bne.n	8008908 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008892:	2300      	movs	r3, #0
 8008894:	613b      	str	r3, [r7, #16]
 8008896:	4b1e      	ldr	r3, [pc, #120]	; (8008910 <HAL_PCD_MspInit+0xa0>)
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	4a1d      	ldr	r2, [pc, #116]	; (8008910 <HAL_PCD_MspInit+0xa0>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	6313      	str	r3, [r2, #48]	; 0x30
 80088a2:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <HAL_PCD_MspInit+0xa0>)
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	613b      	str	r3, [r7, #16]
 80088ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80088ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80088b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b4:	2302      	movs	r3, #2
 80088b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088bc:	2303      	movs	r3, #3
 80088be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088c0:	230a      	movs	r3, #10
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088c4:	f107 0314 	add.w	r3, r7, #20
 80088c8:	4619      	mov	r1, r3
 80088ca:	4812      	ldr	r0, [pc, #72]	; (8008914 <HAL_PCD_MspInit+0xa4>)
 80088cc:	f7f9 fdc8 	bl	8002460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088d0:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <HAL_PCD_MspInit+0xa0>)
 80088d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d4:	4a0e      	ldr	r2, [pc, #56]	; (8008910 <HAL_PCD_MspInit+0xa0>)
 80088d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088da:	6353      	str	r3, [r2, #52]	; 0x34
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	4b0b      	ldr	r3, [pc, #44]	; (8008910 <HAL_PCD_MspInit+0xa0>)
 80088e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e4:	4a0a      	ldr	r2, [pc, #40]	; (8008910 <HAL_PCD_MspInit+0xa0>)
 80088e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088ea:	6453      	str	r3, [r2, #68]	; 0x44
 80088ec:	4b08      	ldr	r3, [pc, #32]	; (8008910 <HAL_PCD_MspInit+0xa0>)
 80088ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088f8:	2200      	movs	r2, #0
 80088fa:	2100      	movs	r1, #0
 80088fc:	2043      	movs	r0, #67	; 0x43
 80088fe:	f7f9 fa08 	bl	8001d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008902:	2043      	movs	r0, #67	; 0x43
 8008904:	f7f9 fa21 	bl	8001d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008908:	bf00      	nop
 800890a:	3728      	adds	r7, #40	; 0x28
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40023800 	.word	0x40023800
 8008914:	40020000 	.word	0x40020000

08008918 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f7fe fabb 	bl	8006eaa <USBD_LL_SetupStage>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800894e:	78fa      	ldrb	r2, [r7, #3]
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	4613      	mov	r3, r2
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	4413      	add	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	440b      	add	r3, r1
 800895c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	78fb      	ldrb	r3, [r7, #3]
 8008964:	4619      	mov	r1, r3
 8008966:	f7fe faf5 	bl	8006f54 <USBD_LL_DataOutStage>
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008984:	78fa      	ldrb	r2, [r7, #3]
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	4613      	mov	r3, r2
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	440b      	add	r3, r1
 8008992:	3320      	adds	r3, #32
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	4619      	mov	r1, r3
 800899a:	f7fe fb97 	bl	80070cc <USBD_LL_DataInStage>
}
 800899e:	bf00      	nop
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fe fcdb 	bl	8007370 <USBD_LL_SOF>
}
 80089ba:	bf00      	nop
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089ca:	2301      	movs	r3, #1
 80089cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	79db      	ldrb	r3, [r3, #7]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d001      	beq.n	80089da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089d6:	f7f8 fa9f 	bl	8000f18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089e0:	7bfa      	ldrb	r2, [r7, #15]
 80089e2:	4611      	mov	r1, r2
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fe fc7f 	bl	80072e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fc26 	bl	8007242 <USBD_LL_Reset>
}
 80089f6:	bf00      	nop
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fc7a 	bl	8007308 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	6812      	ldr	r2, [r2, #0]
 8008a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	7adb      	ldrb	r3, [r3, #11]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a34:	4b04      	ldr	r3, [pc, #16]	; (8008a48 <HAL_PCD_SuspendCallback+0x48>)
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	4a03      	ldr	r2, [pc, #12]	; (8008a48 <HAL_PCD_SuspendCallback+0x48>)
 8008a3a:	f043 0306 	orr.w	r3, r3, #6
 8008a3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	e000ed00 	.word	0xe000ed00

08008a4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fc70 	bl	8007340 <USBD_LL_Resume>
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fcc8 	bl	8007414 <USBD_LL_IsoOUTIncomplete>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fc84 	bl	80073b0 <USBD_LL_IsoINIncomplete>
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fcda 	bl	8007478 <USBD_LL_DevConnected>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fcd7 	bl	800748e <USBD_LL_DevDisconnected>
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d13c      	bne.n	8008b72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008af8:	4a20      	ldr	r2, [pc, #128]	; (8008b7c <USBD_LL_Init+0x94>)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a1e      	ldr	r2, [pc, #120]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b04:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b08:	4b1c      	ldr	r3, [pc, #112]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b10:	4b1a      	ldr	r3, [pc, #104]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b12:	2204      	movs	r2, #4
 8008b14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b16:	4b19      	ldr	r3, [pc, #100]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b18:	2202      	movs	r2, #2
 8008b1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b1c:	4b17      	ldr	r3, [pc, #92]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b22:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b24:	2202      	movs	r2, #2
 8008b26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b28:	4b14      	ldr	r3, [pc, #80]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b2e:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b34:	4b11      	ldr	r3, [pc, #68]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b3a:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b46:	480d      	ldr	r0, [pc, #52]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b48:	f7f9 fe27 	bl	800279a <HAL_PCD_Init>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b52:	f7f8 f9e1 	bl	8000f18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b56:	2180      	movs	r1, #128	; 0x80
 8008b58:	4808      	ldr	r0, [pc, #32]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b5a:	f7fb f854 	bl	8003c06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b5e:	2240      	movs	r2, #64	; 0x40
 8008b60:	2100      	movs	r1, #0
 8008b62:	4806      	ldr	r0, [pc, #24]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b64:	f7fb f808 	bl	8003b78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b68:	2280      	movs	r2, #128	; 0x80
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	4803      	ldr	r0, [pc, #12]	; (8008b7c <USBD_LL_Init+0x94>)
 8008b6e:	f7fb f803 	bl	8003b78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	20000d70 	.word	0x20000d70

08008b80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7f9 ff0e 	bl	80029b8 <HAL_PCD_Start>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f942 	bl	8008e2c <USBD_Get_USB_Status>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	70fb      	strb	r3, [r7, #3]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70bb      	strb	r3, [r7, #2]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bde:	78bb      	ldrb	r3, [r7, #2]
 8008be0:	883a      	ldrh	r2, [r7, #0]
 8008be2:	78f9      	ldrb	r1, [r7, #3]
 8008be4:	f7fa fbe2 	bl	80033ac <HAL_PCD_EP_Open>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 f91c 	bl	8008e2c <USBD_Get_USB_Status>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c1c:	78fa      	ldrb	r2, [r7, #3]
 8008c1e:	4611      	mov	r1, r2
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fa fc2d 	bl	8003480 <HAL_PCD_EP_Close>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 f8fd 	bl	8008e2c <USBD_Get_USB_Status>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fa fce5 	bl	800362e <HAL_PCD_EP_SetStall>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f8de 	bl	8008e2c <USBD_Get_USB_Status>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fa fd29 	bl	80036f4 <HAL_PCD_EP_ClrStall>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 f8bf 	bl	8008e2c <USBD_Get_USB_Status>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	da0b      	bge.n	8008cf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	440b      	add	r3, r1
 8008cea:	3316      	adds	r3, #22
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	e00b      	b.n	8008d08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cf6:	68f9      	ldr	r1, [r7, #12]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008d06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d2e:	78fa      	ldrb	r2, [r7, #3]
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fa fb16 	bl	8003364 <HAL_PCD_SetAddress>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f874 	bl	8008e2c <USBD_Get_USB_Status>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b086      	sub	sp, #24
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d70:	7af9      	ldrb	r1, [r7, #11]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	f7fa fc20 	bl	80035ba <HAL_PCD_EP_Transmit>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f853 	bl	8008e2c <USBD_Get_USB_Status>
 8008d86:	4603      	mov	r3, r0
 8008d88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	460b      	mov	r3, r1
 8008da2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008db2:	7af9      	ldrb	r1, [r7, #11]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	f7fa fbac 	bl	8003514 <HAL_PCD_EP_Receive>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f832 	bl	8008e2c <USBD_Get_USB_Status>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	460b      	mov	r3, r1
 8008de0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fa fbcc 	bl	800358a <HAL_PCD_EP_GetRxCount>
 8008df2:	4603      	mov	r3, r0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e04:	4b03      	ldr	r3, [pc, #12]	; (8008e14 <USBD_static_malloc+0x18>)
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20001254 	.word	0x20001254

08008e18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]

}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d817      	bhi.n	8008e70 <USBD_Get_USB_Status+0x44>
 8008e40:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <USBD_Get_USB_Status+0x1c>)
 8008e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e46:	bf00      	nop
 8008e48:	08008e59 	.word	0x08008e59
 8008e4c:	08008e5f 	.word	0x08008e5f
 8008e50:	08008e65 	.word	0x08008e65
 8008e54:	08008e6b 	.word	0x08008e6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5c:	e00b      	b.n	8008e76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	73fb      	strb	r3, [r7, #15]
    break;
 8008e62:	e008      	b.n	8008e76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e64:	2301      	movs	r3, #1
 8008e66:	73fb      	strb	r3, [r7, #15]
    break;
 8008e68:	e005      	b.n	8008e76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6e:	e002      	b.n	8008e76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	73fb      	strb	r3, [r7, #15]
    break;
 8008e74:	bf00      	nop
  }
  return usb_status;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <siprintf>:
 8008e84:	b40e      	push	{r1, r2, r3}
 8008e86:	b500      	push	{lr}
 8008e88:	b09c      	sub	sp, #112	; 0x70
 8008e8a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e8c:	9002      	str	r0, [sp, #8]
 8008e8e:	9006      	str	r0, [sp, #24]
 8008e90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e94:	4809      	ldr	r0, [pc, #36]	; (8008ebc <siprintf+0x38>)
 8008e96:	9107      	str	r1, [sp, #28]
 8008e98:	9104      	str	r1, [sp, #16]
 8008e9a:	4909      	ldr	r1, [pc, #36]	; (8008ec0 <siprintf+0x3c>)
 8008e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea0:	9105      	str	r1, [sp, #20]
 8008ea2:	6800      	ldr	r0, [r0, #0]
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	a902      	add	r1, sp, #8
 8008ea8:	f000 f992 	bl	80091d0 <_svfiprintf_r>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	b01c      	add	sp, #112	; 0x70
 8008eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb8:	b003      	add	sp, #12
 8008eba:	4770      	bx	lr
 8008ebc:	20000150 	.word	0x20000150
 8008ec0:	ffff0208 	.word	0xffff0208

08008ec4 <memset>:
 8008ec4:	4402      	add	r2, r0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d100      	bne.n	8008ece <memset+0xa>
 8008ecc:	4770      	bx	lr
 8008ece:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed2:	e7f9      	b.n	8008ec8 <memset+0x4>

08008ed4 <__errno>:
 8008ed4:	4b01      	ldr	r3, [pc, #4]	; (8008edc <__errno+0x8>)
 8008ed6:	6818      	ldr	r0, [r3, #0]
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	20000150 	.word	0x20000150

08008ee0 <__libc_init_array>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	4d0d      	ldr	r5, [pc, #52]	; (8008f18 <__libc_init_array+0x38>)
 8008ee4:	4c0d      	ldr	r4, [pc, #52]	; (8008f1c <__libc_init_array+0x3c>)
 8008ee6:	1b64      	subs	r4, r4, r5
 8008ee8:	10a4      	asrs	r4, r4, #2
 8008eea:	2600      	movs	r6, #0
 8008eec:	42a6      	cmp	r6, r4
 8008eee:	d109      	bne.n	8008f04 <__libc_init_array+0x24>
 8008ef0:	4d0b      	ldr	r5, [pc, #44]	; (8008f20 <__libc_init_array+0x40>)
 8008ef2:	4c0c      	ldr	r4, [pc, #48]	; (8008f24 <__libc_init_array+0x44>)
 8008ef4:	f000 fc6a 	bl	80097cc <_init>
 8008ef8:	1b64      	subs	r4, r4, r5
 8008efa:	10a4      	asrs	r4, r4, #2
 8008efc:	2600      	movs	r6, #0
 8008efe:	42a6      	cmp	r6, r4
 8008f00:	d105      	bne.n	8008f0e <__libc_init_array+0x2e>
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f08:	4798      	blx	r3
 8008f0a:	3601      	adds	r6, #1
 8008f0c:	e7ee      	b.n	8008eec <__libc_init_array+0xc>
 8008f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f12:	4798      	blx	r3
 8008f14:	3601      	adds	r6, #1
 8008f16:	e7f2      	b.n	8008efe <__libc_init_array+0x1e>
 8008f18:	080098c4 	.word	0x080098c4
 8008f1c:	080098c4 	.word	0x080098c4
 8008f20:	080098c4 	.word	0x080098c4
 8008f24:	080098c8 	.word	0x080098c8

08008f28 <__retarget_lock_acquire_recursive>:
 8008f28:	4770      	bx	lr

08008f2a <__retarget_lock_release_recursive>:
 8008f2a:	4770      	bx	lr

08008f2c <_free_r>:
 8008f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f2e:	2900      	cmp	r1, #0
 8008f30:	d044      	beq.n	8008fbc <_free_r+0x90>
 8008f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f36:	9001      	str	r0, [sp, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f3e:	bfb8      	it	lt
 8008f40:	18e4      	addlt	r4, r4, r3
 8008f42:	f000 f8df 	bl	8009104 <__malloc_lock>
 8008f46:	4a1e      	ldr	r2, [pc, #120]	; (8008fc0 <_free_r+0x94>)
 8008f48:	9801      	ldr	r0, [sp, #4]
 8008f4a:	6813      	ldr	r3, [r2, #0]
 8008f4c:	b933      	cbnz	r3, 8008f5c <_free_r+0x30>
 8008f4e:	6063      	str	r3, [r4, #4]
 8008f50:	6014      	str	r4, [r2, #0]
 8008f52:	b003      	add	sp, #12
 8008f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f58:	f000 b8da 	b.w	8009110 <__malloc_unlock>
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d908      	bls.n	8008f72 <_free_r+0x46>
 8008f60:	6825      	ldr	r5, [r4, #0]
 8008f62:	1961      	adds	r1, r4, r5
 8008f64:	428b      	cmp	r3, r1
 8008f66:	bf01      	itttt	eq
 8008f68:	6819      	ldreq	r1, [r3, #0]
 8008f6a:	685b      	ldreq	r3, [r3, #4]
 8008f6c:	1949      	addeq	r1, r1, r5
 8008f6e:	6021      	streq	r1, [r4, #0]
 8008f70:	e7ed      	b.n	8008f4e <_free_r+0x22>
 8008f72:	461a      	mov	r2, r3
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	b10b      	cbz	r3, 8008f7c <_free_r+0x50>
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	d9fa      	bls.n	8008f72 <_free_r+0x46>
 8008f7c:	6811      	ldr	r1, [r2, #0]
 8008f7e:	1855      	adds	r5, r2, r1
 8008f80:	42a5      	cmp	r5, r4
 8008f82:	d10b      	bne.n	8008f9c <_free_r+0x70>
 8008f84:	6824      	ldr	r4, [r4, #0]
 8008f86:	4421      	add	r1, r4
 8008f88:	1854      	adds	r4, r2, r1
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	6011      	str	r1, [r2, #0]
 8008f8e:	d1e0      	bne.n	8008f52 <_free_r+0x26>
 8008f90:	681c      	ldr	r4, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	6053      	str	r3, [r2, #4]
 8008f96:	440c      	add	r4, r1
 8008f98:	6014      	str	r4, [r2, #0]
 8008f9a:	e7da      	b.n	8008f52 <_free_r+0x26>
 8008f9c:	d902      	bls.n	8008fa4 <_free_r+0x78>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	6003      	str	r3, [r0, #0]
 8008fa2:	e7d6      	b.n	8008f52 <_free_r+0x26>
 8008fa4:	6825      	ldr	r5, [r4, #0]
 8008fa6:	1961      	adds	r1, r4, r5
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	bf04      	itt	eq
 8008fac:	6819      	ldreq	r1, [r3, #0]
 8008fae:	685b      	ldreq	r3, [r3, #4]
 8008fb0:	6063      	str	r3, [r4, #4]
 8008fb2:	bf04      	itt	eq
 8008fb4:	1949      	addeq	r1, r1, r5
 8008fb6:	6021      	streq	r1, [r4, #0]
 8008fb8:	6054      	str	r4, [r2, #4]
 8008fba:	e7ca      	b.n	8008f52 <_free_r+0x26>
 8008fbc:	b003      	add	sp, #12
 8008fbe:	bd30      	pop	{r4, r5, pc}
 8008fc0:	200015b4 	.word	0x200015b4

08008fc4 <sbrk_aligned>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	4e0e      	ldr	r6, [pc, #56]	; (8009000 <sbrk_aligned+0x3c>)
 8008fc8:	460c      	mov	r4, r1
 8008fca:	6831      	ldr	r1, [r6, #0]
 8008fcc:	4605      	mov	r5, r0
 8008fce:	b911      	cbnz	r1, 8008fd6 <sbrk_aligned+0x12>
 8008fd0:	f000 fba6 	bl	8009720 <_sbrk_r>
 8008fd4:	6030      	str	r0, [r6, #0]
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 fba1 	bl	8009720 <_sbrk_r>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	d00a      	beq.n	8008ff8 <sbrk_aligned+0x34>
 8008fe2:	1cc4      	adds	r4, r0, #3
 8008fe4:	f024 0403 	bic.w	r4, r4, #3
 8008fe8:	42a0      	cmp	r0, r4
 8008fea:	d007      	beq.n	8008ffc <sbrk_aligned+0x38>
 8008fec:	1a21      	subs	r1, r4, r0
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f000 fb96 	bl	8009720 <_sbrk_r>
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d101      	bne.n	8008ffc <sbrk_aligned+0x38>
 8008ff8:	f04f 34ff 	mov.w	r4, #4294967295
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	200015b8 	.word	0x200015b8

08009004 <_malloc_r>:
 8009004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009008:	1ccd      	adds	r5, r1, #3
 800900a:	f025 0503 	bic.w	r5, r5, #3
 800900e:	3508      	adds	r5, #8
 8009010:	2d0c      	cmp	r5, #12
 8009012:	bf38      	it	cc
 8009014:	250c      	movcc	r5, #12
 8009016:	2d00      	cmp	r5, #0
 8009018:	4607      	mov	r7, r0
 800901a:	db01      	blt.n	8009020 <_malloc_r+0x1c>
 800901c:	42a9      	cmp	r1, r5
 800901e:	d905      	bls.n	800902c <_malloc_r+0x28>
 8009020:	230c      	movs	r3, #12
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	2600      	movs	r6, #0
 8009026:	4630      	mov	r0, r6
 8009028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009100 <_malloc_r+0xfc>
 8009030:	f000 f868 	bl	8009104 <__malloc_lock>
 8009034:	f8d8 3000 	ldr.w	r3, [r8]
 8009038:	461c      	mov	r4, r3
 800903a:	bb5c      	cbnz	r4, 8009094 <_malloc_r+0x90>
 800903c:	4629      	mov	r1, r5
 800903e:	4638      	mov	r0, r7
 8009040:	f7ff ffc0 	bl	8008fc4 <sbrk_aligned>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	4604      	mov	r4, r0
 8009048:	d155      	bne.n	80090f6 <_malloc_r+0xf2>
 800904a:	f8d8 4000 	ldr.w	r4, [r8]
 800904e:	4626      	mov	r6, r4
 8009050:	2e00      	cmp	r6, #0
 8009052:	d145      	bne.n	80090e0 <_malloc_r+0xdc>
 8009054:	2c00      	cmp	r4, #0
 8009056:	d048      	beq.n	80090ea <_malloc_r+0xe6>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	4631      	mov	r1, r6
 800905c:	4638      	mov	r0, r7
 800905e:	eb04 0903 	add.w	r9, r4, r3
 8009062:	f000 fb5d 	bl	8009720 <_sbrk_r>
 8009066:	4581      	cmp	r9, r0
 8009068:	d13f      	bne.n	80090ea <_malloc_r+0xe6>
 800906a:	6821      	ldr	r1, [r4, #0]
 800906c:	1a6d      	subs	r5, r5, r1
 800906e:	4629      	mov	r1, r5
 8009070:	4638      	mov	r0, r7
 8009072:	f7ff ffa7 	bl	8008fc4 <sbrk_aligned>
 8009076:	3001      	adds	r0, #1
 8009078:	d037      	beq.n	80090ea <_malloc_r+0xe6>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	442b      	add	r3, r5
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	f8d8 3000 	ldr.w	r3, [r8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d038      	beq.n	80090fa <_malloc_r+0xf6>
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	42a2      	cmp	r2, r4
 800908c:	d12b      	bne.n	80090e6 <_malloc_r+0xe2>
 800908e:	2200      	movs	r2, #0
 8009090:	605a      	str	r2, [r3, #4]
 8009092:	e00f      	b.n	80090b4 <_malloc_r+0xb0>
 8009094:	6822      	ldr	r2, [r4, #0]
 8009096:	1b52      	subs	r2, r2, r5
 8009098:	d41f      	bmi.n	80090da <_malloc_r+0xd6>
 800909a:	2a0b      	cmp	r2, #11
 800909c:	d917      	bls.n	80090ce <_malloc_r+0xca>
 800909e:	1961      	adds	r1, r4, r5
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	6025      	str	r5, [r4, #0]
 80090a4:	bf18      	it	ne
 80090a6:	6059      	strne	r1, [r3, #4]
 80090a8:	6863      	ldr	r3, [r4, #4]
 80090aa:	bf08      	it	eq
 80090ac:	f8c8 1000 	streq.w	r1, [r8]
 80090b0:	5162      	str	r2, [r4, r5]
 80090b2:	604b      	str	r3, [r1, #4]
 80090b4:	4638      	mov	r0, r7
 80090b6:	f104 060b 	add.w	r6, r4, #11
 80090ba:	f000 f829 	bl	8009110 <__malloc_unlock>
 80090be:	f026 0607 	bic.w	r6, r6, #7
 80090c2:	1d23      	adds	r3, r4, #4
 80090c4:	1af2      	subs	r2, r6, r3
 80090c6:	d0ae      	beq.n	8009026 <_malloc_r+0x22>
 80090c8:	1b9b      	subs	r3, r3, r6
 80090ca:	50a3      	str	r3, [r4, r2]
 80090cc:	e7ab      	b.n	8009026 <_malloc_r+0x22>
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	6862      	ldr	r2, [r4, #4]
 80090d2:	d1dd      	bne.n	8009090 <_malloc_r+0x8c>
 80090d4:	f8c8 2000 	str.w	r2, [r8]
 80090d8:	e7ec      	b.n	80090b4 <_malloc_r+0xb0>
 80090da:	4623      	mov	r3, r4
 80090dc:	6864      	ldr	r4, [r4, #4]
 80090de:	e7ac      	b.n	800903a <_malloc_r+0x36>
 80090e0:	4634      	mov	r4, r6
 80090e2:	6876      	ldr	r6, [r6, #4]
 80090e4:	e7b4      	b.n	8009050 <_malloc_r+0x4c>
 80090e6:	4613      	mov	r3, r2
 80090e8:	e7cc      	b.n	8009084 <_malloc_r+0x80>
 80090ea:	230c      	movs	r3, #12
 80090ec:	603b      	str	r3, [r7, #0]
 80090ee:	4638      	mov	r0, r7
 80090f0:	f000 f80e 	bl	8009110 <__malloc_unlock>
 80090f4:	e797      	b.n	8009026 <_malloc_r+0x22>
 80090f6:	6025      	str	r5, [r4, #0]
 80090f8:	e7dc      	b.n	80090b4 <_malloc_r+0xb0>
 80090fa:	605b      	str	r3, [r3, #4]
 80090fc:	deff      	udf	#255	; 0xff
 80090fe:	bf00      	nop
 8009100:	200015b4 	.word	0x200015b4

08009104 <__malloc_lock>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__malloc_lock+0x8>)
 8009106:	f7ff bf0f 	b.w	8008f28 <__retarget_lock_acquire_recursive>
 800910a:	bf00      	nop
 800910c:	200015b0 	.word	0x200015b0

08009110 <__malloc_unlock>:
 8009110:	4801      	ldr	r0, [pc, #4]	; (8009118 <__malloc_unlock+0x8>)
 8009112:	f7ff bf0a 	b.w	8008f2a <__retarget_lock_release_recursive>
 8009116:	bf00      	nop
 8009118:	200015b0 	.word	0x200015b0

0800911c <__ssputs_r>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	688e      	ldr	r6, [r1, #8]
 8009122:	461f      	mov	r7, r3
 8009124:	42be      	cmp	r6, r7
 8009126:	680b      	ldr	r3, [r1, #0]
 8009128:	4682      	mov	sl, r0
 800912a:	460c      	mov	r4, r1
 800912c:	4690      	mov	r8, r2
 800912e:	d82c      	bhi.n	800918a <__ssputs_r+0x6e>
 8009130:	898a      	ldrh	r2, [r1, #12]
 8009132:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009136:	d026      	beq.n	8009186 <__ssputs_r+0x6a>
 8009138:	6965      	ldr	r5, [r4, #20]
 800913a:	6909      	ldr	r1, [r1, #16]
 800913c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009140:	eba3 0901 	sub.w	r9, r3, r1
 8009144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009148:	1c7b      	adds	r3, r7, #1
 800914a:	444b      	add	r3, r9
 800914c:	106d      	asrs	r5, r5, #1
 800914e:	429d      	cmp	r5, r3
 8009150:	bf38      	it	cc
 8009152:	461d      	movcc	r5, r3
 8009154:	0553      	lsls	r3, r2, #21
 8009156:	d527      	bpl.n	80091a8 <__ssputs_r+0x8c>
 8009158:	4629      	mov	r1, r5
 800915a:	f7ff ff53 	bl	8009004 <_malloc_r>
 800915e:	4606      	mov	r6, r0
 8009160:	b360      	cbz	r0, 80091bc <__ssputs_r+0xa0>
 8009162:	6921      	ldr	r1, [r4, #16]
 8009164:	464a      	mov	r2, r9
 8009166:	f000 faeb 	bl	8009740 <memcpy>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	6126      	str	r6, [r4, #16]
 8009178:	6165      	str	r5, [r4, #20]
 800917a:	444e      	add	r6, r9
 800917c:	eba5 0509 	sub.w	r5, r5, r9
 8009180:	6026      	str	r6, [r4, #0]
 8009182:	60a5      	str	r5, [r4, #8]
 8009184:	463e      	mov	r6, r7
 8009186:	42be      	cmp	r6, r7
 8009188:	d900      	bls.n	800918c <__ssputs_r+0x70>
 800918a:	463e      	mov	r6, r7
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	4632      	mov	r2, r6
 8009190:	4641      	mov	r1, r8
 8009192:	f000 faab 	bl	80096ec <memmove>
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	1b9b      	subs	r3, r3, r6
 800919a:	60a3      	str	r3, [r4, #8]
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	4433      	add	r3, r6
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	2000      	movs	r0, #0
 80091a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a8:	462a      	mov	r2, r5
 80091aa:	f000 fad7 	bl	800975c <_realloc_r>
 80091ae:	4606      	mov	r6, r0
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d1e0      	bne.n	8009176 <__ssputs_r+0x5a>
 80091b4:	6921      	ldr	r1, [r4, #16]
 80091b6:	4650      	mov	r0, sl
 80091b8:	f7ff feb8 	bl	8008f2c <_free_r>
 80091bc:	230c      	movs	r3, #12
 80091be:	f8ca 3000 	str.w	r3, [sl]
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c8:	81a3      	strh	r3, [r4, #12]
 80091ca:	f04f 30ff 	mov.w	r0, #4294967295
 80091ce:	e7e9      	b.n	80091a4 <__ssputs_r+0x88>

080091d0 <_svfiprintf_r>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4698      	mov	r8, r3
 80091d6:	898b      	ldrh	r3, [r1, #12]
 80091d8:	061b      	lsls	r3, r3, #24
 80091da:	b09d      	sub	sp, #116	; 0x74
 80091dc:	4607      	mov	r7, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	4614      	mov	r4, r2
 80091e2:	d50e      	bpl.n	8009202 <_svfiprintf_r+0x32>
 80091e4:	690b      	ldr	r3, [r1, #16]
 80091e6:	b963      	cbnz	r3, 8009202 <_svfiprintf_r+0x32>
 80091e8:	2140      	movs	r1, #64	; 0x40
 80091ea:	f7ff ff0b 	bl	8009004 <_malloc_r>
 80091ee:	6028      	str	r0, [r5, #0]
 80091f0:	6128      	str	r0, [r5, #16]
 80091f2:	b920      	cbnz	r0, 80091fe <_svfiprintf_r+0x2e>
 80091f4:	230c      	movs	r3, #12
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	e0d0      	b.n	80093a0 <_svfiprintf_r+0x1d0>
 80091fe:	2340      	movs	r3, #64	; 0x40
 8009200:	616b      	str	r3, [r5, #20]
 8009202:	2300      	movs	r3, #0
 8009204:	9309      	str	r3, [sp, #36]	; 0x24
 8009206:	2320      	movs	r3, #32
 8009208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800920c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009210:	2330      	movs	r3, #48	; 0x30
 8009212:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093b8 <_svfiprintf_r+0x1e8>
 8009216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800921a:	f04f 0901 	mov.w	r9, #1
 800921e:	4623      	mov	r3, r4
 8009220:	469a      	mov	sl, r3
 8009222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009226:	b10a      	cbz	r2, 800922c <_svfiprintf_r+0x5c>
 8009228:	2a25      	cmp	r2, #37	; 0x25
 800922a:	d1f9      	bne.n	8009220 <_svfiprintf_r+0x50>
 800922c:	ebba 0b04 	subs.w	fp, sl, r4
 8009230:	d00b      	beq.n	800924a <_svfiprintf_r+0x7a>
 8009232:	465b      	mov	r3, fp
 8009234:	4622      	mov	r2, r4
 8009236:	4629      	mov	r1, r5
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff ff6f 	bl	800911c <__ssputs_r>
 800923e:	3001      	adds	r0, #1
 8009240:	f000 80a9 	beq.w	8009396 <_svfiprintf_r+0x1c6>
 8009244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009246:	445a      	add	r2, fp
 8009248:	9209      	str	r2, [sp, #36]	; 0x24
 800924a:	f89a 3000 	ldrb.w	r3, [sl]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 80a1 	beq.w	8009396 <_svfiprintf_r+0x1c6>
 8009254:	2300      	movs	r3, #0
 8009256:	f04f 32ff 	mov.w	r2, #4294967295
 800925a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800925e:	f10a 0a01 	add.w	sl, sl, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	9307      	str	r3, [sp, #28]
 8009266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800926a:	931a      	str	r3, [sp, #104]	; 0x68
 800926c:	4654      	mov	r4, sl
 800926e:	2205      	movs	r2, #5
 8009270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009274:	4850      	ldr	r0, [pc, #320]	; (80093b8 <_svfiprintf_r+0x1e8>)
 8009276:	f7f6 ffbb 	bl	80001f0 <memchr>
 800927a:	9a04      	ldr	r2, [sp, #16]
 800927c:	b9d8      	cbnz	r0, 80092b6 <_svfiprintf_r+0xe6>
 800927e:	06d0      	lsls	r0, r2, #27
 8009280:	bf44      	itt	mi
 8009282:	2320      	movmi	r3, #32
 8009284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009288:	0711      	lsls	r1, r2, #28
 800928a:	bf44      	itt	mi
 800928c:	232b      	movmi	r3, #43	; 0x2b
 800928e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009292:	f89a 3000 	ldrb.w	r3, [sl]
 8009296:	2b2a      	cmp	r3, #42	; 0x2a
 8009298:	d015      	beq.n	80092c6 <_svfiprintf_r+0xf6>
 800929a:	9a07      	ldr	r2, [sp, #28]
 800929c:	4654      	mov	r4, sl
 800929e:	2000      	movs	r0, #0
 80092a0:	f04f 0c0a 	mov.w	ip, #10
 80092a4:	4621      	mov	r1, r4
 80092a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092aa:	3b30      	subs	r3, #48	; 0x30
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	d94d      	bls.n	800934c <_svfiprintf_r+0x17c>
 80092b0:	b1b0      	cbz	r0, 80092e0 <_svfiprintf_r+0x110>
 80092b2:	9207      	str	r2, [sp, #28]
 80092b4:	e014      	b.n	80092e0 <_svfiprintf_r+0x110>
 80092b6:	eba0 0308 	sub.w	r3, r0, r8
 80092ba:	fa09 f303 	lsl.w	r3, r9, r3
 80092be:	4313      	orrs	r3, r2
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	46a2      	mov	sl, r4
 80092c4:	e7d2      	b.n	800926c <_svfiprintf_r+0x9c>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	1d19      	adds	r1, r3, #4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	9103      	str	r1, [sp, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	bfbb      	ittet	lt
 80092d2:	425b      	neglt	r3, r3
 80092d4:	f042 0202 	orrlt.w	r2, r2, #2
 80092d8:	9307      	strge	r3, [sp, #28]
 80092da:	9307      	strlt	r3, [sp, #28]
 80092dc:	bfb8      	it	lt
 80092de:	9204      	strlt	r2, [sp, #16]
 80092e0:	7823      	ldrb	r3, [r4, #0]
 80092e2:	2b2e      	cmp	r3, #46	; 0x2e
 80092e4:	d10c      	bne.n	8009300 <_svfiprintf_r+0x130>
 80092e6:	7863      	ldrb	r3, [r4, #1]
 80092e8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ea:	d134      	bne.n	8009356 <_svfiprintf_r+0x186>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	9203      	str	r2, [sp, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfb8      	it	lt
 80092f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80092fc:	3402      	adds	r4, #2
 80092fe:	9305      	str	r3, [sp, #20]
 8009300:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80093c8 <_svfiprintf_r+0x1f8>
 8009304:	7821      	ldrb	r1, [r4, #0]
 8009306:	2203      	movs	r2, #3
 8009308:	4650      	mov	r0, sl
 800930a:	f7f6 ff71 	bl	80001f0 <memchr>
 800930e:	b138      	cbz	r0, 8009320 <_svfiprintf_r+0x150>
 8009310:	9b04      	ldr	r3, [sp, #16]
 8009312:	eba0 000a 	sub.w	r0, r0, sl
 8009316:	2240      	movs	r2, #64	; 0x40
 8009318:	4082      	lsls	r2, r0
 800931a:	4313      	orrs	r3, r2
 800931c:	3401      	adds	r4, #1
 800931e:	9304      	str	r3, [sp, #16]
 8009320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009324:	4825      	ldr	r0, [pc, #148]	; (80093bc <_svfiprintf_r+0x1ec>)
 8009326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932a:	2206      	movs	r2, #6
 800932c:	f7f6 ff60 	bl	80001f0 <memchr>
 8009330:	2800      	cmp	r0, #0
 8009332:	d038      	beq.n	80093a6 <_svfiprintf_r+0x1d6>
 8009334:	4b22      	ldr	r3, [pc, #136]	; (80093c0 <_svfiprintf_r+0x1f0>)
 8009336:	bb1b      	cbnz	r3, 8009380 <_svfiprintf_r+0x1b0>
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	3307      	adds	r3, #7
 800933c:	f023 0307 	bic.w	r3, r3, #7
 8009340:	3308      	adds	r3, #8
 8009342:	9303      	str	r3, [sp, #12]
 8009344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009346:	4433      	add	r3, r6
 8009348:	9309      	str	r3, [sp, #36]	; 0x24
 800934a:	e768      	b.n	800921e <_svfiprintf_r+0x4e>
 800934c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009350:	460c      	mov	r4, r1
 8009352:	2001      	movs	r0, #1
 8009354:	e7a6      	b.n	80092a4 <_svfiprintf_r+0xd4>
 8009356:	2300      	movs	r3, #0
 8009358:	3401      	adds	r4, #1
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	4619      	mov	r1, r3
 800935e:	f04f 0c0a 	mov.w	ip, #10
 8009362:	4620      	mov	r0, r4
 8009364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009368:	3a30      	subs	r2, #48	; 0x30
 800936a:	2a09      	cmp	r2, #9
 800936c:	d903      	bls.n	8009376 <_svfiprintf_r+0x1a6>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0c6      	beq.n	8009300 <_svfiprintf_r+0x130>
 8009372:	9105      	str	r1, [sp, #20]
 8009374:	e7c4      	b.n	8009300 <_svfiprintf_r+0x130>
 8009376:	fb0c 2101 	mla	r1, ip, r1, r2
 800937a:	4604      	mov	r4, r0
 800937c:	2301      	movs	r3, #1
 800937e:	e7f0      	b.n	8009362 <_svfiprintf_r+0x192>
 8009380:	ab03      	add	r3, sp, #12
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	462a      	mov	r2, r5
 8009386:	4b0f      	ldr	r3, [pc, #60]	; (80093c4 <_svfiprintf_r+0x1f4>)
 8009388:	a904      	add	r1, sp, #16
 800938a:	4638      	mov	r0, r7
 800938c:	f3af 8000 	nop.w
 8009390:	1c42      	adds	r2, r0, #1
 8009392:	4606      	mov	r6, r0
 8009394:	d1d6      	bne.n	8009344 <_svfiprintf_r+0x174>
 8009396:	89ab      	ldrh	r3, [r5, #12]
 8009398:	065b      	lsls	r3, r3, #25
 800939a:	f53f af2d 	bmi.w	80091f8 <_svfiprintf_r+0x28>
 800939e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a0:	b01d      	add	sp, #116	; 0x74
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a6:	ab03      	add	r3, sp, #12
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	462a      	mov	r2, r5
 80093ac:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <_svfiprintf_r+0x1f4>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	4638      	mov	r0, r7
 80093b2:	f000 f879 	bl	80094a8 <_printf_i>
 80093b6:	e7eb      	b.n	8009390 <_svfiprintf_r+0x1c0>
 80093b8:	08009888 	.word	0x08009888
 80093bc:	08009892 	.word	0x08009892
 80093c0:	00000000 	.word	0x00000000
 80093c4:	0800911d 	.word	0x0800911d
 80093c8:	0800988e 	.word	0x0800988e

080093cc <_printf_common>:
 80093cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d0:	4616      	mov	r6, r2
 80093d2:	4699      	mov	r9, r3
 80093d4:	688a      	ldr	r2, [r1, #8]
 80093d6:	690b      	ldr	r3, [r1, #16]
 80093d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093dc:	4293      	cmp	r3, r2
 80093de:	bfb8      	it	lt
 80093e0:	4613      	movlt	r3, r2
 80093e2:	6033      	str	r3, [r6, #0]
 80093e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093e8:	4607      	mov	r7, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	b10a      	cbz	r2, 80093f2 <_printf_common+0x26>
 80093ee:	3301      	adds	r3, #1
 80093f0:	6033      	str	r3, [r6, #0]
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	0699      	lsls	r1, r3, #26
 80093f6:	bf42      	ittt	mi
 80093f8:	6833      	ldrmi	r3, [r6, #0]
 80093fa:	3302      	addmi	r3, #2
 80093fc:	6033      	strmi	r3, [r6, #0]
 80093fe:	6825      	ldr	r5, [r4, #0]
 8009400:	f015 0506 	ands.w	r5, r5, #6
 8009404:	d106      	bne.n	8009414 <_printf_common+0x48>
 8009406:	f104 0a19 	add.w	sl, r4, #25
 800940a:	68e3      	ldr	r3, [r4, #12]
 800940c:	6832      	ldr	r2, [r6, #0]
 800940e:	1a9b      	subs	r3, r3, r2
 8009410:	42ab      	cmp	r3, r5
 8009412:	dc26      	bgt.n	8009462 <_printf_common+0x96>
 8009414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009418:	1e13      	subs	r3, r2, #0
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	bf18      	it	ne
 800941e:	2301      	movne	r3, #1
 8009420:	0692      	lsls	r2, r2, #26
 8009422:	d42b      	bmi.n	800947c <_printf_common+0xb0>
 8009424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009428:	4649      	mov	r1, r9
 800942a:	4638      	mov	r0, r7
 800942c:	47c0      	blx	r8
 800942e:	3001      	adds	r0, #1
 8009430:	d01e      	beq.n	8009470 <_printf_common+0xa4>
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	6922      	ldr	r2, [r4, #16]
 8009436:	f003 0306 	and.w	r3, r3, #6
 800943a:	2b04      	cmp	r3, #4
 800943c:	bf02      	ittt	eq
 800943e:	68e5      	ldreq	r5, [r4, #12]
 8009440:	6833      	ldreq	r3, [r6, #0]
 8009442:	1aed      	subeq	r5, r5, r3
 8009444:	68a3      	ldr	r3, [r4, #8]
 8009446:	bf0c      	ite	eq
 8009448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800944c:	2500      	movne	r5, #0
 800944e:	4293      	cmp	r3, r2
 8009450:	bfc4      	itt	gt
 8009452:	1a9b      	subgt	r3, r3, r2
 8009454:	18ed      	addgt	r5, r5, r3
 8009456:	2600      	movs	r6, #0
 8009458:	341a      	adds	r4, #26
 800945a:	42b5      	cmp	r5, r6
 800945c:	d11a      	bne.n	8009494 <_printf_common+0xc8>
 800945e:	2000      	movs	r0, #0
 8009460:	e008      	b.n	8009474 <_printf_common+0xa8>
 8009462:	2301      	movs	r3, #1
 8009464:	4652      	mov	r2, sl
 8009466:	4649      	mov	r1, r9
 8009468:	4638      	mov	r0, r7
 800946a:	47c0      	blx	r8
 800946c:	3001      	adds	r0, #1
 800946e:	d103      	bne.n	8009478 <_printf_common+0xac>
 8009470:	f04f 30ff 	mov.w	r0, #4294967295
 8009474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009478:	3501      	adds	r5, #1
 800947a:	e7c6      	b.n	800940a <_printf_common+0x3e>
 800947c:	18e1      	adds	r1, r4, r3
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	2030      	movs	r0, #48	; 0x30
 8009482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009486:	4422      	add	r2, r4
 8009488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800948c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009490:	3302      	adds	r3, #2
 8009492:	e7c7      	b.n	8009424 <_printf_common+0x58>
 8009494:	2301      	movs	r3, #1
 8009496:	4622      	mov	r2, r4
 8009498:	4649      	mov	r1, r9
 800949a:	4638      	mov	r0, r7
 800949c:	47c0      	blx	r8
 800949e:	3001      	adds	r0, #1
 80094a0:	d0e6      	beq.n	8009470 <_printf_common+0xa4>
 80094a2:	3601      	adds	r6, #1
 80094a4:	e7d9      	b.n	800945a <_printf_common+0x8e>
	...

080094a8 <_printf_i>:
 80094a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	7e0f      	ldrb	r7, [r1, #24]
 80094ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094b0:	2f78      	cmp	r7, #120	; 0x78
 80094b2:	4691      	mov	r9, r2
 80094b4:	4680      	mov	r8, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	469a      	mov	sl, r3
 80094ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094be:	d807      	bhi.n	80094d0 <_printf_i+0x28>
 80094c0:	2f62      	cmp	r7, #98	; 0x62
 80094c2:	d80a      	bhi.n	80094da <_printf_i+0x32>
 80094c4:	2f00      	cmp	r7, #0
 80094c6:	f000 80d4 	beq.w	8009672 <_printf_i+0x1ca>
 80094ca:	2f58      	cmp	r7, #88	; 0x58
 80094cc:	f000 80c0 	beq.w	8009650 <_printf_i+0x1a8>
 80094d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094d8:	e03a      	b.n	8009550 <_printf_i+0xa8>
 80094da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094de:	2b15      	cmp	r3, #21
 80094e0:	d8f6      	bhi.n	80094d0 <_printf_i+0x28>
 80094e2:	a101      	add	r1, pc, #4	; (adr r1, 80094e8 <_printf_i+0x40>)
 80094e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094e8:	08009541 	.word	0x08009541
 80094ec:	08009555 	.word	0x08009555
 80094f0:	080094d1 	.word	0x080094d1
 80094f4:	080094d1 	.word	0x080094d1
 80094f8:	080094d1 	.word	0x080094d1
 80094fc:	080094d1 	.word	0x080094d1
 8009500:	08009555 	.word	0x08009555
 8009504:	080094d1 	.word	0x080094d1
 8009508:	080094d1 	.word	0x080094d1
 800950c:	080094d1 	.word	0x080094d1
 8009510:	080094d1 	.word	0x080094d1
 8009514:	08009659 	.word	0x08009659
 8009518:	08009581 	.word	0x08009581
 800951c:	08009613 	.word	0x08009613
 8009520:	080094d1 	.word	0x080094d1
 8009524:	080094d1 	.word	0x080094d1
 8009528:	0800967b 	.word	0x0800967b
 800952c:	080094d1 	.word	0x080094d1
 8009530:	08009581 	.word	0x08009581
 8009534:	080094d1 	.word	0x080094d1
 8009538:	080094d1 	.word	0x080094d1
 800953c:	0800961b 	.word	0x0800961b
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	1d1a      	adds	r2, r3, #4
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	602a      	str	r2, [r5, #0]
 8009548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800954c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009550:	2301      	movs	r3, #1
 8009552:	e09f      	b.n	8009694 <_printf_i+0x1ec>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	0607      	lsls	r7, r0, #24
 800955a:	f103 0104 	add.w	r1, r3, #4
 800955e:	6029      	str	r1, [r5, #0]
 8009560:	d501      	bpl.n	8009566 <_printf_i+0xbe>
 8009562:	681e      	ldr	r6, [r3, #0]
 8009564:	e003      	b.n	800956e <_printf_i+0xc6>
 8009566:	0646      	lsls	r6, r0, #25
 8009568:	d5fb      	bpl.n	8009562 <_printf_i+0xba>
 800956a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800956e:	2e00      	cmp	r6, #0
 8009570:	da03      	bge.n	800957a <_printf_i+0xd2>
 8009572:	232d      	movs	r3, #45	; 0x2d
 8009574:	4276      	negs	r6, r6
 8009576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800957a:	485a      	ldr	r0, [pc, #360]	; (80096e4 <_printf_i+0x23c>)
 800957c:	230a      	movs	r3, #10
 800957e:	e012      	b.n	80095a6 <_printf_i+0xfe>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	6820      	ldr	r0, [r4, #0]
 8009584:	1d19      	adds	r1, r3, #4
 8009586:	6029      	str	r1, [r5, #0]
 8009588:	0605      	lsls	r5, r0, #24
 800958a:	d501      	bpl.n	8009590 <_printf_i+0xe8>
 800958c:	681e      	ldr	r6, [r3, #0]
 800958e:	e002      	b.n	8009596 <_printf_i+0xee>
 8009590:	0641      	lsls	r1, r0, #25
 8009592:	d5fb      	bpl.n	800958c <_printf_i+0xe4>
 8009594:	881e      	ldrh	r6, [r3, #0]
 8009596:	4853      	ldr	r0, [pc, #332]	; (80096e4 <_printf_i+0x23c>)
 8009598:	2f6f      	cmp	r7, #111	; 0x6f
 800959a:	bf0c      	ite	eq
 800959c:	2308      	moveq	r3, #8
 800959e:	230a      	movne	r3, #10
 80095a0:	2100      	movs	r1, #0
 80095a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095a6:	6865      	ldr	r5, [r4, #4]
 80095a8:	60a5      	str	r5, [r4, #8]
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	bfa2      	ittt	ge
 80095ae:	6821      	ldrge	r1, [r4, #0]
 80095b0:	f021 0104 	bicge.w	r1, r1, #4
 80095b4:	6021      	strge	r1, [r4, #0]
 80095b6:	b90e      	cbnz	r6, 80095bc <_printf_i+0x114>
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	d04b      	beq.n	8009654 <_printf_i+0x1ac>
 80095bc:	4615      	mov	r5, r2
 80095be:	fbb6 f1f3 	udiv	r1, r6, r3
 80095c2:	fb03 6711 	mls	r7, r3, r1, r6
 80095c6:	5dc7      	ldrb	r7, [r0, r7]
 80095c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095cc:	4637      	mov	r7, r6
 80095ce:	42bb      	cmp	r3, r7
 80095d0:	460e      	mov	r6, r1
 80095d2:	d9f4      	bls.n	80095be <_printf_i+0x116>
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d10b      	bne.n	80095f0 <_printf_i+0x148>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	07de      	lsls	r6, r3, #31
 80095dc:	d508      	bpl.n	80095f0 <_printf_i+0x148>
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	6861      	ldr	r1, [r4, #4]
 80095e2:	4299      	cmp	r1, r3
 80095e4:	bfde      	ittt	le
 80095e6:	2330      	movle	r3, #48	; 0x30
 80095e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095f0:	1b52      	subs	r2, r2, r5
 80095f2:	6122      	str	r2, [r4, #16]
 80095f4:	f8cd a000 	str.w	sl, [sp]
 80095f8:	464b      	mov	r3, r9
 80095fa:	aa03      	add	r2, sp, #12
 80095fc:	4621      	mov	r1, r4
 80095fe:	4640      	mov	r0, r8
 8009600:	f7ff fee4 	bl	80093cc <_printf_common>
 8009604:	3001      	adds	r0, #1
 8009606:	d14a      	bne.n	800969e <_printf_i+0x1f6>
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	b004      	add	sp, #16
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	f043 0320 	orr.w	r3, r3, #32
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	4833      	ldr	r0, [pc, #204]	; (80096e8 <_printf_i+0x240>)
 800961c:	2778      	movs	r7, #120	; 0x78
 800961e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	6829      	ldr	r1, [r5, #0]
 8009626:	061f      	lsls	r7, r3, #24
 8009628:	f851 6b04 	ldr.w	r6, [r1], #4
 800962c:	d402      	bmi.n	8009634 <_printf_i+0x18c>
 800962e:	065f      	lsls	r7, r3, #25
 8009630:	bf48      	it	mi
 8009632:	b2b6      	uxthmi	r6, r6
 8009634:	07df      	lsls	r7, r3, #31
 8009636:	bf48      	it	mi
 8009638:	f043 0320 	orrmi.w	r3, r3, #32
 800963c:	6029      	str	r1, [r5, #0]
 800963e:	bf48      	it	mi
 8009640:	6023      	strmi	r3, [r4, #0]
 8009642:	b91e      	cbnz	r6, 800964c <_printf_i+0x1a4>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	f023 0320 	bic.w	r3, r3, #32
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	2310      	movs	r3, #16
 800964e:	e7a7      	b.n	80095a0 <_printf_i+0xf8>
 8009650:	4824      	ldr	r0, [pc, #144]	; (80096e4 <_printf_i+0x23c>)
 8009652:	e7e4      	b.n	800961e <_printf_i+0x176>
 8009654:	4615      	mov	r5, r2
 8009656:	e7bd      	b.n	80095d4 <_printf_i+0x12c>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	6826      	ldr	r6, [r4, #0]
 800965c:	6961      	ldr	r1, [r4, #20]
 800965e:	1d18      	adds	r0, r3, #4
 8009660:	6028      	str	r0, [r5, #0]
 8009662:	0635      	lsls	r5, r6, #24
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	d501      	bpl.n	800966c <_printf_i+0x1c4>
 8009668:	6019      	str	r1, [r3, #0]
 800966a:	e002      	b.n	8009672 <_printf_i+0x1ca>
 800966c:	0670      	lsls	r0, r6, #25
 800966e:	d5fb      	bpl.n	8009668 <_printf_i+0x1c0>
 8009670:	8019      	strh	r1, [r3, #0]
 8009672:	2300      	movs	r3, #0
 8009674:	6123      	str	r3, [r4, #16]
 8009676:	4615      	mov	r5, r2
 8009678:	e7bc      	b.n	80095f4 <_printf_i+0x14c>
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	1d1a      	adds	r2, r3, #4
 800967e:	602a      	str	r2, [r5, #0]
 8009680:	681d      	ldr	r5, [r3, #0]
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	2100      	movs	r1, #0
 8009686:	4628      	mov	r0, r5
 8009688:	f7f6 fdb2 	bl	80001f0 <memchr>
 800968c:	b108      	cbz	r0, 8009692 <_printf_i+0x1ea>
 800968e:	1b40      	subs	r0, r0, r5
 8009690:	6060      	str	r0, [r4, #4]
 8009692:	6863      	ldr	r3, [r4, #4]
 8009694:	6123      	str	r3, [r4, #16]
 8009696:	2300      	movs	r3, #0
 8009698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800969c:	e7aa      	b.n	80095f4 <_printf_i+0x14c>
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	462a      	mov	r2, r5
 80096a2:	4649      	mov	r1, r9
 80096a4:	4640      	mov	r0, r8
 80096a6:	47d0      	blx	sl
 80096a8:	3001      	adds	r0, #1
 80096aa:	d0ad      	beq.n	8009608 <_printf_i+0x160>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	079b      	lsls	r3, r3, #30
 80096b0:	d413      	bmi.n	80096da <_printf_i+0x232>
 80096b2:	68e0      	ldr	r0, [r4, #12]
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	4298      	cmp	r0, r3
 80096b8:	bfb8      	it	lt
 80096ba:	4618      	movlt	r0, r3
 80096bc:	e7a6      	b.n	800960c <_printf_i+0x164>
 80096be:	2301      	movs	r3, #1
 80096c0:	4632      	mov	r2, r6
 80096c2:	4649      	mov	r1, r9
 80096c4:	4640      	mov	r0, r8
 80096c6:	47d0      	blx	sl
 80096c8:	3001      	adds	r0, #1
 80096ca:	d09d      	beq.n	8009608 <_printf_i+0x160>
 80096cc:	3501      	adds	r5, #1
 80096ce:	68e3      	ldr	r3, [r4, #12]
 80096d0:	9903      	ldr	r1, [sp, #12]
 80096d2:	1a5b      	subs	r3, r3, r1
 80096d4:	42ab      	cmp	r3, r5
 80096d6:	dcf2      	bgt.n	80096be <_printf_i+0x216>
 80096d8:	e7eb      	b.n	80096b2 <_printf_i+0x20a>
 80096da:	2500      	movs	r5, #0
 80096dc:	f104 0619 	add.w	r6, r4, #25
 80096e0:	e7f5      	b.n	80096ce <_printf_i+0x226>
 80096e2:	bf00      	nop
 80096e4:	08009899 	.word	0x08009899
 80096e8:	080098aa 	.word	0x080098aa

080096ec <memmove>:
 80096ec:	4288      	cmp	r0, r1
 80096ee:	b510      	push	{r4, lr}
 80096f0:	eb01 0402 	add.w	r4, r1, r2
 80096f4:	d902      	bls.n	80096fc <memmove+0x10>
 80096f6:	4284      	cmp	r4, r0
 80096f8:	4623      	mov	r3, r4
 80096fa:	d807      	bhi.n	800970c <memmove+0x20>
 80096fc:	1e43      	subs	r3, r0, #1
 80096fe:	42a1      	cmp	r1, r4
 8009700:	d008      	beq.n	8009714 <memmove+0x28>
 8009702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800970a:	e7f8      	b.n	80096fe <memmove+0x12>
 800970c:	4402      	add	r2, r0
 800970e:	4601      	mov	r1, r0
 8009710:	428a      	cmp	r2, r1
 8009712:	d100      	bne.n	8009716 <memmove+0x2a>
 8009714:	bd10      	pop	{r4, pc}
 8009716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800971a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800971e:	e7f7      	b.n	8009710 <memmove+0x24>

08009720 <_sbrk_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d06      	ldr	r5, [pc, #24]	; (800973c <_sbrk_r+0x1c>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7f7 fd08 	bl	8001140 <_sbrk>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_sbrk_r+0x1a>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_sbrk_r+0x1a>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	200015ac 	.word	0x200015ac

08009740 <memcpy>:
 8009740:	440a      	add	r2, r1
 8009742:	4291      	cmp	r1, r2
 8009744:	f100 33ff 	add.w	r3, r0, #4294967295
 8009748:	d100      	bne.n	800974c <memcpy+0xc>
 800974a:	4770      	bx	lr
 800974c:	b510      	push	{r4, lr}
 800974e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009756:	4291      	cmp	r1, r2
 8009758:	d1f9      	bne.n	800974e <memcpy+0xe>
 800975a:	bd10      	pop	{r4, pc}

0800975c <_realloc_r>:
 800975c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009760:	4680      	mov	r8, r0
 8009762:	4614      	mov	r4, r2
 8009764:	460e      	mov	r6, r1
 8009766:	b921      	cbnz	r1, 8009772 <_realloc_r+0x16>
 8009768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	4611      	mov	r1, r2
 800976e:	f7ff bc49 	b.w	8009004 <_malloc_r>
 8009772:	b92a      	cbnz	r2, 8009780 <_realloc_r+0x24>
 8009774:	f7ff fbda 	bl	8008f2c <_free_r>
 8009778:	4625      	mov	r5, r4
 800977a:	4628      	mov	r0, r5
 800977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009780:	f000 f81b 	bl	80097ba <_malloc_usable_size_r>
 8009784:	4284      	cmp	r4, r0
 8009786:	4607      	mov	r7, r0
 8009788:	d802      	bhi.n	8009790 <_realloc_r+0x34>
 800978a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800978e:	d812      	bhi.n	80097b6 <_realloc_r+0x5a>
 8009790:	4621      	mov	r1, r4
 8009792:	4640      	mov	r0, r8
 8009794:	f7ff fc36 	bl	8009004 <_malloc_r>
 8009798:	4605      	mov	r5, r0
 800979a:	2800      	cmp	r0, #0
 800979c:	d0ed      	beq.n	800977a <_realloc_r+0x1e>
 800979e:	42bc      	cmp	r4, r7
 80097a0:	4622      	mov	r2, r4
 80097a2:	4631      	mov	r1, r6
 80097a4:	bf28      	it	cs
 80097a6:	463a      	movcs	r2, r7
 80097a8:	f7ff ffca 	bl	8009740 <memcpy>
 80097ac:	4631      	mov	r1, r6
 80097ae:	4640      	mov	r0, r8
 80097b0:	f7ff fbbc 	bl	8008f2c <_free_r>
 80097b4:	e7e1      	b.n	800977a <_realloc_r+0x1e>
 80097b6:	4635      	mov	r5, r6
 80097b8:	e7df      	b.n	800977a <_realloc_r+0x1e>

080097ba <_malloc_usable_size_r>:
 80097ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097be:	1f18      	subs	r0, r3, #4
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	bfbc      	itt	lt
 80097c4:	580b      	ldrlt	r3, [r1, r0]
 80097c6:	18c0      	addlt	r0, r0, r3
 80097c8:	4770      	bx	lr
	...

080097cc <_init>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	bf00      	nop
 80097d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d2:	bc08      	pop	{r3}
 80097d4:	469e      	mov	lr, r3
 80097d6:	4770      	bx	lr

080097d8 <_fini>:
 80097d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097da:	bf00      	nop
 80097dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097de:	bc08      	pop	{r3}
 80097e0:	469e      	mov	lr, r3
 80097e2:	4770      	bx	lr
