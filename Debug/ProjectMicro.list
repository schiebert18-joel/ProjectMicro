
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e4  080099e4  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099ec  080099ec  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080099f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001480  20000104  08009af8  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001584  08009af8  00021584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015410  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038be  00000000  00000000  00035587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00038e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e60  00000000  00000000  0003a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aad0  00000000  00000000  0003af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018686  00000000  00000000  00055a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bde0  00000000  00000000  0006e0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e48  00000000  00000000  00109ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0010ed08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800996c 	.word	0x0800996c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	0800996c 	.word	0x0800996c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <en_InitENG>:
#include "stdlib.h"

_sEng engine;


void en_InitENG(_sEng *engines,uint16_t maxSpeed){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]

	engines->estado=FREE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2202      	movs	r2, #2
 80004e4:	709a      	strb	r2, [r3, #2]
	engines->speed=0;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	801a      	strh	r2, [r3, #0]
	engines->maxSpeed=maxSpeed;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	887a      	ldrh	r2, [r7, #2]
 80004f0:	809a      	strh	r2, [r3, #4]

}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <en_HandlerENG>:

void en_HandlerENG(_sEng *engines,int32_t newspeed,uint8_t freno){
 80004fe:	b480      	push	{r7}
 8000500:	b085      	sub	sp, #20
 8000502:	af00      	add	r7, sp, #0
 8000504:	60f8      	str	r0, [r7, #12]
 8000506:	60b9      	str	r1, [r7, #8]
 8000508:	4613      	mov	r3, r2
 800050a:	71fb      	strb	r3, [r7, #7]

	if(newspeed==engines->speed)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4293      	cmp	r3, r2
 8000516:	d031      	beq.n	800057c <en_HandlerENG+0x7e>
		return;

	if(freno==1){
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d103      	bne.n	8000526 <en_HandlerENG+0x28>
		engines->estado=BRAKE;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2203      	movs	r2, #3
 8000522:	709a      	strb	r2, [r3, #2]
		return;
 8000524:	e02b      	b.n	800057e <en_HandlerENG+0x80>
	}
	if(newspeed>engines->maxSpeed)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	889b      	ldrh	r3, [r3, #4]
 800052a:	461a      	mov	r2, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4293      	cmp	r3, r2
 8000530:	dd02      	ble.n	8000538 <en_HandlerENG+0x3a>
		newspeed=engines->maxSpeed;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	889b      	ldrh	r3, [r3, #4]
 8000536:	60bb      	str	r3, [r7, #8]

	//agregar el caso anterior para negativo
	if(newspeed<0){
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2b00      	cmp	r3, #0
 800053c:	da09      	bge.n	8000552 <en_HandlerENG+0x54>
		engines->estado=BACK;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2201      	movs	r2, #1
 8000542:	709a      	strb	r2, [r3, #2]
		engines->speed= -1 * (newspeed);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	b29b      	uxth	r3, r3
 8000548:	425b      	negs	r3, r3
 800054a:	b29a      	uxth	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	801a      	strh	r2, [r3, #0]
 8000550:	e015      	b.n	800057e <en_HandlerENG+0x80>
	}else if(newspeed>0){
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	2b00      	cmp	r3, #0
 8000556:	dd07      	ble.n	8000568 <en_HandlerENG+0x6a>
		engines->estado=FRONT;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2200      	movs	r2, #0
 800055c:	709a      	strb	r2, [r3, #2]
		engines->speed=newspeed;
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	b29a      	uxth	r2, r3
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	801a      	strh	r2, [r3, #0]
 8000566:	e00a      	b.n	800057e <en_HandlerENG+0x80>
	}else if(newspeed==0){
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d107      	bne.n	800057e <en_HandlerENG+0x80>
		engines->estado=FREE;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2202      	movs	r2, #2
 8000572:	709a      	strb	r2, [r3, #2]
		engines->speed=0;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
 800057a:	e000      	b.n	800057e <en_HandlerENG+0x80>
		return;
 800057c:	bf00      	nop
	}

}
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <CommDatafromUSB>:
/**
 * recibo la informacion enviada por puerto USB (lo enviado por QT), y guardo los bytes recibidos en el buffer circular Rx.buffercomm[] de la estructura datosComSerie
 * UNER = 55 4E 45 52 // Nbytes= 02 // ':' = 3A // Alive= F0 // 0xC4 = checksum
 */

void CommDatafromUSB(uint8_t *buf, uint16_t length){
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000594:	2300      	movs	r3, #0
 8000596:	81fb      	strh	r3, [r7, #14]
 8000598:	e016      	b.n	80005c8 <CommDatafromUSB+0x40>
	datosComSerie.Rx.buffercomm[datosComSerie.Rx.indexWrite] = buf[i];
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <CommDatafromUSB+0x58>)
 80005a2:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80005a6:	4611      	mov	r1, r2
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <CommDatafromUSB+0x58>)
 80005ac:	440b      	add	r3, r1
 80005ae:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	datosComSerie.Rx.indexWrite++;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <CommDatafromUSB+0x58>)
 80005b4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80005b8:	3301      	adds	r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <CommDatafromUSB+0x58>)
 80005be:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  for (i = 0; i < length; i++) {
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	3301      	adds	r3, #1
 80005c6:	81fb      	strh	r3, [r7, #14]
 80005c8:	89fa      	ldrh	r2, [r7, #14]
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d3e4      	bcc.n	800059a <CommDatafromUSB+0x12>
  }

}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000264 	.word	0x20000264

080005e4 <CommComunicationsTask>:

void CommComunicationsTask(_sDato *datosCom){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

	//si llegó informacion entonces llamo a decodeheader para el analisis del protocolo "UNER"
	if(datosCom->Rx.indexRead!=datosCom->Rx.indexWrite ){ //si Recepcion write =! Recepcion read => buffer lleno
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d008      	beq.n	800060e <CommComunicationsTask+0x2a>
		CommDecodeHeader(datosCom);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f80d 	bl	800061c <CommDecodeHeader>
		datosComSerie.Rx.indexRead=datosComSerie.Rx.indexWrite;
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <CommComunicationsTask+0x34>)
 8000604:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <CommComunicationsTask+0x34>)
 800060a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
//	}
//
//	if(CDC_Transmit_FS(&datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexRead], datosComSerie.bytesTosend) == USBD_OK){
//		datosComSerie.Tx.indexRead += datosComSerie.bytesTosend;
//	}
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000264 	.word	0x20000264

0800061c <CommDecodeHeader>:

/**
 * Máquina de estados que busca: 'U', 'N', 'E', 'R', nBytes, ':', Payload, Checksum
 * Si todo es válido, llama a: decodeData(datosCom);
 */
void CommDecodeHeader(_sDato *datosCom){ //Recibo un puntero a la estructura de comunicación que contiene los buffers y los índices
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;		//Variable estática para recordar cuántos bytes de payload quedan por procesar

    uint8_t indexWriteRxCopy = datosCom->Rx.indexWrite; //Guardo una copia del índice de escritura para no interferir con interrupciones
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800062a:	73fb      	strb	r3, [r7, #15]

    while (datosCom->Rx.indexRead!=indexWriteRxCopy)
 800062c:	e100      	b.n	8000830 <CommDecodeHeader+0x214>
    {
        switch (estadoProtocolo) {					//Mientras haya nuevos datos no leídos en el buffer de recepción...
 800062e:	4b86      	ldr	r3, [pc, #536]	; (8000848 <CommDecodeHeader+0x22c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b06      	cmp	r3, #6
 8000634:	f200 80f8 	bhi.w	8000828 <CommDecodeHeader+0x20c>
 8000638:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <CommDecodeHeader+0x24>)
 800063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063e:	bf00      	nop
 8000640:	0800065d 	.word	0x0800065d
 8000644:	0800068b 	.word	0x0800068b
 8000648:	080006c9 	.word	0x080006c9
 800064c:	08000707 	.word	0x08000707
 8000650:	08000745 	.word	0x08000745
 8000654:	08000775 	.word	0x08000775
 8000658:	080007c1 	.word	0x080007c1
            case START:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='U'){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	b2d1      	uxtb	r1, r2
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8000676:	2b55      	cmp	r3, #85	; 0x55
 8000678:	f040 80da 	bne.w	8000830 <CommDecodeHeader+0x214>
                    estadoProtocolo=HEADER_1;
 800067c:	4b72      	ldr	r3, [pc, #456]	; (8000848 <CommDecodeHeader+0x22c>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	709a      	strb	r2, [r3, #2]
                }
                break;
 8000688:	e0d2      	b.n	8000830 <CommDecodeHeader+0x214>
            case HEADER_1:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='N')
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	b2d1      	uxtb	r1, r2
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80006a4:	2b4e      	cmp	r3, #78	; 0x4e
 80006a6:	d103      	bne.n	80006b0 <CommDecodeHeader+0x94>
                   estadoProtocolo=HEADER_2;
 80006a8:	4b67      	ldr	r3, [pc, #412]	; (8000848 <CommDecodeHeader+0x22c>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e0bf      	b.n	8000830 <CommDecodeHeader+0x214>
                else{
                    datosCom->Rx.indexRead--;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006b6:	3b01      	subs	r3, #1
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                    estadoProtocolo=START;
 80006c0:	4b61      	ldr	r3, [pc, #388]	; (8000848 <CommDecodeHeader+0x22c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006c6:	e0b3      	b.n	8000830 <CommDecodeHeader+0x214>
            case HEADER_2:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='E')
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	b2d1      	uxtb	r1, r2
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80006e2:	2b45      	cmp	r3, #69	; 0x45
 80006e4:	d103      	bne.n	80006ee <CommDecodeHeader+0xd2>
                    estadoProtocolo=HEADER_3;
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <CommDecodeHeader+0x22c>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e0a0      	b.n	8000830 <CommDecodeHeader+0x214>
                else{
                    datosCom->Rx.indexRead--;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                   estadoProtocolo=START;
 80006fe:	4b52      	ldr	r3, [pc, #328]	; (8000848 <CommDecodeHeader+0x22c>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000704:	e094      	b.n	8000830 <CommDecodeHeader+0x214>
			case HEADER_3:
				if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='R')
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	b2d1      	uxtb	r1, r2
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8000720:	2b52      	cmp	r3, #82	; 0x52
 8000722:	d103      	bne.n	800072c <CommDecodeHeader+0x110>
					estadoProtocolo=NBYTES;
 8000724:	4b48      	ldr	r3, [pc, #288]	; (8000848 <CommDecodeHeader+0x22c>)
 8000726:	2204      	movs	r2, #4
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e081      	b.n	8000830 <CommDecodeHeader+0x214>
				else{
					datosCom->Rx.indexRead--;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000732:	3b01      	subs	r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				    estadoProtocolo=START;
 800073c:	4b42      	ldr	r3, [pc, #264]	; (8000848 <CommDecodeHeader+0x22c>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
				}
            break;
 8000742:	e075      	b.n	8000830 <CommDecodeHeader+0x214>
            case NBYTES: //Leer byte de cantidad de datos (nBytes) y avanzar
                datosCom->indexStart=datosCom->Rx.indexRead;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->Rx.buffercomm[datosCom->Rx.indexRead++];
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	b2d1      	uxtb	r1, r2
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8000768:	4b38      	ldr	r3, [pc, #224]	; (800084c <CommDecodeHeader+0x230>)
 800076a:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 800076c:	4b36      	ldr	r3, [pc, #216]	; (8000848 <CommDecodeHeader+0x22c>)
 800076e:	2205      	movs	r2, #5
 8000770:	701a      	strb	r2, [r3, #0]
                break;
 8000772:	e05d      	b.n	8000830 <CommDecodeHeader+0x214>
            case TOKEN:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]==':'){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	b2d1      	uxtb	r1, r2
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 8000784:	461a      	mov	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800078e:	2b3a      	cmp	r3, #58	; 0x3a
 8000790:	d10a      	bne.n	80007a8 <CommDecodeHeader+0x18c>

                   estadoProtocolo=PAYLOAD;
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <CommDecodeHeader+0x22c>)
 8000794:	2206      	movs	r2, #6
 8000796:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <CommDecodeHeader+0x230>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	709a      	strb	r2, [r3, #2]
 80007a6:	e043      	b.n	8000830 <CommDecodeHeader+0x214>
                }
                else{
                    datosCom->Rx.indexRead--;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80007ae:	3b01      	subs	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                    estadoProtocolo=START;
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <CommDecodeHeader+0x22c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
                }
                break;
 80007be:	e037      	b.n	8000830 <CommDecodeHeader+0x214>
            case PAYLOAD:

                if (nBytes>1){
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <CommDecodeHeader+0x230>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d912      	bls.n	80007ee <CommDecodeHeader+0x1d2>
                    datosCom->cheksumRx ^= datosCom->Rx.buffercomm[datosCom->Rx.indexRead++];
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	b2d1      	uxtb	r1, r2
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80007d8:	461a      	mov	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	4053      	eors	r3, r2
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <CommDecodeHeader+0x230>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <CommDecodeHeader+0x230>)
 80007f8:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){ //Cuando ya se leyeron todos los datos, compara el checksum. Si es correcto, llama a decodeData() para procesar el mensaje.
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <CommDecodeHeader+0x230>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d116      	bne.n	8000830 <CommDecodeHeader+0x214>
                    estadoProtocolo=START;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <CommDecodeHeader+0x22c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->Rx.buffercomm[datosCom->Rx.indexRead]){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	789a      	ldrb	r2, [r3, #2]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000812:	4619      	mov	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	440b      	add	r3, r1
 8000818:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800081c:	429a      	cmp	r2, r3
 800081e:	d107      	bne.n	8000830 <CommDecodeHeader+0x214>
                        CommDecodeData(datosCom);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f815 	bl	8000850 <CommDecodeData>
                    }
                }

                break;
 8000826:	e003      	b.n	8000830 <CommDecodeHeader+0x214>
            default:
                estadoProtocolo=START;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <CommDecodeHeader+0x22c>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
                break;
 800082e:	bf00      	nop
    while (datosCom->Rx.indexRead!=indexWriteRxCopy)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	429a      	cmp	r2, r3
 800083a:	f47f aef8 	bne.w	800062e <CommDecodeHeader+0x12>
        }
    }
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000056c 	.word	0x2000056c
 800084c:	20000124 	.word	0x20000124

08000850 <CommDecodeData>:

//si el protocolo fue valido => preparo respuestas
void CommDecodeData(_sDato *datosCom){ //responde segun el ID recibido. Busca el ID del comando en la tercera posición del payload (después del token y del byte de longitud).
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]


    uint8_t bufAux[20], indiceAux=0,bytes=0;
 8000858:	2300      	movs	r3, #0
 800085a:	77bb      	strb	r3, [r7, #30]
 800085c:	2300      	movs	r3, #0
 800085e:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->Rx.buffercomm[datosCom->indexStart+2])//CMD EN LA POSICION 2, /ID EN LA POSICION 2, porque es donde se adjunta el byte que te dice "ALIVE, FIRMWARE, ETC"
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	785b      	ldrb	r3, [r3, #1]
 8000864:	3302      	adds	r3, #2
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800086e:	2bf1      	cmp	r3, #241	; 0xf1
 8000870:	d018      	beq.n	80008a4 <CommDecodeData+0x54>
 8000872:	2bf1      	cmp	r3, #241	; 0xf1
 8000874:	dc42      	bgt.n	80008fc <CommDecodeData+0xac>
 8000876:	2ba0      	cmp	r3, #160	; 0xa0
 8000878:	d01f      	beq.n	80008ba <CommDecodeData+0x6a>
 800087a:	2bf0      	cmp	r3, #240	; 0xf0
 800087c:	d13e      	bne.n	80008fc <CommDecodeData+0xac>
    {

	case ALIVE:
		bufAux[indiceAux++] = ALIVE;   	// ID de respuesta
 800087e:	7fbb      	ldrb	r3, [r7, #30]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	77ba      	strb	r2, [r7, #30]
 8000884:	3320      	adds	r3, #32
 8000886:	443b      	add	r3, r7
 8000888:	22f0      	movs	r2, #240	; 0xf0
 800088a:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = 0x0D;    	// Respuesta: ACK
 800088e:	7fbb      	ldrb	r3, [r7, #30]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	77ba      	strb	r2, [r7, #30]
 8000894:	3320      	adds	r3, #32
 8000896:	443b      	add	r3, r7
 8000898:	220d      	movs	r2, #13
 800089a:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 0x03;        			// NBYTES = 3 (ID + Dato + Checksum)
 800089e:	2303      	movs	r3, #3
 80008a0:	77fb      	strb	r3, [r7, #31]
	break;
 80008a2:	e036      	b.n	8000912 <CommDecodeData+0xc2>

    case FIRMWARE:
		bufAux[indiceAux++]=FIRMWARE;
 80008a4:	7fbb      	ldrb	r3, [r7, #30]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	77ba      	strb	r2, [r7, #30]
 80008aa:	3320      	adds	r3, #32
 80008ac:	443b      	add	r3, r7
 80008ae:	22f1      	movs	r2, #241	; 0xf1
 80008b0:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80008b4:	2302      	movs	r3, #2
 80008b6:	77fb      	strb	r3, [r7, #31]
    break;
 80008b8:	e02b      	b.n	8000912 <CommDecodeData+0xc2>

    break;

    case IR:
		bufAux[indiceAux++] = IR;
 80008ba:	7fbb      	ldrb	r3, [r7, #30]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	77ba      	strb	r2, [r7, #30]
 80008c0:	3320      	adds	r3, #32
 80008c2:	443b      	add	r3, r7
 80008c4:	22a0      	movs	r2, #160	; 0xa0
 80008c6:	f803 2c18 	strb.w	r2, [r3, #-24]
		//w.u16[0] = IRsensor.bufferADCvalue[0];
		bufAux[indiceAux++] = w.u8[0];
 80008ca:	7fbb      	ldrb	r3, [r7, #30]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	77ba      	strb	r2, [r7, #30]
 80008d0:	4619      	mov	r1, r3
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <CommDecodeData+0xd8>)
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	f101 0320 	add.w	r3, r1, #32
 80008da:	443b      	add	r3, r7
 80008dc:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = w.u8[1];
 80008e0:	7fbb      	ldrb	r3, [r7, #30]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	77ba      	strb	r2, [r7, #30]
 80008e6:	4619      	mov	r1, r3
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <CommDecodeData+0xd8>)
 80008ea:	785a      	ldrb	r2, [r3, #1]
 80008ec:	f101 0320 	add.w	r3, r1, #32
 80008f0:	443b      	add	r3, r7
 80008f2:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 3;
 80008f6:	2303      	movs	r3, #3
 80008f8:	77fb      	strb	r3, [r7, #31]
	break;
 80008fa:	e00a      	b.n	8000912 <CommDecodeData+0xc2>

    default:
        bufAux[indiceAux++]=0xFF;
 80008fc:	7fbb      	ldrb	r3, [r7, #30]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	77ba      	strb	r2, [r7, #30]
 8000902:	3320      	adds	r3, #32
 8000904:	443b      	add	r3, r7
 8000906:	22ff      	movs	r2, #255	; 0xff
 8000908:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 800090c:	2302      	movs	r3, #2
 800090e:	77fb      	strb	r3, [r7, #31]
    break;
 8000910:	bf00      	nop
    }

    CommSendInfo(bufAux,bytes);
 8000912:	7ffa      	ldrb	r2, [r7, #31]
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f806 	bl	800092c <CommSendInfo>
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000120 	.word	0x20000120

0800092c <CommSendInfo>:

//calculo y envio el checksum
void CommSendInfo(uint8_t bufferAux[], uint8_t bytes){
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[20], indiceAux=0,cks=0,i=0;
 8000938:	2300      	movs	r3, #0
 800093a:	77fb      	strb	r3, [r7, #31]
 800093c:	2300      	movs	r3, #0
 800093e:	77bb      	strb	r3, [r7, #30]
 8000940:	2300      	movs	r3, #0
 8000942:	777b      	strb	r3, [r7, #29]

    bufAux[indiceAux++]='U';
 8000944:	7ffb      	ldrb	r3, [r7, #31]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	77fa      	strb	r2, [r7, #31]
 800094a:	3320      	adds	r3, #32
 800094c:	443b      	add	r3, r7
 800094e:	2255      	movs	r2, #85	; 0x55
 8000950:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000954:	7ffb      	ldrb	r3, [r7, #31]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	77fa      	strb	r2, [r7, #31]
 800095a:	3320      	adds	r3, #32
 800095c:	443b      	add	r3, r7
 800095e:	224e      	movs	r2, #78	; 0x4e
 8000960:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	77fa      	strb	r2, [r7, #31]
 800096a:	3320      	adds	r3, #32
 800096c:	443b      	add	r3, r7
 800096e:	2245      	movs	r2, #69	; 0x45
 8000970:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000974:	7ffb      	ldrb	r3, [r7, #31]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	77fa      	strb	r2, [r7, #31]
 800097a:	3320      	adds	r3, #32
 800097c:	443b      	add	r3, r7
 800097e:	2252      	movs	r2, #82	; 0x52
 8000980:	f803 2c18 	strb.w	r2, [r3, #-24]

    bufAux[indiceAux++]=bytes;
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	77fa      	strb	r2, [r7, #31]
 800098a:	3320      	adds	r3, #32
 800098c:	443b      	add	r3, r7
 800098e:	78fa      	ldrb	r2, [r7, #3]
 8000990:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000994:	7ffb      	ldrb	r3, [r7, #31]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	77fa      	strb	r2, [r7, #31]
 800099a:	3320      	adds	r3, #32
 800099c:	443b      	add	r3, r7
 800099e:	223a      	movs	r2, #58	; 0x3a
 80009a0:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(i=0; i<bytes-1; i++){
 80009a4:	2300      	movs	r3, #0
 80009a6:	777b      	strb	r3, [r7, #29]
 80009a8:	e00d      	b.n	80009c6 <CommSendInfo+0x9a>
        bufAux[indiceAux++] = bufferAux[i];
 80009aa:	7f7b      	ldrb	r3, [r7, #29]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	441a      	add	r2, r3
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	1c59      	adds	r1, r3, #1
 80009b4:	77f9      	strb	r1, [r7, #31]
 80009b6:	7812      	ldrb	r2, [r2, #0]
 80009b8:	3320      	adds	r3, #32
 80009ba:	443b      	add	r3, r7
 80009bc:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(i=0; i<bytes-1; i++){
 80009c0:	7f7b      	ldrb	r3, [r7, #29]
 80009c2:	3301      	adds	r3, #1
 80009c4:	777b      	strb	r3, [r7, #29]
 80009c6:	7f7a      	ldrb	r2, [r7, #29]
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbec      	blt.n	80009aa <CommSendInfo+0x7e>
    }

    cks	= 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	77bb      	strb	r3, [r7, #30]

    //Cargar en Tx.buffercomm con checksum:
    for(i=0 ;i<indiceAux;i++){
 80009d4:	2300      	movs	r3, #0
 80009d6:	777b      	strb	r3, [r7, #29]
 80009d8:	e01a      	b.n	8000a10 <CommSendInfo+0xe4>
        cks^= bufAux[i];
 80009da:	7f7b      	ldrb	r3, [r7, #29]
 80009dc:	3320      	adds	r3, #32
 80009de:	443b      	add	r3, r7
 80009e0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80009e4:	7fbb      	ldrb	r3, [r7, #30]
 80009e6:	4053      	eors	r3, r2
 80009e8:	77bb      	strb	r3, [r7, #30]
        datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexWrite++]=bufAux[i];
 80009ea:	7f7a      	ldrb	r2, [r7, #29]
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <CommSendInfo+0x138>)
 80009ee:	78db      	ldrb	r3, [r3, #3]
 80009f0:	1c59      	adds	r1, r3, #1
 80009f2:	b2c8      	uxtb	r0, r1
 80009f4:	491b      	ldr	r1, [pc, #108]	; (8000a64 <CommSendInfo+0x138>)
 80009f6:	70c8      	strb	r0, [r1, #3]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f102 0320 	add.w	r3, r2, #32
 80009fe:	443b      	add	r3, r7
 8000a00:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <CommSendInfo+0x138>)
 8000a06:	440b      	add	r3, r1
 8000a08:	715a      	strb	r2, [r3, #5]
    for(i=0 ;i<indiceAux;i++){
 8000a0a:	7f7b      	ldrb	r3, [r7, #29]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	777b      	strb	r3, [r7, #29]
 8000a10:	7f7a      	ldrb	r2, [r7, #29]
 8000a12:	7ffb      	ldrb	r3, [r7, #31]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3e0      	bcc.n	80009da <CommSendInfo+0xae>
    }
    // Agregar el checksum al final
    datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexWrite++]=cks;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <CommSendInfo+0x138>)
 8000a1a:	78db      	ldrb	r3, [r3, #3]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	b2d1      	uxtb	r1, r2
 8000a20:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <CommSendInfo+0x138>)
 8000a22:	70d1      	strb	r1, [r2, #3]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <CommSendInfo+0x138>)
 8000a28:	4413      	add	r3, r2
 8000a2a:	7fba      	ldrb	r2, [r7, #30]
 8000a2c:	715a      	strb	r2, [r3, #5]
    // Cantidad total de bytes a transmitir (incluyendo checksum)
    datosComSerie.bytesTosend = datosComSerie.Tx.indexWrite;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <CommSendInfo+0x138>)
 8000a30:	78da      	ldrb	r2, [r3, #3]
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <CommSendInfo+0x138>)
 8000a34:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307

    // Paquete enviado hacia QT: 55 4E 45 52   01 	 3A     F0         0D          C8
    //							 'U''N''E''R''Nbytes'':''ID:Alive''Payload: ACK''Cheksum'
    CDC_Transmit_FS(&datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexRead], datosComSerie.bytesTosend); //transmision por USB hacia QT
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <CommSendInfo+0x138>)
 8000a3a:	791b      	ldrb	r3, [r3, #4]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <CommSendInfo+0x138>)
 8000a40:	4413      	add	r3, r2
 8000a42:	3305      	adds	r3, #5
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <CommSendInfo+0x138>)
 8000a46:	f892 2307 	ldrb.w	r2, [r2, #775]	; 0x307
 8000a4a:	b292      	uxth	r2, r2
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f008 fafe 	bl	8009050 <CDC_Transmit_FS>
    datosComSerie.Tx.indexWrite = 0;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <CommSendInfo+0x138>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	70da      	strb	r2, [r3, #3]

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000264 	.word	0x20000264

08000a68 <HAL_TIM_PeriodElapsedCallback>:
void Engines_task();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d104      	bne.n	8000a84 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000a7a:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a7c:	7813      	ldrb	r3, [r2, #0]
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a82:	7013      	strb	r3, [r2, #0]
	}

}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	40010000 	.word	0x40010000
 8000a94:	20000260 	.word	0x20000260

08000a98 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	//			adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3],
	//			adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
	//
	//
	//	CDC_Transmit_FS((uint8_t*)usbMsg, strlen(usbMsg));
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <Engines_task>:

void Engines_task(){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

	en_HandlerENG(&motorR, 50000, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000ab6:	484d      	ldr	r0, [pc, #308]	; (8000bec <Engines_task+0x140>)
 8000ab8:	f7ff fd21 	bl	80004fe <en_HandlerENG>
	en_HandlerENG(&motorL, 50000, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000ac2:	484b      	ldr	r0, [pc, #300]	; (8000bf0 <Engines_task+0x144>)
 8000ac4:	f7ff fd1b 	bl	80004fe <en_HandlerENG>

	switch(motorL.estado){
 8000ac8:	4b49      	ldr	r3, [pc, #292]	; (8000bf0 <Engines_task+0x144>)
 8000aca:	789b      	ldrb	r3, [r3, #2]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d83b      	bhi.n	8000b48 <Engines_task+0x9c>
 8000ad0:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <Engines_task+0x2c>)
 8000ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad6:	bf00      	nop
 8000ad8:	08000b01 	.word	0x08000b01
 8000adc:	08000b19 	.word	0x08000b19
 8000ae0:	08000b31 	.word	0x08000b31
 8000ae4:	08000ae9 	.word	0x08000ae9
		case BRAKE:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2108      	movs	r1, #8
 8000aec:	4841      	ldr	r0, [pc, #260]	; (8000bf4 <Engines_task+0x148>)
 8000aee:	f001 ffeb 	bl	8002ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af8:	483f      	ldr	r0, [pc, #252]	; (8000bf8 <Engines_task+0x14c>)
 8000afa:	f001 ffe5 	bl	8002ac8 <HAL_GPIO_WritePin>
			break;
 8000afe:	e024      	b.n	8000b4a <Engines_task+0x9e>

		case FRONT:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2108      	movs	r1, #8
 8000b04:	483b      	ldr	r0, [pc, #236]	; (8000bf4 <Engines_task+0x148>)
 8000b06:	f001 ffdf 	bl	8002ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b10:	4839      	ldr	r0, [pc, #228]	; (8000bf8 <Engines_task+0x14c>)
 8000b12:	f001 ffd9 	bl	8002ac8 <HAL_GPIO_WritePin>
			break;
 8000b16:	e018      	b.n	8000b4a <Engines_task+0x9e>

		case BACK:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	4835      	ldr	r0, [pc, #212]	; (8000bf4 <Engines_task+0x148>)
 8000b1e:	f001 ffd3 	bl	8002ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b28:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <Engines_task+0x14c>)
 8000b2a:	f001 ffcd 	bl	8002ac8 <HAL_GPIO_WritePin>
			break;
 8000b2e:	e00c      	b.n	8000b4a <Engines_task+0x9e>

		case FREE:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2108      	movs	r1, #8
 8000b34:	482f      	ldr	r0, [pc, #188]	; (8000bf4 <Engines_task+0x148>)
 8000b36:	f001 ffc7 	bl	8002ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b40:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <Engines_task+0x14c>)
 8000b42:	f001 ffc1 	bl	8002ac8 <HAL_GPIO_WritePin>
			break;
 8000b46:	e000      	b.n	8000b4a <Engines_task+0x9e>
		default:
			break;
 8000b48:	bf00      	nop
	}
	switch(motorR.estado){
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <Engines_task+0x140>)
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d83e      	bhi.n	8000bd0 <Engines_task+0x124>
 8000b52:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <Engines_task+0xac>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000b83 	.word	0x08000b83
 8000b5c:	08000b9d 	.word	0x08000b9d
 8000b60:	08000bb7 	.word	0x08000bb7
 8000b64:	08000b69 	.word	0x08000b69
		case BRAKE:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6e:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <Engines_task+0x14c>)
 8000b70:	f001 ffaa 	bl	8002ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7a:	481f      	ldr	r0, [pc, #124]	; (8000bf8 <Engines_task+0x14c>)
 8000b7c:	f001 ffa4 	bl	8002ac8 <HAL_GPIO_WritePin>
			break;
 8000b80:	e027      	b.n	8000bd2 <Engines_task+0x126>

		case FRONT:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	481b      	ldr	r0, [pc, #108]	; (8000bf8 <Engines_task+0x14c>)
 8000b8a:	f001 ff9d 	bl	8002ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b94:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <Engines_task+0x14c>)
 8000b96:	f001 ff97 	bl	8002ac8 <HAL_GPIO_WritePin>
			break;
 8000b9a:	e01a      	b.n	8000bd2 <Engines_task+0x126>

		case BACK:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <Engines_task+0x14c>)
 8000ba4:	f001 ff90 	bl	8002ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 1);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <Engines_task+0x14c>)
 8000bb0:	f001 ff8a 	bl	8002ac8 <HAL_GPIO_WritePin>
			break;
 8000bb4:	e00d      	b.n	8000bd2 <Engines_task+0x126>

		case FREE:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbc:	480e      	ldr	r0, [pc, #56]	; (8000bf8 <Engines_task+0x14c>)
 8000bbe:	f001 ff83 	bl	8002ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <Engines_task+0x14c>)
 8000bca:	f001 ff7d 	bl	8002ac8 <HAL_GPIO_WritePin>
			break;
 8000bce:	e000      	b.n	8000bd2 <Engines_task+0x126>
		default:
			break;
 8000bd0:	bf00      	nop
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motorL.speed);
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <Engines_task+0x144>)
 8000bd4:	881a      	ldrh	r2, [r3, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <Engines_task+0x150>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, motorR.speed);
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <Engines_task+0x140>)
 8000bde:	881a      	ldrh	r2, [r3, #0]
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <Engines_task+0x150>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000590 	.word	0x20000590
 8000bf0:	20000588 	.word	0x20000588
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	20000218 	.word	0x20000218

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f000 fcc3 	bl	8001598 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_Attach_Rx(&CommDatafromUSB);
 8000c12:	483a      	ldr	r0, [pc, #232]	; (8000cfc <main+0xfc>)
 8000c14:	f008 fa54 	bl	80090c0 <CDC_Attach_Rx>
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR); /*!< asigno a cada motor una direccio de memoria para manejarlo desde la lib */
 8000c18:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <main+0x100>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	4838      	ldr	r0, [pc, #224]	; (8000d04 <main+0x104>)
 8000c24:	f7ff fc56 	bl	80004d4 <en_InitENG>
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR); /*!< En donde uint16_t(htim3.Instance->ARR) es el valor maximo de PWM */
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <main+0x100>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	4835      	ldr	r0, [pc, #212]	; (8000d08 <main+0x108>)
 8000c34:	f7ff fc4e 	bl	80004d4 <en_InitENG>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f874 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 fa80 	bl	8001140 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c40:	f000 fa5e 	bl	8001100 <MX_DMA_Init>
  MX_TIM1_Init();
 8000c44:	f000 f98a 	bl	8000f5c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000c48:	f008 f8e6 	bl	8008e18 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000c4c:	f000 f8d2 	bl	8000df4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c50:	f000 f9d4 	bl	8000ffc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000c54:	482d      	ldr	r0, [pc, #180]	; (8000d0c <main+0x10c>)
 8000c56:	f003 fe3d 	bl	80048d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c5a:	4829      	ldr	r0, [pc, #164]	; (8000d00 <main+0x100>)
 8000c5c:	f003 fe3a 	bl	80048d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c60:	2104      	movs	r1, #4
 8000c62:	4827      	ldr	r0, [pc, #156]	; (8000d00 <main+0x100>)
 8000c64:	f003 fef2 	bl	8004a4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4825      	ldr	r0, [pc, #148]	; (8000d00 <main+0x100>)
 8000c6c:	f003 feee 	bl	8004a4c <HAL_TIM_PWM_Start>

  IS10MS = FALSE;
 8000c70:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <main+0x110>)
 8000c72:	7813      	ldrb	r3, [r2, #0]
 8000c74:	f36f 1386 	bfc	r3, #6, #1
 8000c78:	7013      	strb	r3, [r2, #0]
  datosComSerie.Rx.indexRead = 0;
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <main+0x114>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
  datosComSerie.Rx.indexWrite =0;
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <main+0x114>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  myFlags.allFlags = 0;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <main+0x110>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 Engines_task();
 8000c90:	f7ff ff0c 	bl	8000aac <Engines_task>
    /* USER CODE BEGIN 3 */
	  CommComunicationsTask(&datosComSerie);
 8000c94:	481f      	ldr	r0, [pc, #124]	; (8000d14 <main+0x114>)
 8000c96:	f7ff fca5 	bl	80005e4 <CommComunicationsTask>

	  if(IS10MS){
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <main+0x110>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f3      	beq.n	8000c90 <main+0x90>
		  time250us++;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	3301      	adds	r3, #1
 8000cac:	71fb      	strb	r3, [r7, #7]
		  IS10MS =! IS10MS;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <main+0x110>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bf0c      	ite	eq
 8000cbc:	2301      	moveq	r3, #1
 8000cbe:	2300      	movne	r3, #0
 8000cc0:	b2d9      	uxtb	r1, r3
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <main+0x110>)
 8000cc4:	7813      	ldrb	r3, [r2, #0]
 8000cc6:	f361 1386 	bfi	r3, r1, #6, #1
 8000cca:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b27      	cmp	r3, #39	; 0x27
 8000cd0:	d9de      	bls.n	8000c90 <main+0x90>
			  time10ms++;
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	71bb      	strb	r3, [r7, #6]
			  time250us = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	71fb      	strb	r3, [r7, #7]
			  if(time10ms == 10){
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d1d6      	bne.n	8000c90 <main+0x90>
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <main+0x118>)
 8000ce8:	f001 ff07 	bl	8002afa <HAL_GPIO_TogglePin>
				  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&sensorIR.bufferADCvalue, NUM_CHANNELS_ADC);
 8000cec:	2208      	movs	r2, #8
 8000cee:	490b      	ldr	r1, [pc, #44]	; (8000d1c <main+0x11c>)
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <main+0x120>)
 8000cf2:	f000 fd2b 	bl	800174c <HAL_ADC_Start_DMA>
				  time10ms = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	71bb      	strb	r3, [r7, #6]
	 Engines_task();
 8000cfa:	e7c9      	b.n	8000c90 <main+0x90>
 8000cfc:	08000589 	.word	0x08000589
 8000d00:	20000218 	.word	0x20000218
 8000d04:	20000588 	.word	0x20000588
 8000d08:	20000590 	.word	0x20000590
 8000d0c:	200001d0 	.word	0x200001d0
 8000d10:	20000260 	.word	0x20000260
 8000d14:	20000264 	.word	0x20000264
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	20000570 	.word	0x20000570
 8000d20:	20000128 	.word	0x20000128

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	2230      	movs	r2, #48	; 0x30
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f008 fdee 	bl	8009914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <SystemClock_Config+0xc8>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	4a26      	ldr	r2, [pc, #152]	; (8000dec <SystemClock_Config+0xc8>)
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d56:	6413      	str	r3, [r2, #64]	; 0x40
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <SystemClock_Config+0xc8>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <SystemClock_Config+0xcc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a20      	ldr	r2, [pc, #128]	; (8000df0 <SystemClock_Config+0xcc>)
 8000d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <SystemClock_Config+0xcc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d94:	2319      	movs	r3, #25
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d98:	23c0      	movs	r3, #192	; 0xc0
 8000d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da0:	2304      	movs	r3, #4
 8000da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 f913 	bl	8003fd4 <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db4:	f000 fa50 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db8:	230f      	movs	r3, #15
 8000dba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fb75 	bl	80044c4 <HAL_RCC_ClockConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000de0:	f000 fa3a 	bl	8001258 <Error_Handler>
  }
}
 8000de4:	bf00      	nop
 8000de6:	3750      	adds	r7, #80	; 0x50
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e06:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e08:	4a52      	ldr	r2, [pc, #328]	; (8000f54 <MX_ADC1_Init+0x160>)
 8000e0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e0c:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e14:	4b4e      	ldr	r3, [pc, #312]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e1a:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e20:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	4b4a      	ldr	r3, [pc, #296]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2e:	4b48      	ldr	r3, [pc, #288]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e34:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e36:	4a48      	ldr	r2, [pc, #288]	; (8000f58 <MX_ADC1_Init+0x164>)
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e3a:	4b45      	ldr	r3, [pc, #276]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000e40:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e42:	2208      	movs	r2, #8
 8000e44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e46:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4e:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e54:	483e      	ldr	r0, [pc, #248]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e56:	f000 fc35 	bl	80016c4 <HAL_ADC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e60:	f000 f9fa 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4836      	ldr	r0, [pc, #216]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e76:	f000 fd71 	bl	800195c <HAL_ADC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e80:	f000 f9ea 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482f      	ldr	r0, [pc, #188]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000e92:	f000 fd63 	bl	800195c <HAL_ADC_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e9c:	f000 f9dc 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4828      	ldr	r0, [pc, #160]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000eae:	f000 fd55 	bl	800195c <HAL_ADC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000eb8:	f000 f9ce 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4821      	ldr	r0, [pc, #132]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000eca:	f000 fd47 	bl	800195c <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ed4:	f000 f9c0 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000edc:	2305      	movs	r3, #5
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481a      	ldr	r0, [pc, #104]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000ee6:	f000 fd39 	bl	800195c <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000ef0:	f000 f9b2 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000ef8:	2306      	movs	r3, #6
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4813      	ldr	r0, [pc, #76]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000f02:	f000 fd2b 	bl	800195c <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000f0c:	f000 f9a4 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f10:	2306      	movs	r3, #6
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000f14:	2307      	movs	r3, #7
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000f1e:	f000 fd1d 	bl	800195c <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000f28:	f000 f996 	bl	8001258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000f30:	2308      	movs	r3, #8
 8000f32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_ADC1_Init+0x15c>)
 8000f3a:	f000 fd0f 	bl	800195c <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000f44:	f000 f988 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000128 	.word	0x20000128
 8000f54:	40012000 	.word	0x40012000
 8000f58:	0f000001 	.word	0x0f000001

08000f5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <MX_TIM1_Init+0x9c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000f8c:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000f90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fa4:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000fa6:	f003 fc45 	bl	8004834 <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fb0:	f000 f952 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000fc2:	f003 ffa5 	bl	8004f10 <HAL_TIM_ConfigClockSource>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fcc:	f000 f944 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_TIM1_Init+0x98>)
 8000fde:	f004 fb59 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fe8:	f000 f936 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200001d0 	.word	0x200001d0
 8000ff8:	40010000 	.word	0x40010000

08000ffc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	; 0x38
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <MX_TIM3_Init+0xfc>)
 800102e:	4a33      	ldr	r2, [pc, #204]	; (80010fc <MX_TIM3_Init+0x100>)
 8001030:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <MX_TIM3_Init+0xfc>)
 8001034:	220f      	movs	r2, #15
 8001036:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <MX_TIM3_Init+0xfc>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <MX_TIM3_Init+0xfc>)
 8001040:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001044:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <MX_TIM3_Init+0xfc>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <MX_TIM3_Init+0xfc>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001052:	4829      	ldr	r0, [pc, #164]	; (80010f8 <MX_TIM3_Init+0xfc>)
 8001054:	f003 fbee 	bl	8004834 <HAL_TIM_Base_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800105e:	f000 f8fb 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106c:	4619      	mov	r1, r3
 800106e:	4822      	ldr	r0, [pc, #136]	; (80010f8 <MX_TIM3_Init+0xfc>)
 8001070:	f003 ff4e 	bl	8004f10 <HAL_TIM_ConfigClockSource>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800107a:	f000 f8ed 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800107e:	481e      	ldr	r0, [pc, #120]	; (80010f8 <MX_TIM3_Init+0xfc>)
 8001080:	f003 fc8a 	bl	8004998 <HAL_TIM_PWM_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800108a:	f000 f8e5 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4619      	mov	r1, r3
 800109c:	4816      	ldr	r0, [pc, #88]	; (80010f8 <MX_TIM3_Init+0xfc>)
 800109e:	f004 faf9 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010a8:	f000 f8d6 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ac:	2360      	movs	r3, #96	; 0x60
 80010ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80010b4:	2302      	movs	r3, #2
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_TIM3_Init+0xfc>)
 80010c4:	f003 fe62 	bl	8004d8c <HAL_TIM_PWM_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010ce:	f000 f8c3 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2204      	movs	r2, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <MX_TIM3_Init+0xfc>)
 80010da:	f003 fe57 	bl	8004d8c <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010e4:	f000 f8b8 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MX_TIM3_Init+0xfc>)
 80010ea:	f000 f997 	bl	800141c <HAL_TIM_MspPostInit>

}
 80010ee:	bf00      	nop
 80010f0:	3738      	adds	r7, #56	; 0x38
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000218 	.word	0x20000218
 80010fc:	40000400 	.word	0x40000400

08001100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_DMA_Init+0x3c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <MX_DMA_Init+0x3c>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_DMA_Init+0x3c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2038      	movs	r0, #56	; 0x38
 8001128:	f000 ffa3 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800112c:	2038      	movs	r0, #56	; 0x38
 800112e:	f000 ffbc 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <MX_GPIO_Init+0x108>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a3a      	ldr	r2, [pc, #232]	; (8001248 <MX_GPIO_Init+0x108>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_GPIO_Init+0x108>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <MX_GPIO_Init+0x108>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a33      	ldr	r2, [pc, #204]	; (8001248 <MX_GPIO_Init+0x108>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <MX_GPIO_Init+0x108>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_GPIO_Init+0x108>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <MX_GPIO_Init+0x108>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_GPIO_Init+0x108>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <MX_GPIO_Init+0x108>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a25      	ldr	r2, [pc, #148]	; (8001248 <MX_GPIO_Init+0x108>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <MX_GPIO_Init+0x108>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011cc:	481f      	ldr	r0, [pc, #124]	; (800124c <MX_GPIO_Init+0x10c>)
 80011ce:	f001 fc7b 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OutEngB_1_Pin|OutEngB_2_Pin|OutEngA_2_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <MX_GPIO_Init+0x110>)
 80011da:	f001 fc75 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2108      	movs	r1, #8
 80011e2:	481c      	ldr	r0, [pc, #112]	; (8001254 <MX_GPIO_Init+0x114>)
 80011e4:	f001 fc70 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4812      	ldr	r0, [pc, #72]	; (800124c <MX_GPIO_Init+0x10c>)
 8001202:	f001 fadd 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OutEngB_1_Pin OutEngB_2_Pin OutEngA_2_Pin */
  GPIO_InitStruct.Pin = OutEngB_1_Pin|OutEngB_2_Pin|OutEngA_2_Pin;
 8001206:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_GPIO_Init+0x110>)
 8001220:	f001 face 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OutEngA_1_Pin */
  GPIO_InitStruct.Pin = OutEngA_1_Pin;
 8001224:	2308      	movs	r3, #8
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OutEngA_1_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_GPIO_Init+0x114>)
 800123c:	f001 fac0 	bl	80027c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40020800 	.word	0x40020800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_ADC_MspInit+0xd8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d156      	bne.n	8001384 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_ADC_MspInit+0xdc>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <HAL_ADC_MspInit+0xdc>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_ADC_MspInit+0xdc>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_ADC_MspInit+0xdc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a25      	ldr	r2, [pc, #148]	; (8001390 <HAL_ADC_MspInit+0xdc>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_ADC_MspInit+0xdc>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800130e:	23ff      	movs	r3, #255	; 0xff
 8001310:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	481c      	ldr	r0, [pc, #112]	; (8001394 <HAL_ADC_MspInit+0xe0>)
 8001322:	f001 fa4d 	bl	80027c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001328:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_ADC_MspInit+0xe8>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001350:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001354:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 800136a:	f000 feb9 	bl	80020e0 <HAL_DMA_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001374:	f7ff ff70 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 800137c:	639a      	str	r2, [r3, #56]	; 0x38
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_ADC_MspInit+0xe4>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40012000 	.word	0x40012000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	20000170 	.word	0x20000170
 800139c:	40026410 	.word	0x40026410

080013a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_TIM_Base_MspInit+0x70>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d116      	bne.n	80013e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_TIM_Base_MspInit+0x74>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <HAL_TIM_Base_MspInit+0x74>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_TIM_Base_MspInit+0x74>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2019      	movs	r0, #25
 80013d4:	f000 fe4d 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013d8:	2019      	movs	r0, #25
 80013da:	f000 fe66 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013de:	e012      	b.n	8001406 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <HAL_TIM_Base_MspInit+0x78>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10d      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_TIM_Base_MspInit+0x74>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_TIM_Base_MspInit+0x74>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_TIM_Base_MspInit+0x74>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40010000 	.word	0x40010000
 8001414:	40023800 	.word	0x40023800
 8001418:	40000400 	.word	0x40000400

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_TIM_MspPostInit+0x68>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d11d      	bne.n	800147a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EngBPWM_Pin|EngAPWM_Pin;
 800145a:	2330      	movs	r3, #48	; 0x30
 800145c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800146a:	2302      	movs	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_TIM_MspPostInit+0x70>)
 8001476:	f001 f9a3 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3720      	adds	r7, #32
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40000400 	.word	0x40000400
 8001488:	40023800 	.word	0x40023800
 800148c:	40020400 	.word	0x40020400

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f8ae 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014ea:	f003 fb5f 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001d0 	.word	0x200001d0

080014f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA2_Stream0_IRQHandler+0x10>)
 80014fe:	f000 fef5 	bl	80022ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000170 	.word	0x20000170

0800150c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <OTG_FS_IRQHandler+0x10>)
 8001512:	f001 fc50 	bl	8002db6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000e80 	.word	0x20000e80

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001548:	f7ff ffea 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f008 f9d7 	bl	8009924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fb43 	bl	8000c00 <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800157c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001588:	080099f4 	.word	0x080099f4
  ldr r2, =_sbss
 800158c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001590:	20001584 	.word	0x20001584

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 fd4b 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fe4a 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fd63 	bl	80020c6 <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 fd2b 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000
 8001634:	20000008 	.word	0x20000008
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008
 8001660:	20000598 	.word	0x20000598

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000598 	.word	0x20000598

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e033      	b.n	8001742 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fde6 	bl	80012b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800170a:	f023 0302 	bic.w	r3, r3, #2
 800170e:	f043 0202 	orr.w	r2, r3, #2
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fa52 	bl	8001bc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
 8001732:	e001      	b.n	8001738 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ADC_Start_DMA+0x22>
 800176a:	2302      	movs	r3, #2
 800176c:	e0d0      	b.n	8001910 <HAL_ADC_Start_DMA+0x1c4>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b01      	cmp	r3, #1
 8001782:	d018      	beq.n	80017b6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001794:	4b60      	ldr	r3, [pc, #384]	; (8001918 <HAL_ADC_Start_DMA+0x1cc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a60      	ldr	r2, [pc, #384]	; (800191c <HAL_ADC_Start_DMA+0x1d0>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9a      	lsrs	r2, r3, #18
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c4:	d107      	bne.n	80017d6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017d4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	f040 8088 	bne.w	80018f6 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d007      	beq.n	8001818 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001810:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001824:	d106      	bne.n	8001834 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f023 0206 	bic.w	r2, r3, #6
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	645a      	str	r2, [r3, #68]	; 0x44
 8001832:	e002      	b.n	800183a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_ADC_Start_DMA+0x1d4>)
 8001844:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	4a36      	ldr	r2, [pc, #216]	; (8001924 <HAL_ADC_Start_DMA+0x1d8>)
 800184c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001852:	4a35      	ldr	r2, [pc, #212]	; (8001928 <HAL_ADC_Start_DMA+0x1dc>)
 8001854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185a:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_ADC_Start_DMA+0x1e0>)
 800185c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001866:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001876:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001886:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	334c      	adds	r3, #76	; 0x4c
 8001892:	4619      	mov	r1, r3
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f000 fcd0 	bl	800223c <HAL_DMA_Start_IT>
 800189c:	4603      	mov	r3, r0
 800189e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10f      	bne.n	80018cc <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d129      	bne.n	800190e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	e020      	b.n	800190e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_ADC_Start_DMA+0x1e4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d11b      	bne.n	800190e <HAL_ADC_Start_DMA+0x1c2>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d114      	bne.n	800190e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	e00b      	b.n	800190e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f043 0210 	orr.w	r2, r3, #16
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f043 0201 	orr.w	r2, r3, #1
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800190e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	431bde83 	.word	0x431bde83
 8001920:	40012300 	.word	0x40012300
 8001924:	08001db9 	.word	0x08001db9
 8001928:	08001e73 	.word	0x08001e73
 800192c:	08001e8f 	.word	0x08001e8f
 8001930:	40012000 	.word	0x40012000

08001934 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1c>
 8001974:	2302      	movs	r3, #2
 8001976:	e113      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x244>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b09      	cmp	r3, #9
 8001986:	d925      	bls.n	80019d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68d9      	ldr	r1, [r3, #12]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	3b1e      	subs	r3, #30
 800199e:	2207      	movs	r2, #7
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43da      	mvns	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	400a      	ands	r2, r1
 80019ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68d9      	ldr	r1, [r3, #12]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	4603      	mov	r3, r0
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4403      	add	r3, r0
 80019c6:	3b1e      	subs	r3, #30
 80019c8:	409a      	lsls	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	e022      	b.n	8001a1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6919      	ldr	r1, [r3, #16]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	2207      	movs	r2, #7
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	400a      	ands	r2, r1
 80019f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6919      	ldr	r1, [r3, #16]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4403      	add	r3, r0
 8001a10:	409a      	lsls	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d824      	bhi.n	8001a6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	3b05      	subs	r3, #5
 8001a34:	221f      	movs	r2, #31
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	400a      	ands	r2, r1
 8001a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b05      	subs	r3, #5
 8001a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6a:	e04c      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d824      	bhi.n	8001abe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	3b23      	subs	r3, #35	; 0x23
 8001a86:	221f      	movs	r2, #31
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	400a      	ands	r2, r1
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b23      	subs	r3, #35	; 0x23
 8001ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
 8001abc:	e023      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	3b41      	subs	r3, #65	; 0x41
 8001ad0:	221f      	movs	r2, #31
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	400a      	ands	r2, r1
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	3b41      	subs	r3, #65	; 0x41
 8001afa:	fa00 f203 	lsl.w	r2, r0, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_ADC_ConfigChannel+0x250>)
 8001b08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <HAL_ADC_ConfigChannel+0x254>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10f      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d8>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b12      	cmp	r3, #18
 8001b1a:	d10b      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_ADC_ConfigChannel+0x254>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d12b      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x23a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_ADC_ConfigChannel+0x258>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d003      	beq.n	8001b50 <HAL_ADC_ConfigChannel+0x1f4>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b11      	cmp	r3, #17
 8001b4e:	d122      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_ADC_ConfigChannel+0x258>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d111      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_ADC_ConfigChannel+0x25c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_ADC_ConfigChannel+0x260>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	0c9a      	lsrs	r2, r3, #18
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40012300 	.word	0x40012300
 8001bb0:	40012000 	.word	0x40012000
 8001bb4:	10000012 	.word	0x10000012
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc8:	4b79      	ldr	r3, [pc, #484]	; (8001db0 <ADC_Init+0x1f0>)
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	021a      	lsls	r2, r3, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <ADC_Init+0x1f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d022      	beq.n	8001c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e00f      	b.n	8001cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cbc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0202 	bic.w	r2, r2, #2
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
 8001cd8:	005a      	lsls	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	3b01      	subs	r3, #1
 8001d18:	035a      	lsls	r2, r3, #13
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	e007      	b.n	8001d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	051a      	lsls	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6899      	ldr	r1, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d76:	025a      	lsls	r2, r3, #9
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	029a      	lsls	r2, r3, #10
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40012300 	.word	0x40012300
 8001db4:	0f000001 	.word	0x0f000001

08001db8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d13c      	bne.n	8001e4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d12b      	bne.n	8001e44 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d127      	bne.n	8001e44 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d119      	bne.n	8001e44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0220 	bic.w	r2, r2, #32
 8001e1e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7fe fe27 	bl	8000a98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e4a:	e00e      	b.n	8001e6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff fd75 	bl	8001948 <HAL_ADC_ErrorCallback>
}
 8001e5e:	e004      	b.n	8001e6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff fd57 	bl	8001934 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f043 0204 	orr.w	r2, r3, #4
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fd4a 	bl	8001948 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff3e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff31 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff faba 	bl	8001664 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e099      	b.n	8002230 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211c:	e00f      	b.n	800213e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800211e:	f7ff faa1 	bl	8001664 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b05      	cmp	r3, #5
 800212a:	d908      	bls.n	800213e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e078      	b.n	8002230 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e8      	bne.n	800211e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_DMA_Init+0x158>)
 8002158:	4013      	ands	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2b04      	cmp	r3, #4
 8002196:	d107      	bne.n	80021a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	4313      	orrs	r3, r2
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f023 0307 	bic.w	r3, r3, #7
 80021be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d117      	bne.n	8002202 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa6f 	bl	80026c8 <DMA_CheckFifoParam>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021fe:	2301      	movs	r3, #1
 8002200:	e016      	b.n	8002230 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fa26 	bl	800265c <DMA_CalcBaseAndBitshift>
 8002210:	4603      	mov	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	223f      	movs	r2, #63	; 0x3f
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	f010803f 	.word	0xf010803f

0800223c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_DMA_Start_IT+0x26>
 800225e:	2302      	movs	r3, #2
 8002260:	e040      	b.n	80022e4 <HAL_DMA_Start_IT+0xa8>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d12f      	bne.n	80022d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f9b8 	bl	8002600 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	223f      	movs	r2, #63	; 0x3f
 8002296:	409a      	lsls	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0216 	orr.w	r2, r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e005      	b.n	80022e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022de:	2302      	movs	r3, #2
 80022e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022f8:	4b8e      	ldr	r3, [pc, #568]	; (8002534 <HAL_DMA_IRQHandler+0x248>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a8e      	ldr	r2, [pc, #568]	; (8002538 <HAL_DMA_IRQHandler+0x24c>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0a9b      	lsrs	r3, r3, #10
 8002304:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	2208      	movs	r2, #8
 8002318:	409a      	lsls	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01a      	beq.n	8002358 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0204 	bic.w	r2, r2, #4
 800233e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2208      	movs	r2, #8
 8002346:	409a      	lsls	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	2201      	movs	r2, #1
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d012      	beq.n	800238e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2201      	movs	r2, #1
 800237c:	409a      	lsls	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	f043 0202 	orr.w	r2, r3, #2
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	2204      	movs	r2, #4
 8002394:	409a      	lsls	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	2204      	movs	r2, #4
 80023b2:	409a      	lsls	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f043 0204 	orr.w	r2, r3, #4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c8:	2210      	movs	r2, #16
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d043      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03c      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	2210      	movs	r2, #16
 80023e8:	409a      	lsls	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d018      	beq.n	800242e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d108      	bne.n	800241c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d024      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
 800241a:	e01f      	b.n	800245c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01b      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
 800242c:	e016      	b.n	800245c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0208 	bic.w	r2, r2, #8
 800244a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2220      	movs	r2, #32
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 808f 	beq.w	800258c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8087 	beq.w	800258c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	2220      	movs	r2, #32
 8002484:	409a      	lsls	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b05      	cmp	r3, #5
 8002494:	d136      	bne.n	8002504 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0216 	bic.w	r2, r2, #22
 80024a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_DMA_IRQHandler+0x1da>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	223f      	movs	r2, #63	; 0x3f
 80024dc:	409a      	lsls	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d07e      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
        }
        return;
 8002502:	e079      	b.n	80025f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01d      	beq.n	800254e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10d      	bne.n	800253c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	2b00      	cmp	r3, #0
 8002526:	d031      	beq.n	800258c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
 8002530:	e02c      	b.n	800258c <HAL_DMA_IRQHandler+0x2a0>
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000
 8002538:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
 800254c:	e01e      	b.n	800258c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0210 	bic.w	r2, r2, #16
 800256a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	2b00      	cmp	r3, #0
 8002592:	d032      	beq.n	80025fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d022      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2205      	movs	r2, #5
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	3301      	adds	r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d307      	bcc.n	80025d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f2      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x2cc>
 80025d2:	e000      	b.n	80025d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
 80025f6:	e000      	b.n	80025fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80025f8:	bf00      	nop
    }
  }
}
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800261c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d108      	bne.n	8002640 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800263e:	e007      	b.n	8002650 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3b10      	subs	r3, #16
 800266c:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <DMA_CalcBaseAndBitshift+0x64>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d909      	bls.n	800269e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002692:	f023 0303 	bic.w	r3, r3, #3
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	; 0x58
 800269c:	e007      	b.n	80026ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026a6:	f023 0303 	bic.w	r3, r3, #3
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	aaaaaaab 	.word	0xaaaaaaab
 80026c4:	080099dc 	.word	0x080099dc

080026c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11f      	bne.n	8002722 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d856      	bhi.n	8002796 <DMA_CheckFifoParam+0xce>
 80026e8:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <DMA_CheckFifoParam+0x28>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002713 	.word	0x08002713
 80026f8:	08002701 	.word	0x08002701
 80026fc:	08002797 	.word	0x08002797
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d046      	beq.n	800279a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002710:	e043      	b.n	800279a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800271a:	d140      	bne.n	800279e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002720:	e03d      	b.n	800279e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272a:	d121      	bne.n	8002770 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d837      	bhi.n	80027a2 <DMA_CheckFifoParam+0xda>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <DMA_CheckFifoParam+0x70>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002749 	.word	0x08002749
 800273c:	0800274f 	.word	0x0800274f
 8002740:	08002749 	.word	0x08002749
 8002744:	08002761 	.word	0x08002761
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      break;
 800274c:	e030      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d025      	beq.n	80027a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275e:	e022      	b.n	80027a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002768:	d11f      	bne.n	80027aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800276e:	e01c      	b.n	80027aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d903      	bls.n	800277e <DMA_CheckFifoParam+0xb6>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d003      	beq.n	8002784 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800277c:	e018      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
      break;
 8002782:	e015      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00e      	beq.n	80027ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e00b      	b.n	80027ae <DMA_CheckFifoParam+0xe6>
      break;
 8002796:	bf00      	nop
 8002798:	e00a      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 800279a:	bf00      	nop
 800279c:	e008      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 800279e:	bf00      	nop
 80027a0:	e006      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
 80027a4:	e004      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ae:	bf00      	nop
    }
  } 
  
  return status; 
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e159      	b.n	8002a90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f040 8148 	bne.w	8002a8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d005      	beq.n	8002812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280e:	2b02      	cmp	r3, #2
 8002810:	d130      	bne.n	8002874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0201 	and.w	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d017      	beq.n	80028b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d123      	bne.n	8002904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	220f      	movs	r2, #15
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a2 	beq.w	8002a8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <HAL_GPIO_Init+0x2e8>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a56      	ldr	r2, [pc, #344]	; (8002aa8 <HAL_GPIO_Init+0x2e8>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b54      	ldr	r3, [pc, #336]	; (8002aa8 <HAL_GPIO_Init+0x2e8>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002962:	4a52      	ldr	r2, [pc, #328]	; (8002aac <HAL_GPIO_Init+0x2ec>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a49      	ldr	r2, [pc, #292]	; (8002ab0 <HAL_GPIO_Init+0x2f0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d019      	beq.n	80029c2 <HAL_GPIO_Init+0x202>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a48      	ldr	r2, [pc, #288]	; (8002ab4 <HAL_GPIO_Init+0x2f4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0x1fe>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a47      	ldr	r2, [pc, #284]	; (8002ab8 <HAL_GPIO_Init+0x2f8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00d      	beq.n	80029ba <HAL_GPIO_Init+0x1fa>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a46      	ldr	r2, [pc, #280]	; (8002abc <HAL_GPIO_Init+0x2fc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <HAL_GPIO_Init+0x1f6>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a45      	ldr	r2, [pc, #276]	; (8002ac0 <HAL_GPIO_Init+0x300>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_GPIO_Init+0x1f2>
 80029ae:	2304      	movs	r3, #4
 80029b0:	e008      	b.n	80029c4 <HAL_GPIO_Init+0x204>
 80029b2:	2307      	movs	r3, #7
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x204>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e004      	b.n	80029c4 <HAL_GPIO_Init+0x204>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_Init+0x204>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x204>
 80029c2:	2300      	movs	r3, #0
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f002 0203 	and.w	r2, r2, #3
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	4093      	lsls	r3, r2
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d4:	4935      	ldr	r1, [pc, #212]	; (8002aac <HAL_GPIO_Init+0x2ec>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e2:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a06:	4a2f      	ldr	r2, [pc, #188]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a30:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a36:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a5a:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a84:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <HAL_GPIO_Init+0x304>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	f67f aea2 	bls.w	80027dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40013c00 	.word	0x40013c00

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae4:	e003      	b.n	8002aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	041a      	lsls	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b0c:	887a      	ldrh	r2, [r7, #2]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	041a      	lsls	r2, r3, #16
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	619a      	str	r2, [r3, #24]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af02      	add	r7, sp, #8
 8002b34:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e101      	b.n	8002d44 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f006 fbd0 	bl	8009300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6e:	d102      	bne.n	8002b76 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 ff23 	bl	80059c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7c1a      	ldrb	r2, [r3, #16]
 8002b88:	f88d 2000 	strb.w	r2, [sp]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b90:	f002 fe02 	bl	8005798 <USB_CoreInit>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0ce      	b.n	8002d44 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 ff1b 	bl	80059e8 <USB_SetCurrentMode>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0bf      	b.n	8002d44 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
 8002bc8:	e04a      	b.n	8002c60 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3315      	adds	r3, #21
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3314      	adds	r3, #20
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	b298      	uxth	r0, r3
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	332e      	adds	r3, #46	; 0x2e
 8002c06:	4602      	mov	r2, r0
 8002c08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	3318      	adds	r3, #24
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	331c      	adds	r3, #28
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3320      	adds	r3, #32
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3324      	adds	r3, #36	; 0x24
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	791b      	ldrb	r3, [r3, #4]
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3af      	bcc.n	8002bca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	e044      	b.n	8002cfa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3b5      	bcc.n	8002c70 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7c1a      	ldrb	r2, [r3, #16]
 8002d0c:	f88d 2000 	strb.w	r2, [sp]
 8002d10:	3304      	adds	r3, #4
 8002d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d14:	f002 feb4 	bl	8005a80 <USB_DevInit>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00c      	b.n	8002d44 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fefe 	bl	8006b3e <USB_DevDisconnect>

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_PCD_Start+0x1c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e022      	b.n	8002dae <HAL_PCD_Start+0x62>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 fe05 	bl	80059a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 feac 	bl	8006afc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002db6:	b590      	push	{r4, r7, lr}
 8002db8:	b08d      	sub	sp, #52	; 0x34
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 ff6a 	bl	8006ca6 <USB_GetMode>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f040 848c 	bne.w	80036f2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 fece 	bl	8006b80 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8482 	beq.w	80036f0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 febb 	bl	8006b80 <USB_ReadInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d107      	bne.n	8002e24 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f002 0202 	and.w	r2, r2, #2
 8002e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 fea9 	bl	8006b80 <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d161      	bne.n	8002efc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0210 	bic.w	r2, r2, #16
 8002e46:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	3304      	adds	r3, #4
 8002e66:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	0c5b      	lsrs	r3, r3, #17
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d124      	bne.n	8002ebe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d035      	beq.n	8002eec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6a38      	ldr	r0, [r7, #32]
 8002e94:	f003 fce0 	bl	8006858 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea4:	441a      	add	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eb6:	441a      	add	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	615a      	str	r2, [r3, #20]
 8002ebc:	e016      	b.n	8002eec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	0c5b      	lsrs	r3, r3, #17
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d110      	bne.n	8002eec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6a38      	ldr	r0, [r7, #32]
 8002ed6:	f003 fcbf 	bl	8006858 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee6:	441a      	add	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0210 	orr.w	r2, r2, #16
 8002efa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f003 fe3d 	bl	8006b80 <USB_ReadInterrupts>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f10:	f040 80a7 	bne.w	8003062 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 fe42 	bl	8006ba6 <USB_ReadDevAllOutEpInterrupt>
 8002f22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f24:	e099      	b.n	800305a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 808e 	beq.w	800304e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fe66 	bl	8006c0e <USB_ReadDevOutEPInterrupt>
 8002f42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fea4 	bl	8003cb0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2308      	movs	r3, #8
 8002f82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 ff7a 	bl	8003e80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d030      	beq.n	8003014 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d109      	bne.n	8002fd2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	78db      	ldrb	r3, [r3, #3]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d108      	bne.n	8003002 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f006 fa7b 	bl	80094f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300e:	461a      	mov	r2, r3
 8003010:	2302      	movs	r3, #2
 8003012:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302a:	461a      	mov	r2, r3
 800302c:	2320      	movs	r3, #32
 800302e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003046:	461a      	mov	r2, r3
 8003048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800304c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	3301      	adds	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	f47f af62 	bne.w	8002f26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fd8a 	bl	8006b80 <USB_ReadInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003076:	f040 80db 	bne.w	8003230 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fdab 	bl	8006bda <USB_ReadDevAllInEpInterrupt>
 8003084:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800308a:	e0cd      	b.n	8003228 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80c2 	beq.w	800321c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 fdd1 	bl	8006c4a <USB_ReadDevInEPInterrupt>
 80030a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d057      	beq.n	8003164 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	2201      	movs	r2, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69f9      	ldr	r1, [r7, #28]
 80030d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d4:	4013      	ands	r3, r2
 80030d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e4:	461a      	mov	r2, r3
 80030e6:	2301      	movs	r3, #1
 80030e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	799b      	ldrb	r3, [r3, #6]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d132      	bne.n	8003158 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3320      	adds	r3, #32
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4403      	add	r3, r0
 8003112:	331c      	adds	r3, #28
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4419      	add	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	3320      	adds	r3, #32
 8003128:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d113      	bne.n	8003158 <HAL_PCD_IRQHandler+0x3a2>
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3324      	adds	r3, #36	; 0x24
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d108      	bne.n	8003158 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003150:	461a      	mov	r2, r3
 8003152:	2101      	movs	r1, #1
 8003154:	f003 fdd8 	bl	8006d08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	b2db      	uxtb	r3, r3
 800315c:	4619      	mov	r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f006 f94f 	bl	8009402 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317a:	461a      	mov	r2, r3
 800317c:	2308      	movs	r3, #8
 800317e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003196:	461a      	mov	r2, r3
 8003198:	2310      	movs	r3, #16
 800319a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b2:	461a      	mov	r2, r3
 80031b4:	2340      	movs	r3, #64	; 0x40
 80031b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d023      	beq.n	800320a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c4:	6a38      	ldr	r0, [r7, #32]
 80031c6:	f002 fdbf 	bl	8005d48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	3310      	adds	r3, #16
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	78db      	ldrb	r3, [r3, #3]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d108      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2200      	movs	r2, #0
 80031ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f006 f992 	bl	800951c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003204:	461a      	mov	r2, r3
 8003206:	2302      	movs	r3, #2
 8003208:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fcbd 	bl	8003b96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	3301      	adds	r3, #1
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	2b00      	cmp	r3, #0
 800322c:	f47f af2e 	bne.w	800308c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f003 fca3 	bl	8006b80 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003244:	d122      	bne.n	800328c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003260:	2b01      	cmp	r3, #1
 8003262:	d108      	bne.n	8003276 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800326c:	2100      	movs	r1, #0
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fea4 	bl	8003fbc <HAL_PCDEx_LPM_Callback>
 8003274:	e002      	b.n	800327c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f006 f930 	bl	80094dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800328a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f003 fc75 	bl	8006b80 <USB_ReadInterrupts>
 8003296:	4603      	mov	r3, r0
 8003298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a0:	d112      	bne.n	80032c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d102      	bne.n	80032b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f006 f8ec 	bl	8009490 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032c6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fc57 	bl	8006b80 <USB_ReadInterrupts>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	f040 80b7 	bne.w	800344e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2110      	movs	r1, #16
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fd24 	bl	8005d48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003300:	2300      	movs	r3, #0
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003304:	e046      	b.n	8003394 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003312:	461a      	mov	r2, r3
 8003314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003318:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332a:	0151      	lsls	r1, r2, #5
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	440a      	add	r2, r1
 8003330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003334:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003338:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	461a      	mov	r2, r3
 8003348:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800334c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	440a      	add	r2, r1
 8003364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800336c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337e:	0151      	lsls	r1, r2, #5
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	440a      	add	r2, r1
 8003384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003388:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800338c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	3301      	adds	r3, #1
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	791b      	ldrb	r3, [r3, #4]
 8003398:	461a      	mov	r2, r3
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	4293      	cmp	r3, r2
 800339e:	d3b2      	bcc.n	8003306 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7bdb      	ldrb	r3, [r3, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d016      	beq.n	80033ea <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033cc:	f043 030b 	orr.w	r3, r3, #11
 80033d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e2:	f043 030b 	orr.w	r3, r3, #11
 80033e6:	6453      	str	r3, [r2, #68]	; 0x44
 80033e8:	e015      	b.n	8003416 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033fc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003400:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003410:	f043 030b 	orr.w	r3, r3, #11
 8003414:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003424:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003428:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003438:	461a      	mov	r2, r3
 800343a:	f003 fc65 	bl	8006d08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800344c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fb94 	bl	8006b80 <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003462:	d123      	bne.n	80034ac <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fc2a 	bl	8006cc2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fce1 	bl	8005e3a <USB_GetDevSpeed>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681c      	ldr	r4, [r3, #0]
 8003484:	f001 f9ca 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8003488:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800348e:	461a      	mov	r2, r3
 8003490:	4620      	mov	r0, r4
 8003492:	f002 f9e5 	bl	8005860 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f005 ffdb 	bl	8009452 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fb65 	bl	8006b80 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d10a      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f005 ffb8 	bl	8009436 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 0208 	and.w	r2, r2, #8
 80034d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fb50 	bl	8006b80 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d123      	bne.n	8003532 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f6:	2301      	movs	r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	e014      	b.n	8003526 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4619      	mov	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fb0a 	bl	8003b34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	3301      	adds	r3, #1
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	4293      	cmp	r3, r2
 8003530:	d3e4      	bcc.n	80034fc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f003 fb22 	bl	8006b80 <USB_ReadInterrupts>
 800353c:	4603      	mov	r3, r0
 800353e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003546:	d13c      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	e02b      	b.n	80035a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3318      	adds	r3, #24
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d115      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003574:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	da12      	bge.n	80035a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3317      	adds	r3, #23
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 faca 	bl	8003b34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	3301      	adds	r3, #1
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	791b      	ldrb	r3, [r3, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d3cd      	bcc.n	800354e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 fada 	bl	8006b80 <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d6:	d156      	bne.n	8003686 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d8:	2301      	movs	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
 80035dc:	e045      	b.n	800366a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d12e      	bne.n	8003664 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003606:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003608:	2b00      	cmp	r3, #0
 800360a:	da2b      	bge.n	8003664 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	0c1a      	lsrs	r2, r3, #16
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003616:	4053      	eors	r3, r2
 8003618:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800361c:	2b00      	cmp	r3, #0
 800361e:	d121      	bne.n	8003664 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003660:	6053      	str	r3, [r2, #4]
            break;
 8003662:	e008      	b.n	8003676 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	3301      	adds	r3, #1
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	791b      	ldrb	r3, [r3, #4]
 800366e:	461a      	mov	r2, r3
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	4293      	cmp	r3, r2
 8003674:	d3b3      	bcc.n	80035de <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fa78 	bl	8006b80 <USB_ReadInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369a:	d10a      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f005 ff4f 	bl	8009540 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f003 fa62 	bl	8006b80 <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d115      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f005 ff3f 	bl	800955c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	e000      	b.n	80036f2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80036f0:	bf00      	nop
    }
  }
}
 80036f2:	3734      	adds	r7, #52	; 0x34
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd90      	pop	{r4, r7, pc}

080036f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_PCD_SetAddress+0x1a>
 800370e:	2302      	movs	r3, #2
 8003710:	e012      	b.n	8003738 <HAL_PCD_SetAddress+0x40>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f003 f9c1 	bl	8006ab0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	70fb      	strb	r3, [r7, #3]
 8003752:	460b      	mov	r3, r1
 8003754:	803b      	strh	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800375e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003762:	2b00      	cmp	r3, #0
 8003764:	da0f      	bge.n	8003786 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	f003 020f 	and.w	r2, r3, #15
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	3310      	adds	r3, #16
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	3304      	adds	r3, #4
 800377c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	705a      	strb	r2, [r3, #1]
 8003784:	e00f      	b.n	80037a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	3304      	adds	r3, #4
 800379e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80037b2:	883b      	ldrh	r3, [r7, #0]
 80037b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	78ba      	ldrb	r2, [r7, #2]
 80037c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037d4:	78bb      	ldrb	r3, [r7, #2]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d102      	bne.n	80037e0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_PCD_EP_Open+0xae>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e00e      	b.n	800380c <HAL_PCD_EP_Open+0xcc>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fb41 	bl	8005e84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800380a:	7afb      	ldrb	r3, [r7, #11]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003824:	2b00      	cmp	r3, #0
 8003826:	da0f      	bge.n	8003848 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	f003 020f 	and.w	r2, r3, #15
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	3310      	adds	r3, #16
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	705a      	strb	r2, [r3, #1]
 8003846:	e00f      	b.n	8003868 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	3304      	adds	r3, #4
 8003860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_PCD_EP_Close+0x6e>
 800387e:	2302      	movs	r3, #2
 8003880:	e00e      	b.n	80038a0 <HAL_PCD_EP_Close+0x8c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68f9      	ldr	r1, [r7, #12]
 8003890:	4618      	mov	r0, r3
 8003892:	f002 fb7f 	bl	8005f94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	460b      	mov	r3, r1
 80038b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	7afb      	ldrb	r3, [r7, #11]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ea:	7afb      	ldrb	r3, [r7, #11]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	799b      	ldrb	r3, [r3, #6]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d102      	bne.n	8003904 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	799b      	ldrb	r3, [r3, #6]
 800390c:	461a      	mov	r2, r3
 800390e:	6979      	ldr	r1, [r7, #20]
 8003910:	f002 fc1c 	bl	800614c <USB_EPStartXfer>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003940:	681b      	ldr	r3, [r3, #0]
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	460b      	mov	r3, r1
 800395c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	3310      	adds	r3, #16
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2201      	movs	r2, #1
 800398c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800398e:	7afb      	ldrb	r3, [r7, #11]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	b2da      	uxtb	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	799b      	ldrb	r3, [r3, #6]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d102      	bne.n	80039a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	799b      	ldrb	r3, [r3, #6]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	f002 fbca 	bl	800614c <USB_EPStartXfer>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	7912      	ldrb	r2, [r2, #4]
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e04f      	b.n	8003a80 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da0f      	bge.n	8003a08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	3310      	adds	r3, #16
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	705a      	strb	r2, [r3, #1]
 8003a06:	e00d      	b.n	8003a24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_PCD_EP_SetStall+0x82>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e01d      	b.n	8003a80 <HAL_PCD_EP_SetStall+0xbe>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 ff58 	bl	8006908 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	7999      	ldrb	r1, [r3, #6]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a70:	461a      	mov	r2, r3
 8003a72:	f003 f949 	bl	8006d08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	7912      	ldrb	r2, [r2, #4]
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e042      	b.n	8003b2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da0f      	bge.n	8003ace <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	3310      	adds	r3, #16
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	705a      	strb	r2, [r3, #1]
 8003acc:	e00f      	b.n	8003aee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_PCD_EP_ClrStall+0x86>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e00e      	b.n	8003b2c <HAL_PCD_EP_ClrStall+0xa4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f002 ff61 	bl	80069e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da0c      	bge.n	8003b62 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	f003 020f 	and.w	r2, r3, #15
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	3310      	adds	r3, #16
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e00c      	b.n	8003b7c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	f003 020f 	and.w	r2, r3, #15
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68f9      	ldr	r1, [r7, #12]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f002 fd80 	bl	8006688 <USB_EPStopXfer>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b08a      	sub	sp, #40	; 0x28
 8003b9a:	af02      	add	r7, sp, #8
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	3310      	adds	r3, #16
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	3304      	adds	r3, #4
 8003bbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d901      	bls.n	8003bce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e06b      	b.n	8003ca6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d902      	bls.n	8003bea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3303      	adds	r3, #3
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bf2:	e02a      	b.n	8003c4a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d902      	bls.n	8003c10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3303      	adds	r3, #3
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68d9      	ldr	r1, [r3, #12]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6978      	ldr	r0, [r7, #20]
 8003c2e:	f002 fdd5 	bl	80067dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	441a      	add	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	441a      	add	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d809      	bhi.n	8003c74 <PCD_WriteEmptyTxFifo+0xde>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d203      	bcs.n	8003c74 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1bf      	bne.n	8003bf4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d811      	bhi.n	8003ca4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	6939      	ldr	r1, [r7, #16]
 8003c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	333c      	adds	r3, #60	; 0x3c
 8003cc8:	3304      	adds	r3, #4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	799b      	ldrb	r3, [r3, #6]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d17b      	bne.n	8003dde <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4a61      	ldr	r2, [pc, #388]	; (8003e78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	f240 80b9 	bls.w	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80b3 	beq.w	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	461a      	mov	r2, r3
 8003d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d18:	6093      	str	r3, [r2, #8]
 8003d1a:	e0a7      	b.n	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	461a      	mov	r2, r3
 8003d34:	2320      	movs	r3, #32
 8003d36:	6093      	str	r3, [r2, #8]
 8003d38:	e098      	b.n	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f040 8093 	bne.w	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	; (8003e78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d90f      	bls.n	8003d6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	461a      	mov	r2, r3
 8003d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6a:	6093      	str	r3, [r2, #8]
 8003d6c:	e07e      	b.n	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	3304      	adds	r3, #4
 8003d82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	0159      	lsls	r1, r3, #5
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	440b      	add	r3, r1
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d114      	bne.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003db8:	461a      	mov	r2, r3
 8003dba:	2101      	movs	r1, #1
 8003dbc:	f002 ffa4 	bl	8006d08 <USB_EP0_OutStart>
 8003dc0:	e006      	b.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	441a      	add	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f005 faf8 	bl	80093cc <HAL_PCD_DataOutStageCallback>
 8003ddc:	e046      	b.n	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d124      	bne.n	8003e30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	6093      	str	r3, [r2, #8]
 8003e04:	e032      	b.n	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2320      	movs	r3, #32
 8003e20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f005 facf 	bl	80093cc <HAL_PCD_DataOutStageCallback>
 8003e2e:	e01d      	b.n	8003e6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d114      	bne.n	8003e60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d108      	bne.n	8003e60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f002 ff54 	bl	8006d08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f005 fab0 	bl	80093cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	4f54300a 	.word	0x4f54300a
 8003e7c:	4f54310a 	.word	0x4f54310a

08003e80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	333c      	adds	r3, #60	; 0x3c
 8003e98:	3304      	adds	r3, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d90e      	bls.n	8003ed4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f005 fa67 	bl	80093a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d90c      	bls.n	8003efc <PCD_EP_OutSetupPacket_int+0x7c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	799b      	ldrb	r3, [r3, #6]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d108      	bne.n	8003efc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	f002 ff06 	bl	8006d08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	4f54300a 	.word	0x4f54300a

08003f0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d107      	bne.n	8003f3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f2a:	883b      	ldrh	r3, [r7, #0]
 8003f2c:	0419      	lsls	r1, r3, #16
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
 8003f38:	e028      	b.n	8003f8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e00d      	b.n	8003f6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	3340      	adds	r3, #64	; 0x40
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	3301      	adds	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3ec      	bcc.n	8003f4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f74:	883b      	ldrh	r3, [r7, #0]
 8003f76:	0418      	lsls	r0, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6819      	ldr	r1, [r3, #0]
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	4302      	orrs	r2, r0
 8003f84:	3340      	adds	r3, #64	; 0x40
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e267      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d075      	beq.n	80040de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ff2:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d00c      	beq.n	8004018 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffe:	4b85      	ldr	r3, [pc, #532]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004006:	2b08      	cmp	r3, #8
 8004008:	d112      	bne.n	8004030 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400a:	4b82      	ldr	r3, [pc, #520]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004016:	d10b      	bne.n	8004030 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	4b7e      	ldr	r3, [pc, #504]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d05b      	beq.n	80040dc <HAL_RCC_OscConfig+0x108>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d157      	bne.n	80040dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e242      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d106      	bne.n	8004048 <HAL_RCC_OscConfig+0x74>
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a75      	ldr	r2, [pc, #468]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e01d      	b.n	8004084 <HAL_RCC_OscConfig+0xb0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x98>
 8004052:	4b70      	ldr	r3, [pc, #448]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6f      	ldr	r2, [pc, #444]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b6d      	ldr	r3, [pc, #436]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6c      	ldr	r2, [pc, #432]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0xb0>
 800406c:	4b69      	ldr	r3, [pc, #420]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a68      	ldr	r2, [pc, #416]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b66      	ldr	r3, [pc, #408]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a65      	ldr	r2, [pc, #404]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 800407e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fd faea 	bl	8001664 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fd fae6 	bl	8001664 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e207      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0xc0>
 80040b2:	e014      	b.n	80040de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd fad6 	bl	8001664 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fd fad2 	bl	8001664 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1f3      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ce:	4b51      	ldr	r3, [pc, #324]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0xe8>
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d063      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ea:	4b4a      	ldr	r3, [pc, #296]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f6:	4b47      	ldr	r3, [pc, #284]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d11c      	bne.n	800413c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004102:	4b44      	ldr	r3, [pc, #272]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d116      	bne.n	800413c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	4b41      	ldr	r3, [pc, #260]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_RCC_OscConfig+0x152>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1c7      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4937      	ldr	r1, [pc, #220]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	e03a      	b.n	80041b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004144:	4b34      	ldr	r3, [pc, #208]	; (8004218 <HAL_RCC_OscConfig+0x244>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fd fa8b 	bl	8001664 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004152:	f7fd fa87 	bl	8001664 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1a8      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004164:	4b2b      	ldr	r3, [pc, #172]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4925      	ldr	r1, [pc, #148]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004186:	4b24      	ldr	r3, [pc, #144]	; (8004218 <HAL_RCC_OscConfig+0x244>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fa6a 	bl	8001664 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004194:	f7fd fa66 	bl	8001664 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e187      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d036      	beq.n	800422c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_RCC_OscConfig+0x248>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd fa4a 	bl	8001664 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fd fa46 	bl	8001664 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e167      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_OscConfig+0x240>)
 80041e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x200>
 80041f2:	e01b      	b.n	800422c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <HAL_RCC_OscConfig+0x248>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fd fa33 	bl	8001664 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	e00e      	b.n	8004220 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004202:	f7fd fa2f 	bl	8001664 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d907      	bls.n	8004220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e150      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
 8004214:	40023800 	.word	0x40023800
 8004218:	42470000 	.word	0x42470000
 800421c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	4b88      	ldr	r3, [pc, #544]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ea      	bne.n	8004202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8097 	beq.w	8004368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4b81      	ldr	r3, [pc, #516]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	4b7d      	ldr	r3, [pc, #500]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a7c      	ldr	r2, [pc, #496]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
 800425a:	4b7a      	ldr	r3, [pc, #488]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426a:	4b77      	ldr	r3, [pc, #476]	; (8004448 <HAL_RCC_OscConfig+0x474>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d118      	bne.n	80042a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004276:	4b74      	ldr	r3, [pc, #464]	; (8004448 <HAL_RCC_OscConfig+0x474>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a73      	ldr	r2, [pc, #460]	; (8004448 <HAL_RCC_OscConfig+0x474>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004282:	f7fd f9ef 	bl	8001664 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428a:	f7fd f9eb 	bl	8001664 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e10c      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429c:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <HAL_RCC_OscConfig+0x474>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d106      	bne.n	80042be <HAL_RCC_OscConfig+0x2ea>
 80042b0:	4b64      	ldr	r3, [pc, #400]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	4a63      	ldr	r2, [pc, #396]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	6713      	str	r3, [r2, #112]	; 0x70
 80042bc:	e01c      	b.n	80042f8 <HAL_RCC_OscConfig+0x324>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b05      	cmp	r3, #5
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x30c>
 80042c6:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a5e      	ldr	r2, [pc, #376]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042cc:	f043 0304 	orr.w	r3, r3, #4
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
 80042d2:	4b5c      	ldr	r3, [pc, #368]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a5b      	ldr	r2, [pc, #364]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6713      	str	r3, [r2, #112]	; 0x70
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0x324>
 80042e0:	4b58      	ldr	r3, [pc, #352]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	4a57      	ldr	r2, [pc, #348]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	6713      	str	r3, [r2, #112]	; 0x70
 80042ec:	4b55      	ldr	r3, [pc, #340]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a54      	ldr	r2, [pc, #336]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f023 0304 	bic.w	r3, r3, #4
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fd f9b0 	bl	8001664 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fd f9ac 	bl	8001664 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0cb      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431e:	4b49      	ldr	r3, [pc, #292]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ee      	beq.n	8004308 <HAL_RCC_OscConfig+0x334>
 800432a:	e014      	b.n	8004356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432c:	f7fd f99a 	bl	8001664 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fd f996 	bl	8001664 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0b5      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434a:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ee      	bne.n	8004334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d105      	bne.n	8004368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435c:	4b39      	ldr	r3, [pc, #228]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	4a38      	ldr	r2, [pc, #224]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 8004362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a1 	beq.w	80044b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004372:	4b34      	ldr	r3, [pc, #208]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d05c      	beq.n	8004438 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d141      	bne.n	800440a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b31      	ldr	r3, [pc, #196]	; (800444c <HAL_RCC_OscConfig+0x478>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fd f96a 	bl	8001664 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fd f966 	bl	8001664 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e087      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	4b27      	ldr	r3, [pc, #156]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	019b      	lsls	r3, r3, #6
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	3b01      	subs	r3, #1
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	491b      	ldr	r1, [pc, #108]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCC_OscConfig+0x478>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e2:	f7fd f93f 	bl	8001664 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fd f93b 	bl	8001664 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e05c      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x416>
 8004408:	e054      	b.n	80044b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <HAL_RCC_OscConfig+0x478>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fd f928 	bl	8001664 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fd f924 	bl	8001664 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e045      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_RCC_OscConfig+0x470>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x444>
 8004436:	e03d      	b.n	80044b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d107      	bne.n	8004450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e038      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
 8004444:	40023800 	.word	0x40023800
 8004448:	40007000 	.word	0x40007000
 800444c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_RCC_OscConfig+0x4ec>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d028      	beq.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d121      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d11a      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004488:	4293      	cmp	r3, r2
 800448a:	d111      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800

080044c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0cc      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b68      	ldr	r3, [pc, #416]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d90c      	bls.n	8004500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b65      	ldr	r3, [pc, #404]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b63      	ldr	r3, [pc, #396]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b8      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004518:	4b59      	ldr	r3, [pc, #356]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a58      	ldr	r2, [pc, #352]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004530:	4b53      	ldr	r3, [pc, #332]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a52      	ldr	r2, [pc, #328]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800453a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	494d      	ldr	r1, [pc, #308]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d044      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b47      	ldr	r3, [pc, #284]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d119      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e07f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d003      	beq.n	8004582 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457e:	2b03      	cmp	r3, #3
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e06f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e067      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4934      	ldr	r1, [pc, #208]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b4:	f7fd f856 	bl	8001664 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fd f852 	bl	8001664 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e04f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 020c 	and.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1eb      	bne.n	80045bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20c      	bcs.n	800460c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b22      	ldr	r3, [pc, #136]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b20      	ldr	r3, [pc, #128]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e032      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4916      	ldr	r1, [pc, #88]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	490e      	ldr	r1, [pc, #56]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800464a:	f000 f821 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 800464e:	4602      	mov	r2, r0
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	490a      	ldr	r1, [pc, #40]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	5ccb      	ldrb	r3, [r1, r3]
 800465e:	fa22 f303 	lsr.w	r3, r2, r3
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <HAL_RCC_ClockConfig+0x1c8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fc ffb6 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40023c00 	.word	0x40023c00
 8004680:	40023800 	.word	0x40023800
 8004684:	080099cc 	.word	0x080099cc
 8004688:	20000000 	.word	0x20000000
 800468c:	20000004 	.word	0x20000004

08004690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004694:	b090      	sub	sp, #64	; 0x40
 8004696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a8:	4b59      	ldr	r3, [pc, #356]	; (8004810 <HAL_RCC_GetSysClockFreq+0x180>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d00d      	beq.n	80046d0 <HAL_RCC_GetSysClockFreq+0x40>
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	f200 80a1 	bhi.w	80047fc <HAL_RCC_GetSysClockFreq+0x16c>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x34>
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0x3a>
 80046c2:	e09b      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c4:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCC_GetSysClockFreq+0x184>)
 80046c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046c8:	e09b      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ca:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_GetSysClockFreq+0x188>)
 80046cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046ce:	e098      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d0:	4b4f      	ldr	r3, [pc, #316]	; (8004810 <HAL_RCC_GetSysClockFreq+0x180>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046da:	4b4d      	ldr	r3, [pc, #308]	; (8004810 <HAL_RCC_GetSysClockFreq+0x180>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d028      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e6:	4b4a      	ldr	r3, [pc, #296]	; (8004810 <HAL_RCC_GetSysClockFreq+0x180>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	2200      	movs	r2, #0
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	627a      	str	r2, [r7, #36]	; 0x24
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046f8:	2100      	movs	r1, #0
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_GetSysClockFreq+0x188>)
 80046fc:	fb03 f201 	mul.w	r2, r3, r1
 8004700:	2300      	movs	r3, #0
 8004702:	fb00 f303 	mul.w	r3, r0, r3
 8004706:	4413      	add	r3, r2
 8004708:	4a43      	ldr	r2, [pc, #268]	; (8004818 <HAL_RCC_GetSysClockFreq+0x188>)
 800470a:	fba0 1202 	umull	r1, r2, r0, r2
 800470e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004710:	460a      	mov	r2, r1
 8004712:	62ba      	str	r2, [r7, #40]	; 0x28
 8004714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004716:	4413      	add	r3, r2
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471c:	2200      	movs	r2, #0
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	61fa      	str	r2, [r7, #28]
 8004722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004726:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800472a:	f7fb fd55 	bl	80001d8 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4613      	mov	r3, r2
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004736:	e053      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004738:	4b35      	ldr	r3, [pc, #212]	; (8004810 <HAL_RCC_GetSysClockFreq+0x180>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	2200      	movs	r2, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	617a      	str	r2, [r7, #20]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800474a:	f04f 0b00 	mov.w	fp, #0
 800474e:	4652      	mov	r2, sl
 8004750:	465b      	mov	r3, fp
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	0159      	lsls	r1, r3, #5
 800475c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004760:	0150      	lsls	r0, r2, #5
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	ebb2 080a 	subs.w	r8, r2, sl
 800476a:	eb63 090b 	sbc.w	r9, r3, fp
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800477a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800477e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004782:	ebb2 0408 	subs.w	r4, r2, r8
 8004786:	eb63 0509 	sbc.w	r5, r3, r9
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	00eb      	lsls	r3, r5, #3
 8004794:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004798:	00e2      	lsls	r2, r4, #3
 800479a:	4614      	mov	r4, r2
 800479c:	461d      	mov	r5, r3
 800479e:	eb14 030a 	adds.w	r3, r4, sl
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	eb45 030b 	adc.w	r3, r5, fp
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047b6:	4629      	mov	r1, r5
 80047b8:	028b      	lsls	r3, r1, #10
 80047ba:	4621      	mov	r1, r4
 80047bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047c0:	4621      	mov	r1, r4
 80047c2:	028a      	lsls	r2, r1, #10
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	2200      	movs	r2, #0
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	60fa      	str	r2, [r7, #12]
 80047d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047d4:	f7fb fd00 	bl	80001d8 <__aeabi_uldivmod>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4613      	mov	r3, r2
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_GetSysClockFreq+0x180>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	3301      	adds	r3, #1
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80047f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047fa:	e002      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCC_GetSysClockFreq+0x184>)
 80047fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004804:	4618      	mov	r0, r3
 8004806:	3740      	adds	r7, #64	; 0x40
 8004808:	46bd      	mov	sp, r7
 800480a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800
 8004814:	00f42400 	.word	0x00f42400
 8004818:	017d7840 	.word	0x017d7840

0800481c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <HAL_RCC_GetHCLKFreq+0x14>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000000 	.word	0x20000000

08004834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e041      	b.n	80048ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc fda0 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f000 fc3c 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d001      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e044      	b.n	8004976 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <HAL_TIM_Base_Start_IT+0xb0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x6c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004916:	d013      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x6c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <HAL_TIM_Base_Start_IT+0xb4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x6c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a19      	ldr	r2, [pc, #100]	; (800498c <HAL_TIM_Base_Start_IT+0xb8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x6c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a17      	ldr	r2, [pc, #92]	; (8004990 <HAL_TIM_Base_Start_IT+0xbc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x6c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a16      	ldr	r2, [pc, #88]	; (8004994 <HAL_TIM_Base_Start_IT+0xc0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d111      	bne.n	8004964 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b06      	cmp	r3, #6
 8004950:	d010      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0201 	orr.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	e007      	b.n	8004974 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40010000 	.word	0x40010000
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800
 8004990:	40000c00 	.word	0x40000c00
 8004994:	40014000 	.word	0x40014000

08004998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e041      	b.n	8004a2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f839 	bl	8004a36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f000 fb8a 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_TIM_PWM_Start+0x24>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e022      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x6a>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d109      	bne.n	8004a8a <HAL_TIM_PWM_Start+0x3e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e015      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x6a>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d109      	bne.n	8004aa4 <HAL_TIM_PWM_Start+0x58>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e008      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x6a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e068      	b.n	8004b90 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0x82>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004acc:	e013      	b.n	8004af6 <HAL_TIM_PWM_Start+0xaa>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0x92>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004adc:	e00b      	b.n	8004af6 <HAL_TIM_PWM_Start+0xaa>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_PWM_Start+0xa2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	e003      	b.n	8004af6 <HAL_TIM_PWM_Start+0xaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2201      	movs	r2, #1
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fda2 	bl	8005648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_TIM_PWM_Start+0x14c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d107      	bne.n	8004b1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <HAL_TIM_PWM_Start+0x14c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <HAL_TIM_PWM_Start+0x10e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d013      	beq.n	8004b5a <HAL_TIM_PWM_Start+0x10e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <HAL_TIM_PWM_Start+0x150>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_TIM_PWM_Start+0x10e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_TIM_PWM_Start+0x154>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_TIM_PWM_Start+0x10e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <HAL_TIM_PWM_Start+0x158>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_TIM_PWM_Start+0x10e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <HAL_TIM_PWM_Start+0x15c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d111      	bne.n	8004b7e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d010      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	e007      	b.n	8004b8e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40014000 	.word	0x40014000

08004bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d020      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01b      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0202 	mvn.w	r2, #2
 8004be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa5b 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004bfc:	e005      	b.n	8004c0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa4d 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fa5e 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d020      	beq.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0204 	mvn.w	r2, #4
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa35 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa27 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa38 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d020      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01b      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0208 	mvn.w	r2, #8
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa0f 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa01 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fa12 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0210 	mvn.w	r2, #16
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9e9 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9db 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f9ec 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0201 	mvn.w	r2, #1
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fb fea8 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fd24 	bl	8005784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00c      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9bd 	bl	80050da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d007      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0220 	mvn.w	r2, #32
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fcf6 	bl	8005770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e0ae      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	f200 809f 	bhi.w	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dba:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004ef9 	.word	0x08004ef9
 8004dc8:	08004ef9 	.word	0x08004ef9
 8004dcc:	08004ef9 	.word	0x08004ef9
 8004dd0:	08004e35 	.word	0x08004e35
 8004dd4:	08004ef9 	.word	0x08004ef9
 8004dd8:	08004ef9 	.word	0x08004ef9
 8004ddc:	08004ef9 	.word	0x08004ef9
 8004de0:	08004e77 	.word	0x08004e77
 8004de4:	08004ef9 	.word	0x08004ef9
 8004de8:	08004ef9 	.word	0x08004ef9
 8004dec:	08004ef9 	.word	0x08004ef9
 8004df0:	08004eb7 	.word	0x08004eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f9fe 	bl	80051fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0208 	orr.w	r2, r2, #8
 8004e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0204 	bic.w	r2, r2, #4
 8004e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6999      	ldr	r1, [r3, #24]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	619a      	str	r2, [r3, #24]
      break;
 8004e32:	e064      	b.n	8004efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fa44 	bl	80052c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	021a      	lsls	r2, r3, #8
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	619a      	str	r2, [r3, #24]
      break;
 8004e74:	e043      	b.n	8004efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fa8f 	bl	80053a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0208 	orr.w	r2, r2, #8
 8004e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0204 	bic.w	r2, r2, #4
 8004ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69d9      	ldr	r1, [r3, #28]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	61da      	str	r2, [r3, #28]
      break;
 8004eb4:	e023      	b.n	8004efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fad9 	bl	8005474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69d9      	ldr	r1, [r3, #28]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	021a      	lsls	r2, r3, #8
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	61da      	str	r2, [r3, #28]
      break;
 8004ef6:	e002      	b.n	8004efe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
      break;
 8004efc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIM_ConfigClockSource+0x1c>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e0b4      	b.n	8005096 <HAL_TIM_ConfigClockSource+0x186>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f64:	d03e      	beq.n	8004fe4 <HAL_TIM_ConfigClockSource+0xd4>
 8004f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6a:	f200 8087 	bhi.w	800507c <HAL_TIM_ConfigClockSource+0x16c>
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	f000 8086 	beq.w	8005082 <HAL_TIM_ConfigClockSource+0x172>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	d87f      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b70      	cmp	r3, #112	; 0x70
 8004f7e:	d01a      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d87b      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b60      	cmp	r3, #96	; 0x60
 8004f86:	d050      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x11a>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d877      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b50      	cmp	r3, #80	; 0x50
 8004f8e:	d03c      	beq.n	800500a <HAL_TIM_ConfigClockSource+0xfa>
 8004f90:	2b50      	cmp	r3, #80	; 0x50
 8004f92:	d873      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x16c>
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d058      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x13a>
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d86f      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x16c>
 8004f9c:	2b30      	cmp	r3, #48	; 0x30
 8004f9e:	d064      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x15a>
 8004fa0:	2b30      	cmp	r3, #48	; 0x30
 8004fa2:	d86b      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x16c>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d060      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x15a>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d867      	bhi.n	800507c <HAL_TIM_ConfigClockSource+0x16c>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d05c      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x15a>
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d05a      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x15a>
 8004fb4:	e062      	b.n	800507c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fc6:	f000 fb1f 	bl	8005608 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	609a      	str	r2, [r3, #8]
      break;
 8004fe2:	e04f      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ff4:	f000 fb08 	bl	8005608 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005006:	609a      	str	r2, [r3, #8]
      break;
 8005008:	e03c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	461a      	mov	r2, r3
 8005018:	f000 fa7c 	bl	8005514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2150      	movs	r1, #80	; 0x50
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fad5 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8005028:	e02c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005036:	461a      	mov	r2, r3
 8005038:	f000 fa9b 	bl	8005572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2160      	movs	r1, #96	; 0x60
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fac5 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8005048:	e01c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	461a      	mov	r2, r3
 8005058:	f000 fa5c 	bl	8005514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2140      	movs	r1, #64	; 0x40
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fab5 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 8005068:	e00c      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f000 faac 	bl	80055d2 <TIM_ITRx_SetConfig>
      break;
 800507a:	e003      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
      break;
 8005080:	e000      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <TIM_Base_SetConfig+0xf0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00f      	beq.n	8005128 <TIM_Base_SetConfig+0x38>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510e:	d00b      	beq.n	8005128 <TIM_Base_SetConfig+0x38>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a34      	ldr	r2, [pc, #208]	; (80051e4 <TIM_Base_SetConfig+0xf4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_Base_SetConfig+0x38>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a33      	ldr	r2, [pc, #204]	; (80051e8 <TIM_Base_SetConfig+0xf8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0x38>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a32      	ldr	r2, [pc, #200]	; (80051ec <TIM_Base_SetConfig+0xfc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a28      	ldr	r2, [pc, #160]	; (80051e0 <TIM_Base_SetConfig+0xf0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01b      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005148:	d017      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a25      	ldr	r2, [pc, #148]	; (80051e4 <TIM_Base_SetConfig+0xf4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <TIM_Base_SetConfig+0xf8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00f      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a23      	ldr	r2, [pc, #140]	; (80051ec <TIM_Base_SetConfig+0xfc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00b      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <TIM_Base_SetConfig+0x100>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a21      	ldr	r2, [pc, #132]	; (80051f4 <TIM_Base_SetConfig+0x104>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_Base_SetConfig+0x8a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a20      	ldr	r2, [pc, #128]	; (80051f8 <TIM_Base_SetConfig+0x108>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d108      	bne.n	800518c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <TIM_Base_SetConfig+0xf0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d103      	bne.n	80051ba <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f043 0204 	orr.w	r2, r3, #4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800

080051fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f023 0201 	bic.w	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0302 	bic.w	r3, r3, #2
 8005244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1c      	ldr	r2, [pc, #112]	; (80052c4 <TIM_OC1_SetConfig+0xc8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d10c      	bne.n	8005272 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0308 	bic.w	r3, r3, #8
 800525e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 0304 	bic.w	r3, r3, #4
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <TIM_OC1_SetConfig+0xc8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d111      	bne.n	800529e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	621a      	str	r2, [r3, #32]
}
 80052b8:	bf00      	nop
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40010000 	.word	0x40010000

080052c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 0210 	bic.w	r2, r3, #16
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f023 0320 	bic.w	r3, r3, #32
 8005312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a1e      	ldr	r2, [pc, #120]	; (800539c <TIM_OC2_SetConfig+0xd4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d10d      	bne.n	8005344 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005342:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a15      	ldr	r2, [pc, #84]	; (800539c <TIM_OC2_SetConfig+0xd4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d113      	bne.n	8005374 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40010000 	.word	0x40010000

080053a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <TIM_OC3_SetConfig+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10d      	bne.n	800541a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a14      	ldr	r2, [pc, #80]	; (8005470 <TIM_OC3_SetConfig+0xd0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d113      	bne.n	800544a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40010000 	.word	0x40010000

08005474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	031b      	lsls	r3, r3, #12
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a10      	ldr	r2, [pc, #64]	; (8005510 <TIM_OC4_SetConfig+0x9c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d109      	bne.n	80054e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	019b      	lsls	r3, r3, #6
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40010000 	.word	0x40010000

08005514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0201 	bic.w	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 030a 	bic.w	r3, r3, #10
 8005550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005572:	b480      	push	{r7}
 8005574:	b087      	sub	sp, #28
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f023 0210 	bic.w	r2, r3, #16
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800559c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	031b      	lsls	r3, r3, #12
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f043 0307 	orr.w	r3, r3, #7
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	431a      	orrs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4313      	orrs	r3, r2
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2201      	movs	r2, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	43db      	mvns	r3, r3
 800566a:	401a      	ands	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	431a      	orrs	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e050      	b.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1c      	ldr	r2, [pc, #112]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f8:	d013      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a18      	ldr	r2, [pc, #96]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a13      	ldr	r2, [pc, #76]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10c      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40014000 	.word	0x40014000

08005770 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005798:	b084      	sub	sp, #16
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	f107 001c 	add.w	r0, r7, #28
 80057a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d123      	bne.n	80057fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d105      	bne.n	80057ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 fae8 	bl	8006dc4 <USB_CoreReset>
 80057f4:	4603      	mov	r3, r0
 80057f6:	73fb      	strb	r3, [r7, #15]
 80057f8:	e01b      	b.n	8005832 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fadc 	bl	8006dc4 <USB_CoreReset>
 800580c:	4603      	mov	r3, r0
 800580e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005810:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
 8005824:	e005      	b.n	8005832 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005832:	7fbb      	ldrb	r3, [r7, #30]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d10b      	bne.n	8005850 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f043 0206 	orr.w	r2, r3, #6
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800585c:	b004      	add	sp, #16
 800585e:	4770      	bx	lr

08005860 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d165      	bne.n	8005940 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4a41      	ldr	r2, [pc, #260]	; (800597c <USB_SetTurnaroundTime+0x11c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d906      	bls.n	800588a <USB_SetTurnaroundTime+0x2a>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4a40      	ldr	r2, [pc, #256]	; (8005980 <USB_SetTurnaroundTime+0x120>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d202      	bcs.n	800588a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005884:	230f      	movs	r3, #15
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e062      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4a3c      	ldr	r2, [pc, #240]	; (8005980 <USB_SetTurnaroundTime+0x120>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d306      	bcc.n	80058a0 <USB_SetTurnaroundTime+0x40>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4a3b      	ldr	r2, [pc, #236]	; (8005984 <USB_SetTurnaroundTime+0x124>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d202      	bcs.n	80058a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800589a:	230e      	movs	r3, #14
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e057      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4a38      	ldr	r2, [pc, #224]	; (8005984 <USB_SetTurnaroundTime+0x124>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d306      	bcc.n	80058b6 <USB_SetTurnaroundTime+0x56>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4a37      	ldr	r2, [pc, #220]	; (8005988 <USB_SetTurnaroundTime+0x128>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d202      	bcs.n	80058b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058b0:	230d      	movs	r3, #13
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	e04c      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4a33      	ldr	r2, [pc, #204]	; (8005988 <USB_SetTurnaroundTime+0x128>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d306      	bcc.n	80058cc <USB_SetTurnaroundTime+0x6c>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4a32      	ldr	r2, [pc, #200]	; (800598c <USB_SetTurnaroundTime+0x12c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d802      	bhi.n	80058cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058c6:	230c      	movs	r3, #12
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e041      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4a2f      	ldr	r2, [pc, #188]	; (800598c <USB_SetTurnaroundTime+0x12c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d906      	bls.n	80058e2 <USB_SetTurnaroundTime+0x82>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4a2e      	ldr	r2, [pc, #184]	; (8005990 <USB_SetTurnaroundTime+0x130>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d802      	bhi.n	80058e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058dc:	230b      	movs	r3, #11
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	e036      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <USB_SetTurnaroundTime+0x130>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d906      	bls.n	80058f8 <USB_SetTurnaroundTime+0x98>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4a29      	ldr	r2, [pc, #164]	; (8005994 <USB_SetTurnaroundTime+0x134>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d802      	bhi.n	80058f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80058f2:	230a      	movs	r3, #10
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e02b      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4a26      	ldr	r2, [pc, #152]	; (8005994 <USB_SetTurnaroundTime+0x134>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d906      	bls.n	800590e <USB_SetTurnaroundTime+0xae>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4a25      	ldr	r2, [pc, #148]	; (8005998 <USB_SetTurnaroundTime+0x138>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d202      	bcs.n	800590e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005908:	2309      	movs	r3, #9
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e020      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <USB_SetTurnaroundTime+0x138>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d306      	bcc.n	8005924 <USB_SetTurnaroundTime+0xc4>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <USB_SetTurnaroundTime+0x13c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d802      	bhi.n	8005924 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800591e:	2308      	movs	r3, #8
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e015      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4a1d      	ldr	r2, [pc, #116]	; (800599c <USB_SetTurnaroundTime+0x13c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d906      	bls.n	800593a <USB_SetTurnaroundTime+0xda>
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <USB_SetTurnaroundTime+0x140>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d202      	bcs.n	800593a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005934:	2307      	movs	r3, #7
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e00a      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800593a:	2306      	movs	r3, #6
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e007      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005946:	2309      	movs	r3, #9
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e001      	b.n	8005950 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800594c:	2309      	movs	r3, #9
 800594e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	029b      	lsls	r3, r3, #10
 8005964:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	00d8acbf 	.word	0x00d8acbf
 8005980:	00e4e1c0 	.word	0x00e4e1c0
 8005984:	00f42400 	.word	0x00f42400
 8005988:	01067380 	.word	0x01067380
 800598c:	011a499f 	.word	0x011a499f
 8005990:	01312cff 	.word	0x01312cff
 8005994:	014ca43f 	.word	0x014ca43f
 8005998:	016e3600 	.word	0x016e3600
 800599c:	01a6ab1f 	.word	0x01a6ab1f
 80059a0:	01e84800 	.word	0x01e84800

080059a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f043 0201 	orr.w	r2, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d115      	bne.n	8005a36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a16:	200a      	movs	r0, #10
 8005a18:	f7fb fe30 	bl	800167c <HAL_Delay>
      ms += 10U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	330a      	adds	r3, #10
 8005a20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f001 f93f 	bl	8006ca6 <USB_GetMode>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d01e      	beq.n	8005a6c <USB_SetCurrentMode+0x84>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2bc7      	cmp	r3, #199	; 0xc7
 8005a32:	d9f0      	bls.n	8005a16 <USB_SetCurrentMode+0x2e>
 8005a34:	e01a      	b.n	8005a6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d115      	bne.n	8005a68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a48:	200a      	movs	r0, #10
 8005a4a:	f7fb fe17 	bl	800167c <HAL_Delay>
      ms += 10U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	330a      	adds	r3, #10
 8005a52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 f926 	bl	8006ca6 <USB_GetMode>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <USB_SetCurrentMode+0x84>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2bc7      	cmp	r3, #199	; 0xc7
 8005a64:	d9f0      	bls.n	8005a48 <USB_SetCurrentMode+0x60>
 8005a66:	e001      	b.n	8005a6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e005      	b.n	8005a78 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2bc8      	cmp	r3, #200	; 0xc8
 8005a70:	d101      	bne.n	8005a76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a80:	b084      	sub	sp, #16
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e009      	b.n	8005ab4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3340      	adds	r3, #64	; 0x40
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b0e      	cmp	r3, #14
 8005ab8:	d9f2      	bls.n	8005aa0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005aba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11c      	bne.n	8005afc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
 8005afa:	e00b      	b.n	8005b14 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10d      	bne.n	8005b44 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b30:	2100      	movs	r1, #0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f968 	bl	8005e08 <USB_SetDevSpeed>
 8005b38:	e008      	b.n	8005b4c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f963 	bl	8005e08 <USB_SetDevSpeed>
 8005b42:	e003      	b.n	8005b4c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b44:	2103      	movs	r1, #3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f95e 	bl	8005e08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b4c:	2110      	movs	r1, #16
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f8fa 	bl	8005d48 <USB_FlushTxFifo>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f924 	bl	8005dac <USB_FlushRxFifo>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	461a      	mov	r2, r3
 8005b76:	2300      	movs	r3, #0
 8005b78:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b80:	461a      	mov	r2, r3
 8005b82:	2300      	movs	r3, #0
 8005b84:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	e043      	b.n	8005c20 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bae:	d118      	bne.n	8005be2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e013      	b.n	8005bf4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e008      	b.n	8005bf4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	461a      	mov	r2, r3
 8005c02:	2300      	movs	r3, #0
 8005c04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c12:	461a      	mov	r2, r3
 8005c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c24:	461a      	mov	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d3b5      	bcc.n	8005b98 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	e043      	b.n	8005cba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c48:	d118      	bne.n	8005c7c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e013      	b.n	8005c8e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c72:	461a      	mov	r2, r3
 8005c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e008      	b.n	8005c8e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	461a      	mov	r2, r3
 8005cae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d3b5      	bcc.n	8005c32 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ce6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d105      	bne.n	8005cfc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f043 0210 	orr.w	r2, r3, #16
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <USB_DevInit+0x2c4>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d08:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f043 0208 	orr.w	r2, r3, #8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d2c:	f043 0304 	orr.w	r3, r3, #4
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d40:	b004      	add	sp, #16
 8005d42:	4770      	bx	lr
 8005d44:	803c3800 	.word	0x803c3800

08005d48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d62:	d901      	bls.n	8005d68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e01b      	b.n	8005da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	daf2      	bge.n	8005d56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	019b      	lsls	r3, r3, #6
 8005d78:	f043 0220 	orr.w	r2, r3, #32
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d8c:	d901      	bls.n	8005d92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e006      	b.n	8005da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d0f0      	beq.n	8005d80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005dc4:	d901      	bls.n	8005dca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e018      	b.n	8005dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	daf2      	bge.n	8005db8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2210      	movs	r2, #16
 8005dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005de8:	d901      	bls.n	8005dee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e006      	b.n	8005dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d0f0      	beq.n	8005ddc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b087      	sub	sp, #28
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0306 	and.w	r3, r3, #6
 8005e52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d102      	bne.n	8005e60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]
 8005e5e:	e00a      	b.n	8005e76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d002      	beq.n	8005e6c <USB_GetDevSpeed+0x32>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b06      	cmp	r3, #6
 8005e6a:	d102      	bne.n	8005e72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	75fb      	strb	r3, [r7, #23]
 8005e70:	e001      	b.n	8005e76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e72:	230f      	movs	r3, #15
 8005e74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d13a      	bne.n	8005f16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	68f9      	ldr	r1, [r7, #12]
 8005eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d155      	bne.n	8005f84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	791b      	ldrb	r3, [r3, #4]
 8005ef2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ef4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	059b      	lsls	r3, r3, #22
 8005efa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005efc:	4313      	orrs	r3, r2
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	e036      	b.n	8005f84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	2101      	movs	r1, #1
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f34:	4313      	orrs	r3, r2
 8005f36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d11a      	bne.n	8005f84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	791b      	ldrb	r3, [r3, #4]
 8005f68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
	...

08005f94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d161      	bne.n	8006074 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc6:	d11f      	bne.n	8006008 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fe6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	2101      	movs	r1, #1
 800601a:	fa01 f303 	lsl.w	r3, r1, r3
 800601e:	b29b      	uxth	r3, r3
 8006020:	43db      	mvns	r3, r3
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006028:	4013      	ands	r3, r2
 800602a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	2101      	movs	r1, #1
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	b29b      	uxth	r3, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	68f9      	ldr	r1, [r7, #12]
 8006048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800604c:	4013      	ands	r3, r2
 800604e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	0159      	lsls	r1, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	440b      	add	r3, r1
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	4619      	mov	r1, r3
 800606c:	4b35      	ldr	r3, [pc, #212]	; (8006144 <USB_DeactivateEndpoint+0x1b0>)
 800606e:	4013      	ands	r3, r2
 8006070:	600b      	str	r3, [r1, #0]
 8006072:	e060      	b.n	8006136 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800608a:	d11f      	bne.n	80060cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f303 	lsl.w	r3, r1, r3
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	43db      	mvns	r3, r3
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ec:	4013      	ands	r3, r2
 80060ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	2101      	movs	r1, #1
 8006102:	fa01 f303 	lsl.w	r3, r1, r3
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	43db      	mvns	r3, r3
 800610a:	68f9      	ldr	r1, [r7, #12]
 800610c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006110:	4013      	ands	r3, r2
 8006112:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	0159      	lsls	r1, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	440b      	add	r3, r1
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	4619      	mov	r1, r3
 8006130:	4b05      	ldr	r3, [pc, #20]	; (8006148 <USB_DeactivateEndpoint+0x1b4>)
 8006132:	4013      	ands	r3, r2
 8006134:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	ec337800 	.word	0xec337800
 8006148:	eff37800 	.word	0xeff37800

0800614c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b01      	cmp	r3, #1
 800616a:	f040 817f 	bne.w	800646c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d132      	bne.n	80061dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006190:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006194:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d4:	0cdb      	lsrs	r3, r3, #19
 80061d6:	04db      	lsls	r3, r3, #19
 80061d8:	6113      	str	r3, [r2, #16]
 80061da:	e097      	b.n	800630c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f6:	0cdb      	lsrs	r3, r3, #19
 80061f8:	04db      	lsls	r3, r3, #19
 80061fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800621a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800621e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d11a      	bne.n	800625c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	429a      	cmp	r2, r3
 8006230:	d903      	bls.n	800623a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006258:	6113      	str	r3, [r2, #16]
 800625a:	e044      	b.n	80062e6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4413      	add	r3, r2
 8006266:	1e5a      	subs	r2, r3, #1
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	8afb      	ldrh	r3, [r7, #22]
 8006282:	04d9      	lsls	r1, r3, #19
 8006284:	4ba4      	ldr	r3, [pc, #656]	; (8006518 <USB_EPStartXfer+0x3cc>)
 8006286:	400b      	ands	r3, r1
 8006288:	69b9      	ldr	r1, [r7, #24]
 800628a:	0148      	lsls	r0, r1, #5
 800628c:	69f9      	ldr	r1, [r7, #28]
 800628e:	4401      	add	r1, r0
 8006290:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006294:	4313      	orrs	r3, r2
 8006296:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	791b      	ldrb	r3, [r3, #4]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d122      	bne.n	80062e6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ba:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062be:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	8afb      	ldrh	r3, [r7, #22]
 80062d0:	075b      	lsls	r3, r3, #29
 80062d2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80062d6:	69b9      	ldr	r1, [r7, #24]
 80062d8:	0148      	lsls	r0, r1, #5
 80062da:	69f9      	ldr	r1, [r7, #28]
 80062dc:	4401      	add	r1, r0
 80062de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062e2:	4313      	orrs	r3, r2
 80062e4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fc:	69b9      	ldr	r1, [r7, #24]
 80062fe:	0148      	lsls	r0, r1, #5
 8006300:	69f9      	ldr	r1, [r7, #28]
 8006302:	4401      	add	r1, r0
 8006304:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006308:	4313      	orrs	r3, r2
 800630a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d14b      	bne.n	80063aa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	461a      	mov	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	791b      	ldrb	r3, [r3, #4]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d128      	bne.n	8006388 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d110      	bne.n	8006368 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e00f      	b.n	8006388 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006386:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	e166      	b.n	8006678 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063c8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	791b      	ldrb	r3, [r3, #4]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d015      	beq.n	80063fe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 814e 	beq.w	8006678 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	2101      	movs	r1, #1
 80063ee:	fa01 f303 	lsl.w	r3, r1, r3
 80063f2:	69f9      	ldr	r1, [r7, #28]
 80063f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063f8:	4313      	orrs	r3, r2
 80063fa:	634b      	str	r3, [r1, #52]	; 0x34
 80063fc:	e13c      	b.n	8006678 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d110      	bne.n	8006430 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e00f      	b.n	8006450 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	440a      	add	r2, r1
 8006446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68d9      	ldr	r1, [r3, #12]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	781a      	ldrb	r2, [r3, #0]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	b298      	uxth	r0, r3
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	4603      	mov	r3, r0
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f9b9 	bl	80067dc <USB_WritePacket>
 800646a:	e105      	b.n	8006678 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	440a      	add	r2, r1
 8006482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006486:	0cdb      	lsrs	r3, r3, #19
 8006488:	04db      	lsls	r3, r3, #19
 800648a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	0151      	lsls	r1, r2, #5
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	440a      	add	r2, r1
 80064a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064ae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d132      	bne.n	800651c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e4:	69b9      	ldr	r1, [r7, #24]
 80064e6:	0148      	lsls	r0, r1, #5
 80064e8:	69f9      	ldr	r1, [r7, #28]
 80064ea:	4401      	add	r1, r0
 80064ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064f0:	4313      	orrs	r3, r2
 80064f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006512:	6113      	str	r3, [r2, #16]
 8006514:	e062      	b.n	80065dc <USB_EPStartXfer+0x490>
 8006516:	bf00      	nop
 8006518:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d123      	bne.n	800656c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800653a:	69b9      	ldr	r1, [r7, #24]
 800653c:	0148      	lsls	r0, r1, #5
 800653e:	69f9      	ldr	r1, [r7, #28]
 8006540:	4401      	add	r1, r0
 8006542:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006546:	4313      	orrs	r3, r2
 8006548:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006568:	6113      	str	r3, [r2, #16]
 800656a:	e037      	b.n	80065dc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	4413      	add	r3, r2
 8006576:	1e5a      	subs	r2, r3, #1
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006580:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	8afa      	ldrh	r2, [r7, #22]
 8006588:	fb03 f202 	mul.w	r2, r3, r2
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	8afb      	ldrh	r3, [r7, #22]
 80065a0:	04d9      	lsls	r1, r3, #19
 80065a2:	4b38      	ldr	r3, [pc, #224]	; (8006684 <USB_EPStartXfer+0x538>)
 80065a4:	400b      	ands	r3, r1
 80065a6:	69b9      	ldr	r1, [r7, #24]
 80065a8:	0148      	lsls	r0, r1, #5
 80065aa:	69f9      	ldr	r1, [r7, #28]
 80065ac:	4401      	add	r1, r0
 80065ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065b2:	4313      	orrs	r3, r2
 80065b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065cc:	69b9      	ldr	r1, [r7, #24]
 80065ce:	0148      	lsls	r0, r1, #5
 80065d0:	69f9      	ldr	r1, [r7, #28]
 80065d2:	4401      	add	r1, r0
 80065d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065d8:	4313      	orrs	r3, r2
 80065da:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d10d      	bne.n	80065fe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	68d9      	ldr	r1, [r3, #12]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	460a      	mov	r2, r1
 80065fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	791b      	ldrb	r3, [r3, #4]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d128      	bne.n	8006658 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006612:	2b00      	cmp	r3, #0
 8006614:	d110      	bne.n	8006638 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006630:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e00f      	b.n	8006658 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006656:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006672:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006676:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	1ff80000 	.word	0x1ff80000

08006688 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	785b      	ldrb	r3, [r3, #1]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d14a      	bne.n	800673c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066be:	f040 8086 	bne.w	80067ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	7812      	ldrb	r2, [r2, #0]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006708:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3301      	adds	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f242 7210 	movw	r2, #10000	; 0x2710
 8006716:	4293      	cmp	r3, r2
 8006718:	d902      	bls.n	8006720 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	75fb      	strb	r3, [r7, #23]
          break;
 800671e:	e056      	b.n	80067ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d0e7      	beq.n	800670a <USB_EPStopXfer+0x82>
 800673a:	e048      	b.n	80067ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006754:	d13b      	bne.n	80067ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	7812      	ldrb	r2, [r2, #0]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006774:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006778:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	7812      	ldrb	r2, [r2, #0]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800679c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d902      	bls.n	80067b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]
          break;
 80067b2:	e00c      	b.n	80067ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067cc:	d0e7      	beq.n	800679e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067dc:	b480      	push	{r7}
 80067de:	b089      	sub	sp, #36	; 0x24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	460b      	mov	r3, r1
 80067ec:	71fb      	strb	r3, [r7, #7]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d123      	bne.n	800684a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006802:	88bb      	ldrh	r3, [r7, #4]
 8006804:	3303      	adds	r3, #3
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800680a:	2300      	movs	r3, #0
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	e018      	b.n	8006842 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	031a      	lsls	r2, r3, #12
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4413      	add	r3, r2
 8006818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681c:	461a      	mov	r2, r3
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	3301      	adds	r3, #1
 8006828:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	3301      	adds	r3, #1
 800682e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3301      	adds	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	3301      	adds	r3, #1
 800683a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	3301      	adds	r3, #1
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	429a      	cmp	r2, r3
 8006848:	d3e2      	bcc.n	8006810 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3724      	adds	r7, #36	; 0x24
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006858:	b480      	push	{r7}
 800685a:	b08b      	sub	sp, #44	; 0x2c
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	089b      	lsrs	r3, r3, #2
 8006872:	b29b      	uxth	r3, r3
 8006874:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800687e:	2300      	movs	r3, #0
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e014      	b.n	80068ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	3301      	adds	r3, #1
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	3301      	adds	r3, #1
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	3301      	adds	r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	3301      	adds	r3, #1
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	3301      	adds	r3, #1
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	6a3a      	ldr	r2, [r7, #32]
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d3e6      	bcc.n	8006884 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068b6:	8bfb      	ldrh	r3, [r7, #30]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01e      	beq.n	80068fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c6:	461a      	mov	r2, r3
 80068c8:	f107 0310 	add.w	r3, r7, #16
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	701a      	strb	r2, [r3, #0]
      i++;
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	3301      	adds	r3, #1
 80068e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	3301      	adds	r3, #1
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068ee:	8bfb      	ldrh	r3, [r7, #30]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068f4:	8bfb      	ldrh	r3, [r7, #30]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1ea      	bne.n	80068d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	372c      	adds	r7, #44	; 0x2c
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d12c      	bne.n	800697e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	db12      	blt.n	800695c <USB_EPSetStall+0x54>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00f      	beq.n	800695c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800695a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	e02b      	b.n	80069d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	db12      	blt.n	80069b6 <USB_EPSetStall+0xae>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00f      	beq.n	80069b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d128      	bne.n	8006a52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	791b      	ldrb	r3, [r3, #4]
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d003      	beq.n	8006a30 <USB_EPClearStall+0x4c>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	791b      	ldrb	r3, [r3, #4]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d138      	bne.n	8006aa2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	e027      	b.n	8006aa2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	791b      	ldrb	r3, [r3, #4]
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d003      	beq.n	8006a82 <USB_EPClearStall+0x9e>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	791b      	ldrb	r3, [r3, #4]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d10f      	bne.n	8006aa2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ace:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ad2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ae4:	68f9      	ldr	r1, [r7, #12]
 8006ae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b2a:	f023 0302 	bic.w	r3, r3, #2
 8006b2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b58:	f023 0303 	bic.w	r3, r3, #3
 8006b5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b6c:	f043 0302 	orr.w	r3, r3, #2
 8006b70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4013      	ands	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b98:	68fb      	ldr	r3, [r7, #12]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	0c1b      	lsrs	r3, r3, #16
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	b29b      	uxth	r3, r3
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7a:	01db      	lsls	r3, r3, #7
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4013      	ands	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c98:	68bb      	ldr	r3, [r7, #8]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cdc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ce0:	f023 0307 	bic.w	r3, r3, #7
 8006ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	460b      	mov	r3, r1
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	333c      	adds	r3, #60	; 0x3c
 8006d1e:	3304      	adds	r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <USB_EP0_OutStart+0xb8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d90a      	bls.n	8006d42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3c:	d101      	bne.n	8006d42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e037      	b.n	8006db2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d70:	f043 0318 	orr.w	r3, r3, #24
 8006d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10f      	bne.n	8006db0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006daa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006dae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	4f54300a 	.word	0x4f54300a

08006dc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ddc:	d901      	bls.n	8006de2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e022      	b.n	8006e28 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	daf2      	bge.n	8006dd0 <USB_CoreReset+0xc>

  count = 10U;
 8006dea:	230a      	movs	r3, #10
 8006dec:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006dee:	e002      	b.n	8006df6 <USB_CoreReset+0x32>
  {
    count--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f9      	bne.n	8006df0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f043 0201 	orr.w	r2, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e14:	d901      	bls.n	8006e1a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e006      	b.n	8006e28 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d0f0      	beq.n	8006e08 <USB_CoreReset+0x44>

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e44:	f002 fd22 	bl	800988c <USBD_static_malloc>
 8006e48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d109      	bne.n	8006e64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32b0      	adds	r2, #176	; 0xb0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0d4      	b.n	800700e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e68:	2100      	movs	r1, #0
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f002 fd52 	bl	8009914 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32b0      	adds	r2, #176	; 0xb0
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32b0      	adds	r2, #176	; 0xb0
 8006e8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	7c1b      	ldrb	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d138      	bne.n	8006f0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e9c:	4b5e      	ldr	r3, [pc, #376]	; (8007018 <USBD_CDC_Init+0x1e4>)
 8006e9e:	7819      	ldrb	r1, [r3, #0]
 8006ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f002 fbcd 	bl	8009646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eac:	4b5a      	ldr	r3, [pc, #360]	; (8007018 <USBD_CDC_Init+0x1e4>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3323      	adds	r3, #35	; 0x23
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ec6:	4b55      	ldr	r3, [pc, #340]	; (800701c <USBD_CDC_Init+0x1e8>)
 8006ec8:	7819      	ldrb	r1, [r3, #0]
 8006eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ece:	2202      	movs	r2, #2
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f002 fbb8 	bl	8009646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ed6:	4b51      	ldr	r3, [pc, #324]	; (800701c <USBD_CDC_Init+0x1e8>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	f003 020f 	and.w	r2, r3, #15
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006eee:	2201      	movs	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ef2:	4b4b      	ldr	r3, [pc, #300]	; (8007020 <USBD_CDC_Init+0x1ec>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	f003 020f 	and.w	r2, r3, #15
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	331c      	adds	r3, #28
 8006f08:	2210      	movs	r2, #16
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e035      	b.n	8006f7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f0e:	4b42      	ldr	r3, [pc, #264]	; (8007018 <USBD_CDC_Init+0x1e4>)
 8006f10:	7819      	ldrb	r1, [r3, #0]
 8006f12:	2340      	movs	r3, #64	; 0x40
 8006f14:	2202      	movs	r2, #2
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f002 fb95 	bl	8009646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f1c:	4b3e      	ldr	r3, [pc, #248]	; (8007018 <USBD_CDC_Init+0x1e4>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 020f 	and.w	r2, r3, #15
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	3323      	adds	r3, #35	; 0x23
 8006f32:	2201      	movs	r2, #1
 8006f34:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f36:	4b39      	ldr	r3, [pc, #228]	; (800701c <USBD_CDC_Init+0x1e8>)
 8006f38:	7819      	ldrb	r1, [r3, #0]
 8006f3a:	2340      	movs	r3, #64	; 0x40
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f002 fb81 	bl	8009646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f44:	4b35      	ldr	r3, [pc, #212]	; (800701c <USBD_CDC_Init+0x1e8>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 020f 	and.w	r2, r3, #15
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f60:	4b2f      	ldr	r3, [pc, #188]	; (8007020 <USBD_CDC_Init+0x1ec>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	331c      	adds	r3, #28
 8006f76:	2210      	movs	r2, #16
 8006f78:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f7a:	4b29      	ldr	r3, [pc, #164]	; (8007020 <USBD_CDC_Init+0x1ec>)
 8006f7c:	7819      	ldrb	r1, [r3, #0]
 8006f7e:	2308      	movs	r3, #8
 8006f80:	2203      	movs	r2, #3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f002 fb5f 	bl	8009646 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f88:	4b25      	ldr	r3, [pc, #148]	; (8007020 <USBD_CDC_Init+0x1ec>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 020f 	and.w	r2, r3, #15
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3323      	adds	r3, #35	; 0x23
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	33b0      	adds	r3, #176	; 0xb0
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e018      	b.n	800700e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7c1b      	ldrb	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <USBD_CDC_Init+0x1e8>)
 8006fe6:	7819      	ldrb	r1, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f002 fc16 	bl	8009824 <USBD_LL_PrepareReceive>
 8006ff8:	e008      	b.n	800700c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ffa:	4b08      	ldr	r3, [pc, #32]	; (800701c <USBD_CDC_Init+0x1e8>)
 8006ffc:	7819      	ldrb	r1, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007004:	2340      	movs	r3, #64	; 0x40
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f002 fc0c 	bl	8009824 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000093 	.word	0x20000093
 800701c:	20000094 	.word	0x20000094
 8007020:	20000095 	.word	0x20000095

08007024 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007030:	4b3a      	ldr	r3, [pc, #232]	; (800711c <USBD_CDC_DeInit+0xf8>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f002 fb2b 	bl	8009692 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800703c:	4b37      	ldr	r3, [pc, #220]	; (800711c <USBD_CDC_DeInit+0xf8>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f003 020f 	and.w	r2, r3, #15
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	440b      	add	r3, r1
 8007050:	3323      	adds	r3, #35	; 0x23
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007056:	4b32      	ldr	r3, [pc, #200]	; (8007120 <USBD_CDC_DeInit+0xfc>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f002 fb18 	bl	8009692 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007062:	4b2f      	ldr	r3, [pc, #188]	; (8007120 <USBD_CDC_DeInit+0xfc>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	f003 020f 	and.w	r2, r3, #15
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	f203 1363 	addw	r3, r3, #355	; 0x163
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800707e:	4b29      	ldr	r3, [pc, #164]	; (8007124 <USBD_CDC_DeInit+0x100>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f002 fb04 	bl	8009692 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800708a:	4b26      	ldr	r3, [pc, #152]	; (8007124 <USBD_CDC_DeInit+0x100>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	f003 020f 	and.w	r2, r3, #15
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	3323      	adds	r3, #35	; 0x23
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070a4:	4b1f      	ldr	r3, [pc, #124]	; (8007124 <USBD_CDC_DeInit+0x100>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	331c      	adds	r3, #28
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	32b0      	adds	r2, #176	; 0xb0
 80070c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01f      	beq.n	8007110 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	33b0      	adds	r3, #176	; 0xb0
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32b0      	adds	r2, #176	; 0xb0
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f002 fbd8 	bl	80098a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32b0      	adds	r2, #176	; 0xb0
 8007102:	2100      	movs	r1, #0
 8007104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000093 	.word	0x20000093
 8007120:	20000094 	.word	0x20000094
 8007124:	20000095 	.word	0x20000095

08007128 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	32b0      	adds	r2, #176	; 0xb0
 800713c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007140:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	e0bf      	b.n	80072d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007160:	2b00      	cmp	r3, #0
 8007162:	d050      	beq.n	8007206 <USBD_CDC_Setup+0xde>
 8007164:	2b20      	cmp	r3, #32
 8007166:	f040 80af 	bne.w	80072c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	88db      	ldrh	r3, [r3, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d03a      	beq.n	80071e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b25b      	sxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	da1b      	bge.n	80071b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	33b0      	adds	r3, #176	; 0xb0
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007192:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	88d2      	ldrh	r2, [r2, #6]
 8007198:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	88db      	ldrh	r3, [r3, #6]
 800719e:	2b07      	cmp	r3, #7
 80071a0:	bf28      	it	cs
 80071a2:	2307      	movcs	r3, #7
 80071a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	89fa      	ldrh	r2, [r7, #14]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fdab 	bl	8008d08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071b2:	e090      	b.n	80072d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	785a      	ldrb	r2, [r3, #1]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	88db      	ldrh	r3, [r3, #6]
 80071c2:	2b3f      	cmp	r3, #63	; 0x3f
 80071c4:	d803      	bhi.n	80071ce <USBD_CDC_Setup+0xa6>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	88db      	ldrh	r3, [r3, #6]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	e000      	b.n	80071d0 <USBD_CDC_Setup+0xa8>
 80071ce:	2240      	movs	r2, #64	; 0x40
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071d6:	6939      	ldr	r1, [r7, #16]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071de:	461a      	mov	r2, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fdc0 	bl	8008d66 <USBD_CtlPrepareRx>
      break;
 80071e6:	e076      	b.n	80072d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	33b0      	adds	r3, #176	; 0xb0
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	7850      	ldrb	r0, [r2, #1]
 80071fe:	2200      	movs	r2, #0
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	4798      	blx	r3
      break;
 8007204:	e067      	b.n	80072d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b0b      	cmp	r3, #11
 800720c:	d851      	bhi.n	80072b2 <USBD_CDC_Setup+0x18a>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <USBD_CDC_Setup+0xec>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007245 	.word	0x08007245
 8007218:	080072c1 	.word	0x080072c1
 800721c:	080072b3 	.word	0x080072b3
 8007220:	080072b3 	.word	0x080072b3
 8007224:	080072b3 	.word	0x080072b3
 8007228:	080072b3 	.word	0x080072b3
 800722c:	080072b3 	.word	0x080072b3
 8007230:	080072b3 	.word	0x080072b3
 8007234:	080072b3 	.word	0x080072b3
 8007238:	080072b3 	.word	0x080072b3
 800723c:	0800726f 	.word	0x0800726f
 8007240:	08007299 	.word	0x08007299
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b03      	cmp	r3, #3
 800724e:	d107      	bne.n	8007260 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007250:	f107 030a 	add.w	r3, r7, #10
 8007254:	2202      	movs	r2, #2
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 fd55 	bl	8008d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800725e:	e032      	b.n	80072c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fcd3 	bl	8008c0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007268:	2303      	movs	r3, #3
 800726a:	75fb      	strb	r3, [r7, #23]
          break;
 800726c:	e02b      	b.n	80072c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b03      	cmp	r3, #3
 8007278:	d107      	bne.n	800728a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800727a:	f107 030d 	add.w	r3, r7, #13
 800727e:	2201      	movs	r2, #1
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fd40 	bl	8008d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007288:	e01d      	b.n	80072c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fcbe 	bl	8008c0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007292:	2303      	movs	r3, #3
 8007294:	75fb      	strb	r3, [r7, #23]
          break;
 8007296:	e016      	b.n	80072c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d00f      	beq.n	80072c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fcb1 	bl	8008c0e <USBD_CtlError>
            ret = USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072b0:	e008      	b.n	80072c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 fcaa 	bl	8008c0e <USBD_CtlError>
          ret = USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	75fb      	strb	r3, [r7, #23]
          break;
 80072be:	e002      	b.n	80072c6 <USBD_CDC_Setup+0x19e>
          break;
 80072c0:	bf00      	nop
 80072c2:	e008      	b.n	80072d6 <USBD_CDC_Setup+0x1ae>
          break;
 80072c4:	bf00      	nop
      }
      break;
 80072c6:	e006      	b.n	80072d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fc9f 	bl	8008c0e <USBD_CtlError>
      ret = USBD_FAIL;
 80072d0:	2303      	movs	r3, #3
 80072d2:	75fb      	strb	r3, [r7, #23]
      break;
 80072d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32b0      	adds	r2, #176	; 0xb0
 80072fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007306:	2303      	movs	r3, #3
 8007308:	e065      	b.n	80073d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	32b0      	adds	r2, #176	; 0xb0
 8007314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	f003 020f 	and.w	r2, r3, #15
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	3314      	adds	r3, #20
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02f      	beq.n	8007394 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f003 020f 	and.w	r2, r3, #15
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	3314      	adds	r3, #20
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	f003 010f 	and.w	r1, r3, #15
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	460b      	mov	r3, r1
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	440b      	add	r3, r1
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4403      	add	r3, r0
 800735c:	331c      	adds	r3, #28
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	fbb2 f1f3 	udiv	r1, r2, r3
 8007364:	fb01 f303 	mul.w	r3, r1, r3
 8007368:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800736a:	2b00      	cmp	r3, #0
 800736c:	d112      	bne.n	8007394 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	f003 020f 	and.w	r2, r3, #15
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	440b      	add	r3, r1
 8007380:	3314      	adds	r3, #20
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007386:	78f9      	ldrb	r1, [r7, #3]
 8007388:	2300      	movs	r3, #0
 800738a:	2200      	movs	r2, #0
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f002 fa28 	bl	80097e2 <USBD_LL_Transmit>
 8007392:	e01f      	b.n	80073d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	33b0      	adds	r3, #176	; 0xb0
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d010      	beq.n	80073d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	33b0      	adds	r3, #176	; 0xb0
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	32b0      	adds	r2, #176	; 0xb0
 80073f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	32b0      	adds	r2, #176	; 0xb0
 8007404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800740c:	2303      	movs	r3, #3
 800740e:	e01a      	b.n	8007446 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f002 fa26 	bl	8009866 <USBD_LL_GetRxDataSize>
 800741a:	4602      	mov	r2, r0
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	33b0      	adds	r3, #176	; 0xb0
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007440:	4611      	mov	r1, r2
 8007442:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	32b0      	adds	r2, #176	; 0xb0
 8007460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007464:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	e025      	b.n	80074bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	33b0      	adds	r3, #176	; 0xb0
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01a      	beq.n	80074ba <USBD_CDC_EP0_RxReady+0x6c>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800748a:	2bff      	cmp	r3, #255	; 0xff
 800748c:	d015      	beq.n	80074ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	33b0      	adds	r3, #176	; 0xb0
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80074a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074ae:	b292      	uxth	r2, r2
 80074b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074cc:	2182      	movs	r1, #130	; 0x82
 80074ce:	4818      	ldr	r0, [pc, #96]	; (8007530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074d0:	f000 fd62 	bl	8007f98 <USBD_GetEpDesc>
 80074d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074d6:	2101      	movs	r1, #1
 80074d8:	4815      	ldr	r0, [pc, #84]	; (8007530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074da:	f000 fd5d 	bl	8007f98 <USBD_GetEpDesc>
 80074de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074e0:	2181      	movs	r1, #129	; 0x81
 80074e2:	4813      	ldr	r0, [pc, #76]	; (8007530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074e4:	f000 fd58 	bl	8007f98 <USBD_GetEpDesc>
 80074e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2210      	movs	r2, #16
 80074f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2200      	movs	r2, #0
 8007500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007504:	711a      	strb	r2, [r3, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007518:	711a      	strb	r2, [r3, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2243      	movs	r2, #67	; 0x43
 8007522:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000050 	.word	0x20000050

08007534 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800753c:	2182      	movs	r1, #130	; 0x82
 800753e:	4818      	ldr	r0, [pc, #96]	; (80075a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007540:	f000 fd2a 	bl	8007f98 <USBD_GetEpDesc>
 8007544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007546:	2101      	movs	r1, #1
 8007548:	4815      	ldr	r0, [pc, #84]	; (80075a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800754a:	f000 fd25 	bl	8007f98 <USBD_GetEpDesc>
 800754e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007550:	2181      	movs	r1, #129	; 0x81
 8007552:	4813      	ldr	r0, [pc, #76]	; (80075a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007554:	f000 fd20 	bl	8007f98 <USBD_GetEpDesc>
 8007558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2210      	movs	r2, #16
 8007564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d006      	beq.n	800757a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2200      	movs	r2, #0
 8007570:	711a      	strb	r2, [r3, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f042 0202 	orr.w	r2, r2, #2
 8007578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d006      	beq.n	800758e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	711a      	strb	r2, [r3, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f042 0202 	orr.w	r2, r2, #2
 800758c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2243      	movs	r2, #67	; 0x43
 8007592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	; (80075a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000050 	.word	0x20000050

080075a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075ac:	2182      	movs	r1, #130	; 0x82
 80075ae:	4818      	ldr	r0, [pc, #96]	; (8007610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075b0:	f000 fcf2 	bl	8007f98 <USBD_GetEpDesc>
 80075b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075b6:	2101      	movs	r1, #1
 80075b8:	4815      	ldr	r0, [pc, #84]	; (8007610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075ba:	f000 fced 	bl	8007f98 <USBD_GetEpDesc>
 80075be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075c0:	2181      	movs	r1, #129	; 0x81
 80075c2:	4813      	ldr	r0, [pc, #76]	; (8007610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075c4:	f000 fce8 	bl	8007f98 <USBD_GetEpDesc>
 80075c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2210      	movs	r2, #16
 80075d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d006      	beq.n	80075ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2200      	movs	r2, #0
 80075e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e4:	711a      	strb	r2, [r3, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d006      	beq.n	80075fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075f8:	711a      	strb	r2, [r3, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2243      	movs	r2, #67	; 0x43
 8007602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007604:	4b02      	ldr	r3, [pc, #8]	; (8007610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	20000050 	.word	0x20000050

08007614 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	220a      	movs	r2, #10
 8007620:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007622:	4b03      	ldr	r3, [pc, #12]	; (8007630 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	2000000c 	.word	0x2000000c

08007634 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	e009      	b.n	800765c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	33b0      	adds	r3, #176	; 0xb0
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	32b0      	adds	r2, #176	; 0xb0
 800767e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007682:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800768a:	2303      	movs	r3, #3
 800768c:	e008      	b.n	80076a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	32b0      	adds	r2, #176	; 0xb0
 80076c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e004      	b.n	80076da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	32b0      	adds	r2, #176	; 0xb0
 80076fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	e025      	b.n	800775a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007714:	2b00      	cmp	r3, #0
 8007716:	d11f      	bne.n	8007758 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2201      	movs	r2, #1
 800771c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007720:	4b10      	ldr	r3, [pc, #64]	; (8007764 <USBD_CDC_TransmitPacket+0x7c>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4403      	add	r3, r0
 800773a:	3314      	adds	r3, #20
 800773c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <USBD_CDC_TransmitPacket+0x7c>)
 8007740:	7819      	ldrb	r1, [r3, #0]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f002 f847 	bl	80097e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000093 	.word	0x20000093

08007768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	32b0      	adds	r2, #176	; 0xb0
 800777a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32b0      	adds	r2, #176	; 0xb0
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	e018      	b.n	80077c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7c1b      	ldrb	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800779e:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <USBD_CDC_ReceivePacket+0x68>)
 80077a0:	7819      	ldrb	r1, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f002 f839 	bl	8009824 <USBD_LL_PrepareReceive>
 80077b2:	e008      	b.n	80077c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <USBD_CDC_ReceivePacket+0x68>)
 80077b6:	7819      	ldrb	r1, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f002 f82f 	bl	8009824 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000094 	.word	0x20000094

080077d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e01f      	b.n	800782c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	79fa      	ldrb	r2, [r7, #7]
 800781e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f001 fea9 	bl	8009578 <USBD_LL_Init>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]

  return ret;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007848:	2303      	movs	r3, #3
 800784a:	e025      	b.n	8007898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	32ae      	adds	r2, #174	; 0xae
 800785e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00f      	beq.n	8007888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32ae      	adds	r2, #174	; 0xae
 8007872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	f107 020e 	add.w	r2, r7, #14
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	4602      	mov	r2, r0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 feb1 	bl	8009610 <USBD_LL_Start>
 80078ae:	4603      	mov	r3, r0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	4611      	mov	r1, r2
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	4611      	mov	r1, r2
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800792c:	2303      	movs	r3, #3
 800792e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f001 f924 	bl	8008b9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007960:	461a      	mov	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	2b02      	cmp	r3, #2
 8007974:	d01a      	beq.n	80079ac <USBD_LL_SetupStage+0x72>
 8007976:	2b02      	cmp	r3, #2
 8007978:	d822      	bhi.n	80079c0 <USBD_LL_SetupStage+0x86>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <USBD_LL_SetupStage+0x4a>
 800797e:	2b01      	cmp	r3, #1
 8007980:	d00a      	beq.n	8007998 <USBD_LL_SetupStage+0x5e>
 8007982:	e01d      	b.n	80079c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fb79 	bl	8008084 <USBD_StdDevReq>
 8007992:	4603      	mov	r3, r0
 8007994:	73fb      	strb	r3, [r7, #15]
      break;
 8007996:	e020      	b.n	80079da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fbe1 	bl	8008168 <USBD_StdItfReq>
 80079a6:	4603      	mov	r3, r0
 80079a8:	73fb      	strb	r3, [r7, #15]
      break;
 80079aa:	e016      	b.n	80079da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fc43 	bl	8008240 <USBD_StdEPReq>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73fb      	strb	r3, [r7, #15]
      break;
 80079be:	e00c      	b.n	80079da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fe7e 	bl	80096d0 <USBD_LL_StallEP>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]
      break;
 80079d8:	bf00      	nop
  }

  return ret;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	460b      	mov	r3, r1
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d177      	bne.n	8007aec <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	f040 80a1 	bne.w	8007b52 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	8992      	ldrh	r2, [r2, #12]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d91c      	bls.n	8007a56 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	8992      	ldrh	r2, [r2, #12]
 8007a24:	1a9a      	subs	r2, r3, r2
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	8992      	ldrh	r2, [r2, #12]
 8007a32:	441a      	add	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6919      	ldr	r1, [r3, #16]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	899b      	ldrh	r3, [r3, #12]
 8007a40:	461a      	mov	r2, r3
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	4293      	cmp	r3, r2
 8007a48:	bf38      	it	cc
 8007a4a:	4613      	movcc	r3, r2
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f001 f9aa 	bl	8008da8 <USBD_CtlContinueRx>
 8007a54:	e07d      	b.n	8007b52 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d014      	beq.n	8007a8e <USBD_LL_DataOutStage+0xaa>
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d81d      	bhi.n	8007aa4 <USBD_LL_DataOutStage+0xc0>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <USBD_LL_DataOutStage+0x8e>
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d003      	beq.n	8007a78 <USBD_LL_DataOutStage+0x94>
 8007a70:	e018      	b.n	8007aa4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75bb      	strb	r3, [r7, #22]
            break;
 8007a76:	e018      	b.n	8007aaa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4619      	mov	r1, r3
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fa6e 	bl	8007f64 <USBD_CoreFindIF>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a8c:	e00d      	b.n	8007aaa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	4619      	mov	r1, r3
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fa70 	bl	8007f7e <USBD_CoreFindEP>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	75bb      	strb	r3, [r7, #22]
            break;
 8007aa2:	e002      	b.n	8007aaa <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8007aa8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007aaa:	7dbb      	ldrb	r3, [r7, #22]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d119      	bne.n	8007ae4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d113      	bne.n	8007ae4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007abc:	7dba      	ldrb	r2, [r7, #22]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	32ae      	adds	r2, #174	; 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007acc:	7dba      	ldrb	r2, [r7, #22]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ad4:	7dba      	ldrb	r2, [r7, #22]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	32ae      	adds	r2, #174	; 0xae
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f001 f970 	bl	8008dca <USBD_CtlSendStatus>
 8007aea:	e032      	b.n	8007b52 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	4619      	mov	r1, r3
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 fa41 	bl	8007f7e <USBD_CoreFindEP>
 8007afc:	4603      	mov	r3, r0
 8007afe:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b00:	7dbb      	ldrb	r3, [r7, #22]
 8007b02:	2bff      	cmp	r3, #255	; 0xff
 8007b04:	d025      	beq.n	8007b52 <USBD_LL_DataOutStage+0x16e>
 8007b06:	7dbb      	ldrb	r3, [r7, #22]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d122      	bne.n	8007b52 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d117      	bne.n	8007b48 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b18:	7dba      	ldrb	r2, [r7, #22]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	32ae      	adds	r2, #174	; 0xae
 8007b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00f      	beq.n	8007b48 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007b28:	7dba      	ldrb	r2, [r7, #22]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b30:	7dba      	ldrb	r2, [r7, #22]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	32ae      	adds	r2, #174	; 0xae
 8007b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	7afa      	ldrb	r2, [r7, #11]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	4798      	blx	r3
 8007b44:	4603      	mov	r3, r0
 8007b46:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	e000      	b.n	8007b54 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	460b      	mov	r3, r1
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d178      	bne.n	8007c62 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3314      	adds	r3, #20
 8007b74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d163      	bne.n	8007c48 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	8992      	ldrh	r2, [r2, #12]
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d91c      	bls.n	8007bc6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	8992      	ldrh	r2, [r2, #12]
 8007b94:	1a9a      	subs	r2, r3, r2
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	8992      	ldrh	r2, [r2, #12]
 8007ba2:	441a      	add	r2, r3
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	6919      	ldr	r1, [r3, #16]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f001 f8c6 	bl	8008d44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f001 fe30 	bl	8009824 <USBD_LL_PrepareReceive>
 8007bc4:	e040      	b.n	8007c48 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	899b      	ldrh	r3, [r3, #12]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d11c      	bne.n	8007c0e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d316      	bcc.n	8007c0e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d20f      	bcs.n	8007c0e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f001 f8a6 	bl	8008d44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c00:	2300      	movs	r3, #0
 8007c02:	2200      	movs	r2, #0
 8007c04:	2100      	movs	r1, #0
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f001 fe0c 	bl	8009824 <USBD_LL_PrepareReceive>
 8007c0c:	e01c      	b.n	8007c48 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d10f      	bne.n	8007c3a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d009      	beq.n	8007c3a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c3a:	2180      	movs	r1, #128	; 0x80
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f001 fd47 	bl	80096d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f001 f8d4 	bl	8008df0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d03a      	beq.n	8007cc8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff fe30 	bl	80078b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c60:	e032      	b.n	8007cc8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f986 	bl	8007f7e <USBD_CoreFindEP>
 8007c72:	4603      	mov	r3, r0
 8007c74:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2bff      	cmp	r3, #255	; 0xff
 8007c7a:	d025      	beq.n	8007cc8 <USBD_LL_DataInStage+0x16c>
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d122      	bne.n	8007cc8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d11c      	bne.n	8007cc8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c8e:	7dfa      	ldrb	r2, [r7, #23]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	32ae      	adds	r2, #174	; 0xae
 8007c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d014      	beq.n	8007cc8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007c9e:	7dfa      	ldrb	r2, [r7, #23]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007ca6:	7dfa      	ldrb	r2, [r7, #23]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	32ae      	adds	r2, #174	; 0xae
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	7afa      	ldrb	r2, [r7, #11]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007cbe:	7dbb      	ldrb	r3, [r7, #22]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007cc4:	7dbb      	ldrb	r3, [r7, #22]
 8007cc6:	e000      	b.n	8007cca <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d014      	beq.n	8007d38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00e      	beq.n	8007d38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6852      	ldr	r2, [r2, #4]
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	4611      	mov	r1, r2
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d34:	2303      	movs	r3, #3
 8007d36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d38:	2340      	movs	r3, #64	; 0x40
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 fc81 	bl	8009646 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2240      	movs	r2, #64	; 0x40
 8007d50:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d54:	2340      	movs	r3, #64	; 0x40
 8007d56:	2200      	movs	r2, #0
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fc73 	bl	8009646 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2240      	movs	r2, #64	; 0x40
 8007d6c:	841a      	strh	r2, [r3, #32]

  return ret;
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d006      	beq.n	8007dba <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d106      	bne.n	8007df2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d110      	bne.n	8007e36 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00b      	beq.n	8007e36 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	32ae      	adds	r2, #174	; 0xae
 8007e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e01c      	b.n	8007e9c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d115      	bne.n	8007e9a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	32ae      	adds	r2, #174	; 0xae
 8007e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	32ae      	adds	r2, #174	; 0xae
 8007e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	4611      	mov	r1, r2
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	32ae      	adds	r2, #174	; 0xae
 8007eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e01c      	b.n	8007f00 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d115      	bne.n	8007efe <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	32ae      	adds	r2, #174	; 0xae
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32ae      	adds	r2, #174	; 0xae
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	78fa      	ldrb	r2, [r7, #3]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00e      	beq.n	8007f5a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6852      	ldr	r2, [r2, #4]
 8007f48:	b2d2      	uxtb	r2, r2
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	885b      	ldrh	r3, [r3, #2]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d920      	bls.n	8008002 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fc8:	e013      	b.n	8007ff2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fca:	f107 030a 	add.w	r3, r7, #10
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6978      	ldr	r0, [r7, #20]
 8007fd2:	f000 f81b 	bl	800800c <USBD_GetNextDesc>
 8007fd6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d108      	bne.n	8007ff2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	789b      	ldrb	r3, [r3, #2]
 8007fe8:	78fa      	ldrb	r2, [r7, #3]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d008      	beq.n	8008000 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	885b      	ldrh	r3, [r3, #2]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	897b      	ldrh	r3, [r7, #10]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d8e5      	bhi.n	8007fca <USBD_GetEpDesc+0x32>
 8007ffe:	e000      	b.n	8008002 <USBD_GetEpDesc+0x6a>
          break;
 8008000:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008002:	693b      	ldr	r3, [r7, #16]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	881a      	ldrh	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	4413      	add	r3, r2
 8008026:	b29a      	uxth	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4413      	add	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008038:	68fb      	ldr	r3, [r7, #12]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008046:	b480      	push	{r7}
 8008048:	b087      	sub	sp, #28
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	3301      	adds	r3, #1
 800805c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008064:	8a3b      	ldrh	r3, [r7, #16]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	b21a      	sxth	r2, r3
 800806a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800806e:	4313      	orrs	r3, r2
 8008070:	b21b      	sxth	r3, r3
 8008072:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008074:	89fb      	ldrh	r3, [r7, #14]
}
 8008076:	4618      	mov	r0, r3
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d005      	beq.n	80080aa <USBD_StdDevReq+0x26>
 800809e:	2b40      	cmp	r3, #64	; 0x40
 80080a0:	d857      	bhi.n	8008152 <USBD_StdDevReq+0xce>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00f      	beq.n	80080c6 <USBD_StdDevReq+0x42>
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d153      	bne.n	8008152 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	32ae      	adds	r2, #174	; 0xae
 80080b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
      break;
 80080c4:	e04a      	b.n	800815c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b09      	cmp	r3, #9
 80080cc:	d83b      	bhi.n	8008146 <USBD_StdDevReq+0xc2>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <USBD_StdDevReq+0x50>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	08008129 	.word	0x08008129
 80080d8:	0800813d 	.word	0x0800813d
 80080dc:	08008147 	.word	0x08008147
 80080e0:	08008133 	.word	0x08008133
 80080e4:	08008147 	.word	0x08008147
 80080e8:	08008107 	.word	0x08008107
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	08008147 	.word	0x08008147
 80080f4:	0800811f 	.word	0x0800811f
 80080f8:	08008111 	.word	0x08008111
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa3e 	bl	8008580 <USBD_GetDescriptor>
          break;
 8008104:	e024      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fba3 	bl	8008854 <USBD_SetAddress>
          break;
 800810e:	e01f      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fbe2 	bl	80088dc <USBD_SetConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
          break;
 800811c:	e018      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fc85 	bl	8008a30 <USBD_GetConfig>
          break;
 8008126:	e013      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fcb6 	bl	8008a9c <USBD_GetStatus>
          break;
 8008130:	e00e      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fce5 	bl	8008b04 <USBD_SetFeature>
          break;
 800813a:	e009      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fd09 	bl	8008b56 <USBD_ClrFeature>
          break;
 8008144:	e004      	b.n	8008150 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fd60 	bl	8008c0e <USBD_CtlError>
          break;
 800814e:	bf00      	nop
      }
      break;
 8008150:	e004      	b.n	800815c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fd5a 	bl	8008c0e <USBD_CtlError>
      break;
 800815a:	bf00      	nop
  }

  return ret;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop

08008168 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d005      	beq.n	800818e <USBD_StdItfReq+0x26>
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d852      	bhi.n	800822c <USBD_StdItfReq+0xc4>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <USBD_StdItfReq+0x26>
 800818a:	2b20      	cmp	r3, #32
 800818c:	d14e      	bne.n	800822c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	2b02      	cmp	r3, #2
 800819a:	d840      	bhi.n	800821e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	889b      	ldrh	r3, [r3, #4]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d836      	bhi.n	8008214 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	889b      	ldrh	r3, [r3, #4]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff fed8 	bl	8007f64 <USBD_CoreFindIF>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2bff      	cmp	r3, #255	; 0xff
 80081bc:	d01d      	beq.n	80081fa <USBD_StdItfReq+0x92>
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11a      	bne.n	80081fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081c4:	7bba      	ldrb	r2, [r7, #14]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	32ae      	adds	r2, #174	; 0xae
 80081ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00f      	beq.n	80081f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081d4:	7bba      	ldrb	r2, [r7, #14]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081dc:	7bba      	ldrb	r2, [r7, #14]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	32ae      	adds	r2, #174	; 0xae
 80081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081f2:	e004      	b.n	80081fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081f8:	e001      	b.n	80081fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d110      	bne.n	8008228 <USBD_StdItfReq+0xc0>
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10d      	bne.n	8008228 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fddc 	bl	8008dca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008212:	e009      	b.n	8008228 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fcf9 	bl	8008c0e <USBD_CtlError>
          break;
 800821c:	e004      	b.n	8008228 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fcf4 	bl	8008c0e <USBD_CtlError>
          break;
 8008226:	e000      	b.n	800822a <USBD_StdItfReq+0xc2>
          break;
 8008228:	bf00      	nop
      }
      break;
 800822a:	e004      	b.n	8008236 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fced 	bl	8008c0e <USBD_CtlError>
      break;
 8008234:	bf00      	nop
  }

  return ret;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	889b      	ldrh	r3, [r3, #4]
 8008252:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d007      	beq.n	8008270 <USBD_StdEPReq+0x30>
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	f200 8181 	bhi.w	8008568 <USBD_StdEPReq+0x328>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d02a      	beq.n	80082c0 <USBD_StdEPReq+0x80>
 800826a:	2b20      	cmp	r3, #32
 800826c:	f040 817c 	bne.w	8008568 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff fe82 	bl	8007f7e <USBD_CoreFindEP>
 800827a:	4603      	mov	r3, r0
 800827c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800827e:	7b7b      	ldrb	r3, [r7, #13]
 8008280:	2bff      	cmp	r3, #255	; 0xff
 8008282:	f000 8176 	beq.w	8008572 <USBD_StdEPReq+0x332>
 8008286:	7b7b      	ldrb	r3, [r7, #13]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 8172 	bne.w	8008572 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800828e:	7b7a      	ldrb	r2, [r7, #13]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008296:	7b7a      	ldrb	r2, [r7, #13]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	32ae      	adds	r2, #174	; 0xae
 800829c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8165 	beq.w	8008572 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80082a8:	7b7a      	ldrb	r2, [r7, #13]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32ae      	adds	r2, #174	; 0xae
 80082ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082be:	e158      	b.n	8008572 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d008      	beq.n	80082da <USBD_StdEPReq+0x9a>
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	f300 8147 	bgt.w	800855c <USBD_StdEPReq+0x31c>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 809b 	beq.w	800840a <USBD_StdEPReq+0x1ca>
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d03c      	beq.n	8008352 <USBD_StdEPReq+0x112>
 80082d8:	e140      	b.n	800855c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d002      	beq.n	80082ec <USBD_StdEPReq+0xac>
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d016      	beq.n	8008318 <USBD_StdEPReq+0xd8>
 80082ea:	e02c      	b.n	8008346 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00d      	beq.n	800830e <USBD_StdEPReq+0xce>
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b80      	cmp	r3, #128	; 0x80
 80082f6:	d00a      	beq.n	800830e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 f9e7 	bl	80096d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008302:	2180      	movs	r1, #128	; 0x80
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 f9e3 	bl	80096d0 <USBD_LL_StallEP>
 800830a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800830c:	e020      	b.n	8008350 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fc7c 	bl	8008c0e <USBD_CtlError>
              break;
 8008316:	e01b      	b.n	8008350 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10e      	bne.n	800833e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <USBD_StdEPReq+0xfe>
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b80      	cmp	r3, #128	; 0x80
 800832a:	d008      	beq.n	800833e <USBD_StdEPReq+0xfe>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	88db      	ldrh	r3, [r3, #6]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d104      	bne.n	800833e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 f9c9 	bl	80096d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fd43 	bl	8008dca <USBD_CtlSendStatus>

              break;
 8008344:	e004      	b.n	8008350 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc60 	bl	8008c0e <USBD_CtlError>
              break;
 800834e:	bf00      	nop
          }
          break;
 8008350:	e109      	b.n	8008566 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d002      	beq.n	8008364 <USBD_StdEPReq+0x124>
 800835e:	2b03      	cmp	r3, #3
 8008360:	d016      	beq.n	8008390 <USBD_StdEPReq+0x150>
 8008362:	e04b      	b.n	80083fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00d      	beq.n	8008386 <USBD_StdEPReq+0x146>
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	2b80      	cmp	r3, #128	; 0x80
 800836e:	d00a      	beq.n	8008386 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 f9ab 	bl	80096d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800837a:	2180      	movs	r1, #128	; 0x80
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 f9a7 	bl	80096d0 <USBD_LL_StallEP>
 8008382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008384:	e040      	b.n	8008408 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc40 	bl	8008c0e <USBD_CtlError>
              break;
 800838e:	e03b      	b.n	8008408 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d136      	bne.n	8008406 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 f9b1 	bl	800970e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fd0c 	bl	8008dca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff fde1 	bl	8007f7e <USBD_CoreFindEP>
 80083bc:	4603      	mov	r3, r0
 80083be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083c0:	7b7b      	ldrb	r3, [r7, #13]
 80083c2:	2bff      	cmp	r3, #255	; 0xff
 80083c4:	d01f      	beq.n	8008406 <USBD_StdEPReq+0x1c6>
 80083c6:	7b7b      	ldrb	r3, [r7, #13]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d11c      	bne.n	8008406 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083cc:	7b7a      	ldrb	r2, [r7, #13]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083d4:	7b7a      	ldrb	r2, [r7, #13]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	32ae      	adds	r2, #174	; 0xae
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083e4:	7b7a      	ldrb	r2, [r7, #13]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	32ae      	adds	r2, #174	; 0xae
 80083ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083fa:	e004      	b.n	8008406 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fc05 	bl	8008c0e <USBD_CtlError>
              break;
 8008404:	e000      	b.n	8008408 <USBD_StdEPReq+0x1c8>
              break;
 8008406:	bf00      	nop
          }
          break;
 8008408:	e0ad      	b.n	8008566 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d002      	beq.n	800841c <USBD_StdEPReq+0x1dc>
 8008416:	2b03      	cmp	r3, #3
 8008418:	d033      	beq.n	8008482 <USBD_StdEPReq+0x242>
 800841a:	e099      	b.n	8008550 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <USBD_StdEPReq+0x1f2>
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d004      	beq.n	8008432 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fbef 	bl	8008c0e <USBD_CtlError>
                break;
 8008430:	e093      	b.n	800855a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008432:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008436:	2b00      	cmp	r3, #0
 8008438:	da0b      	bge.n	8008452 <USBD_StdEPReq+0x212>
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	3310      	adds	r3, #16
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	3304      	adds	r3, #4
 8008450:	e00b      	b.n	800846a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	4413      	add	r3, r2
 8008468:	3304      	adds	r3, #4
 800846a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2200      	movs	r2, #0
 8008470:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	330e      	adds	r3, #14
 8008476:	2202      	movs	r2, #2
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fc44 	bl	8008d08 <USBD_CtlSendData>
              break;
 8008480:	e06b      	b.n	800855a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008486:	2b00      	cmp	r3, #0
 8008488:	da11      	bge.n	80084ae <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	f003 020f 	and.w	r2, r3, #15
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	3323      	adds	r3, #35	; 0x23
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d117      	bne.n	80084d4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fbb1 	bl	8008c0e <USBD_CtlError>
                  break;
 80084ac:	e055      	b.n	800855a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	f003 020f 	and.w	r2, r3, #15
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	f203 1363 	addw	r3, r3, #355	; 0x163
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d104      	bne.n	80084d4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fb9e 	bl	8008c0e <USBD_CtlError>
                  break;
 80084d2:	e042      	b.n	800855a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da0b      	bge.n	80084f4 <USBD_StdEPReq+0x2b4>
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	3310      	adds	r3, #16
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	4413      	add	r3, r2
 80084f0:	3304      	adds	r3, #4
 80084f2:	e00b      	b.n	800850c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	4413      	add	r3, r2
 800850a:	3304      	adds	r3, #4
 800850c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <USBD_StdEPReq+0x2da>
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b80      	cmp	r3, #128	; 0x80
 8008518:	d103      	bne.n	8008522 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2200      	movs	r2, #0
 800851e:	739a      	strb	r2, [r3, #14]
 8008520:	e00e      	b.n	8008540 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f001 f910 	bl	800974c <USBD_LL_IsStallEP>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2201      	movs	r2, #1
 8008536:	739a      	strb	r2, [r3, #14]
 8008538:	e002      	b.n	8008540 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2200      	movs	r2, #0
 800853e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	330e      	adds	r3, #14
 8008544:	2202      	movs	r2, #2
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fbdd 	bl	8008d08 <USBD_CtlSendData>
              break;
 800854e:	e004      	b.n	800855a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fb5b 	bl	8008c0e <USBD_CtlError>
              break;
 8008558:	bf00      	nop
          }
          break;
 800855a:	e004      	b.n	8008566 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fb55 	bl	8008c0e <USBD_CtlError>
          break;
 8008564:	bf00      	nop
      }
      break;
 8008566:	e005      	b.n	8008574 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fb4f 	bl	8008c0e <USBD_CtlError>
      break;
 8008570:	e000      	b.n	8008574 <USBD_StdEPReq+0x334>
      break;
 8008572:	bf00      	nop
  }

  return ret;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
	...

08008580 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	b29b      	uxth	r3, r3
 800859e:	3b01      	subs	r3, #1
 80085a0:	2b06      	cmp	r3, #6
 80085a2:	f200 8128 	bhi.w	80087f6 <USBD_GetDescriptor+0x276>
 80085a6:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <USBD_GetDescriptor+0x2c>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085c9 	.word	0x080085c9
 80085b0:	080085e1 	.word	0x080085e1
 80085b4:	08008621 	.word	0x08008621
 80085b8:	080087f7 	.word	0x080087f7
 80085bc:	080087f7 	.word	0x080087f7
 80085c0:	08008797 	.word	0x08008797
 80085c4:	080087c3 	.word	0x080087c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	7c12      	ldrb	r2, [r2, #16]
 80085d4:	f107 0108 	add.w	r1, r7, #8
 80085d8:	4610      	mov	r0, r2
 80085da:	4798      	blx	r3
 80085dc:	60f8      	str	r0, [r7, #12]
      break;
 80085de:	e112      	b.n	8008806 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	7c1b      	ldrb	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10d      	bne.n	8008604 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f0:	f107 0208 	add.w	r2, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3301      	adds	r3, #1
 80085fe:	2202      	movs	r2, #2
 8008600:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008602:	e100      	b.n	8008806 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	f107 0208 	add.w	r2, r7, #8
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
 8008614:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3301      	adds	r3, #1
 800861a:	2202      	movs	r2, #2
 800861c:	701a      	strb	r2, [r3, #0]
      break;
 800861e:	e0f2      	b.n	8008806 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	885b      	ldrh	r3, [r3, #2]
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b05      	cmp	r3, #5
 8008628:	f200 80ac 	bhi.w	8008784 <USBD_GetDescriptor+0x204>
 800862c:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <USBD_GetDescriptor+0xb4>)
 800862e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008632:	bf00      	nop
 8008634:	0800864d 	.word	0x0800864d
 8008638:	08008681 	.word	0x08008681
 800863c:	080086b5 	.word	0x080086b5
 8008640:	080086e9 	.word	0x080086e9
 8008644:	0800871d 	.word	0x0800871d
 8008648:	08008751 	.word	0x08008751
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	7c12      	ldrb	r2, [r2, #16]
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866e:	e091      	b.n	8008794 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 facb 	bl	8008c0e <USBD_CtlError>
            err++;
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	3301      	adds	r3, #1
 800867c:	72fb      	strb	r3, [r7, #11]
          break;
 800867e:	e089      	b.n	8008794 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	7c12      	ldrb	r2, [r2, #16]
 8008698:	f107 0108 	add.w	r1, r7, #8
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a2:	e077      	b.n	8008794 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fab1 	bl	8008c0e <USBD_CtlError>
            err++;
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	3301      	adds	r3, #1
 80086b0:	72fb      	strb	r3, [r7, #11]
          break;
 80086b2:	e06f      	b.n	8008794 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00b      	beq.n	80086d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	7c12      	ldrb	r2, [r2, #16]
 80086cc:	f107 0108 	add.w	r1, r7, #8
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086d6:	e05d      	b.n	8008794 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa97 	bl	8008c0e <USBD_CtlError>
            err++;
 80086e0:	7afb      	ldrb	r3, [r7, #11]
 80086e2:	3301      	adds	r3, #1
 80086e4:	72fb      	strb	r3, [r7, #11]
          break;
 80086e6:	e055      	b.n	8008794 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	7c12      	ldrb	r2, [r2, #16]
 8008700:	f107 0108 	add.w	r1, r7, #8
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870a:	e043      	b.n	8008794 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa7d 	bl	8008c0e <USBD_CtlError>
            err++;
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	3301      	adds	r3, #1
 8008718:	72fb      	strb	r3, [r7, #11]
          break;
 800871a:	e03b      	b.n	8008794 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00b      	beq.n	8008740 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	7c12      	ldrb	r2, [r2, #16]
 8008734:	f107 0108 	add.w	r1, r7, #8
 8008738:	4610      	mov	r0, r2
 800873a:	4798      	blx	r3
 800873c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873e:	e029      	b.n	8008794 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa63 	bl	8008c0e <USBD_CtlError>
            err++;
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	3301      	adds	r3, #1
 800874c:	72fb      	strb	r3, [r7, #11]
          break;
 800874e:	e021      	b.n	8008794 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	7c12      	ldrb	r2, [r2, #16]
 8008768:	f107 0108 	add.w	r1, r7, #8
 800876c:	4610      	mov	r0, r2
 800876e:	4798      	blx	r3
 8008770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008772:	e00f      	b.n	8008794 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa49 	bl	8008c0e <USBD_CtlError>
            err++;
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	3301      	adds	r3, #1
 8008780:	72fb      	strb	r3, [r7, #11]
          break;
 8008782:	e007      	b.n	8008794 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa41 	bl	8008c0e <USBD_CtlError>
          err++;
 800878c:	7afb      	ldrb	r3, [r7, #11]
 800878e:	3301      	adds	r3, #1
 8008790:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008792:	bf00      	nop
      }
      break;
 8008794:	e037      	b.n	8008806 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	7c1b      	ldrb	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d109      	bne.n	80087b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a6:	f107 0208 	add.w	r2, r7, #8
 80087aa:	4610      	mov	r0, r2
 80087ac:	4798      	blx	r3
 80087ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087b0:	e029      	b.n	8008806 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fa2a 	bl	8008c0e <USBD_CtlError>
        err++;
 80087ba:	7afb      	ldrb	r3, [r7, #11]
 80087bc:	3301      	adds	r3, #1
 80087be:	72fb      	strb	r3, [r7, #11]
      break;
 80087c0:	e021      	b.n	8008806 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	7c1b      	ldrb	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10d      	bne.n	80087e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	f107 0208 	add.w	r2, r7, #8
 80087d6:	4610      	mov	r0, r2
 80087d8:	4798      	blx	r3
 80087da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3301      	adds	r3, #1
 80087e0:	2207      	movs	r2, #7
 80087e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087e4:	e00f      	b.n	8008806 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fa10 	bl	8008c0e <USBD_CtlError>
        err++;
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	3301      	adds	r3, #1
 80087f2:	72fb      	strb	r3, [r7, #11]
      break;
 80087f4:	e007      	b.n	8008806 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fa08 	bl	8008c0e <USBD_CtlError>
      err++;
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	3301      	adds	r3, #1
 8008802:	72fb      	strb	r3, [r7, #11]
      break;
 8008804:	bf00      	nop
  }

  if (err != 0U)
 8008806:	7afb      	ldrb	r3, [r7, #11]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d11e      	bne.n	800884a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	88db      	ldrh	r3, [r3, #6]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d016      	beq.n	8008842 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008814:	893b      	ldrh	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00e      	beq.n	8008838 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	88da      	ldrh	r2, [r3, #6]
 800881e:	893b      	ldrh	r3, [r7, #8]
 8008820:	4293      	cmp	r3, r2
 8008822:	bf28      	it	cs
 8008824:	4613      	movcs	r3, r2
 8008826:	b29b      	uxth	r3, r3
 8008828:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800882a:	893b      	ldrh	r3, [r7, #8]
 800882c:	461a      	mov	r2, r3
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fa69 	bl	8008d08 <USBD_CtlSendData>
 8008836:	e009      	b.n	800884c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f9e7 	bl	8008c0e <USBD_CtlError>
 8008840:	e004      	b.n	800884c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fac1 	bl	8008dca <USBD_CtlSendStatus>
 8008848:	e000      	b.n	800884c <USBD_GetDescriptor+0x2cc>
    return;
 800884a:	bf00      	nop
  }
}
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop

08008854 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	889b      	ldrh	r3, [r3, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d131      	bne.n	80088ca <USBD_SetAddress+0x76>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	88db      	ldrh	r3, [r3, #6]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d12d      	bne.n	80088ca <USBD_SetAddress+0x76>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	885b      	ldrh	r3, [r3, #2]
 8008872:	2b7f      	cmp	r3, #127	; 0x7f
 8008874:	d829      	bhi.n	80088ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	885b      	ldrh	r3, [r3, #2]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008880:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b03      	cmp	r3, #3
 800888c:	d104      	bne.n	8008898 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f9bc 	bl	8008c0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	e01d      	b.n	80088d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7bfa      	ldrb	r2, [r7, #15]
 800889c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 ff7d 	bl	80097a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa8d 	bl	8008dca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d004      	beq.n	80088c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088be:	e009      	b.n	80088d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c8:	e004      	b.n	80088d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f99e 	bl	8008c0e <USBD_CtlError>
  }
}
 80088d2:	bf00      	nop
 80088d4:	bf00      	nop
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	885b      	ldrh	r3, [r3, #2]
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	4b4e      	ldr	r3, [pc, #312]	; (8008a2c <USBD_SetConfig+0x150>)
 80088f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088f4:	4b4d      	ldr	r3, [pc, #308]	; (8008a2c <USBD_SetConfig+0x150>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d905      	bls.n	8008908 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f985 	bl	8008c0e <USBD_CtlError>
    return USBD_FAIL;
 8008904:	2303      	movs	r3, #3
 8008906:	e08c      	b.n	8008a22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d002      	beq.n	800891a <USBD_SetConfig+0x3e>
 8008914:	2b03      	cmp	r3, #3
 8008916:	d029      	beq.n	800896c <USBD_SetConfig+0x90>
 8008918:	e075      	b.n	8008a06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800891a:	4b44      	ldr	r3, [pc, #272]	; (8008a2c <USBD_SetConfig+0x150>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d020      	beq.n	8008964 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008922:	4b42      	ldr	r3, [pc, #264]	; (8008a2c <USBD_SetConfig+0x150>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800892c:	4b3f      	ldr	r3, [pc, #252]	; (8008a2c <USBD_SetConfig+0x150>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fe ffcb 	bl	80078ce <USBD_SetClassConfig>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d008      	beq.n	8008954 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f962 	bl	8008c0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008952:	e065      	b.n	8008a20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fa38 	bl	8008dca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2203      	movs	r2, #3
 800895e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008962:	e05d      	b.n	8008a20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fa30 	bl	8008dca <USBD_CtlSendStatus>
      break;
 800896a:	e059      	b.n	8008a20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800896c:	4b2f      	ldr	r3, [pc, #188]	; (8008a2c <USBD_SetConfig+0x150>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d112      	bne.n	800899a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800897c:	4b2b      	ldr	r3, [pc, #172]	; (8008a2c <USBD_SetConfig+0x150>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008986:	4b29      	ldr	r3, [pc, #164]	; (8008a2c <USBD_SetConfig+0x150>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7fe ffba 	bl	8007906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa19 	bl	8008dca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008998:	e042      	b.n	8008a20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800899a:	4b24      	ldr	r3, [pc, #144]	; (8008a2c <USBD_SetConfig+0x150>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d02a      	beq.n	80089fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7fe ffa8 	bl	8007906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089b6:	4b1d      	ldr	r3, [pc, #116]	; (8008a2c <USBD_SetConfig+0x150>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089c0:	4b1a      	ldr	r3, [pc, #104]	; (8008a2c <USBD_SetConfig+0x150>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fe ff81 	bl	80078ce <USBD_SetClassConfig>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00f      	beq.n	80089f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f918 	bl	8008c0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7fe ff8d 	bl	8007906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089f4:	e014      	b.n	8008a20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f9e7 	bl	8008dca <USBD_CtlSendStatus>
      break;
 80089fc:	e010      	b.n	8008a20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f9e3 	bl	8008dca <USBD_CtlSendStatus>
      break;
 8008a04:	e00c      	b.n	8008a20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f900 	bl	8008c0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a0e:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <USBD_SetConfig+0x150>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7fe ff76 	bl	8007906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1e:	bf00      	nop
  }

  return ret;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	2000059c 	.word	0x2000059c

08008a30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d004      	beq.n	8008a4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f8e2 	bl	8008c0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a4a:	e023      	b.n	8008a94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	dc02      	bgt.n	8008a5e <USBD_GetConfig+0x2e>
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc03      	bgt.n	8008a64 <USBD_GetConfig+0x34>
 8008a5c:	e015      	b.n	8008a8a <USBD_GetConfig+0x5a>
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d00b      	beq.n	8008a7a <USBD_GetConfig+0x4a>
 8008a62:	e012      	b.n	8008a8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	2201      	movs	r2, #1
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f948 	bl	8008d08 <USBD_CtlSendData>
        break;
 8008a78:	e00c      	b.n	8008a94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	2201      	movs	r2, #1
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f940 	bl	8008d08 <USBD_CtlSendData>
        break;
 8008a88:	e004      	b.n	8008a94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f8be 	bl	8008c0e <USBD_CtlError>
        break;
 8008a92:	bf00      	nop
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d81e      	bhi.n	8008af2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	88db      	ldrh	r3, [r3, #6]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d004      	beq.n	8008ac6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8a5 	bl	8008c0e <USBD_CtlError>
        break;
 8008ac4:	e01a      	b.n	8008afc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d005      	beq.n	8008ae2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f043 0202 	orr.w	r2, r3, #2
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	330c      	adds	r3, #12
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f90c 	bl	8008d08 <USBD_CtlSendData>
      break;
 8008af0:	e004      	b.n	8008afc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f88a 	bl	8008c0e <USBD_CtlError>
      break;
 8008afa:	bf00      	nop
  }
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	885b      	ldrh	r3, [r3, #2]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d107      	bne.n	8008b26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f953 	bl	8008dca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b24:	e013      	b.n	8008b4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d10b      	bne.n	8008b46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	889b      	ldrh	r3, [r3, #4]
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f943 	bl	8008dca <USBD_CtlSendStatus>
}
 8008b44:	e003      	b.n	8008b4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f860 	bl	8008c0e <USBD_CtlError>
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d80b      	bhi.n	8008b86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	885b      	ldrh	r3, [r3, #2]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d10c      	bne.n	8008b90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f923 	bl	8008dca <USBD_CtlSendStatus>
      }
      break;
 8008b84:	e004      	b.n	8008b90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f840 	bl	8008c0e <USBD_CtlError>
      break;
 8008b8e:	e000      	b.n	8008b92 <USBD_ClrFeature+0x3c>
      break;
 8008b90:	bf00      	nop
  }
}
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	781a      	ldrb	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff fa3e 	bl	8008046 <SWAPBYTE>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	461a      	mov	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f7ff fa31 	bl	8008046 <SWAPBYTE>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461a      	mov	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fa24 	bl	8008046 <SWAPBYTE>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	461a      	mov	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	80da      	strh	r2, [r3, #6]
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c18:	2180      	movs	r1, #128	; 0x80
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fd58 	bl	80096d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c20:	2100      	movs	r1, #0
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fd54 	bl	80096d0 <USBD_LL_StallEP>
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d042      	beq.n	8008ccc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c4a:	6938      	ldr	r0, [r7, #16]
 8008c4c:	f000 f842 	bl	8008cd4 <USBD_GetLen>
 8008c50:	4603      	mov	r3, r0
 8008c52:	3301      	adds	r3, #1
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c5a:	d808      	bhi.n	8008c6e <USBD_GetString+0x3e>
 8008c5c:	6938      	ldr	r0, [r7, #16]
 8008c5e:	f000 f839 	bl	8008cd4 <USBD_GetLen>
 8008c62:	4603      	mov	r3, r0
 8008c64:	3301      	adds	r3, #1
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	e001      	b.n	8008c72 <USBD_GetString+0x42>
 8008c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	7812      	ldrb	r2, [r2, #0]
 8008c80:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	3301      	adds	r3, #1
 8008c86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	2203      	movs	r2, #3
 8008c90:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	3301      	adds	r3, #1
 8008c96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c98:	e013      	b.n	8008cc2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	7812      	ldrb	r2, [r2, #0]
 8008ca4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	613b      	str	r3, [r7, #16]
    idx++;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e7      	bne.n	8008c9a <USBD_GetString+0x6a>
 8008cca:	e000      	b.n	8008cce <USBD_GetString+0x9e>
    return;
 8008ccc:	bf00      	nop
  }
}
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ce4:	e005      	b.n	8008cf2 <USBD_GetLen+0x1e>
  {
    len++;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1f5      	bne.n	8008ce6 <USBD_GetLen+0x12>
  }

  return len;
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	2100      	movs	r1, #0
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fd54 	bl	80097e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	2100      	movs	r1, #0
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fd43 	bl	80097e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2203      	movs	r2, #3
 8008d76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	2100      	movs	r1, #0
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 fd43 	bl	8009824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	2100      	movs	r1, #0
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 fd32 	bl	8009824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fcfe 	bl	80097e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2205      	movs	r2, #5
 8008dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	2100      	movs	r1, #0
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fd0c 	bl	8009824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4912      	ldr	r1, [pc, #72]	; (8008e68 <MX_USB_DEVICE_Init+0x50>)
 8008e20:	4812      	ldr	r0, [pc, #72]	; (8008e6c <MX_USB_DEVICE_Init+0x54>)
 8008e22:	f7fe fcd7 	bl	80077d4 <USBD_Init>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e2c:	f7f8 fa14 	bl	8001258 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e30:	490f      	ldr	r1, [pc, #60]	; (8008e70 <MX_USB_DEVICE_Init+0x58>)
 8008e32:	480e      	ldr	r0, [pc, #56]	; (8008e6c <MX_USB_DEVICE_Init+0x54>)
 8008e34:	f7fe fcfe 	bl	8007834 <USBD_RegisterClass>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e3e:	f7f8 fa0b 	bl	8001258 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e42:	490c      	ldr	r1, [pc, #48]	; (8008e74 <MX_USB_DEVICE_Init+0x5c>)
 8008e44:	4809      	ldr	r0, [pc, #36]	; (8008e6c <MX_USB_DEVICE_Init+0x54>)
 8008e46:	f7fe fbf5 	bl	8007634 <USBD_CDC_RegisterInterface>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e50:	f7f8 fa02 	bl	8001258 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e54:	4805      	ldr	r0, [pc, #20]	; (8008e6c <MX_USB_DEVICE_Init+0x54>)
 8008e56:	f7fe fd23 	bl	80078a0 <USBD_Start>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e60:	f7f8 f9fa 	bl	8001258 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e64:	bf00      	nop
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200000b4 	.word	0x200000b4
 8008e6c:	200005a0 	.word	0x200005a0
 8008e70:	20000018 	.word	0x20000018
 8008e74:	200000a0 	.word	0x200000a0

08008e78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4905      	ldr	r1, [pc, #20]	; (8008e94 <CDC_Init_FS+0x1c>)
 8008e80:	4805      	ldr	r0, [pc, #20]	; (8008e98 <CDC_Init_FS+0x20>)
 8008e82:	f7fe fbf1 	bl	8007668 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e86:	4905      	ldr	r1, [pc, #20]	; (8008e9c <CDC_Init_FS+0x24>)
 8008e88:	4803      	ldr	r0, [pc, #12]	; (8008e98 <CDC_Init_FS+0x20>)
 8008e8a:	f7fe fc0f 	bl	80076ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000a7c 	.word	0x20000a7c
 8008e98:	200005a0 	.word	0x200005a0
 8008e9c:	2000087c 	.word	0x2000087c

08008ea0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ea4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6039      	str	r1, [r7, #0]
 8008eba:	71fb      	strb	r3, [r7, #7]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	2b23      	cmp	r3, #35	; 0x23
 8008ec4:	f200 8098 	bhi.w	8008ff8 <CDC_Control_FS+0x148>
 8008ec8:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <CDC_Control_FS+0x20>)
 8008eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ece:	bf00      	nop
 8008ed0:	08008ff9 	.word	0x08008ff9
 8008ed4:	08008ff9 	.word	0x08008ff9
 8008ed8:	08008ff9 	.word	0x08008ff9
 8008edc:	08008ff9 	.word	0x08008ff9
 8008ee0:	08008ff9 	.word	0x08008ff9
 8008ee4:	08008ff9 	.word	0x08008ff9
 8008ee8:	08008ff9 	.word	0x08008ff9
 8008eec:	08008ff9 	.word	0x08008ff9
 8008ef0:	08008ff9 	.word	0x08008ff9
 8008ef4:	08008ff9 	.word	0x08008ff9
 8008ef8:	08008ff9 	.word	0x08008ff9
 8008efc:	08008ff9 	.word	0x08008ff9
 8008f00:	08008ff9 	.word	0x08008ff9
 8008f04:	08008ff9 	.word	0x08008ff9
 8008f08:	08008ff9 	.word	0x08008ff9
 8008f0c:	08008ff9 	.word	0x08008ff9
 8008f10:	08008ff9 	.word	0x08008ff9
 8008f14:	08008ff9 	.word	0x08008ff9
 8008f18:	08008ff9 	.word	0x08008ff9
 8008f1c:	08008ff9 	.word	0x08008ff9
 8008f20:	08008ff9 	.word	0x08008ff9
 8008f24:	08008ff9 	.word	0x08008ff9
 8008f28:	08008ff9 	.word	0x08008ff9
 8008f2c:	08008ff9 	.word	0x08008ff9
 8008f30:	08008ff9 	.word	0x08008ff9
 8008f34:	08008ff9 	.word	0x08008ff9
 8008f38:	08008ff9 	.word	0x08008ff9
 8008f3c:	08008ff9 	.word	0x08008ff9
 8008f40:	08008ff9 	.word	0x08008ff9
 8008f44:	08008ff9 	.word	0x08008ff9
 8008f48:	08008ff9 	.word	0x08008ff9
 8008f4c:	08008ff9 	.word	0x08008ff9
 8008f50:	08008f61 	.word	0x08008f61
 8008f54:	08008fa5 	.word	0x08008fa5
 8008f58:	08008ff9 	.word	0x08008ff9
 8008f5c:	08008ff9 	.word	0x08008ff9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	3302      	adds	r3, #2
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	041b      	lsls	r3, r3, #16
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	3303      	adds	r3, #3
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	061b      	lsls	r3, r3, #24
 8008f82:	4313      	orrs	r3, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	4b20      	ldr	r3, [pc, #128]	; (8009008 <CDC_Control_FS+0x158>)
 8008f88:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	791a      	ldrb	r2, [r3, #4]
 8008f8e:	4b1e      	ldr	r3, [pc, #120]	; (8009008 <CDC_Control_FS+0x158>)
 8008f90:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	795a      	ldrb	r2, [r3, #5]
 8008f96:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <CDC_Control_FS+0x158>)
 8008f98:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	799a      	ldrb	r2, [r3, #6]
 8008f9e:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <CDC_Control_FS+0x158>)
 8008fa0:	719a      	strb	r2, [r3, #6]
    break;
 8008fa2:	e02a      	b.n	8008ffa <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008fa4:	4b18      	ldr	r3, [pc, #96]	; (8009008 <CDC_Control_FS+0x158>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008fae:	4b16      	ldr	r3, [pc, #88]	; (8009008 <CDC_Control_FS+0x158>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	0a1a      	lsrs	r2, r3, #8
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	b2d2      	uxtb	r2, r2
 8008fba:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008fbc:	4b12      	ldr	r3, [pc, #72]	; (8009008 <CDC_Control_FS+0x158>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	0c1a      	lsrs	r2, r3, #16
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008fca:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <CDC_Control_FS+0x158>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	0e1a      	lsrs	r2, r3, #24
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	3303      	adds	r3, #3
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	4a0a      	ldr	r2, [pc, #40]	; (8009008 <CDC_Control_FS+0x158>)
 8008fde:	7912      	ldrb	r2, [r2, #4]
 8008fe0:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	3305      	adds	r3, #5
 8008fe6:	4a08      	ldr	r2, [pc, #32]	; (8009008 <CDC_Control_FS+0x158>)
 8008fe8:	7952      	ldrb	r2, [r2, #5]
 8008fea:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	3306      	adds	r3, #6
 8008ff0:	4a05      	ldr	r2, [pc, #20]	; (8009008 <CDC_Control_FS+0x158>)
 8008ff2:	7992      	ldrb	r2, [r2, #6]
 8008ff4:	701a      	strb	r2, [r3, #0]
    break;
 8008ff6:	e000      	b.n	8008ffa <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ff8:	bf00      	nop
  }

  return (USBD_OK);
 8008ffa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	20000098 	.word	0x20000098

0800900c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <CDC_Receive_FS+0x3c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 800901e:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <CDC_Receive_FS+0x3c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	b292      	uxth	r2, r2
 8009028:	4611      	mov	r1, r2
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	4806      	ldr	r0, [pc, #24]	; (800904c <CDC_Receive_FS+0x40>)
 8009032:	f7fe fb3b 	bl	80076ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009036:	4805      	ldr	r0, [pc, #20]	; (800904c <CDC_Receive_FS+0x40>)
 8009038:	f7fe fb96 	bl	8007768 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800903c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20000c7c 	.word	0x20000c7c
 800904c:	200005a0 	.word	0x200005a0

08009050 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009060:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <CDC_Transmit_FS+0x48>)
 8009062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009066:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009072:	2301      	movs	r3, #1
 8009074:	e00b      	b.n	800908e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009076:	887b      	ldrh	r3, [r7, #2]
 8009078:	461a      	mov	r2, r3
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	4806      	ldr	r0, [pc, #24]	; (8009098 <CDC_Transmit_FS+0x48>)
 800907e:	f7fe faf3 	bl	8007668 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009082:	4805      	ldr	r0, [pc, #20]	; (8009098 <CDC_Transmit_FS+0x48>)
 8009084:	f7fe fb30 	bl	80076e8 <USBD_CDC_TransmitPacket>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	200005a0 	.word	0x200005a0

0800909c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80090ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
	...

080090c0 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*PtrRx)(uint8_t *buf, uint16_t Len)) //la interfaZ va a llamar cada vez que se envian datos desde el USB hacia la PC
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 80090c8:	4a04      	ldr	r2, [pc, #16]	; (80090dc <CDC_Attach_Rx+0x1c>)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6013      	str	r3, [r2, #0]
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20000c7c 	.word	0x20000c7c

080090e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2212      	movs	r2, #18
 80090f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090f2:	4b03      	ldr	r3, [pc, #12]	; (8009100 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	200000d0 	.word	0x200000d0

08009104 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2204      	movs	r2, #4
 8009114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009116:	4b03      	ldr	r3, [pc, #12]	; (8009124 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	200000e4 	.word	0x200000e4

08009128 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	4907      	ldr	r1, [pc, #28]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
 800913e:	4808      	ldr	r0, [pc, #32]	; (8009160 <USBD_FS_ProductStrDescriptor+0x38>)
 8009140:	f7ff fd76 	bl	8008c30 <USBD_GetString>
 8009144:	e004      	b.n	8009150 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	4904      	ldr	r1, [pc, #16]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
 800914a:	4805      	ldr	r0, [pc, #20]	; (8009160 <USBD_FS_ProductStrDescriptor+0x38>)
 800914c:	f7ff fd70 	bl	8008c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000c80 	.word	0x20000c80
 8009160:	08009984 	.word	0x08009984

08009164 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	4904      	ldr	r1, [pc, #16]	; (8009184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009174:	4804      	ldr	r0, [pc, #16]	; (8009188 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009176:	f7ff fd5b 	bl	8008c30 <USBD_GetString>
  return USBD_StrDesc;
 800917a:	4b02      	ldr	r3, [pc, #8]	; (8009184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000c80 	.word	0x20000c80
 8009188:	0800999c 	.word	0x0800999c

0800918c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	221a      	movs	r2, #26
 800919c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800919e:	f000 f843 	bl	8009228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091a2:	4b02      	ldr	r3, [pc, #8]	; (80091ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	200000e8 	.word	0x200000e8

080091b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4907      	ldr	r1, [pc, #28]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091c6:	4808      	ldr	r0, [pc, #32]	; (80091e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091c8:	f7ff fd32 	bl	8008c30 <USBD_GetString>
 80091cc:	e004      	b.n	80091d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	4904      	ldr	r1, [pc, #16]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091d2:	4805      	ldr	r0, [pc, #20]	; (80091e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091d4:	f7ff fd2c 	bl	8008c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000c80 	.word	0x20000c80
 80091e8:	080099b0 	.word	0x080099b0

080091ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d105      	bne.n	800920a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	4907      	ldr	r1, [pc, #28]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009202:	4808      	ldr	r0, [pc, #32]	; (8009224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009204:	f7ff fd14 	bl	8008c30 <USBD_GetString>
 8009208:	e004      	b.n	8009214 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	4904      	ldr	r1, [pc, #16]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800920e:	4805      	ldr	r0, [pc, #20]	; (8009224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009210:	f7ff fd0e 	bl	8008c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000c80 	.word	0x20000c80
 8009224:	080099bc 	.word	0x080099bc

08009228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <Get_SerialNum+0x44>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009234:	4b0e      	ldr	r3, [pc, #56]	; (8009270 <Get_SerialNum+0x48>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800923a:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <Get_SerialNum+0x4c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4413      	add	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800924e:	2208      	movs	r2, #8
 8009250:	4909      	ldr	r1, [pc, #36]	; (8009278 <Get_SerialNum+0x50>)
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 f814 	bl	8009280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009258:	2204      	movs	r2, #4
 800925a:	4908      	ldr	r1, [pc, #32]	; (800927c <Get_SerialNum+0x54>)
 800925c:	68b8      	ldr	r0, [r7, #8]
 800925e:	f000 f80f 	bl	8009280 <IntToUnicode>
  }
}
 8009262:	bf00      	nop
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	1fff7a10 	.word	0x1fff7a10
 8009270:	1fff7a14 	.word	0x1fff7a14
 8009274:	1fff7a18 	.word	0x1fff7a18
 8009278:	200000ea 	.word	0x200000ea
 800927c:	200000fa 	.word	0x200000fa

08009280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	4613      	mov	r3, r2
 800928c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009292:	2300      	movs	r3, #0
 8009294:	75fb      	strb	r3, [r7, #23]
 8009296:	e027      	b.n	80092e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	0f1b      	lsrs	r3, r3, #28
 800929c:	2b09      	cmp	r3, #9
 800929e:	d80b      	bhi.n	80092b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	0f1b      	lsrs	r3, r3, #28
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	4619      	mov	r1, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	440b      	add	r3, r1
 80092b0:	3230      	adds	r2, #48	; 0x30
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	e00a      	b.n	80092ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	0f1b      	lsrs	r3, r3, #28
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	7dfb      	ldrb	r3, [r7, #23]
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	4619      	mov	r1, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	440b      	add	r3, r1
 80092c8:	3237      	adds	r2, #55	; 0x37
 80092ca:	b2d2      	uxtb	r2, r2
 80092cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	011b      	lsls	r3, r3, #4
 80092d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	3301      	adds	r3, #1
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	4413      	add	r3, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	3301      	adds	r3, #1
 80092e6:	75fb      	strb	r3, [r7, #23]
 80092e8:	7dfa      	ldrb	r2, [r7, #23]
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d3d3      	bcc.n	8009298 <IntToUnicode+0x18>
  }
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
	...

08009300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	; 0x28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009308:	f107 0314 	add.w	r3, r7, #20
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	605a      	str	r2, [r3, #4]
 8009312:	609a      	str	r2, [r3, #8]
 8009314:	60da      	str	r2, [r3, #12]
 8009316:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009320:	d13a      	bne.n	8009398 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009322:	2300      	movs	r3, #0
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	4b1e      	ldr	r3, [pc, #120]	; (80093a0 <HAL_PCD_MspInit+0xa0>)
 8009328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932a:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <HAL_PCD_MspInit+0xa0>)
 800932c:	f043 0301 	orr.w	r3, r3, #1
 8009330:	6313      	str	r3, [r2, #48]	; 0x30
 8009332:	4b1b      	ldr	r3, [pc, #108]	; (80093a0 <HAL_PCD_MspInit+0xa0>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800933e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009344:	2302      	movs	r3, #2
 8009346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009348:	2300      	movs	r3, #0
 800934a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800934c:	2303      	movs	r3, #3
 800934e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009350:	230a      	movs	r3, #10
 8009352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	4619      	mov	r1, r3
 800935a:	4812      	ldr	r0, [pc, #72]	; (80093a4 <HAL_PCD_MspInit+0xa4>)
 800935c:	f7f9 fa30 	bl	80027c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009360:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <HAL_PCD_MspInit+0xa0>)
 8009362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009364:	4a0e      	ldr	r2, [pc, #56]	; (80093a0 <HAL_PCD_MspInit+0xa0>)
 8009366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800936a:	6353      	str	r3, [r2, #52]	; 0x34
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <HAL_PCD_MspInit+0xa0>)
 8009372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009374:	4a0a      	ldr	r2, [pc, #40]	; (80093a0 <HAL_PCD_MspInit+0xa0>)
 8009376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800937a:	6453      	str	r3, [r2, #68]	; 0x44
 800937c:	4b08      	ldr	r3, [pc, #32]	; (80093a0 <HAL_PCD_MspInit+0xa0>)
 800937e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009388:	2200      	movs	r2, #0
 800938a:	2100      	movs	r1, #0
 800938c:	2043      	movs	r0, #67	; 0x43
 800938e:	f7f8 fe70 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009392:	2043      	movs	r0, #67	; 0x43
 8009394:	f7f8 fe89 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009398:	bf00      	nop
 800939a:	3728      	adds	r7, #40	; 0x28
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	40023800 	.word	0x40023800
 80093a4:	40020000 	.word	0x40020000

080093a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f7fe fabb 	bl	800793a <USBD_LL_SetupStage>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80093de:	78fa      	ldrb	r2, [r7, #3]
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	4613      	mov	r3, r2
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	78fb      	ldrb	r3, [r7, #3]
 80093f4:	4619      	mov	r1, r3
 80093f6:	f7fe faf5 	bl	80079e4 <USBD_LL_DataOutStage>
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009414:	78fa      	ldrb	r2, [r7, #3]
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4613      	mov	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	3320      	adds	r3, #32
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	78fb      	ldrb	r3, [r7, #3]
 8009428:	4619      	mov	r1, r3
 800942a:	f7fe fb97 	bl	8007b5c <USBD_LL_DataInStage>
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009444:	4618      	mov	r0, r3
 8009446:	f7fe fcdb 	bl	8007e00 <USBD_LL_SOF>
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800945a:	2301      	movs	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	79db      	ldrb	r3, [r3, #7]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d001      	beq.n	800946a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009466:	f7f7 fef7 	bl	8001258 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009470:	7bfa      	ldrb	r2, [r7, #15]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fc7f 	bl	8007d78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fc26 	bl	8007cd2 <USBD_LL_Reset>
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe fc7a 	bl	8007d98 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	6812      	ldr	r2, [r2, #0]
 80094b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094b6:	f043 0301 	orr.w	r3, r3, #1
 80094ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7adb      	ldrb	r3, [r3, #11]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094c4:	4b04      	ldr	r3, [pc, #16]	; (80094d8 <HAL_PCD_SuspendCallback+0x48>)
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	4a03      	ldr	r2, [pc, #12]	; (80094d8 <HAL_PCD_SuspendCallback+0x48>)
 80094ca:	f043 0306 	orr.w	r3, r3, #6
 80094ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	e000ed00 	.word	0xe000ed00

080094dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fc70 	bl	8007dd0 <USBD_LL_Resume>
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800950a:	78fa      	ldrb	r2, [r7, #3]
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fcc8 	bl	8007ea4 <USBD_LL_IsoOUTIncomplete>
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800952e:	78fa      	ldrb	r2, [r7, #3]
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe fc84 	bl	8007e40 <USBD_LL_IsoINIncomplete>
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe fcda 	bl	8007f08 <USBD_LL_DevConnected>
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe fcd7 	bl	8007f1e <USBD_LL_DevDisconnected>
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d13c      	bne.n	8009602 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009588:	4a20      	ldr	r2, [pc, #128]	; (800960c <USBD_LL_Init+0x94>)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a1e      	ldr	r2, [pc, #120]	; (800960c <USBD_LL_Init+0x94>)
 8009594:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009598:	4b1c      	ldr	r3, [pc, #112]	; (800960c <USBD_LL_Init+0x94>)
 800959a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800959e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095a0:	4b1a      	ldr	r3, [pc, #104]	; (800960c <USBD_LL_Init+0x94>)
 80095a2:	2204      	movs	r2, #4
 80095a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095a6:	4b19      	ldr	r3, [pc, #100]	; (800960c <USBD_LL_Init+0x94>)
 80095a8:	2202      	movs	r2, #2
 80095aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095ac:	4b17      	ldr	r3, [pc, #92]	; (800960c <USBD_LL_Init+0x94>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095b2:	4b16      	ldr	r3, [pc, #88]	; (800960c <USBD_LL_Init+0x94>)
 80095b4:	2202      	movs	r2, #2
 80095b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095b8:	4b14      	ldr	r3, [pc, #80]	; (800960c <USBD_LL_Init+0x94>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <USBD_LL_Init+0x94>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095c4:	4b11      	ldr	r3, [pc, #68]	; (800960c <USBD_LL_Init+0x94>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80095ca:	4b10      	ldr	r3, [pc, #64]	; (800960c <USBD_LL_Init+0x94>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80095d0:	4b0e      	ldr	r3, [pc, #56]	; (800960c <USBD_LL_Init+0x94>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80095d6:	480d      	ldr	r0, [pc, #52]	; (800960c <USBD_LL_Init+0x94>)
 80095d8:	f7f9 faa9 	bl	8002b2e <HAL_PCD_Init>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80095e2:	f7f7 fe39 	bl	8001258 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80095e6:	2180      	movs	r1, #128	; 0x80
 80095e8:	4808      	ldr	r0, [pc, #32]	; (800960c <USBD_LL_Init+0x94>)
 80095ea:	f7fa fcd6 	bl	8003f9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80095ee:	2240      	movs	r2, #64	; 0x40
 80095f0:	2100      	movs	r1, #0
 80095f2:	4806      	ldr	r0, [pc, #24]	; (800960c <USBD_LL_Init+0x94>)
 80095f4:	f7fa fc8a 	bl	8003f0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80095f8:	2280      	movs	r2, #128	; 0x80
 80095fa:	2101      	movs	r1, #1
 80095fc:	4803      	ldr	r0, [pc, #12]	; (800960c <USBD_LL_Init+0x94>)
 80095fe:	f7fa fc85 	bl	8003f0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000e80 	.word	0x20000e80

08009610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009626:	4618      	mov	r0, r3
 8009628:	f7f9 fb90 	bl	8002d4c <HAL_PCD_Start>
 800962c:	4603      	mov	r3, r0
 800962e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	4618      	mov	r0, r3
 8009634:	f000 f942 	bl	80098bc <USBD_Get_USB_Status>
 8009638:	4603      	mov	r3, r0
 800963a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800963c:	7bbb      	ldrb	r3, [r7, #14]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	4608      	mov	r0, r1
 8009650:	4611      	mov	r1, r2
 8009652:	461a      	mov	r2, r3
 8009654:	4603      	mov	r3, r0
 8009656:	70fb      	strb	r3, [r7, #3]
 8009658:	460b      	mov	r3, r1
 800965a:	70bb      	strb	r3, [r7, #2]
 800965c:	4613      	mov	r3, r2
 800965e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800966e:	78bb      	ldrb	r3, [r7, #2]
 8009670:	883a      	ldrh	r2, [r7, #0]
 8009672:	78f9      	ldrb	r1, [r7, #3]
 8009674:	f7fa f864 	bl	8003740 <HAL_PCD_EP_Open>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f91c 	bl	80098bc <USBD_Get_USB_Status>
 8009684:	4603      	mov	r3, r0
 8009686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009688:	7bbb      	ldrb	r3, [r7, #14]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fa f8af 	bl	8003814 <HAL_PCD_EP_Close>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f8fd 	bl	80098bc <USBD_Get_USB_Status>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fa f967 	bl	80039c2 <HAL_PCD_EP_SetStall>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 f8de 	bl	80098bc <USBD_Get_USB_Status>
 8009700:	4603      	mov	r3, r0
 8009702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009704:	7bbb      	ldrb	r3, [r7, #14]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	460b      	mov	r3, r1
 8009718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f7fa f9ab 	bl	8003a88 <HAL_PCD_EP_ClrStall>
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f8bf 	bl	80098bc <USBD_Get_USB_Status>
 800973e:	4603      	mov	r3, r0
 8009740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009742:	7bbb      	ldrb	r3, [r7, #14]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800975e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009764:	2b00      	cmp	r3, #0
 8009766:	da0b      	bge.n	8009780 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	4613      	mov	r3, r2
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	3316      	adds	r3, #22
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	e00b      	b.n	8009798 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009786:	68f9      	ldr	r1, [r7, #12]
 8009788:	4613      	mov	r3, r2
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	4413      	add	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	440b      	add	r3, r1
 8009792:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009796:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	460b      	mov	r3, r1
 80097ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7f9 ff98 	bl	80036f8 <HAL_PCD_SetAddress>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 f874 	bl	80098bc <USBD_Get_USB_Status>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]
 80097ee:	460b      	mov	r3, r1
 80097f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009800:	7af9      	ldrb	r1, [r7, #11]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	f7fa f8a2 	bl	800394e <HAL_PCD_EP_Transmit>
 800980a:	4603      	mov	r3, r0
 800980c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 f853 	bl	80098bc <USBD_Get_USB_Status>
 8009816:	4603      	mov	r3, r0
 8009818:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800981a:	7dbb      	ldrb	r3, [r7, #22]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	460b      	mov	r3, r1
 8009832:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009842:	7af9      	ldrb	r1, [r7, #11]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	f7fa f82e 	bl	80038a8 <HAL_PCD_EP_Receive>
 800984c:	4603      	mov	r3, r0
 800984e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	4618      	mov	r0, r3
 8009854:	f000 f832 	bl	80098bc <USBD_Get_USB_Status>
 8009858:	4603      	mov	r3, r0
 800985a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800985c:	7dbb      	ldrb	r3, [r7, #22]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	460b      	mov	r3, r1
 8009870:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009878:	78fa      	ldrb	r2, [r7, #3]
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7fa f84e 	bl	800391e <HAL_PCD_EP_GetRxCount>
 8009882:	4603      	mov	r3, r0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009894:	4b03      	ldr	r3, [pc, #12]	; (80098a4 <USBD_static_malloc+0x18>)
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20001364 	.word	0x20001364

080098a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]

}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d817      	bhi.n	8009900 <USBD_Get_USB_Status+0x44>
 80098d0:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <USBD_Get_USB_Status+0x1c>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	080098e9 	.word	0x080098e9
 80098dc:	080098ef 	.word	0x080098ef
 80098e0:	080098f5 	.word	0x080098f5
 80098e4:	080098fb 	.word	0x080098fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73fb      	strb	r3, [r7, #15]
    break;
 80098ec:	e00b      	b.n	8009906 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098ee:	2303      	movs	r3, #3
 80098f0:	73fb      	strb	r3, [r7, #15]
    break;
 80098f2:	e008      	b.n	8009906 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098f4:	2301      	movs	r3, #1
 80098f6:	73fb      	strb	r3, [r7, #15]
    break;
 80098f8:	e005      	b.n	8009906 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098fa:	2303      	movs	r3, #3
 80098fc:	73fb      	strb	r3, [r7, #15]
    break;
 80098fe:	e002      	b.n	8009906 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009900:	2303      	movs	r3, #3
 8009902:	73fb      	strb	r3, [r7, #15]
    break;
 8009904:	bf00      	nop
  }
  return usb_status;
 8009906:	7bfb      	ldrb	r3, [r7, #15]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <memset>:
 8009914:	4402      	add	r2, r0
 8009916:	4603      	mov	r3, r0
 8009918:	4293      	cmp	r3, r2
 800991a:	d100      	bne.n	800991e <memset+0xa>
 800991c:	4770      	bx	lr
 800991e:	f803 1b01 	strb.w	r1, [r3], #1
 8009922:	e7f9      	b.n	8009918 <memset+0x4>

08009924 <__libc_init_array>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	4d0d      	ldr	r5, [pc, #52]	; (800995c <__libc_init_array+0x38>)
 8009928:	4c0d      	ldr	r4, [pc, #52]	; (8009960 <__libc_init_array+0x3c>)
 800992a:	1b64      	subs	r4, r4, r5
 800992c:	10a4      	asrs	r4, r4, #2
 800992e:	2600      	movs	r6, #0
 8009930:	42a6      	cmp	r6, r4
 8009932:	d109      	bne.n	8009948 <__libc_init_array+0x24>
 8009934:	4d0b      	ldr	r5, [pc, #44]	; (8009964 <__libc_init_array+0x40>)
 8009936:	4c0c      	ldr	r4, [pc, #48]	; (8009968 <__libc_init_array+0x44>)
 8009938:	f000 f818 	bl	800996c <_init>
 800993c:	1b64      	subs	r4, r4, r5
 800993e:	10a4      	asrs	r4, r4, #2
 8009940:	2600      	movs	r6, #0
 8009942:	42a6      	cmp	r6, r4
 8009944:	d105      	bne.n	8009952 <__libc_init_array+0x2e>
 8009946:	bd70      	pop	{r4, r5, r6, pc}
 8009948:	f855 3b04 	ldr.w	r3, [r5], #4
 800994c:	4798      	blx	r3
 800994e:	3601      	adds	r6, #1
 8009950:	e7ee      	b.n	8009930 <__libc_init_array+0xc>
 8009952:	f855 3b04 	ldr.w	r3, [r5], #4
 8009956:	4798      	blx	r3
 8009958:	3601      	adds	r6, #1
 800995a:	e7f2      	b.n	8009942 <__libc_init_array+0x1e>
 800995c:	080099ec 	.word	0x080099ec
 8009960:	080099ec 	.word	0x080099ec
 8009964:	080099ec 	.word	0x080099ec
 8009968:	080099f0 	.word	0x080099f0

0800996c <_init>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	bf00      	nop
 8009970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009972:	bc08      	pop	{r3}
 8009974:	469e      	mov	lr, r3
 8009976:	4770      	bx	lr

08009978 <_fini>:
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997a:	bf00      	nop
 800997c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997e:	bc08      	pop	{r3}
 8009980:	469e      	mov	lr, r3
 8009982:	4770      	bx	lr
