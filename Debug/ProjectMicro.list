
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009630  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009874  08009874  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800987c  0800987c  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800987c  0800987c  0001987c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009880  08009880  00019880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08009884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  20000154  080099d8  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  080099d8  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fd6  00000000  00000000  000201c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003849  00000000  00000000  0003519d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e45  00000000  00000000  00039ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa6b  00000000  00000000  0003aaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184bf  00000000  00000000  00055558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c064  00000000  00000000  0006da17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052e8  00000000  00000000  00109a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0010ed64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097b8 	.word	0x080097b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	080097b8 	.word	0x080097b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <datafromUSB>:
/**
 * recibo la informacion enviada por puerto USB (lo enviado por QT), y guardo los bytes recibidos en el buffer circular bufferRx[] de la estructura datosComSerie
 * UNER = 55 4E 45 52 // Nbytes= 02 // ':' = 3A // Alive= F0 // 0xC4 = checksum
 */

void datafromUSB(uint8_t *buf, uint16_t length){
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	81fb      	strh	r3, [r7, #14]
 800058c:	e014      	b.n	80005b8 <datafromUSB+0x3c>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 800058e:	89fb      	ldrh	r3, [r7, #14]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <datafromUSB+0x54>)
 8000596:	78d2      	ldrb	r2, [r2, #3]
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	4611      	mov	r1, r2
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <datafromUSB+0x54>)
 80005a0:	440b      	add	r3, r1
 80005a2:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <datafromUSB+0x54>)
 80005a6:	78db      	ldrb	r3, [r3, #3]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <datafromUSB+0x54>)
 80005b0:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	81fb      	strh	r3, [r7, #14]
 80005b8:	89fa      	ldrh	r2, [r7, #14]
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3e6      	bcc.n	800058e <datafromUSB+0x12>
  }

}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000268 	.word	0x20000268

080005d4 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	//si llegó informacion entonces llamo a decodeheader para el analisis del protocolo "UNER"
	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){ //si Recepcion write =! Recepcion read => buffer lleno
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d007      	beq.n	80005fa <comunicationsTask+0x26>
		DecodeHeader(datosCom);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f80c 	bl	8000608 <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <comunicationsTask+0x30>)
 80005f2:	78db      	ldrb	r3, [r3, #3]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <comunicationsTask+0x30>)
 80005f8:	711a      	strb	r2, [r3, #4]
//	}
//
//	if(CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend) == USBD_OK){
//		datosComSerie.indexReadTx += datosComSerie.bytesTosend;
//	}
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000268 	.word	0x20000268

08000608 <DecodeHeader>:

/**
 * Máquina de estados que busca: 'U', 'N', 'E', 'R', nBytes, ':', Payload, Checksum
 * Si todo es válido, llama a: decodeData(datosCom);
 */
void DecodeHeader(_sDato *datosCom){ //Recibo un puntero a la estructura de comunicación que contiene los buffers y los índices
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;		//Variable estática para recordar cuántos bytes de payload quedan por procesar

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx; //Guardo una copia del índice de escritura para no interferir con interrupciones
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	78db      	ldrb	r3, [r3, #3]
 8000614:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000616:	e0df      	b.n	80007d8 <DecodeHeader+0x1d0>
    {
        switch (estadoProtocolo) {					//Mientras haya nuevos datos no leídos en el buffer de recepción...
 8000618:	4b75      	ldr	r3, [pc, #468]	; (80007f0 <DecodeHeader+0x1e8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b06      	cmp	r3, #6
 800061e:	f200 80d7 	bhi.w	80007d0 <DecodeHeader+0x1c8>
 8000622:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <DecodeHeader+0x20>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000645 	.word	0x08000645
 800062c:	0800066d 	.word	0x0800066d
 8000630:	080006a1 	.word	0x080006a1
 8000634:	080006d5 	.word	0x080006d5
 8000638:	08000709 	.word	0x08000709
 800063c:	08000731 	.word	0x08000731
 8000640:	08000773 	.word	0x08000773
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	b2d1      	uxtb	r1, r2
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7111      	strb	r1, [r2, #4]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	79db      	ldrb	r3, [r3, #7]
 8000658:	2b55      	cmp	r3, #85	; 0x55
 800065a:	f040 80bd 	bne.w	80007d8 <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 800065e:	4b64      	ldr	r3, [pc, #400]	; (80007f0 <DecodeHeader+0x1e8>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	709a      	strb	r2, [r3, #2]
                }
                break;
 800066a:	e0b5      	b.n	80007d8 <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	b2d1      	uxtb	r1, r2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	7111      	strb	r1, [r2, #4]
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	79db      	ldrb	r3, [r3, #7]
 8000680:	2b4e      	cmp	r3, #78	; 0x4e
 8000682:	d103      	bne.n	800068c <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000684:	4b5a      	ldr	r3, [pc, #360]	; (80007f0 <DecodeHeader+0x1e8>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e0a5      	b.n	80007d8 <DecodeHeader+0x1d0>
                else{
                    datosCom->indexReadRx--;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	3b01      	subs	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000698:	4b55      	ldr	r3, [pc, #340]	; (80007f0 <DecodeHeader+0x1e8>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
                }
                break;
 800069e:	e09b      	b.n	80007d8 <DecodeHeader+0x1d0>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	b2d1      	uxtb	r1, r2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7111      	strb	r1, [r2, #4]
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	79db      	ldrb	r3, [r3, #7]
 80006b4:	2b45      	cmp	r3, #69	; 0x45
 80006b6:	d103      	bne.n	80006c0 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 80006b8:	4b4d      	ldr	r3, [pc, #308]	; (80007f0 <DecodeHeader+0x1e8>)
 80006ba:	2203      	movs	r2, #3
 80006bc:	701a      	strb	r2, [r3, #0]
 80006be:	e08b      	b.n	80007d8 <DecodeHeader+0x1d0>
                else{
                    datosCom->indexReadRx--;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 80006cc:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <DecodeHeader+0x1e8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006d2:	e081      	b.n	80007d8 <DecodeHeader+0x1d0>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	b2d1      	uxtb	r1, r2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7111      	strb	r1, [r2, #4]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	2b52      	cmp	r3, #82	; 0x52
 80006ea:	d103      	bne.n	80006f4 <DecodeHeader+0xec>
					estadoProtocolo=NBYTES;
 80006ec:	4b40      	ldr	r3, [pc, #256]	; (80007f0 <DecodeHeader+0x1e8>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	701a      	strb	r2, [r3, #0]
 80006f2:	e071      	b.n	80007d8 <DecodeHeader+0x1d0>
				else{
					datosCom->indexReadRx--;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000700:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <DecodeHeader+0x1e8>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
				}
            break;
 8000706:	e067      	b.n	80007d8 <DecodeHeader+0x1d0>
            case NBYTES: //Leer byte de cantidad de datos (nBytes) y avanzar
                datosCom->indexStart=datosCom->indexReadRx;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791a      	ldrb	r2, [r3, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	b2d1      	uxtb	r1, r2
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7111      	strb	r1, [r2, #4]
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	79da      	ldrb	r2, [r3, #7]
 8000724:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <DecodeHeader+0x1ec>)
 8000726:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000728:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <DecodeHeader+0x1e8>)
 800072a:	2205      	movs	r2, #5
 800072c:	701a      	strb	r2, [r3, #0]
                break;
 800072e:	e053      	b.n	80007d8 <DecodeHeader+0x1d0>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	b2d1      	uxtb	r1, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7111      	strb	r1, [r2, #4]
 800073c:	461a      	mov	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	79db      	ldrb	r3, [r3, #7]
 8000744:	2b3a      	cmp	r3, #58	; 0x3a
 8000746:	d10a      	bne.n	800075e <DecodeHeader+0x156>

                   estadoProtocolo=PAYLOAD;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <DecodeHeader+0x1e8>)
 800074a:	2206      	movs	r2, #6
 800074c:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <DecodeHeader+0x1ec>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 8000756:	b2da      	uxtb	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	709a      	strb	r2, [r3, #2]
 800075c:	e03c      	b.n	80007d8 <DecodeHeader+0x1d0>
                }
                else{
                    datosCom->indexReadRx--;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <DecodeHeader+0x1e8>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000770:	e032      	b.n	80007d8 <DecodeHeader+0x1d0>
            case PAYLOAD:

                if (nBytes>1){
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <DecodeHeader+0x1ec>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d90f      	bls.n	800079a <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	b2d1      	uxtb	r1, r2
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7111      	strb	r1, [r2, #4]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	79da      	ldrb	r2, [r3, #7]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	789b      	ldrb	r3, [r3, #2]
 8000792:	4053      	eors	r3, r2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <DecodeHeader+0x1ec>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <DecodeHeader+0x1ec>)
 80007a4:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){ //Cuando ya se leyeron todos los datos, compara el checksum. Si es correcto, llama a decodeData() para procesar el mensaje.
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <DecodeHeader+0x1ec>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d114      	bne.n	80007d8 <DecodeHeader+0x1d0>
                    estadoProtocolo=START;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <DecodeHeader+0x1e8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	789a      	ldrb	r2, [r3, #2]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	440b      	add	r3, r1
 80007c2:	79db      	ldrb	r3, [r3, #7]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d107      	bne.n	80007d8 <DecodeHeader+0x1d0>
                        decodeData(datosCom);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f815 	bl	80007f8 <decodeData>
                    }
                }

                break;
 80007ce:	e003      	b.n	80007d8 <DecodeHeader+0x1d0>
            default:
                estadoProtocolo=START;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <DecodeHeader+0x1e8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
                break;
 80007d6:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	7bfa      	ldrb	r2, [r7, #15]
 80007de:	429a      	cmp	r2, r3
 80007e0:	f47f af1a 	bne.w	8000618 <DecodeHeader+0x10>
        }
    }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000470 	.word	0x20000470
 80007f4:	20000170 	.word	0x20000170

080007f8 <decodeData>:

//si el protocolo fue valido => preparo respuestas
void decodeData(_sDato *datosCom){ //responde segun el ID recibido. Busca el ID del comando en la tercera posición del payload (después del token y del byte de longitud).
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]


    uint8_t bufAux[20], indiceAux=0,bytes=0;
 8000800:	2300      	movs	r3, #0
 8000802:	77bb      	strb	r3, [r7, #30]
 8000804:	2300      	movs	r3, #0
 8000806:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2, /ID EN LA POSICION 2, porque es donde se adjunta el byte que te dice "ALIVE, FIRMWARE, ETC"
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	785b      	ldrb	r3, [r3, #1]
 800080c:	3302      	adds	r3, #2
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	79db      	ldrb	r3, [r3, #7]
 8000814:	2bf2      	cmp	r3, #242	; 0xf2
 8000816:	d024      	beq.n	8000862 <decodeData+0x6a>
 8000818:	2bf2      	cmp	r3, #242	; 0xf2
 800081a:	dc2b      	bgt.n	8000874 <decodeData+0x7c>
 800081c:	2bf0      	cmp	r3, #240	; 0xf0
 800081e:	d002      	beq.n	8000826 <decodeData+0x2e>
 8000820:	2bf1      	cmp	r3, #241	; 0xf1
 8000822:	d013      	beq.n	800084c <decodeData+0x54>
 8000824:	e026      	b.n	8000874 <decodeData+0x7c>
    {

	case ALIVE:
		bufAux[indiceAux++] = ALIVE;   	// ID de respuesta
 8000826:	7fbb      	ldrb	r3, [r7, #30]
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	77ba      	strb	r2, [r7, #30]
 800082c:	3320      	adds	r3, #32
 800082e:	443b      	add	r3, r7
 8000830:	22f0      	movs	r2, #240	; 0xf0
 8000832:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = 0x0D;    	// Respuesta: ACK
 8000836:	7fbb      	ldrb	r3, [r7, #30]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	77ba      	strb	r2, [r7, #30]
 800083c:	3320      	adds	r3, #32
 800083e:	443b      	add	r3, r7
 8000840:	220d      	movs	r2, #13
 8000842:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 0x03;        			// NBYTES = 3 (ID + Dato + Checksum)
 8000846:	2303      	movs	r3, #3
 8000848:	77fb      	strb	r3, [r7, #31]
	break;
 800084a:	e01e      	b.n	800088a <decodeData+0x92>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 800084c:	7fbb      	ldrb	r3, [r7, #30]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	77ba      	strb	r2, [r7, #30]
 8000852:	3320      	adds	r3, #32
 8000854:	443b      	add	r3, r7
 8000856:	22f1      	movs	r2, #241	; 0xf1
 8000858:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 800085c:	2302      	movs	r3, #2
 800085e:	77fb      	strb	r3, [r7, #31]

    break;
 8000860:	e013      	b.n	800088a <decodeData+0x92>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 8000862:	7fbb      	ldrb	r3, [r7, #30]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	77ba      	strb	r2, [r7, #30]
 8000868:	3320      	adds	r3, #32
 800086a:	443b      	add	r3, r7
 800086c:	22f2      	movs	r2, #242	; 0xf2
 800086e:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 8000872:	e00a      	b.n	800088a <decodeData+0x92>

    default:

        bufAux[indiceAux++]=0xFF;
 8000874:	7fbb      	ldrb	r3, [r7, #30]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	77ba      	strb	r2, [r7, #30]
 800087a:	3320      	adds	r3, #32
 800087c:	443b      	add	r3, r7
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000884:	2302      	movs	r3, #2
 8000886:	77fb      	strb	r3, [r7, #31]

    break;
 8000888:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 800088a:	7ffa      	ldrb	r2, [r7, #31]
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f804 	bl	80008a0 <SendInfo>
}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SendInfo>:

//calculo y envio el checksum
void SendInfo(uint8_t bufferAux[], uint8_t bytes){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[20], indiceAux=0,cks=0,i=0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	77fb      	strb	r3, [r7, #31]
 80008b0:	2300      	movs	r3, #0
 80008b2:	77bb      	strb	r3, [r7, #30]
 80008b4:	2300      	movs	r3, #0
 80008b6:	777b      	strb	r3, [r7, #29]

    bufAux[indiceAux++]='U';
 80008b8:	7ffb      	ldrb	r3, [r7, #31]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	77fa      	strb	r2, [r7, #31]
 80008be:	3320      	adds	r3, #32
 80008c0:	443b      	add	r3, r7
 80008c2:	2255      	movs	r2, #85	; 0x55
 80008c4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 80008c8:	7ffb      	ldrb	r3, [r7, #31]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	77fa      	strb	r2, [r7, #31]
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	224e      	movs	r2, #78	; 0x4e
 80008d4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 80008d8:	7ffb      	ldrb	r3, [r7, #31]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	77fa      	strb	r2, [r7, #31]
 80008de:	3320      	adds	r3, #32
 80008e0:	443b      	add	r3, r7
 80008e2:	2245      	movs	r2, #69	; 0x45
 80008e4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 80008e8:	7ffb      	ldrb	r3, [r7, #31]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	77fa      	strb	r2, [r7, #31]
 80008ee:	3320      	adds	r3, #32
 80008f0:	443b      	add	r3, r7
 80008f2:	2252      	movs	r2, #82	; 0x52
 80008f4:	f803 2c18 	strb.w	r2, [r3, #-24]

    bufAux[indiceAux++]=bytes;
 80008f8:	7ffb      	ldrb	r3, [r7, #31]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	77fa      	strb	r2, [r7, #31]
 80008fe:	3320      	adds	r3, #32
 8000900:	443b      	add	r3, r7
 8000902:	78fa      	ldrb	r2, [r7, #3]
 8000904:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000908:	7ffb      	ldrb	r3, [r7, #31]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	77fa      	strb	r2, [r7, #31]
 800090e:	3320      	adds	r3, #32
 8000910:	443b      	add	r3, r7
 8000912:	223a      	movs	r2, #58	; 0x3a
 8000914:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(i=0; i<bytes-1; i++){
 8000918:	2300      	movs	r3, #0
 800091a:	777b      	strb	r3, [r7, #29]
 800091c:	e00d      	b.n	800093a <SendInfo+0x9a>
        bufAux[indiceAux++] = bufferAux[i];
 800091e:	7f7b      	ldrb	r3, [r7, #29]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	441a      	add	r2, r3
 8000924:	7ffb      	ldrb	r3, [r7, #31]
 8000926:	1c59      	adds	r1, r3, #1
 8000928:	77f9      	strb	r1, [r7, #31]
 800092a:	7812      	ldrb	r2, [r2, #0]
 800092c:	3320      	adds	r3, #32
 800092e:	443b      	add	r3, r7
 8000930:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(i=0; i<bytes-1; i++){
 8000934:	7f7b      	ldrb	r3, [r7, #29]
 8000936:	3301      	adds	r3, #1
 8000938:	777b      	strb	r3, [r7, #29]
 800093a:	7f7a      	ldrb	r2, [r7, #29]
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	3b01      	subs	r3, #1
 8000940:	429a      	cmp	r2, r3
 8000942:	dbec      	blt.n	800091e <SendInfo+0x7e>
    }

    cks	= 0;
 8000944:	2300      	movs	r3, #0
 8000946:	77bb      	strb	r3, [r7, #30]

    //Cargar en bufferTx con checksum:
    for(i=0 ;i<indiceAux;i++){
 8000948:	2300      	movs	r3, #0
 800094a:	777b      	strb	r3, [r7, #29]
 800094c:	e01b      	b.n	8000986 <SendInfo+0xe6>
        cks^= bufAux[i];
 800094e:	7f7b      	ldrb	r3, [r7, #29]
 8000950:	3320      	adds	r3, #32
 8000952:	443b      	add	r3, r7
 8000954:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000958:	7fbb      	ldrb	r3, [r7, #30]
 800095a:	4053      	eors	r3, r2
 800095c:	77bb      	strb	r3, [r7, #30]
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 800095e:	7f7a      	ldrb	r2, [r7, #29]
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <SendInfo+0x13c>)
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	b2c8      	uxtb	r0, r1
 8000968:	491c      	ldr	r1, [pc, #112]	; (80009dc <SendInfo+0x13c>)
 800096a:	7148      	strb	r0, [r1, #5]
 800096c:	4619      	mov	r1, r3
 800096e:	f102 0320 	add.w	r3, r2, #32
 8000972:	443b      	add	r3, r7
 8000974:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <SendInfo+0x13c>)
 800097a:	440b      	add	r3, r1
 800097c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    for(i=0 ;i<indiceAux;i++){
 8000980:	7f7b      	ldrb	r3, [r7, #29]
 8000982:	3301      	adds	r3, #1
 8000984:	777b      	strb	r3, [r7, #29]
 8000986:	7f7a      	ldrb	r2, [r7, #29]
 8000988:	7ffb      	ldrb	r3, [r7, #31]
 800098a:	429a      	cmp	r2, r3
 800098c:	d3df      	bcc.n	800094e <SendInfo+0xae>
    }
    // Agregar el checksum al final
    datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <SendInfo+0x13c>)
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	b2d1      	uxtb	r1, r2
 8000996:	4a11      	ldr	r2, [pc, #68]	; (80009dc <SendInfo+0x13c>)
 8000998:	7151      	strb	r1, [r2, #5]
 800099a:	461a      	mov	r2, r3
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <SendInfo+0x13c>)
 800099e:	4413      	add	r3, r2
 80009a0:	7fba      	ldrb	r2, [r7, #30]
 80009a2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    // Cantidad total de bytes a transmitir (incluyendo checksum)
    datosComSerie.bytesTosend = datosComSerie.indexWriteTx;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <SendInfo+0x13c>)
 80009a8:	795a      	ldrb	r2, [r3, #5]
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <SendInfo+0x13c>)
 80009ac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207

    // Paquete enviado hacia QT: 55 4E 45 52   01 	 3A     F0         0D          C8
    //							 'U''N''E''R''Nbytes'':''ID:Alive''Payload: ACK''Cheksum'
    CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend); //transmision por USB hacia QT
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <SendInfo+0x13c>)
 80009b2:	799b      	ldrb	r3, [r3, #6]
 80009b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009b8:	4a08      	ldr	r2, [pc, #32]	; (80009dc <SendInfo+0x13c>)
 80009ba:	4413      	add	r3, r2
 80009bc:	3307      	adds	r3, #7
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <SendInfo+0x13c>)
 80009c0:	f892 2207 	ldrb.w	r2, [r2, #519]	; 0x207
 80009c4:	b292      	uxth	r2, r2
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f007 fdef 	bl	80085ac <CDC_Transmit_FS>
    datosComSerie.indexWriteTx = 0;
 80009ce:	4b03      	ldr	r3, [pc, #12]	; (80009dc <SendInfo+0x13c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	715a      	strb	r2, [r3, #5]

}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000268 	.word	0x20000268

080009e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d104      	bne.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 80009f2:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009f4:	7813      	ldrb	r3, [r2, #0]
 80009f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fa:	7013      	strb	r3, [r2, #0]
	}

}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40010000 	.word	0x40010000
 8000a0c:	20000264 	.word	0x20000264

08000a10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	77fb      	strb	r3, [r7, #31]
 8000a20:	e00c      	b.n	8000a3c <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 8000a22:	7ffa      	ldrb	r2, [r7, #31]
 8000a24:	7ffb      	ldrb	r3, [r7, #31]
 8000a26:	490b      	ldr	r1, [pc, #44]	; (8000a54 <HAL_ADC_ConvCpltCallback+0x44>)
 8000a28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a2c:	f107 000c 	add.w	r0, r7, #12
 8000a30:	4909      	ldr	r1, [pc, #36]	; (8000a58 <HAL_ADC_ConvCpltCallback+0x48>)
 8000a32:	f008 fa1d 	bl	8008e70 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	77fb      	strb	r3, [r7, #31]
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	2b07      	cmp	r3, #7
 8000a40:	d9ef      	bls.n	8000a22 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a48:	f001 fe83 	bl	8002752 <HAL_GPIO_TogglePin>
}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000474 	.word	0x20000474
 8000a58:	080097d0 	.word	0x080097d0
 8000a5c:	40020800 	.word	0x40020800

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f000 fbbf 	bl	80011f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_Attach_Rx(&datafromUSB);
 8000a72:	4827      	ldr	r0, [pc, #156]	; (8000b10 <main+0xb0>)
 8000a74:	f007 fdd2 	bl	800861c <CDC_Attach_Rx>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f856 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 f9e0 	bl	8000e40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a80:	f000 f9be 	bl	8000e00 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a84:	f000 f96c 	bl	8000d60 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000a88:	f007 fc74 	bl	8008374 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000a8c:	f000 f8b4 	bl	8000bf8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000a90:	4820      	ldr	r0, [pc, #128]	; (8000b14 <main+0xb4>)
 8000a92:	f003 fd4b 	bl	800452c <HAL_TIM_Base_Start_IT>

  IS10MS = FALSE;
 8000a96:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <main+0xb8>)
 8000a98:	7813      	ldrb	r3, [r2, #0]
 8000a9a:	f36f 1386 	bfc	r3, #6, #1
 8000a9e:	7013      	strb	r3, [r2, #0]
  datosComSerie.indexReadRx = 0;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <main+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <main+0xbc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	70da      	strb	r2, [r3, #3]
  myFlags.allFlags = 0;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <main+0xb8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  comunicationsTask(&datosComSerie);
 8000ab2:	481a      	ldr	r0, [pc, #104]	; (8000b1c <main+0xbc>)
 8000ab4:	f7ff fd8e 	bl	80005d4 <comunicationsTask>

	  if(IS10MS){
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <main+0xb8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f5      	beq.n	8000ab2 <main+0x52>
		  time250us++;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	71fb      	strb	r3, [r7, #7]
		  IS10MS =! IS10MS;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <main+0xb8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	bf0c      	ite	eq
 8000ada:	2301      	moveq	r3, #1
 8000adc:	2300      	movne	r3, #0
 8000ade:	b2d9      	uxtb	r1, r3
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <main+0xb8>)
 8000ae2:	7813      	ldrb	r3, [r2, #0]
 8000ae4:	f361 1386 	bfi	r3, r1, #6, #1
 8000ae8:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b27      	cmp	r3, #39	; 0x27
 8000aee:	d9e0      	bls.n	8000ab2 <main+0x52>
			  time10ms++;
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	3301      	adds	r3, #1
 8000af4:	71bb      	strb	r3, [r7, #6]
			  time250us = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	71fb      	strb	r3, [r7, #7]
			  if(time10ms == 100){
 8000afa:	79bb      	ldrb	r3, [r7, #6]
 8000afc:	2b64      	cmp	r3, #100	; 0x64
 8000afe:	d1d8      	bne.n	8000ab2 <main+0x52>
				  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 8000b00:	2208      	movs	r2, #8
 8000b02:	4907      	ldr	r1, [pc, #28]	; (8000b20 <main+0xc0>)
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <main+0xc4>)
 8000b06:	f000 fc4d 	bl	80013a4 <HAL_ADC_Start_DMA>
				  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
				  time10ms = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	71bb      	strb	r3, [r7, #6]
	  comunicationsTask(&datosComSerie);
 8000b0e:	e7d0      	b.n	8000ab2 <main+0x52>
 8000b10:	0800057d 	.word	0x0800057d
 8000b14:	2000021c 	.word	0x2000021c
 8000b18:	20000264 	.word	0x20000264
 8000b1c:	20000268 	.word	0x20000268
 8000b20:	20000474 	.word	0x20000474
 8000b24:	20000174 	.word	0x20000174

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	; 0x50
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	2230      	movs	r2, #48	; 0x30
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f008 f9ba 	bl	8008eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <SystemClock_Config+0xc8>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a26      	ldr	r2, [pc, #152]	; (8000bf0 <SystemClock_Config+0xc8>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <SystemClock_Config+0xc8>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <SystemClock_Config+0xcc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <SystemClock_Config+0xcc>)
 8000b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <SystemClock_Config+0xcc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b98:	2319      	movs	r3, #25
 8000b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b9c:	23c0      	movs	r3, #192	; 0xc0
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 f83d 	bl	8003c2c <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb8:	f000 f994 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fa9f 	bl	800411c <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000be4:	f000 f97e 	bl	8000ee4 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3750      	adds	r7, #80	; 0x50
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c0a:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c0c:	4a52      	ldr	r2, [pc, #328]	; (8000d58 <MX_ADC1_Init+0x160>)
 8000c0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c10:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c18:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c24:	4b4b      	ldr	r3, [pc, #300]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c32:	4b48      	ldr	r3, [pc, #288]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c38:	4b46      	ldr	r3, [pc, #280]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c3a:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <MX_ADC1_Init+0x164>)
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3e:	4b45      	ldr	r3, [pc, #276]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c4a:	4b42      	ldr	r3, [pc, #264]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c52:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c58:	483e      	ldr	r0, [pc, #248]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c5a:	f000 fb5f 	bl	800131c <HAL_ADC_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c64:	f000 f93e 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4836      	ldr	r0, [pc, #216]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c7a:	f000 fc9b 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c84:	f000 f92e 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	482f      	ldr	r0, [pc, #188]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000c96:	f000 fc8d 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ca0:	f000 f920 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4828      	ldr	r0, [pc, #160]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000cb2:	f000 fc7f 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000cbc:	f000 f912 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4821      	ldr	r0, [pc, #132]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000cce:	f000 fc71 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000cd8:	f000 f904 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000ce0:	2305      	movs	r3, #5
 8000ce2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000cea:	f000 fc63 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000cf4:	f000 f8f6 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4813      	ldr	r0, [pc, #76]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000d06:	f000 fc55 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000d10:	f000 f8e8 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d14:	2306      	movs	r3, #6
 8000d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000d22:	f000 fc47 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000d2c:	f000 f8da 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d30:	2307      	movs	r3, #7
 8000d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000d34:	2308      	movs	r3, #8
 8000d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_ADC1_Init+0x15c>)
 8000d3e:	f000 fc39 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000d48:	f000 f8cc 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000174 	.word	0x20000174
 8000d58:	40012000 	.word	0x40012000
 8000d5c:	0f000001 	.word	0x0f000001

08000d60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d7e:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <MX_TIM1_Init+0x9c>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d90:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000d94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da8:	4813      	ldr	r0, [pc, #76]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000daa:	f003 fb6f 	bl	800448c <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000db4:	f000 f896 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000dc6:	f003 fd03 	bl	80047d0 <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000dd0:	f000 f888 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000de2:	f003 ff05 	bl	8004bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000dec:	f000 f87a 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000021c 	.word	0x2000021c
 8000dfc:	40010000 	.word	0x40010000

08000e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_DMA_Init+0x3c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <MX_DMA_Init+0x3c>)
 8000e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_DMA_Init+0x3c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2038      	movs	r0, #56	; 0x38
 8000e28:	f000 ff4f 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e2c:	2038      	movs	r0, #56	; 0x38
 8000e2e:	f000 ff68 	bl	8001d02 <HAL_NVIC_EnableIRQ>

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_GPIO_Init+0x9c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_GPIO_Init+0xa0>)
 8000eb2:	f001 fc35 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_GPIO_Init+0xa0>)
 8000ed0:	f001 faa2 	bl	8002418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <HAL_ADC_MspInit+0xd8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d156      	bne.n	8001010 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_ADC_MspInit+0xdc>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a2c      	ldr	r2, [pc, #176]	; (800101c <HAL_ADC_MspInit+0xdc>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <HAL_ADC_MspInit+0xdc>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_ADC_MspInit+0xdc>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a25      	ldr	r2, [pc, #148]	; (800101c <HAL_ADC_MspInit+0xdc>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_ADC_MspInit+0xdc>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f9a:	23ff      	movs	r3, #255	; 0xff
 8000f9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	481c      	ldr	r0, [pc, #112]	; (8001020 <HAL_ADC_MspInit+0xe0>)
 8000fae:	f001 fa33 	bl	8002418 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fb4:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <HAL_ADC_MspInit+0xe8>)
 8000fb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8000ff6:	f000 fe9f 	bl	8001d38 <HAL_DMA_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001000:	f7ff ff70 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 8001008:	639a      	str	r2, [r3, #56]	; 0x38
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_ADC_MspInit+0xe4>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40012000 	.word	0x40012000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	200001bc 	.word	0x200001bc
 8001028:	40026410 	.word	0x40026410

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_TIM_Base_MspInit+0x48>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d115      	bne.n	800106a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_TIM_Base_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <HAL_TIM_Base_MspInit+0x4c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_TIM_Base_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2019      	movs	r0, #25
 8001060:	f000 fe33 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001064:	2019      	movs	r0, #25
 8001066:	f000 fe4c 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40010000 	.word	0x40010000
 8001078:	40023800 	.word	0x40023800

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f8e4 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010d6:	f003 fa8b 	bl	80045f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000021c 	.word	0x2000021c

080010e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <DMA2_Stream0_IRQHandler+0x10>)
 80010ea:	f000 ff2b 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001bc 	.word	0x200001bc

080010f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <OTG_FS_IRQHandler+0x10>)
 80010fe:	f001 fc86 	bl	8002a0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000d70 	.word	0x20000d70

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f007 fec0 	bl	8008ec0 <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20020000 	.word	0x20020000
 800116c:	00000400 	.word	0x00000400
 8001170:	20000484 	.word	0x20000484
 8001174:	200015c0 	.word	0x200015c0

08001178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a0:	f7ff ffea 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a6:	490d      	ldr	r1, [pc, #52]	; (80011dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011bc:	4c0a      	ldr	r4, [pc, #40]	; (80011e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f007 fe7f 	bl	8008ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ce:	f7ff fc47 	bl	8000a60 <main>
  bx  lr    
 80011d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 80011e0:	08009884 	.word	0x08009884
  ldr r2, =_sbss
 80011e4:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 80011e8:	200015bc 	.word	0x200015bc

080011ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_Init+0x40>)
 80011fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_Init+0x40>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x40>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 fd4b 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fe64 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023c00 	.word	0x40023c00

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fd63 	bl	8001d1e <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 fd2b 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000488 	.word	0x20000488

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000488 	.word	0x20000488

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008

0800131c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e033      	b.n	800139a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fe00 	bl	8000f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2b00      	cmp	r3, #0
 8001358:	d118      	bne.n	800138c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001362:	f023 0302 	bic.w	r3, r3, #2
 8001366:	f043 0202 	orr.w	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fa52 	bl	8001818 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
 800138a:	e001      	b.n	8001390 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Start_DMA+0x22>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e0d0      	b.n	8001568 <HAL_ADC_Start_DMA+0x1c4>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d018      	beq.n	800140e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ec:	4b60      	ldr	r3, [pc, #384]	; (8001570 <HAL_ADC_Start_DMA+0x1cc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_ADC_Start_DMA+0x1d0>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	0c9a      	lsrs	r2, r3, #18
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001400:	e002      	b.n	8001408 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3b01      	subs	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f9      	bne.n	8001402 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800141c:	d107      	bne.n	800142e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800142c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	f040 8088 	bne.w	800154e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145c:	2b00      	cmp	r3, #0
 800145e:	d007      	beq.n	8001470 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001468:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800147c:	d106      	bne.n	800148c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f023 0206 	bic.w	r2, r3, #6
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
 800148a:	e002      	b.n	8001492 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_ADC_Start_DMA+0x1d4>)
 800149c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a36      	ldr	r2, [pc, #216]	; (800157c <HAL_ADC_Start_DMA+0x1d8>)
 80014a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014aa:	4a35      	ldr	r2, [pc, #212]	; (8001580 <HAL_ADC_Start_DMA+0x1dc>)
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	4a34      	ldr	r2, [pc, #208]	; (8001584 <HAL_ADC_Start_DMA+0x1e0>)
 80014b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	334c      	adds	r3, #76	; 0x4c
 80014ea:	4619      	mov	r1, r3
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f000 fcd0 	bl	8001e94 <HAL_DMA_Start_IT>
 80014f4:	4603      	mov	r3, r0
 80014f6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10f      	bne.n	8001524 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d129      	bne.n	8001566 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	e020      	b.n	8001566 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_ADC_Start_DMA+0x1e4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d11b      	bne.n	8001566 <HAL_ADC_Start_DMA+0x1c2>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d114      	bne.n	8001566 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e00b      	b.n	8001566 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f043 0210 	orr.w	r2, r3, #16
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001566:	7ffb      	ldrb	r3, [r7, #31]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	431bde83 	.word	0x431bde83
 8001578:	40012300 	.word	0x40012300
 800157c:	08001a11 	.word	0x08001a11
 8001580:	08001acb 	.word	0x08001acb
 8001584:	08001ae7 	.word	0x08001ae7
 8001588:	40012000 	.word	0x40012000

0800158c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1c>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e113      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x244>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d925      	bls.n	800162c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68d9      	ldr	r1, [r3, #12]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	3b1e      	subs	r3, #30
 80015f6:	2207      	movs	r2, #7
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43da      	mvns	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	400a      	ands	r2, r1
 8001604:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68d9      	ldr	r1, [r3, #12]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	4618      	mov	r0, r3
 8001618:	4603      	mov	r3, r0
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4403      	add	r3, r0
 800161e:	3b1e      	subs	r3, #30
 8001620:	409a      	lsls	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	e022      	b.n	8001672 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6919      	ldr	r1, [r3, #16]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	2207      	movs	r2, #7
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	400a      	ands	r2, r1
 800164e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6919      	ldr	r1, [r3, #16]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	4603      	mov	r3, r0
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4403      	add	r3, r0
 8001668:	409a      	lsls	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b06      	cmp	r3, #6
 8001678:	d824      	bhi.n	80016c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	3b05      	subs	r3, #5
 800168c:	221f      	movs	r2, #31
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	400a      	ands	r2, r1
 800169a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3b05      	subs	r3, #5
 80016b6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34
 80016c2:	e04c      	b.n	800175e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b0c      	cmp	r3, #12
 80016ca:	d824      	bhi.n	8001716 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	3b23      	subs	r3, #35	; 0x23
 80016de:	221f      	movs	r2, #31
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43da      	mvns	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	400a      	ands	r2, r1
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	3b23      	subs	r3, #35	; 0x23
 8001708:	fa00 f203 	lsl.w	r2, r0, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
 8001714:	e023      	b.n	800175e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b41      	subs	r3, #65	; 0x41
 8001728:	221f      	movs	r2, #31
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	400a      	ands	r2, r1
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	3b41      	subs	r3, #65	; 0x41
 8001752:	fa00 f203 	lsl.w	r2, r0, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_ADC_ConfigChannel+0x250>)
 8001760:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_ADC_ConfigChannel+0x254>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d10f      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1d8>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b12      	cmp	r3, #18
 8001772:	d10b      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_ADC_ConfigChannel+0x254>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12b      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x23a>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_ADC_ConfigChannel+0x258>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d003      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0x1f4>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b11      	cmp	r3, #17
 80017a6:	d122      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_ADC_ConfigChannel+0x258>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d111      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_ADC_ConfigChannel+0x25c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_ADC_ConfigChannel+0x260>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0c9a      	lsrs	r2, r3, #18
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017e0:	e002      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f9      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40012300 	.word	0x40012300
 8001808:	40012000 	.word	0x40012000
 800180c:	10000012 	.word	0x10000012
 8001810:	20000000 	.word	0x20000000
 8001814:	431bde83 	.word	0x431bde83

08001818 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001820:	4b79      	ldr	r3, [pc, #484]	; (8001a08 <ADC_Init+0x1f0>)
 8001822:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	431a      	orrs	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800184c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	021a      	lsls	r2, r3, #8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6899      	ldr	r1, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <ADC_Init+0x1f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d022      	beq.n	80018f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6899      	ldr	r1, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	e00f      	b.n	8001916 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001914:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0202 	bic.w	r2, r2, #2
 8001924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6899      	ldr	r1, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7e1b      	ldrb	r3, [r3, #24]
 8001930:	005a      	lsls	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01b      	beq.n	800197c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001952:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001962:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	3b01      	subs	r3, #1
 8001970:	035a      	lsls	r2, r3, #13
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	e007      	b.n	800198c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800198a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	051a      	lsls	r2, r3, #20
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6899      	ldr	r1, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ce:	025a      	lsls	r2, r3, #9
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6899      	ldr	r1, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	029a      	lsls	r2, r3, #10
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40012300 	.word	0x40012300
 8001a0c:	0f000001 	.word	0x0f000001

08001a10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d13c      	bne.n	8001aa4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d12b      	bne.n	8001a9c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d127      	bne.n	8001a9c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d119      	bne.n	8001a9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0220 	bic.w	r2, r2, #32
 8001a76:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7fe ffb7 	bl	8000a10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001aa2:	e00e      	b.n	8001ac2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fd75 	bl	80015a0 <HAL_ADC_ErrorCallback>
}
 8001ab6:	e004      	b.n	8001ac2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff fd57 	bl	800158c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f043 0204 	orr.w	r2, r3, #4
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fd4a 	bl	80015a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff29 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff3e 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff31 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff faba 	bl	80012bc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e099      	b.n	8001e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d74:	e00f      	b.n	8001d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d76:	f7ff faa1 	bl	80012bc <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d908      	bls.n	8001d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e078      	b.n	8001e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e8      	bne.n	8001d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_DMA_Init+0x158>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d107      	bne.n	8001e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f023 0307 	bic.w	r3, r3, #7
 8001e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d117      	bne.n	8001e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fa6f 	bl	8002320 <DMA_CheckFifoParam>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e56:	2301      	movs	r3, #1
 8001e58:	e016      	b.n	8001e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa26 	bl	80022b4 <DMA_CalcBaseAndBitshift>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	223f      	movs	r2, #63	; 0x3f
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	f010803f 	.word	0xf010803f

08001e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_DMA_Start_IT+0x26>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e040      	b.n	8001f3c <HAL_DMA_Start_IT+0xa8>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d12f      	bne.n	8001f2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f9b8 	bl	8002258 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	223f      	movs	r2, #63	; 0x3f
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0216 	orr.w	r2, r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e005      	b.n	8001f3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f50:	4b8e      	ldr	r3, [pc, #568]	; (800218c <HAL_DMA_IRQHandler+0x248>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a8e      	ldr	r2, [pc, #568]	; (8002190 <HAL_DMA_IRQHandler+0x24c>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2208      	movs	r2, #8
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01a      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0204 	bic.w	r2, r2, #4
 8001f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d012      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2204      	movs	r2, #4
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2204      	movs	r2, #4
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f043 0204 	orr.w	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2210      	movs	r2, #16
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d043      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03c      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2210      	movs	r2, #16
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d018      	beq.n	8002086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d024      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
 8002072:	e01f      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e016      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0208 	bic.w	r2, r2, #8
 80020a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2220      	movs	r2, #32
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 808f 	beq.w	80021e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8087 	beq.w	80021e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2220      	movs	r2, #32
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d136      	bne.n	800215c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0216 	bic.w	r2, r2, #22
 80020fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <HAL_DMA_IRQHandler+0x1da>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0208 	bic.w	r2, r2, #8
 800212c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	223f      	movs	r2, #63	; 0x3f
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07e      	beq.n	8002250 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
        }
        return;
 800215a:	e079      	b.n	8002250 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01d      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	2b00      	cmp	r3, #0
 800217e:	d031      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
 8002188:	e02c      	b.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000
 8002190:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d023      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
 80021a4:	e01e      	b.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10f      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0210 	bic.w	r2, r2, #16
 80021c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d032      	beq.n	8002252 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d022      	beq.n	800223e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2205      	movs	r2, #5
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3301      	adds	r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	d307      	bcc.n	800222c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f2      	bne.n	8002210 <HAL_DMA_IRQHandler+0x2cc>
 800222a:	e000      	b.n	800222e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800222c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
 800224e:	e000      	b.n	8002252 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002250:	bf00      	nop
    }
  }
}
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002274:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b40      	cmp	r3, #64	; 0x40
 8002284:	d108      	bne.n	8002298 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002296:	e007      	b.n	80022a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	60da      	str	r2, [r3, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3b10      	subs	r3, #16
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <DMA_CalcBaseAndBitshift+0x64>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <DMA_CalcBaseAndBitshift+0x68>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d909      	bls.n	80022f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	1d1a      	adds	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	659a      	str	r2, [r3, #88]	; 0x58
 80022f4:	e007      	b.n	8002306 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	aaaaaaab 	.word	0xaaaaaaab
 800231c:	08009838 	.word	0x08009838

08002320 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11f      	bne.n	800237a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d856      	bhi.n	80023ee <DMA_CheckFifoParam+0xce>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <DMA_CheckFifoParam+0x28>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002359 	.word	0x08002359
 800234c:	0800236b 	.word	0x0800236b
 8002350:	08002359 	.word	0x08002359
 8002354:	080023ef 	.word	0x080023ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d046      	beq.n	80023f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e043      	b.n	80023f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002372:	d140      	bne.n	80023f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e03d      	b.n	80023f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	d121      	bne.n	80023c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d837      	bhi.n	80023fa <DMA_CheckFifoParam+0xda>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <DMA_CheckFifoParam+0x70>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023a1 	.word	0x080023a1
 8002394:	080023a7 	.word	0x080023a7
 8002398:	080023a1 	.word	0x080023a1
 800239c:	080023b9 	.word	0x080023b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	e030      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d025      	beq.n	80023fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b6:	e022      	b.n	80023fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c0:	d11f      	bne.n	8002402 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023c6:	e01c      	b.n	8002402 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d903      	bls.n	80023d6 <DMA_CheckFifoParam+0xb6>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d003      	beq.n	80023dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d4:	e018      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      break;
 80023da:	e015      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00e      	beq.n	8002406 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      break;
 80023ec:	e00b      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023ee:	bf00      	nop
 80023f0:	e00a      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
 80023f4:	e008      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
 80023f8:	e006      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 80023fa:	bf00      	nop
 80023fc:	e004      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 80023fe:	bf00      	nop
 8002400:	e002      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;   
 8002402:	bf00      	nop
 8002404:	e000      	b.n	8002408 <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
    }
  } 
  
  return status; 
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e159      	b.n	80026e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	f040 8148 	bne.w	80026e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d005      	beq.n	800246a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	2b02      	cmp	r3, #2
 8002468:	d130      	bne.n	80024cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0201 	and.w	r2, r3, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d017      	beq.n	8002508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a2 	beq.w	80026e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_GPIO_Init+0x2e8>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a56      	ldr	r2, [pc, #344]	; (8002700 <HAL_GPIO_Init+0x2e8>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b54      	ldr	r3, [pc, #336]	; (8002700 <HAL_GPIO_Init+0x2e8>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ba:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_GPIO_Init+0x2ec>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a49      	ldr	r2, [pc, #292]	; (8002708 <HAL_GPIO_Init+0x2f0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x202>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a48      	ldr	r2, [pc, #288]	; (800270c <HAL_GPIO_Init+0x2f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x1fe>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a47      	ldr	r2, [pc, #284]	; (8002710 <HAL_GPIO_Init+0x2f8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x1fa>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a46      	ldr	r2, [pc, #280]	; (8002714 <HAL_GPIO_Init+0x2fc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x1f6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a45      	ldr	r2, [pc, #276]	; (8002718 <HAL_GPIO_Init+0x300>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x1f2>
 8002606:	2304      	movs	r3, #4
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x204>
 800260a:	2307      	movs	r3, #7
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x204>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x204>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x204>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x204>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262c:	4935      	ldr	r1, [pc, #212]	; (8002704 <HAL_GPIO_Init+0x2ec>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <HAL_GPIO_Init+0x304>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265e:	4a2f      	ldr	r2, [pc, #188]	; (800271c <HAL_GPIO_Init+0x304>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_GPIO_Init+0x304>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002688:	4a24      	ldr	r2, [pc, #144]	; (800271c <HAL_GPIO_Init+0x304>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_GPIO_Init+0x304>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b2:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_GPIO_Init+0x304>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_GPIO_Init+0x304>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026dc:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_GPIO_Init+0x304>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f aea2 	bls.w	8002434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40013c00 	.word	0x40013c00

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
 800272c:	4613      	mov	r3, r2
 800272e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800273c:	e003      	b.n	8002746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	041a      	lsls	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002764:	887a      	ldrh	r2, [r7, #2]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	041a      	lsls	r2, r3, #16
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	43d9      	mvns	r1, r3
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	400b      	ands	r3, r1
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af02      	add	r7, sp, #8
 800278c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e101      	b.n	800299c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f006 f852 	bl	800885c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c6:	d102      	bne.n	80027ce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fba5 	bl	8004f22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7c1a      	ldrb	r2, [r3, #16]
 80027e0:	f88d 2000 	strb.w	r2, [sp]
 80027e4:	3304      	adds	r3, #4
 80027e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e8:	f002 fa84 	bl	8004cf4 <USB_CoreInit>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0ce      	b.n	800299c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fb9d 	bl	8004f44 <USB_SetCurrentMode>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0bf      	b.n	800299c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e04a      	b.n	80028b8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3315      	adds	r3, #21
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3314      	adds	r3, #20
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	b298      	uxth	r0, r3
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	332e      	adds	r3, #46	; 0x2e
 800285e:	4602      	mov	r2, r0
 8002860:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	3318      	adds	r3, #24
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	331c      	adds	r3, #28
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3320      	adds	r3, #32
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	3324      	adds	r3, #36	; 0x24
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	3301      	adds	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3af      	bcc.n	8002822 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e044      	b.n	8002952 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	f203 2355 	addw	r3, r3, #597	; 0x255
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	3301      	adds	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	791b      	ldrb	r3, [r3, #4]
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	429a      	cmp	r2, r3
 800295a:	d3b5      	bcc.n	80028c8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7c1a      	ldrb	r2, [r3, #16]
 8002964:	f88d 2000 	strb.w	r2, [sp]
 8002968:	3304      	adds	r3, #4
 800296a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800296c:	f002 fb36 	bl	8004fdc <USB_DevInit>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e00c      	b.n	800299c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fb80 	bl	800609a <USB_DevDisconnect>

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_PCD_Start+0x1c>
 80029bc:	2302      	movs	r3, #2
 80029be:	e022      	b.n	8002a06 <HAL_PCD_Start+0x62>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f002 fa87 	bl	8004f00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fb2e 	bl	8006058 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a0e:	b590      	push	{r4, r7, lr}
 8002a10:	b08d      	sub	sp, #52	; 0x34
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fbec 	bl	8006202 <USB_GetMode>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 848c 	bne.w	800334a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fb50 	bl	80060dc <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8482 	beq.w	8003348 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fb3d 	bl	80060dc <USB_ReadInterrupts>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d107      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f002 0202 	and.w	r2, r2, #2
 8002a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 fb2b 	bl	80060dc <USB_ReadInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	d161      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0210 	bic.w	r2, r2, #16
 8002a9e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f003 020f 	and.w	r2, r3, #15
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	0c5b      	lsrs	r3, r3, #17
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d124      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d035      	beq.n	8002b44 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	6a38      	ldr	r0, [r7, #32]
 8002aec:	f003 f962 	bl	8005db4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002afc:	441a      	add	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b0e:	441a      	add	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	615a      	str	r2, [r3, #20]
 8002b14:	e016      	b.n	8002b44 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	0c5b      	lsrs	r3, r3, #17
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d110      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b28:	2208      	movs	r2, #8
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6a38      	ldr	r0, [r7, #32]
 8002b2e:	f003 f941 	bl	8005db4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3e:	441a      	add	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0210 	orr.w	r2, r2, #16
 8002b52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fabf 	bl	80060dc <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b68:	f040 80a7 	bne.w	8002cba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 fac4 	bl	8006102 <USB_ReadDevAllOutEpInterrupt>
 8002b7a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b7c:	e099      	b.n	8002cb2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 808e 	beq.w	8002ca6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fae8 	bl	800616a <USB_ReadDevOutEPInterrupt>
 8002b9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fea4 	bl	8003908 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2308      	movs	r3, #8
 8002bda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 ff7a 	bl	8003ad8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d030      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c12:	2b80      	cmp	r3, #128	; 0x80
 8002c14:	d109      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c28:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	78db      	ldrb	r3, [r3, #3]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d108      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f005 fefd 	bl	8008a54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	2302      	movs	r3, #2
 8002c6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c82:	461a      	mov	r2, r3
 8002c84:	2320      	movs	r3, #32
 8002c86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ca4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	3301      	adds	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f47f af62 	bne.w	8002b7e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 fa0c 	bl	80060dc <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cce:	f040 80db 	bne.w	8002e88 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fa2d 	bl	8006136 <USB_ReadDevAllInEpInterrupt>
 8002cdc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ce2:	e0cd      	b.n	8002e80 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80c2 	beq.w	8002e74 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fa53 	bl	80061a6 <USB_ReadDevInEPInterrupt>
 8002d00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d057      	beq.n	8002dbc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	2201      	movs	r2, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69f9      	ldr	r1, [r7, #28]
 8002d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2301      	movs	r3, #1
 8002d40:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	799b      	ldrb	r3, [r3, #6]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d132      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3320      	adds	r3, #32
 8002d5a:	6819      	ldr	r1, [r3, #0]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4403      	add	r3, r0
 8002d6a:	331c      	adds	r3, #28
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4419      	add	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4403      	add	r3, r0
 8002d7e:	3320      	adds	r3, #32
 8002d80:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d113      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x3a2>
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3324      	adds	r3, #36	; 0x24
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002da8:	461a      	mov	r2, r3
 8002daa:	2101      	movs	r1, #1
 8002dac:	f003 fa5a 	bl	8006264 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f005 fdd1 	bl	800895e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dee:	461a      	mov	r2, r3
 8002df0:	2310      	movs	r3, #16
 8002df2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2340      	movs	r3, #64	; 0x40
 8002e0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d023      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e1c:	6a38      	ldr	r0, [r7, #32]
 8002e1e:	f002 fa41 	bl	80052a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	78db      	ldrb	r3, [r3, #3]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d108      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f005 fe14 	bl	8008a78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2302      	movs	r3, #2
 8002e60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fcbd 	bl	80037ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	3301      	adds	r3, #1
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f47f af2e 	bne.w	8002ce4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 f925 	bl	80060dc <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e9c:	d122      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d108      	bne.n	8002ece <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fea4 	bl	8003c14 <HAL_PCDEx_LPM_Callback>
 8002ecc:	e002      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f005 fdb2 	bl	8008a38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 f8f7 	bl	80060dc <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef8:	d112      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f005 fd6e 	bl	80089ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f1e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 f8d9 	bl	80060dc <USB_ReadInterrupts>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	f040 80b7 	bne.w	80030a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2110      	movs	r1, #16
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 f9a6 	bl	80052a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5c:	e046      	b.n	8002fec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f82:	0151      	lsls	r1, r2, #5
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	440a      	add	r2, r1
 8002f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fa4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb6:	0151      	lsls	r1, r2, #5
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	440a      	add	r2, r1
 8002fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd6:	0151      	lsls	r1, r2, #5
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	440a      	add	r2, r1
 8002fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fe0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fe4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	3301      	adds	r3, #1
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	791b      	ldrb	r3, [r3, #4]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d3b2      	bcc.n	8002f5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003006:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800300a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7bdb      	ldrb	r3, [r3, #15]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d016      	beq.n	8003042 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003024:	f043 030b 	orr.w	r3, r3, #11
 8003028:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303a:	f043 030b 	orr.w	r3, r3, #11
 800303e:	6453      	str	r3, [r2, #68]	; 0x44
 8003040:	e015      	b.n	800306e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003050:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003054:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003058:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003068:	f043 030b 	orr.w	r3, r3, #11
 800306c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003080:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003090:	461a      	mov	r2, r3
 8003092:	f003 f8e7 	bl	8006264 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 f816 	bl	80060dc <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	d123      	bne.n	8003104 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 f8ac 	bl	800621e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f002 f963 	bl	8005396 <USB_GetDevSpeed>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681c      	ldr	r4, [r3, #0]
 80030dc:	f001 f9ca 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80030e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030e6:	461a      	mov	r2, r3
 80030e8:	4620      	mov	r0, r4
 80030ea:	f001 fe67 	bl	8004dbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f005 fc5d 	bl	80089ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003102:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f002 ffe7 	bl	80060dc <USB_ReadInterrupts>
 800310e:	4603      	mov	r3, r0
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d10a      	bne.n	800312e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f005 fc3a 	bl	8008992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f002 0208 	and.w	r2, r2, #8
 800312c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f002 ffd2 	bl	80060dc <USB_ReadInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	2b80      	cmp	r3, #128	; 0x80
 8003140:	d123      	bne.n	800318a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800314e:	2301      	movs	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	e014      	b.n	800317e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fb0a 	bl	800378c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	3301      	adds	r3, #1
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	791b      	ldrb	r3, [r3, #4]
 8003182:	461a      	mov	r2, r3
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	4293      	cmp	r3, r2
 8003188:	d3e4      	bcc.n	8003154 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f002 ffa4 	bl	80060dc <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800319e:	d13c      	bne.n	800321a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031a0:	2301      	movs	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
 80031a4:	e02b      	b.n	80031fe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3318      	adds	r3, #24
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d115      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da12      	bge.n	80031f8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3317      	adds	r3, #23
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 faca 	bl	800378c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	3301      	adds	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	791b      	ldrb	r3, [r3, #4]
 8003202:	461a      	mov	r2, r3
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	4293      	cmp	r3, r2
 8003208:	d3cd      	bcc.n	80031a6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f002 ff5c 	bl	80060dc <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322e:	d156      	bne.n	80032de <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	e045      	b.n	80032c2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d12e      	bne.n	80032bc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800325e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003260:	2b00      	cmp	r3, #0
 8003262:	da2b      	bge.n	80032bc <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	0c1a      	lsrs	r2, r3, #16
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800326e:	4053      	eors	r3, r2
 8003270:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003274:	2b00      	cmp	r3, #0
 8003276:	d121      	bne.n	80032bc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	f203 2357 	addw	r3, r3, #599	; 0x257
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b8:	6053      	str	r3, [r2, #4]
            break;
 80032ba:	e008      	b.n	80032ce <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	3301      	adds	r3, #1
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	791b      	ldrb	r3, [r3, #4]
 80032c6:	461a      	mov	r2, r3
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d3b3      	bcc.n	8003236 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 fefa 	bl	80060dc <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d10a      	bne.n	800330a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f005 fbd1 	bl	8008a9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f002 fee4 	bl	80060dc <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d115      	bne.n	800334a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f005 fbc1 	bl	8008ab8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	e000      	b.n	800334a <HAL_PCD_IRQHandler+0x93c>
      return;
 8003348:	bf00      	nop
    }
  }
}
 800334a:	3734      	adds	r7, #52	; 0x34
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}

08003350 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_PCD_SetAddress+0x1a>
 8003366:	2302      	movs	r3, #2
 8003368:	e012      	b.n	8003390 <HAL_PCD_SetAddress+0x40>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f002 fe43 	bl	800600c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	70fb      	strb	r3, [r7, #3]
 80033aa:	460b      	mov	r3, r1
 80033ac:	803b      	strh	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da0f      	bge.n	80033de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 020f 	and.w	r2, r3, #15
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	3310      	adds	r3, #16
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	705a      	strb	r2, [r3, #1]
 80033dc:	e00f      	b.n	80033fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800340a:	883b      	ldrh	r3, [r7, #0]
 800340c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	78ba      	ldrb	r2, [r7, #2]
 8003418:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	785b      	ldrb	r3, [r3, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800342c:	78bb      	ldrb	r3, [r7, #2]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d102      	bne.n	8003438 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_PCD_EP_Open+0xae>
 8003442:	2302      	movs	r3, #2
 8003444:	e00e      	b.n	8003464 <HAL_PCD_EP_Open+0xcc>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	4618      	mov	r0, r3
 8003456:	f001 ffc3 	bl	80053e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003462:	7afb      	ldrb	r3, [r7, #11]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800347c:	2b00      	cmp	r3, #0
 800347e:	da0f      	bge.n	80034a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	3310      	adds	r3, #16
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	705a      	strb	r2, [r3, #1]
 800349e:	e00f      	b.n	80034c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	f003 020f 	and.w	r2, r3, #15
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	3304      	adds	r3, #4
 80034b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_PCD_EP_Close+0x6e>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e00e      	b.n	80034f8 <HAL_PCD_EP_Close+0x8c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 f801 	bl	80054f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	460b      	mov	r3, r1
 800350e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003510:	7afb      	ldrb	r3, [r7, #11]
 8003512:	f003 020f 	and.w	r2, r3, #15
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4413      	add	r3, r2
 8003526:	3304      	adds	r3, #4
 8003528:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2200      	movs	r2, #0
 8003540:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003542:	7afb      	ldrb	r3, [r7, #11]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	b2da      	uxtb	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	799b      	ldrb	r3, [r3, #6]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d102      	bne.n	800355c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	799b      	ldrb	r3, [r3, #6]
 8003564:	461a      	mov	r2, r3
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	f002 f89e 	bl	80056a8 <USB_EPStartXfer>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003598:	681b      	ldr	r3, [r3, #0]
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	460b      	mov	r3, r1
 80035b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b6:	7afb      	ldrb	r3, [r7, #11]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	3310      	adds	r3, #16
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2201      	movs	r2, #1
 80035e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e6:	7afb      	ldrb	r3, [r7, #11]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	799b      	ldrb	r3, [r3, #6]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d102      	bne.n	8003600 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	799b      	ldrb	r3, [r3, #6]
 8003608:	461a      	mov	r2, r3
 800360a:	6979      	ldr	r1, [r7, #20]
 800360c:	f002 f84c 	bl	80056a8 <USB_EPStartXfer>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	7912      	ldrb	r2, [r2, #4]
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e04f      	b.n	80036d8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363c:	2b00      	cmp	r3, #0
 800363e:	da0f      	bge.n	8003660 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 020f 	and.w	r2, r3, #15
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	3310      	adds	r3, #16
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	705a      	strb	r2, [r3, #1]
 800365e:	e00d      	b.n	800367c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_PCD_EP_SetStall+0x82>
 8003698:	2302      	movs	r3, #2
 800369a:	e01d      	b.n	80036d8 <HAL_PCD_EP_SetStall+0xbe>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68f9      	ldr	r1, [r7, #12]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f002 fbda 	bl	8005e64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7999      	ldrb	r1, [r3, #6]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036c8:	461a      	mov	r2, r3
 80036ca:	f002 fdcb 	bl	8006264 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	7912      	ldrb	r2, [r2, #4]
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e042      	b.n	8003784 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	da0f      	bge.n	8003726 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 020f 	and.w	r2, r3, #15
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	3310      	adds	r3, #16
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	3304      	adds	r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	705a      	strb	r2, [r3, #1]
 8003724:	e00f      	b.n	8003746 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f003 020f 	and.w	r2, r3, #15
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_PCD_EP_ClrStall+0x86>
 8003762:	2302      	movs	r3, #2
 8003764:	e00e      	b.n	8003784 <HAL_PCD_EP_ClrStall+0xa4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	4618      	mov	r0, r3
 8003776:	f002 fbe3 	bl	8005f40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800379c:	2b00      	cmp	r3, #0
 800379e:	da0c      	bge.n	80037ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	f003 020f 	and.w	r2, r3, #15
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	3310      	adds	r3, #16
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4413      	add	r3, r2
 80037b4:	3304      	adds	r3, #4
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e00c      	b.n	80037d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	3304      	adds	r3, #4
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	4618      	mov	r0, r3
 80037dc:	f002 fa02 	bl	8005be4 <USB_EPStopXfer>
 80037e0:	4603      	mov	r3, r0
 80037e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037e4:	7afb      	ldrb	r3, [r7, #11]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b08a      	sub	sp, #40	; 0x28
 80037f2:	af02      	add	r7, sp, #8
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3310      	adds	r3, #16
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	429a      	cmp	r2, r3
 8003820:	d901      	bls.n	8003826 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e06b      	b.n	80038fe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	429a      	cmp	r2, r3
 800383a:	d902      	bls.n	8003842 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3303      	adds	r3, #3
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800384a:	e02a      	b.n	80038a2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	429a      	cmp	r2, r3
 8003860:	d902      	bls.n	8003868 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3303      	adds	r3, #3
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68d9      	ldr	r1, [r3, #12]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4603      	mov	r3, r0
 8003884:	6978      	ldr	r0, [r7, #20]
 8003886:	f002 fa57 	bl	8005d38 <USB_WritePacket>

    ep->xfer_buff  += len;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	441a      	add	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	441a      	add	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d809      	bhi.n	80038cc <PCD_WriteEmptyTxFifo+0xde>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d203      	bcs.n	80038cc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1bf      	bne.n	800384c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d811      	bhi.n	80038fc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	2201      	movs	r2, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	6939      	ldr	r1, [r7, #16]
 80038f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f8:	4013      	ands	r3, r2
 80038fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3720      	adds	r7, #32
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	333c      	adds	r3, #60	; 0x3c
 8003920:	3304      	adds	r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	799b      	ldrb	r3, [r3, #6]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d17b      	bne.n	8003a36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d015      	beq.n	8003974 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4a61      	ldr	r2, [pc, #388]	; (8003ad0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	f240 80b9 	bls.w	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80b3 	beq.w	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396a:	461a      	mov	r2, r3
 800396c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003970:	6093      	str	r3, [r2, #8]
 8003972:	e0a7      	b.n	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	461a      	mov	r2, r3
 800398c:	2320      	movs	r3, #32
 800398e:	6093      	str	r3, [r2, #8]
 8003990:	e098      	b.n	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 8093 	bne.w	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d90f      	bls.n	80039c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c2:	6093      	str	r3, [r2, #8]
 80039c4:	e07e      	b.n	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	0159      	lsls	r1, r3, #5
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	440b      	add	r3, r1
 80039e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f2:	1ad2      	subs	r2, r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d114      	bne.n	8003a28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a10:	461a      	mov	r2, r3
 8003a12:	2101      	movs	r1, #1
 8003a14:	f002 fc26 	bl	8006264 <USB_EP0_OutStart>
 8003a18:	e006      	b.n	8003a28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	441a      	add	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f004 ff7a 	bl	8008928 <HAL_PCD_DataOutStageCallback>
 8003a34:	e046      	b.n	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d124      	bne.n	8003a88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	461a      	mov	r2, r3
 8003a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5a:	6093      	str	r3, [r2, #8]
 8003a5c:	e032      	b.n	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	2320      	movs	r3, #32
 8003a78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f004 ff51 	bl	8008928 <HAL_PCD_DataOutStageCallback>
 8003a86:	e01d      	b.n	8003ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d114      	bne.n	8003ab8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f002 fbd6 	bl	8006264 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f004 ff32 	bl	8008928 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	4f54300a 	.word	0x4f54300a
 8003ad4:	4f54310a 	.word	0x4f54310a

08003ad8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	333c      	adds	r3, #60	; 0x3c
 8003af0:	3304      	adds	r3, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d90e      	bls.n	8003b2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d009      	beq.n	8003b2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f004 fee9 	bl	8008904 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d90c      	bls.n	8003b54 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	799b      	ldrb	r3, [r3, #6]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d108      	bne.n	8003b54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2101      	movs	r1, #1
 8003b50:	f002 fb88 	bl	8006264 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	4f54300a 	.word	0x4f54300a

08003b64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
 8003b70:	4613      	mov	r3, r2
 8003b72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b82:	883b      	ldrh	r3, [r7, #0]
 8003b84:	0419      	lsls	r1, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b90:	e028      	b.n	8003be4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e00d      	b.n	8003bc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	3340      	adds	r3, #64	; 0x40
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d3ec      	bcc.n	8003ba6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bcc:	883b      	ldrh	r3, [r7, #0]
 8003bce:	0418      	lsls	r0, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	4302      	orrs	r2, r0
 8003bdc:	3340      	adds	r3, #64	; 0x40
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e267      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d075      	beq.n	8003d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c4a:	4b88      	ldr	r3, [pc, #544]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c56:	4b85      	ldr	r3, [pc, #532]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d112      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4b82      	ldr	r3, [pc, #520]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6e:	d10b      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c70:	4b7e      	ldr	r3, [pc, #504]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05b      	beq.n	8003d34 <HAL_RCC_OscConfig+0x108>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d157      	bne.n	8003d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e242      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x74>
 8003c92:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a75      	ldr	r2, [pc, #468]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e01d      	b.n	8003cdc <HAL_RCC_OscConfig+0xb0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x98>
 8003caa:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6f      	ldr	r2, [pc, #444]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a6c      	ldr	r2, [pc, #432]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0xb0>
 8003cc4:	4b69      	ldr	r3, [pc, #420]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a68      	ldr	r2, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b66      	ldr	r3, [pc, #408]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fd faea 	bl	80012bc <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fd fae6 	bl	80012bc <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e207      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b5b      	ldr	r3, [pc, #364]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0xc0>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fad6 	bl	80012bc <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fd fad2 	bl	80012bc <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1f3      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0xe8>
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d063      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d42:	4b4a      	ldr	r3, [pc, #296]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d11c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_RCC_OscConfig+0x152>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e1c7      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4937      	ldr	r1, [pc, #220]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	e03a      	b.n	8003e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9c:	4b34      	ldr	r3, [pc, #208]	; (8003e70 <HAL_RCC_OscConfig+0x244>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fd fa8b 	bl	80012bc <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003daa:	f7fd fa87 	bl	80012bc <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1a8      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4925      	ldr	r1, [pc, #148]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
 8003ddc:	e015      	b.n	8003e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_OscConfig+0x244>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd fa6a 	bl	80012bc <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dec:	f7fd fa66 	bl	80012bc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e187      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d036      	beq.n	8003e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_RCC_OscConfig+0x248>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fd fa4a 	bl	80012bc <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e2c:	f7fd fa46 	bl	80012bc <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e167      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x240>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x200>
 8003e4a:	e01b      	b.n	8003e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_OscConfig+0x248>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e52:	f7fd fa33 	bl	80012bc <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	e00e      	b.n	8003e78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5a:	f7fd fa2f 	bl	80012bc <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d907      	bls.n	8003e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e150      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	42470000 	.word	0x42470000
 8003e74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b88      	ldr	r3, [pc, #544]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ea      	bne.n	8003e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8097 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b81      	ldr	r3, [pc, #516]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b7d      	ldr	r3, [pc, #500]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a7c      	ldr	r2, [pc, #496]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b7a      	ldr	r3, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b77      	ldr	r3, [pc, #476]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d118      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ece:	4b74      	ldr	r3, [pc, #464]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a73      	ldr	r2, [pc, #460]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fd f9ef 	bl	80012bc <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fd f9eb 	bl	80012bc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e10c      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	4b6a      	ldr	r3, [pc, #424]	; (80040a0 <HAL_RCC_OscConfig+0x474>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x2ea>
 8003f08:	4b64      	ldr	r3, [pc, #400]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a63      	ldr	r2, [pc, #396]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x324>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x30c>
 8003f1e:	4b5f      	ldr	r3, [pc, #380]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a5e      	ldr	r2, [pc, #376]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2a:	4b5c      	ldr	r3, [pc, #368]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5b      	ldr	r2, [pc, #364]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0x324>
 8003f38:	4b58      	ldr	r3, [pc, #352]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a57      	ldr	r2, [pc, #348]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	4b55      	ldr	r3, [pc, #340]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4a54      	ldr	r2, [pc, #336]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f4a:	f023 0304 	bic.w	r3, r3, #4
 8003f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fd f9b0 	bl	80012bc <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fd f9ac 	bl	80012bc <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e0cb      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ee      	beq.n	8003f60 <HAL_RCC_OscConfig+0x334>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f84:	f7fd f99a 	bl	80012bc <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fd f996 	bl	80012bc <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0b5      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1ee      	bne.n	8003f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	4a38      	ldr	r2, [pc, #224]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a1 	beq.w	800410c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fca:	4b34      	ldr	r3, [pc, #208]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d05c      	beq.n	8004090 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d141      	bne.n	8004062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd f96a 	bl	80012bc <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd f966 	bl	80012bc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e087      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	3b01      	subs	r3, #1
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	491b      	ldr	r1, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fd f93f 	bl	80012bc <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004042:	f7fd f93b 	bl	80012bc <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e05c      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x416>
 8004060:	e054      	b.n	800410c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_RCC_OscConfig+0x478>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fd f928 	bl	80012bc <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd f924 	bl	80012bc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e045      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCC_OscConfig+0x470>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x444>
 800408e:	e03d      	b.n	800410c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e038      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000
 80040a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_OscConfig+0x4ec>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d028      	beq.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d121      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d11a      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d8:	4013      	ands	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d111      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	3b01      	subs	r3, #1
 80040f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800

0800411c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0cc      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b68      	ldr	r3, [pc, #416]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d90c      	bls.n	8004158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b63      	ldr	r3, [pc, #396]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0b8      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004170:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800417a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004188:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a52      	ldr	r2, [pc, #328]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004194:	4b50      	ldr	r3, [pc, #320]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	494d      	ldr	r1, [pc, #308]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d044      	beq.n	800423c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ba:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d119      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e07f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d003      	beq.n	80041da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e067      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fa:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4934      	ldr	r1, [pc, #208]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800420c:	f7fd f856 	bl	80012bc <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fd f852 	bl	80012bc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e04f      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 020c 	and.w	r2, r3, #12
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d1eb      	bne.n	8004214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d20c      	bcs.n	8004264 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e032      	b.n	80042ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4916      	ldr	r1, [pc, #88]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	490e      	ldr	r1, [pc, #56]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042a2:	f000 f821 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80042a6:	4602      	mov	r2, r0
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	490a      	ldr	r1, [pc, #40]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	5ccb      	ldrb	r3, [r1, r3]
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc ffb6 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023c00 	.word	0x40023c00
 80042d8:	40023800 	.word	0x40023800
 80042dc:	08009828 	.word	0x08009828
 80042e0:	20000000 	.word	0x20000000
 80042e4:	20000004 	.word	0x20000004

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042ec:	b090      	sub	sp, #64	; 0x40
 80042ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004300:	4b59      	ldr	r3, [pc, #356]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b08      	cmp	r3, #8
 800430a:	d00d      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x40>
 800430c:	2b08      	cmp	r3, #8
 800430e:	f200 80a1 	bhi.w	8004454 <HAL_RCC_GetSysClockFreq+0x16c>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x34>
 8004316:	2b04      	cmp	r3, #4
 8004318:	d003      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0x3a>
 800431a:	e09b      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_GetSysClockFreq+0x184>)
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004320:	e09b      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004322:	4b53      	ldr	r3, [pc, #332]	; (8004470 <HAL_RCC_GetSysClockFreq+0x188>)
 8004324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004326:	e098      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004328:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004330:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004332:	4b4d      	ldr	r3, [pc, #308]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d028      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433e:	4b4a      	ldr	r3, [pc, #296]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	099b      	lsrs	r3, r3, #6
 8004344:	2200      	movs	r2, #0
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	627a      	str	r2, [r7, #36]	; 0x24
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004350:	2100      	movs	r1, #0
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCC_GetSysClockFreq+0x188>)
 8004354:	fb03 f201 	mul.w	r2, r3, r1
 8004358:	2300      	movs	r3, #0
 800435a:	fb00 f303 	mul.w	r3, r0, r3
 800435e:	4413      	add	r3, r2
 8004360:	4a43      	ldr	r2, [pc, #268]	; (8004470 <HAL_RCC_GetSysClockFreq+0x188>)
 8004362:	fba0 1202 	umull	r1, r2, r0, r2
 8004366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004368:	460a      	mov	r2, r1
 800436a:	62ba      	str	r2, [r7, #40]	; 0x28
 800436c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436e:	4413      	add	r3, r2
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	2200      	movs	r2, #0
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	61fa      	str	r2, [r7, #28]
 800437a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004382:	f7fb ff7d 	bl	8000280 <__aeabi_uldivmod>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4613      	mov	r3, r2
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438e:	e053      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004390:	4b35      	ldr	r3, [pc, #212]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	099b      	lsrs	r3, r3, #6
 8004396:	2200      	movs	r2, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	617a      	str	r2, [r7, #20]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043a2:	f04f 0b00 	mov.w	fp, #0
 80043a6:	4652      	mov	r2, sl
 80043a8:	465b      	mov	r3, fp
 80043aa:	f04f 0000 	mov.w	r0, #0
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	0159      	lsls	r1, r3, #5
 80043b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b8:	0150      	lsls	r0, r2, #5
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	ebb2 080a 	subs.w	r8, r2, sl
 80043c2:	eb63 090b 	sbc.w	r9, r3, fp
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043da:	ebb2 0408 	subs.w	r4, r2, r8
 80043de:	eb63 0509 	sbc.w	r5, r3, r9
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	00eb      	lsls	r3, r5, #3
 80043ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f0:	00e2      	lsls	r2, r4, #3
 80043f2:	4614      	mov	r4, r2
 80043f4:	461d      	mov	r5, r3
 80043f6:	eb14 030a 	adds.w	r3, r4, sl
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	eb45 030b 	adc.w	r3, r5, fp
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800440e:	4629      	mov	r1, r5
 8004410:	028b      	lsls	r3, r1, #10
 8004412:	4621      	mov	r1, r4
 8004414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004418:	4621      	mov	r1, r4
 800441a:	028a      	lsls	r2, r1, #10
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	2200      	movs	r2, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800442c:	f7fb ff28 	bl	8000280 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0x180>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004452:	e002      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetSysClockFreq+0x184>)
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800445c:	4618      	mov	r0, r3
 800445e:	3740      	adds	r7, #64	; 0x40
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	00f42400 	.word	0x00f42400
 8004470:	017d7840 	.word	0x017d7840

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000000 	.word	0x20000000

0800448c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e041      	b.n	8004522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fdba 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 fa70 	bl	80049b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d001      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e044      	b.n	80045ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_TIM_Base_Start_IT+0xb0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d018      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x6c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d013      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x6c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1a      	ldr	r2, [pc, #104]	; (80045e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00e      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x6c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d009      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x6c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x6c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a16      	ldr	r2, [pc, #88]	; (80045ec <HAL_TIM_Base_Start_IT+0xc0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d111      	bne.n	80045bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d010      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ba:	e007      	b.n	80045cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40014000 	.word	0x40014000

080045f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d020      	beq.n	8004654 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0202 	mvn.w	r2, #2
 8004624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f999 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f98b 	bl	800495e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f99c 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d020      	beq.n	80046a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01b      	beq.n	80046a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0204 	mvn.w	r2, #4
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f973 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f965 	bl	800495e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f976 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d020      	beq.n	80046ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01b      	beq.n	80046ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0208 	mvn.w	r2, #8
 80046bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2204      	movs	r2, #4
 80046c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f94d 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f93f 	bl	800495e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f950 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d020      	beq.n	8004738 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0210 	mvn.w	r2, #16
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2208      	movs	r2, #8
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f927 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f919 	bl	800495e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f92a 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0201 	mvn.w	r2, #1
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc f942 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fab0 	bl	8004ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00c      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800479c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8fb 	bl	800499a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00c      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0220 	mvn.w	r2, #32
 80047c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa82 	bl	8004ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_ConfigClockSource+0x1c>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e0b4      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x186>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800480a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004824:	d03e      	beq.n	80048a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482a:	f200 8087 	bhi.w	800493c <HAL_TIM_ConfigClockSource+0x16c>
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004832:	f000 8086 	beq.w	8004942 <HAL_TIM_ConfigClockSource+0x172>
 8004836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483a:	d87f      	bhi.n	800493c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b70      	cmp	r3, #112	; 0x70
 800483e:	d01a      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0xa6>
 8004840:	2b70      	cmp	r3, #112	; 0x70
 8004842:	d87b      	bhi.n	800493c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b60      	cmp	r3, #96	; 0x60
 8004846:	d050      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x11a>
 8004848:	2b60      	cmp	r3, #96	; 0x60
 800484a:	d877      	bhi.n	800493c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b50      	cmp	r3, #80	; 0x50
 800484e:	d03c      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0xfa>
 8004850:	2b50      	cmp	r3, #80	; 0x50
 8004852:	d873      	bhi.n	800493c <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d058      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x13a>
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d86f      	bhi.n	800493c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b30      	cmp	r3, #48	; 0x30
 800485e:	d064      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x15a>
 8004860:	2b30      	cmp	r3, #48	; 0x30
 8004862:	d86b      	bhi.n	800493c <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b20      	cmp	r3, #32
 8004866:	d060      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x15a>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d867      	bhi.n	800493c <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d05c      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x15a>
 8004870:	2b10      	cmp	r3, #16
 8004872:	d05a      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x15a>
 8004874:	e062      	b.n	800493c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004886:	f000 f993 	bl	8004bb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	609a      	str	r2, [r3, #8]
      break;
 80048a2:	e04f      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048b4:	f000 f97c 	bl	8004bb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c6:	609a      	str	r2, [r3, #8]
      break;
 80048c8:	e03c      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d6:	461a      	mov	r2, r3
 80048d8:	f000 f8f0 	bl	8004abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2150      	movs	r1, #80	; 0x50
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f949 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 80048e8:	e02c      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 f90f 	bl	8004b1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2160      	movs	r1, #96	; 0x60
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f939 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 8004908:	e01c      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004916:	461a      	mov	r2, r3
 8004918:	f000 f8d0 	bl	8004abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f929 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 8004928:	e00c      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f000 f920 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 800493a:	e003      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      break;
 8004940:	e000      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a37      	ldr	r2, [pc, #220]	; (8004aa0 <TIM_Base_SetConfig+0xf0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00f      	beq.n	80049e8 <TIM_Base_SetConfig+0x38>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d00b      	beq.n	80049e8 <TIM_Base_SetConfig+0x38>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a34      	ldr	r2, [pc, #208]	; (8004aa4 <TIM_Base_SetConfig+0xf4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <TIM_Base_SetConfig+0x38>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a33      	ldr	r2, [pc, #204]	; (8004aa8 <TIM_Base_SetConfig+0xf8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_Base_SetConfig+0x38>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a32      	ldr	r2, [pc, #200]	; (8004aac <TIM_Base_SetConfig+0xfc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a28      	ldr	r2, [pc, #160]	; (8004aa0 <TIM_Base_SetConfig+0xf0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0x8a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <TIM_Base_SetConfig+0xf4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <TIM_Base_SetConfig+0xf8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <TIM_Base_SetConfig+0xfc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0x8a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <TIM_Base_SetConfig+0x100>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0x8a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <TIM_Base_SetConfig+0x104>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0x8a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <TIM_Base_SetConfig+0x108>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <TIM_Base_SetConfig+0xf0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d103      	bne.n	8004a7a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f043 0204 	orr.w	r2, r3, #4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800

08004abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 030a 	bic.w	r3, r3, #10
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f023 0210 	bic.w	r2, r3, #16
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	031b      	lsls	r3, r3, #12
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f043 0307 	orr.w	r3, r3, #7
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	021a      	lsls	r2, r3, #8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e050      	b.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d018      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c54:	d013      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00e      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d004      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d10c      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40014000 	.word	0x40014000

08004ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	f107 001c 	add.w	r0, r7, #28
 8004d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d123      	bne.n	8004d56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d105      	bne.n	8004d4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 fae8 	bl	8006320 <USB_CoreReset>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73fb      	strb	r3, [r7, #15]
 8004d54:	e01b      	b.n	8004d8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fadc 	bl	8006320 <USB_CoreReset>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d80:	e005      	b.n	8004d8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d8e:	7fbb      	ldrb	r3, [r7, #30]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d10b      	bne.n	8004dac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f043 0206 	orr.w	r2, r3, #6
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr

08004dbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d165      	bne.n	8004e9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a41      	ldr	r2, [pc, #260]	; (8004ed8 <USB_SetTurnaroundTime+0x11c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d906      	bls.n	8004de6 <USB_SetTurnaroundTime+0x2a>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a40      	ldr	r2, [pc, #256]	; (8004edc <USB_SetTurnaroundTime+0x120>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d202      	bcs.n	8004de6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004de0:	230f      	movs	r3, #15
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e062      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4a3c      	ldr	r2, [pc, #240]	; (8004edc <USB_SetTurnaroundTime+0x120>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d306      	bcc.n	8004dfc <USB_SetTurnaroundTime+0x40>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4a3b      	ldr	r2, [pc, #236]	; (8004ee0 <USB_SetTurnaroundTime+0x124>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d202      	bcs.n	8004dfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004df6:	230e      	movs	r3, #14
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e057      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a38      	ldr	r2, [pc, #224]	; (8004ee0 <USB_SetTurnaroundTime+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d306      	bcc.n	8004e12 <USB_SetTurnaroundTime+0x56>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a37      	ldr	r2, [pc, #220]	; (8004ee4 <USB_SetTurnaroundTime+0x128>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d202      	bcs.n	8004e12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e0c:	230d      	movs	r3, #13
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e04c      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4a33      	ldr	r2, [pc, #204]	; (8004ee4 <USB_SetTurnaroundTime+0x128>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d306      	bcc.n	8004e28 <USB_SetTurnaroundTime+0x6c>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <USB_SetTurnaroundTime+0x12c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d802      	bhi.n	8004e28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e22:	230c      	movs	r3, #12
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	e041      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <USB_SetTurnaroundTime+0x12c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d906      	bls.n	8004e3e <USB_SetTurnaroundTime+0x82>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a2e      	ldr	r2, [pc, #184]	; (8004eec <USB_SetTurnaroundTime+0x130>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d802      	bhi.n	8004e3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e38:	230b      	movs	r3, #11
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e036      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <USB_SetTurnaroundTime+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d906      	bls.n	8004e54 <USB_SetTurnaroundTime+0x98>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <USB_SetTurnaroundTime+0x134>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d802      	bhi.n	8004e54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e4e:	230a      	movs	r3, #10
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e02b      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <USB_SetTurnaroundTime+0x134>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d906      	bls.n	8004e6a <USB_SetTurnaroundTime+0xae>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <USB_SetTurnaroundTime+0x138>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d202      	bcs.n	8004e6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e64:	2309      	movs	r3, #9
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e020      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <USB_SetTurnaroundTime+0x138>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d306      	bcc.n	8004e80 <USB_SetTurnaroundTime+0xc4>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <USB_SetTurnaroundTime+0x13c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d802      	bhi.n	8004e80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	e015      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <USB_SetTurnaroundTime+0x13c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d906      	bls.n	8004e96 <USB_SetTurnaroundTime+0xda>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <USB_SetTurnaroundTime+0x140>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d202      	bcs.n	8004e96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e90:	2307      	movs	r3, #7
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e00a      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e96:	2306      	movs	r3, #6
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e007      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ea2:	2309      	movs	r3, #9
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e001      	b.n	8004eac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ea8:	2309      	movs	r3, #9
 8004eaa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	029b      	lsls	r3, r3, #10
 8004ec0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	00d8acbf 	.word	0x00d8acbf
 8004edc:	00e4e1c0 	.word	0x00e4e1c0
 8004ee0:	00f42400 	.word	0x00f42400
 8004ee4:	01067380 	.word	0x01067380
 8004ee8:	011a499f 	.word	0x011a499f
 8004eec:	01312cff 	.word	0x01312cff
 8004ef0:	014ca43f 	.word	0x014ca43f
 8004ef4:	016e3600 	.word	0x016e3600
 8004ef8:	01a6ab1f 	.word	0x01a6ab1f
 8004efc:	01e84800 	.word	0x01e84800

08004f00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f043 0201 	orr.w	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f023 0201 	bic.w	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d115      	bne.n	8004f92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f72:	200a      	movs	r0, #10
 8004f74:	f7fc f9ae 	bl	80012d4 <HAL_Delay>
      ms += 10U;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	330a      	adds	r3, #10
 8004f7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f001 f93f 	bl	8006202 <USB_GetMode>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d01e      	beq.n	8004fc8 <USB_SetCurrentMode+0x84>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2bc7      	cmp	r3, #199	; 0xc7
 8004f8e:	d9f0      	bls.n	8004f72 <USB_SetCurrentMode+0x2e>
 8004f90:	e01a      	b.n	8004fc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d115      	bne.n	8004fc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fa4:	200a      	movs	r0, #10
 8004fa6:	f7fc f995 	bl	80012d4 <HAL_Delay>
      ms += 10U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	330a      	adds	r3, #10
 8004fae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 f926 	bl	8006202 <USB_GetMode>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <USB_SetCurrentMode+0x84>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2bc7      	cmp	r3, #199	; 0xc7
 8004fc0:	d9f0      	bls.n	8004fa4 <USB_SetCurrentMode+0x60>
 8004fc2:	e001      	b.n	8004fc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e005      	b.n	8004fd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2bc8      	cmp	r3, #200	; 0xc8
 8004fcc:	d101      	bne.n	8004fd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fdc:	b084      	sub	sp, #16
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	e009      	b.n	8005010 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3340      	adds	r3, #64	; 0x40
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	2200      	movs	r2, #0
 8005008:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3301      	adds	r3, #1
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b0e      	cmp	r3, #14
 8005014:	d9f2      	bls.n	8004ffc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005016:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800501a:	2b00      	cmp	r3, #0
 800501c:	d11c      	bne.n	8005058 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
 8005056:	e00b      	b.n	8005070 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005076:	461a      	mov	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800507c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10d      	bne.n	80050a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800508c:	2100      	movs	r1, #0
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f968 	bl	8005364 <USB_SetDevSpeed>
 8005094:	e008      	b.n	80050a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005096:	2101      	movs	r1, #1
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f963 	bl	8005364 <USB_SetDevSpeed>
 800509e:	e003      	b.n	80050a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050a0:	2103      	movs	r1, #3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f95e 	bl	8005364 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050a8:	2110      	movs	r1, #16
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8fa 	bl	80052a4 <USB_FlushTxFifo>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f924 	bl	8005308 <USB_FlushRxFifo>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	461a      	mov	r2, r3
 80050d2:	2300      	movs	r3, #0
 80050d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050dc:	461a      	mov	r2, r3
 80050de:	2300      	movs	r3, #0
 80050e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	461a      	mov	r2, r3
 80050ea:	2300      	movs	r3, #0
 80050ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	e043      	b.n	800517c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510a:	d118      	bne.n	800513e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511e:	461a      	mov	r2, r3
 8005120:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e013      	b.n	8005150 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	461a      	mov	r2, r3
 8005136:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	e008      	b.n	8005150 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	461a      	mov	r2, r3
 8005170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005174:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3301      	adds	r3, #1
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005180:	461a      	mov	r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4293      	cmp	r3, r2
 8005186:	d3b5      	bcc.n	80050f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	e043      	b.n	8005216 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a4:	d118      	bne.n	80051d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	461a      	mov	r2, r3
 80051ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	e013      	b.n	80051ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	461a      	mov	r2, r3
 80051d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e008      	b.n	80051ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	461a      	mov	r2, r3
 80051e6:	2300      	movs	r3, #0
 80051e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	2300      	movs	r3, #0
 80051fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	461a      	mov	r2, r3
 800520a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800520e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	3301      	adds	r3, #1
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800521a:	461a      	mov	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4293      	cmp	r3, r2
 8005220:	d3b5      	bcc.n	800518e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005234:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005242:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005244:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f043 0210 	orr.w	r2, r3, #16
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699a      	ldr	r2, [r3, #24]
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <USB_DevInit+0x2c4>)
 800525e:	4313      	orrs	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005264:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f043 0208 	orr.w	r2, r3, #8
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005278:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800527c:	2b01      	cmp	r3, #1
 800527e:	d107      	bne.n	8005290 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005288:	f043 0304 	orr.w	r3, r3, #4
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005290:	7dfb      	ldrb	r3, [r7, #23]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800529c:	b004      	add	sp, #16
 800529e:	4770      	bx	lr
 80052a0:	803c3800 	.word	0x803c3800

080052a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052be:	d901      	bls.n	80052c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e01b      	b.n	80052fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	daf2      	bge.n	80052b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	019b      	lsls	r3, r3, #6
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052e8:	d901      	bls.n	80052ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e006      	b.n	80052fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d0f0      	beq.n	80052dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005320:	d901      	bls.n	8005326 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e018      	b.n	8005358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	daf2      	bge.n	8005314 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2210      	movs	r2, #16
 8005336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005344:	d901      	bls.n	800534a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e006      	b.n	8005358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b10      	cmp	r3, #16
 8005354:	d0f0      	beq.n	8005338 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	68f9      	ldr	r1, [r7, #12]
 8005380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005384:	4313      	orrs	r3, r2
 8005386:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005396:	b480      	push	{r7}
 8005398:	b087      	sub	sp, #28
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0306 	and.w	r3, r3, #6
 80053ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053b6:	2300      	movs	r3, #0
 80053b8:	75fb      	strb	r3, [r7, #23]
 80053ba:	e00a      	b.n	80053d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d002      	beq.n	80053c8 <USB_GetDevSpeed+0x32>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b06      	cmp	r3, #6
 80053c6:	d102      	bne.n	80053ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053c8:	2302      	movs	r3, #2
 80053ca:	75fb      	strb	r3, [r7, #23]
 80053cc:	e001      	b.n	80053d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053ce:	230f      	movs	r3, #15
 80053d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d13a      	bne.n	8005472 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	2101      	movs	r1, #1
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541a:	4313      	orrs	r3, r2
 800541c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d155      	bne.n	80054e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	791b      	ldrb	r3, [r3, #4]
 800544e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005450:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	059b      	lsls	r3, r3, #22
 8005456:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005458:	4313      	orrs	r3, r2
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	e036      	b.n	80054e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	69da      	ldr	r2, [r3, #28]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	2101      	movs	r1, #1
 8005484:	fa01 f303 	lsl.w	r3, r1, r3
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005490:	4313      	orrs	r3, r2
 8005492:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d11a      	bne.n	80054e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	791b      	ldrb	r3, [r3, #4]
 80054c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054c6:	430b      	orrs	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d161      	bne.n	80055d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005522:	d11f      	bne.n	8005564 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005542:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005562:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	2101      	movs	r1, #1
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	b29b      	uxth	r3, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005584:	4013      	ands	r3, r2
 8005586:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	2101      	movs	r1, #1
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	b29b      	uxth	r3, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a8:	4013      	ands	r3, r2
 80055aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	0159      	lsls	r1, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	440b      	add	r3, r1
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	4619      	mov	r1, r3
 80055c8:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <USB_DeactivateEndpoint+0x1b0>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	600b      	str	r3, [r1, #0]
 80055ce:	e060      	b.n	8005692 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e6:	d11f      	bne.n	8005628 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005602:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005606:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005622:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005626:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	2101      	movs	r1, #1
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	041b      	lsls	r3, r3, #16
 8005640:	43db      	mvns	r3, r3
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005648:	4013      	ands	r3, r2
 800564a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	43db      	mvns	r3, r3
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566c:	4013      	ands	r3, r2
 800566e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	0159      	lsls	r1, r3, #5
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	440b      	add	r3, r1
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	4619      	mov	r1, r3
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <USB_DeactivateEndpoint+0x1b4>)
 800568e:	4013      	ands	r3, r2
 8005690:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	ec337800 	.word	0xec337800
 80056a4:	eff37800 	.word	0xeff37800

080056a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f040 817f 	bne.w	80059c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d132      	bne.n	8005738 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005714:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005730:	0cdb      	lsrs	r3, r3, #19
 8005732:	04db      	lsls	r3, r3, #19
 8005734:	6113      	str	r3, [r2, #16]
 8005736:	e097      	b.n	8005868 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005752:	0cdb      	lsrs	r3, r3, #19
 8005754:	04db      	lsls	r3, r3, #19
 8005756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005772:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005776:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800577a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11a      	bne.n	80057b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	d903      	bls.n	8005796 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057b4:	6113      	str	r3, [r2, #16]
 80057b6:	e044      	b.n	8005842 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4413      	add	r3, r2
 80057c2:	1e5a      	subs	r2, r3, #1
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	8afb      	ldrh	r3, [r7, #22]
 80057de:	04d9      	lsls	r1, r3, #19
 80057e0:	4ba4      	ldr	r3, [pc, #656]	; (8005a74 <USB_EPStartXfer+0x3cc>)
 80057e2:	400b      	ands	r3, r1
 80057e4:	69b9      	ldr	r1, [r7, #24]
 80057e6:	0148      	lsls	r0, r1, #5
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	4401      	add	r1, r0
 80057ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057f0:	4313      	orrs	r3, r2
 80057f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	791b      	ldrb	r3, [r3, #4]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d122      	bne.n	8005842 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005816:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800581a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	8afb      	ldrh	r3, [r7, #22]
 800582c:	075b      	lsls	r3, r3, #29
 800582e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005832:	69b9      	ldr	r1, [r7, #24]
 8005834:	0148      	lsls	r0, r1, #5
 8005836:	69f9      	ldr	r1, [r7, #28]
 8005838:	4401      	add	r1, r0
 800583a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800583e:	4313      	orrs	r3, r2
 8005840:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	0148      	lsls	r0, r1, #5
 800585c:	69f9      	ldr	r1, [r7, #28]
 800585e:	4401      	add	r1, r0
 8005860:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005864:	4313      	orrs	r3, r2
 8005866:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d14b      	bne.n	8005906 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	461a      	mov	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	791b      	ldrb	r3, [r3, #4]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d128      	bne.n	80058e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d110      	bne.n	80058c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e00f      	b.n	80058e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e166      	b.n	8005bd4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005924:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d015      	beq.n	800595a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 814e 	beq.w	8005bd4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	2101      	movs	r1, #1
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	69f9      	ldr	r1, [r7, #28]
 8005950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005954:	4313      	orrs	r3, r2
 8005956:	634b      	str	r3, [r1, #52]	; 0x34
 8005958:	e13c      	b.n	8005bd4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d110      	bne.n	800598c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e00f      	b.n	80059ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68d9      	ldr	r1, [r3, #12]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781a      	ldrb	r2, [r3, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	b298      	uxth	r0, r3
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	4603      	mov	r3, r0
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f9b9 	bl	8005d38 <USB_WritePacket>
 80059c6:	e105      	b.n	8005bd4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	0cdb      	lsrs	r3, r3, #19
 80059e4:	04db      	lsls	r3, r3, #19
 80059e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a0a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d132      	bne.n	8005a78 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a40:	69b9      	ldr	r1, [r7, #24]
 8005a42:	0148      	lsls	r0, r1, #5
 8005a44:	69f9      	ldr	r1, [r7, #28]
 8005a46:	4401      	add	r1, r0
 8005a48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a6e:	6113      	str	r3, [r2, #16]
 8005a70:	e062      	b.n	8005b38 <USB_EPStartXfer+0x490>
 8005a72:	bf00      	nop
 8005a74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d123      	bne.n	8005ac8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a96:	69b9      	ldr	r1, [r7, #24]
 8005a98:	0148      	lsls	r0, r1, #5
 8005a9a:	69f9      	ldr	r1, [r7, #28]
 8005a9c:	4401      	add	r1, r0
 8005a9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ac4:	6113      	str	r3, [r2, #16]
 8005ac6:	e037      	b.n	8005b38 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	1e5a      	subs	r2, r3, #1
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	8afa      	ldrh	r2, [r7, #22]
 8005ae4:	fb03 f202 	mul.w	r2, r3, r2
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	8afb      	ldrh	r3, [r7, #22]
 8005afc:	04d9      	lsls	r1, r3, #19
 8005afe:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <USB_EPStartXfer+0x538>)
 8005b00:	400b      	ands	r3, r1
 8005b02:	69b9      	ldr	r1, [r7, #24]
 8005b04:	0148      	lsls	r0, r1, #5
 8005b06:	69f9      	ldr	r1, [r7, #28]
 8005b08:	4401      	add	r1, r0
 8005b0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b28:	69b9      	ldr	r1, [r7, #24]
 8005b2a:	0148      	lsls	r0, r1, #5
 8005b2c:	69f9      	ldr	r1, [r7, #28]
 8005b2e:	4401      	add	r1, r0
 8005b30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b34:	4313      	orrs	r3, r2
 8005b36:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10d      	bne.n	8005b5a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	68d9      	ldr	r1, [r3, #12]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b56:	460a      	mov	r2, r1
 8005b58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	791b      	ldrb	r3, [r3, #4]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d128      	bne.n	8005bb4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d110      	bne.n	8005b94 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e00f      	b.n	8005bb4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	1ff80000 	.word	0x1ff80000

08005be4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d14a      	bne.n	8005c98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c1a:	f040 8086 	bne.w	8005d2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	7812      	ldrb	r2, [r2, #0]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d902      	bls.n	8005c7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
          break;
 8005c7a:	e056      	b.n	8005d2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c94:	d0e7      	beq.n	8005c66 <USB_EPStopXfer+0x82>
 8005c96:	e048      	b.n	8005d2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb0:	d13b      	bne.n	8005d2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	7812      	ldrb	r2, [r2, #0]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	7812      	ldrb	r2, [r2, #0]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d902      	bls.n	8005d10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d0e:	e00c      	b.n	8005d2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d28:	d0e7      	beq.n	8005cfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	; 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4611      	mov	r1, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	460b      	mov	r3, r1
 8005d48:	71fb      	strb	r3, [r7, #7]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d123      	bne.n	8005da6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d5e:	88bb      	ldrh	r3, [r7, #4]
 8005d60:	3303      	adds	r3, #3
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e018      	b.n	8005d9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	031a      	lsls	r2, r3, #12
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d78:	461a      	mov	r2, r3
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3e2      	bcc.n	8005d6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3724      	adds	r7, #36	; 0x24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b08b      	sub	sp, #44	; 0x2c
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dda:	2300      	movs	r3, #0
 8005ddc:	623b      	str	r3, [r7, #32]
 8005dde:	e014      	b.n	8005e0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	3301      	adds	r3, #1
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	3301      	adds	r3, #1
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	3301      	adds	r3, #1
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	3301      	adds	r3, #1
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	6a3a      	ldr	r2, [r7, #32]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3e6      	bcc.n	8005de0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e12:	8bfb      	ldrh	r3, [r7, #30]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01e      	beq.n	8005e56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e22:	461a      	mov	r2, r3
 8005e24:	f107 0310 	add.w	r3, r7, #16
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	701a      	strb	r2, [r3, #0]
      i++;
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	3301      	adds	r3, #1
 8005e42:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	3301      	adds	r3, #1
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e4a:	8bfb      	ldrh	r3, [r7, #30]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e50:	8bfb      	ldrh	r3, [r7, #30]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1ea      	bne.n	8005e2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	372c      	adds	r7, #44	; 0x2c
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d12c      	bne.n	8005eda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	db12      	blt.n	8005eb8 <USB_EPSetStall+0x54>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00f      	beq.n	8005eb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	e02b      	b.n	8005f32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db12      	blt.n	8005f12 <USB_EPSetStall+0xae>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00f      	beq.n	8005f12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d128      	bne.n	8005fae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	791b      	ldrb	r3, [r3, #4]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d003      	beq.n	8005f8c <USB_EPClearStall+0x4c>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	791b      	ldrb	r3, [r3, #4]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d138      	bne.n	8005ffe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	e027      	b.n	8005ffe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	791b      	ldrb	r3, [r3, #4]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d003      	beq.n	8005fde <USB_EPClearStall+0x9e>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	791b      	ldrb	r3, [r3, #4]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d10f      	bne.n	8005ffe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800602a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800602e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006046:	4313      	orrs	r3, r2
 8006048:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006086:	f023 0302 	bic.w	r3, r3, #2
 800608a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060b4:	f023 0303 	bic.w	r3, r3, #3
 80060b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060c8:	f043 0302 	orr.w	r3, r3, #2
 80060cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4013      	ands	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	4013      	ands	r3, r2
 8006124:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	0c1b      	lsrs	r3, r3, #16
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	b29b      	uxth	r3, r3
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006198:	68bb      	ldr	r3, [r7, #8]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	fa22 f303 	lsr.w	r3, r2, r3
 80061d6:	01db      	lsls	r3, r3, #7
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4013      	ands	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061f4:	68bb      	ldr	r3, [r7, #8]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f003 0301 	and.w	r3, r3, #1
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006238:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800623c:	f023 0307 	bic.w	r3, r3, #7
 8006240:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006254:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	460b      	mov	r3, r1
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	333c      	adds	r3, #60	; 0x3c
 800627a:	3304      	adds	r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4a26      	ldr	r2, [pc, #152]	; (800631c <USB_EP0_OutStart+0xb8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d90a      	bls.n	800629e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006298:	d101      	bne.n	800629e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e037      	b.n	800630e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	2300      	movs	r3, #0
 80062a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f043 0318 	orr.w	r3, r3, #24
 80062d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d10f      	bne.n	800630c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006306:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800630a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	4f54300a 	.word	0x4f54300a

08006320 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006338:	d901      	bls.n	800633e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e022      	b.n	8006384 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	daf2      	bge.n	800632c <USB_CoreReset+0xc>

  count = 10U;
 8006346:	230a      	movs	r3, #10
 8006348:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800634a:	e002      	b.n	8006352 <USB_CoreReset+0x32>
  {
    count--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3b01      	subs	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f9      	bne.n	800634c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f043 0201 	orr.w	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006370:	d901      	bls.n	8006376 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e006      	b.n	8006384 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d0f0      	beq.n	8006364 <USB_CoreReset+0x44>

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800639c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063a0:	f002 fd22 	bl	8008de8 <USBD_static_malloc>
 80063a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	32b0      	adds	r2, #176	; 0xb0
 80063b6:	2100      	movs	r1, #0
 80063b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063bc:	2302      	movs	r3, #2
 80063be:	e0d4      	b.n	800656a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80063c0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80063c4:	2100      	movs	r1, #0
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f002 fd72 	bl	8008eb0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	32b0      	adds	r2, #176	; 0xb0
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	32b0      	adds	r2, #176	; 0xb0
 80063e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	7c1b      	ldrb	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d138      	bne.n	800646a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063f8:	4b5e      	ldr	r3, [pc, #376]	; (8006574 <USBD_CDC_Init+0x1e4>)
 80063fa:	7819      	ldrb	r1, [r3, #0]
 80063fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006400:	2202      	movs	r2, #2
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f002 fbcd 	bl	8008ba2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006408:	4b5a      	ldr	r3, [pc, #360]	; (8006574 <USBD_CDC_Init+0x1e4>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	3323      	adds	r3, #35	; 0x23
 800641e:	2201      	movs	r2, #1
 8006420:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006422:	4b55      	ldr	r3, [pc, #340]	; (8006578 <USBD_CDC_Init+0x1e8>)
 8006424:	7819      	ldrb	r1, [r3, #0]
 8006426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642a:	2202      	movs	r2, #2
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f002 fbb8 	bl	8008ba2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006432:	4b51      	ldr	r3, [pc, #324]	; (8006578 <USBD_CDC_Init+0x1e8>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f003 020f 	and.w	r2, r3, #15
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	f203 1363 	addw	r3, r3, #355	; 0x163
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800644e:	4b4b      	ldr	r3, [pc, #300]	; (800657c <USBD_CDC_Init+0x1ec>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f003 020f 	and.w	r2, r3, #15
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	331c      	adds	r3, #28
 8006464:	2210      	movs	r2, #16
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	e035      	b.n	80064d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800646a:	4b42      	ldr	r3, [pc, #264]	; (8006574 <USBD_CDC_Init+0x1e4>)
 800646c:	7819      	ldrb	r1, [r3, #0]
 800646e:	2340      	movs	r3, #64	; 0x40
 8006470:	2202      	movs	r2, #2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f002 fb95 	bl	8008ba2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006478:	4b3e      	ldr	r3, [pc, #248]	; (8006574 <USBD_CDC_Init+0x1e4>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	3323      	adds	r3, #35	; 0x23
 800648e:	2201      	movs	r2, #1
 8006490:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006492:	4b39      	ldr	r3, [pc, #228]	; (8006578 <USBD_CDC_Init+0x1e8>)
 8006494:	7819      	ldrb	r1, [r3, #0]
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	2202      	movs	r2, #2
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f002 fb81 	bl	8008ba2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064a0:	4b35      	ldr	r3, [pc, #212]	; (8006578 <USBD_CDC_Init+0x1e8>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f003 020f 	and.w	r2, r3, #15
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	f203 1363 	addw	r3, r3, #355	; 0x163
 80064b8:	2201      	movs	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064bc:	4b2f      	ldr	r3, [pc, #188]	; (800657c <USBD_CDC_Init+0x1ec>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 020f 	and.w	r2, r3, #15
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	331c      	adds	r3, #28
 80064d2:	2210      	movs	r2, #16
 80064d4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064d6:	4b29      	ldr	r3, [pc, #164]	; (800657c <USBD_CDC_Init+0x1ec>)
 80064d8:	7819      	ldrb	r1, [r3, #0]
 80064da:	2308      	movs	r3, #8
 80064dc:	2203      	movs	r2, #3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f002 fb5f 	bl	8008ba2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <USBD_CDC_Init+0x1ec>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	f003 020f 	and.w	r2, r3, #15
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	3323      	adds	r3, #35	; 0x23
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	33b0      	adds	r3, #176	; 0xb0
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006534:	2302      	movs	r3, #2
 8006536:	e018      	b.n	800656a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	7c1b      	ldrb	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006540:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <USBD_CDC_Init+0x1e8>)
 8006542:	7819      	ldrb	r1, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800654a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f002 fc16 	bl	8008d80 <USBD_LL_PrepareReceive>
 8006554:	e008      	b.n	8006568 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <USBD_CDC_Init+0x1e8>)
 8006558:	7819      	ldrb	r1, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f002 fc0c 	bl	8008d80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000093 	.word	0x20000093
 8006578:	20000094 	.word	0x20000094
 800657c:	20000095 	.word	0x20000095

08006580 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800658c:	4b3a      	ldr	r3, [pc, #232]	; (8006678 <USBD_CDC_DeInit+0xf8>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f002 fb2b 	bl	8008bee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006598:	4b37      	ldr	r3, [pc, #220]	; (8006678 <USBD_CDC_DeInit+0xf8>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 020f 	and.w	r2, r3, #15
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	3323      	adds	r3, #35	; 0x23
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80065b2:	4b32      	ldr	r3, [pc, #200]	; (800667c <USBD_CDC_DeInit+0xfc>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f002 fb18 	bl	8008bee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <USBD_CDC_DeInit+0xfc>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	f003 020f 	and.w	r2, r3, #15
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	f203 1363 	addw	r3, r3, #355	; 0x163
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80065da:	4b29      	ldr	r3, [pc, #164]	; (8006680 <USBD_CDC_DeInit+0x100>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f002 fb04 	bl	8008bee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80065e6:	4b26      	ldr	r3, [pc, #152]	; (8006680 <USBD_CDC_DeInit+0x100>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 020f 	and.w	r2, r3, #15
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	3323      	adds	r3, #35	; 0x23
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006600:	4b1f      	ldr	r3, [pc, #124]	; (8006680 <USBD_CDC_DeInit+0x100>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	f003 020f 	and.w	r2, r3, #15
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	331c      	adds	r3, #28
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	32b0      	adds	r2, #176	; 0xb0
 8006624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01f      	beq.n	800666c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	33b0      	adds	r3, #176	; 0xb0
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32b0      	adds	r2, #176	; 0xb0
 800664a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664e:	4618      	mov	r0, r3
 8006650:	f002 fbd8 	bl	8008e04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	32b0      	adds	r2, #176	; 0xb0
 800665e:	2100      	movs	r1, #0
 8006660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000093 	.word	0x20000093
 800667c:	20000094 	.word	0x20000094
 8006680:	20000095 	.word	0x20000095

08006684 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	32b0      	adds	r2, #176	; 0xb0
 8006698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e0bf      	b.n	8006834 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d050      	beq.n	8006762 <USBD_CDC_Setup+0xde>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	f040 80af 	bne.w	8006824 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	88db      	ldrh	r3, [r3, #6]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d03a      	beq.n	8006744 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da1b      	bge.n	8006710 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	33b0      	adds	r3, #176	; 0xb0
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80066ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	88d2      	ldrh	r2, [r2, #6]
 80066f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	88db      	ldrh	r3, [r3, #6]
 80066fa:	2b07      	cmp	r3, #7
 80066fc:	bf28      	it	cs
 80066fe:	2307      	movcs	r3, #7
 8006700:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	89fa      	ldrh	r2, [r7, #14]
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 fdab 	bl	8008264 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800670e:	e090      	b.n	8006832 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	785a      	ldrb	r2, [r3, #1]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	88db      	ldrh	r3, [r3, #6]
 800671e:	2b3f      	cmp	r3, #63	; 0x3f
 8006720:	d803      	bhi.n	800672a <USBD_CDC_Setup+0xa6>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	88db      	ldrh	r3, [r3, #6]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	e000      	b.n	800672c <USBD_CDC_Setup+0xa8>
 800672a:	2240      	movs	r2, #64	; 0x40
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006732:	6939      	ldr	r1, [r7, #16]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800673a:	461a      	mov	r2, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fdc0 	bl	80082c2 <USBD_CtlPrepareRx>
      break;
 8006742:	e076      	b.n	8006832 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	33b0      	adds	r3, #176	; 0xb0
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	7850      	ldrb	r0, [r2, #1]
 800675a:	2200      	movs	r2, #0
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4798      	blx	r3
      break;
 8006760:	e067      	b.n	8006832 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b0b      	cmp	r3, #11
 8006768:	d851      	bhi.n	800680e <USBD_CDC_Setup+0x18a>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <USBD_CDC_Setup+0xec>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	080067a1 	.word	0x080067a1
 8006774:	0800681d 	.word	0x0800681d
 8006778:	0800680f 	.word	0x0800680f
 800677c:	0800680f 	.word	0x0800680f
 8006780:	0800680f 	.word	0x0800680f
 8006784:	0800680f 	.word	0x0800680f
 8006788:	0800680f 	.word	0x0800680f
 800678c:	0800680f 	.word	0x0800680f
 8006790:	0800680f 	.word	0x0800680f
 8006794:	0800680f 	.word	0x0800680f
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067f5 	.word	0x080067f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d107      	bne.n	80067bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067ac:	f107 030a 	add.w	r3, r7, #10
 80067b0:	2202      	movs	r2, #2
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fd55 	bl	8008264 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ba:	e032      	b.n	8006822 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fcd3 	bl	800816a <USBD_CtlError>
            ret = USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	75fb      	strb	r3, [r7, #23]
          break;
 80067c8:	e02b      	b.n	8006822 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d107      	bne.n	80067e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067d6:	f107 030d 	add.w	r3, r7, #13
 80067da:	2201      	movs	r2, #1
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fd40 	bl	8008264 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067e4:	e01d      	b.n	8006822 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fcbe 	bl	800816a <USBD_CtlError>
            ret = USBD_FAIL;
 80067ee:	2303      	movs	r3, #3
 80067f0:	75fb      	strb	r3, [r7, #23]
          break;
 80067f2:	e016      	b.n	8006822 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d00f      	beq.n	8006820 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fcb1 	bl	800816a <USBD_CtlError>
            ret = USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800680c:	e008      	b.n	8006820 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fcaa 	bl	800816a <USBD_CtlError>
          ret = USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	75fb      	strb	r3, [r7, #23]
          break;
 800681a:	e002      	b.n	8006822 <USBD_CDC_Setup+0x19e>
          break;
 800681c:	bf00      	nop
 800681e:	e008      	b.n	8006832 <USBD_CDC_Setup+0x1ae>
          break;
 8006820:	bf00      	nop
      }
      break;
 8006822:	e006      	b.n	8006832 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fc9f 	bl	800816a <USBD_CtlError>
      ret = USBD_FAIL;
 800682c:	2303      	movs	r3, #3
 800682e:	75fb      	strb	r3, [r7, #23]
      break;
 8006830:	bf00      	nop
  }

  return (uint8_t)ret;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800684e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	32b0      	adds	r2, #176	; 0xb0
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006862:	2303      	movs	r3, #3
 8006864:	e065      	b.n	8006932 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	32b0      	adds	r2, #176	; 0xb0
 8006870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006874:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	f003 020f 	and.w	r2, r3, #15
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	3314      	adds	r3, #20
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d02f      	beq.n	80068f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	f003 020f 	and.w	r2, r3, #15
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	3314      	adds	r3, #20
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	f003 010f 	and.w	r1, r3, #15
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	460b      	mov	r3, r1
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	440b      	add	r3, r1
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4403      	add	r3, r0
 80068b8:	331c      	adds	r3, #28
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d112      	bne.n	80068f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	f003 020f 	and.w	r2, r3, #15
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	3314      	adds	r3, #20
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068e2:	78f9      	ldrb	r1, [r7, #3]
 80068e4:	2300      	movs	r3, #0
 80068e6:	2200      	movs	r2, #0
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f002 fa28 	bl	8008d3e <USBD_LL_Transmit>
 80068ee:	e01f      	b.n	8006930 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	33b0      	adds	r3, #176	; 0xb0
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d010      	beq.n	8006930 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	33b0      	adds	r3, #176	; 0xb0
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800692c:	78fa      	ldrb	r2, [r7, #3]
 800692e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	32b0      	adds	r2, #176	; 0xb0
 8006950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006954:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	32b0      	adds	r2, #176	; 0xb0
 8006960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006968:	2303      	movs	r3, #3
 800696a:	e01a      	b.n	80069a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f002 fa26 	bl	8008dc2 <USBD_LL_GetRxDataSize>
 8006976:	4602      	mov	r2, r0
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	33b0      	adds	r3, #176	; 0xb0
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800699c:	4611      	mov	r1, r2
 800699e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	32b0      	adds	r2, #176	; 0xb0
 80069bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e025      	b.n	8006a18 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	33b0      	adds	r3, #176	; 0xb0
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01a      	beq.n	8006a16 <USBD_CDC_EP0_RxReady+0x6c>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80069e6:	2bff      	cmp	r3, #255	; 0xff
 80069e8:	d015      	beq.n	8006a16 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	33b0      	adds	r3, #176	; 0xb0
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a28:	2182      	movs	r1, #130	; 0x82
 8006a2a:	4818      	ldr	r0, [pc, #96]	; (8006a8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a2c:	f000 fd62 	bl	80074f4 <USBD_GetEpDesc>
 8006a30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a32:	2101      	movs	r1, #1
 8006a34:	4815      	ldr	r0, [pc, #84]	; (8006a8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a36:	f000 fd5d 	bl	80074f4 <USBD_GetEpDesc>
 8006a3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a3c:	2181      	movs	r1, #129	; 0x81
 8006a3e:	4813      	ldr	r0, [pc, #76]	; (8006a8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a40:	f000 fd58 	bl	80074f4 <USBD_GetEpDesc>
 8006a44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a60:	711a      	strb	r2, [r3, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a74:	711a      	strb	r2, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2243      	movs	r2, #67	; 0x43
 8006a7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a80:	4b02      	ldr	r3, [pc, #8]	; (8006a8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000050 	.word	0x20000050

08006a90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a98:	2182      	movs	r1, #130	; 0x82
 8006a9a:	4818      	ldr	r0, [pc, #96]	; (8006afc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a9c:	f000 fd2a 	bl	80074f4 <USBD_GetEpDesc>
 8006aa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4815      	ldr	r0, [pc, #84]	; (8006afc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006aa6:	f000 fd25 	bl	80074f4 <USBD_GetEpDesc>
 8006aaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006aac:	2181      	movs	r1, #129	; 0x81
 8006aae:	4813      	ldr	r0, [pc, #76]	; (8006afc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ab0:	f000 fd20 	bl	80074f4 <USBD_GetEpDesc>
 8006ab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2200      	movs	r2, #0
 8006acc:	711a      	strb	r2, [r3, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f042 0202 	orr.w	r2, r2, #2
 8006ad4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	711a      	strb	r2, [r3, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f042 0202 	orr.w	r2, r2, #2
 8006ae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2243      	movs	r2, #67	; 0x43
 8006aee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000050 	.word	0x20000050

08006b00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b08:	2182      	movs	r1, #130	; 0x82
 8006b0a:	4818      	ldr	r0, [pc, #96]	; (8006b6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b0c:	f000 fcf2 	bl	80074f4 <USBD_GetEpDesc>
 8006b10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b12:	2101      	movs	r1, #1
 8006b14:	4815      	ldr	r0, [pc, #84]	; (8006b6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b16:	f000 fced 	bl	80074f4 <USBD_GetEpDesc>
 8006b1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b1c:	2181      	movs	r1, #129	; 0x81
 8006b1e:	4813      	ldr	r0, [pc, #76]	; (8006b6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b20:	f000 fce8 	bl	80074f4 <USBD_GetEpDesc>
 8006b24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d006      	beq.n	8006b46 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b40:	711a      	strb	r2, [r3, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b54:	711a      	strb	r2, [r3, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2243      	movs	r2, #67	; 0x43
 8006b5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b60:	4b02      	ldr	r3, [pc, #8]	; (8006b6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000050 	.word	0x20000050

08006b70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	220a      	movs	r2, #10
 8006b7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b7e:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	2000000c 	.word	0x2000000c

08006b90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e009      	b.n	8006bb8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	33b0      	adds	r3, #176	; 0xb0
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	32b0      	adds	r2, #176	; 0xb0
 8006bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bde:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e008      	b.n	8006bfc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	32b0      	adds	r2, #176	; 0xb0
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e004      	b.n	8006c36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	32b0      	adds	r2, #176	; 0xb0
 8006c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e025      	b.n	8006cb6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11f      	bne.n	8006cb4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c7c:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <USBD_CDC_TransmitPacket+0x7c>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4403      	add	r3, r0
 8006c96:	3314      	adds	r3, #20
 8006c98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <USBD_CDC_TransmitPacket+0x7c>)
 8006c9c:	7819      	ldrb	r1, [r3, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f002 f847 	bl	8008d3e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000093 	.word	0x20000093

08006cc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	32b0      	adds	r2, #176	; 0xb0
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	32b0      	adds	r2, #176	; 0xb0
 8006ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e018      	b.n	8006d24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7c1b      	ldrb	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cfa:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <USBD_CDC_ReceivePacket+0x68>)
 8006cfc:	7819      	ldrb	r1, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f002 f839 	bl	8008d80 <USBD_LL_PrepareReceive>
 8006d0e:	e008      	b.n	8006d22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d10:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <USBD_CDC_ReceivePacket+0x68>)
 8006d12:	7819      	ldrb	r1, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d1a:	2340      	movs	r3, #64	; 0x40
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f002 f82f 	bl	8008d80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000094 	.word	0x20000094

08006d30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e01f      	b.n	8006d88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	79fa      	ldrb	r2, [r7, #7]
 8006d7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f001 fea9 	bl	8008ad4 <USBD_LL_Init>
 8006d82:	4603      	mov	r3, r0
 8006d84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e025      	b.n	8006df4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32ae      	adds	r2, #174	; 0xae
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00f      	beq.n	8006de4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32ae      	adds	r2, #174	; 0xae
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	f107 020e 	add.w	r2, r7, #14
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 feb1 	bl	8008b6c <USBD_LL_Start>
 8006e0a:	4603      	mov	r3, r0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	460b      	mov	r3, r1
 8006e34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	4611      	mov	r1, r2
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 f924 	bl	80080f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d01a      	beq.n	8006f08 <USBD_LL_SetupStage+0x72>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d822      	bhi.n	8006f1c <USBD_LL_SetupStage+0x86>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <USBD_LL_SetupStage+0x4a>
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d00a      	beq.n	8006ef4 <USBD_LL_SetupStage+0x5e>
 8006ede:	e01d      	b.n	8006f1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fb79 	bl	80075e0 <USBD_StdDevReq>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef2:	e020      	b.n	8006f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fbe1 	bl	80076c4 <USBD_StdItfReq>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
      break;
 8006f06:	e016      	b.n	8006f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc43 	bl	800779c <USBD_StdEPReq>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1a:	e00c      	b.n	8006f36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 fe7e 	bl	8008c2c <USBD_LL_StallEP>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]
      break;
 8006f34:	bf00      	nop
  }

  return ret;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d177      	bne.n	8007048 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	f040 80a1 	bne.w	80070ae <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	8992      	ldrh	r2, [r2, #12]
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d91c      	bls.n	8006fb2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	8992      	ldrh	r2, [r2, #12]
 8006f80:	1a9a      	subs	r2, r3, r2
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	8992      	ldrh	r2, [r2, #12]
 8006f8e:	441a      	add	r2, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6919      	ldr	r1, [r3, #16]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	899b      	ldrh	r3, [r3, #12]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	bf38      	it	cc
 8006fa6:	4613      	movcc	r3, r2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f001 f9aa 	bl	8008304 <USBD_CtlContinueRx>
 8006fb0:	e07d      	b.n	80070ae <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d014      	beq.n	8006fea <USBD_LL_DataOutStage+0xaa>
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d81d      	bhi.n	8007000 <USBD_LL_DataOutStage+0xc0>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <USBD_LL_DataOutStage+0x8e>
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <USBD_LL_DataOutStage+0x94>
 8006fcc:	e018      	b.n	8007000 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75bb      	strb	r3, [r7, #22]
            break;
 8006fd2:	e018      	b.n	8007006 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fa6e 	bl	80074c0 <USBD_CoreFindIF>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75bb      	strb	r3, [r7, #22]
            break;
 8006fe8:	e00d      	b.n	8007006 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fa70 	bl	80074da <USBD_CoreFindEP>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8006ffe:	e002      	b.n	8007006 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	75bb      	strb	r3, [r7, #22]
            break;
 8007004:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007006:	7dbb      	ldrb	r3, [r7, #22]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d119      	bne.n	8007040 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b03      	cmp	r3, #3
 8007016:	d113      	bne.n	8007040 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007018:	7dba      	ldrb	r2, [r7, #22]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	32ae      	adds	r2, #174	; 0xae
 800701e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007028:	7dba      	ldrb	r2, [r7, #22]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007030:	7dba      	ldrb	r2, [r7, #22]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	32ae      	adds	r2, #174	; 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f001 f970 	bl	8008326 <USBD_CtlSendStatus>
 8007046:	e032      	b.n	80070ae <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704e:	b2db      	uxtb	r3, r3
 8007050:	4619      	mov	r1, r3
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fa41 	bl	80074da <USBD_CoreFindEP>
 8007058:	4603      	mov	r3, r0
 800705a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800705c:	7dbb      	ldrb	r3, [r7, #22]
 800705e:	2bff      	cmp	r3, #255	; 0xff
 8007060:	d025      	beq.n	80070ae <USBD_LL_DataOutStage+0x16e>
 8007062:	7dbb      	ldrb	r3, [r7, #22]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d122      	bne.n	80070ae <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b03      	cmp	r3, #3
 8007072:	d117      	bne.n	80070a4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007074:	7dba      	ldrb	r2, [r7, #22]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	32ae      	adds	r2, #174	; 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00f      	beq.n	80070a4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007084:	7dba      	ldrb	r2, [r7, #22]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800708c:	7dba      	ldrb	r2, [r7, #22]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	32ae      	adds	r2, #174	; 0xae
 8007092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	7afa      	ldrb	r2, [r7, #11]
 800709a:	4611      	mov	r1, r2
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	4798      	blx	r3
 80070a0:	4603      	mov	r3, r0
 80070a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	e000      	b.n	80070b0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	460b      	mov	r3, r1
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d178      	bne.n	80071be <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3314      	adds	r3, #20
 80070d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d163      	bne.n	80071a4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	8992      	ldrh	r2, [r2, #12]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d91c      	bls.n	8007122 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	8992      	ldrh	r2, [r2, #12]
 80070f0:	1a9a      	subs	r2, r3, r2
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	8992      	ldrh	r2, [r2, #12]
 80070fe:	441a      	add	r2, r3
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6919      	ldr	r1, [r3, #16]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	461a      	mov	r2, r3
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f001 f8c6 	bl	80082a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007114:	2300      	movs	r3, #0
 8007116:	2200      	movs	r2, #0
 8007118:	2100      	movs	r1, #0
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f001 fe30 	bl	8008d80 <USBD_LL_PrepareReceive>
 8007120:	e040      	b.n	80071a4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	899b      	ldrh	r3, [r3, #12]
 8007126:	461a      	mov	r2, r3
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	429a      	cmp	r2, r3
 800712e:	d11c      	bne.n	800716a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007138:	4293      	cmp	r3, r2
 800713a:	d316      	bcc.n	800716a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007146:	429a      	cmp	r2, r3
 8007148:	d20f      	bcs.n	800716a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f001 f8a6 	bl	80082a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800715c:	2300      	movs	r3, #0
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f001 fe0c 	bl	8008d80 <USBD_LL_PrepareReceive>
 8007168:	e01c      	b.n	80071a4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b03      	cmp	r3, #3
 8007174:	d10f      	bne.n	8007196 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007196:	2180      	movs	r1, #128	; 0x80
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 fd47 	bl	8008c2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f001 f8d4 	bl	800834c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d03a      	beq.n	8007224 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fe30 	bl	8006e14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071bc:	e032      	b.n	8007224 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071be:	7afb      	ldrb	r3, [r7, #11]
 80071c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f986 	bl	80074da <USBD_CoreFindEP>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	2bff      	cmp	r3, #255	; 0xff
 80071d6:	d025      	beq.n	8007224 <USBD_LL_DataInStage+0x16c>
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d122      	bne.n	8007224 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d11c      	bne.n	8007224 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80071ea:	7dfa      	ldrb	r2, [r7, #23]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	32ae      	adds	r2, #174	; 0xae
 80071f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d014      	beq.n	8007224 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80071fa:	7dfa      	ldrb	r2, [r7, #23]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007202:	7dfa      	ldrb	r2, [r7, #23]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	32ae      	adds	r2, #174	; 0xae
 8007208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	7afa      	ldrb	r2, [r7, #11]
 8007210:	4611      	mov	r1, r2
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	4798      	blx	r3
 8007216:	4603      	mov	r3, r0
 8007218:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800721a:	7dbb      	ldrb	r3, [r7, #22]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007220:	7dbb      	ldrb	r3, [r7, #22]
 8007222:	e000      	b.n	8007226 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d014      	beq.n	8007294 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6852      	ldr	r2, [r2, #4]
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	4611      	mov	r1, r2
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007290:	2303      	movs	r3, #3
 8007292:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007294:	2340      	movs	r3, #64	; 0x40
 8007296:	2200      	movs	r2, #0
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 fc81 	bl	8008ba2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2240      	movs	r2, #64	; 0x40
 80072ac:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072b0:	2340      	movs	r3, #64	; 0x40
 80072b2:	2200      	movs	r2, #0
 80072b4:	2180      	movs	r1, #128	; 0x80
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fc73 	bl	8008ba2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2240      	movs	r2, #64	; 0x40
 80072c8:	841a      	strh	r2, [r3, #32]

  return ret;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	78fa      	ldrb	r2, [r7, #3]
 80072e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b04      	cmp	r3, #4
 8007306:	d006      	beq.n	8007316 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730e:	b2da      	uxtb	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2204      	movs	r2, #4
 800731a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b04      	cmp	r3, #4
 800733e:	d106      	bne.n	800734e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007346:	b2da      	uxtb	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b03      	cmp	r3, #3
 800736e:	d110      	bne.n	8007392 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	32ae      	adds	r2, #174	; 0xae
 80073b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e01c      	b.n	80073f8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d115      	bne.n	80073f6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	32ae      	adds	r2, #174	; 0xae
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00b      	beq.n	80073f6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	32ae      	adds	r2, #174	; 0xae
 80073e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	4611      	mov	r1, r2
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	32ae      	adds	r2, #174	; 0xae
 8007416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800741e:	2303      	movs	r3, #3
 8007420:	e01c      	b.n	800745c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b03      	cmp	r3, #3
 800742c:	d115      	bne.n	800745a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	32ae      	adds	r2, #174	; 0xae
 8007438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	32ae      	adds	r2, #174	; 0xae
 800744c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	78fa      	ldrb	r2, [r7, #3]
 8007454:	4611      	mov	r1, r2
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00e      	beq.n	80074b6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6852      	ldr	r2, [r2, #4]
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	4611      	mov	r1, r2
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074b2:	2303      	movs	r3, #3
 80074b4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	885b      	ldrh	r3, [r3, #2]
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b29b      	uxth	r3, r3
 8007518:	429a      	cmp	r2, r3
 800751a:	d920      	bls.n	800755e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007524:	e013      	b.n	800754e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007526:	f107 030a 	add.w	r3, r7, #10
 800752a:	4619      	mov	r1, r3
 800752c:	6978      	ldr	r0, [r7, #20]
 800752e:	f000 f81b 	bl	8007568 <USBD_GetNextDesc>
 8007532:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b05      	cmp	r3, #5
 800753a:	d108      	bne.n	800754e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	789b      	ldrb	r3, [r3, #2]
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	429a      	cmp	r2, r3
 8007548:	d008      	beq.n	800755c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	885b      	ldrh	r3, [r3, #2]
 8007552:	b29a      	uxth	r2, r3
 8007554:	897b      	ldrh	r3, [r7, #10]
 8007556:	429a      	cmp	r2, r3
 8007558:	d8e5      	bhi.n	8007526 <USBD_GetEpDesc+0x32>
 800755a:	e000      	b.n	800755e <USBD_GetEpDesc+0x6a>
          break;
 800755c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800755e:	693b      	ldr	r3, [r7, #16]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	881a      	ldrh	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b29b      	uxth	r3, r3
 8007580:	4413      	add	r3, r2
 8007582:	b29a      	uxth	r2, r3
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007594:	68fb      	ldr	r3, [r7, #12]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b087      	sub	sp, #28
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	3301      	adds	r3, #1
 80075b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075c0:	8a3b      	ldrh	r3, [r7, #16]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	b21a      	sxth	r2, r3
 80075c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	b21b      	sxth	r3, r3
 80075ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075d0:	89fb      	ldrh	r3, [r7, #14]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
	...

080075e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d005      	beq.n	8007606 <USBD_StdDevReq+0x26>
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	d857      	bhi.n	80076ae <USBD_StdDevReq+0xce>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00f      	beq.n	8007622 <USBD_StdDevReq+0x42>
 8007602:	2b20      	cmp	r3, #32
 8007604:	d153      	bne.n	80076ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	32ae      	adds	r2, #174	; 0xae
 8007610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
      break;
 8007620:	e04a      	b.n	80076b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	2b09      	cmp	r3, #9
 8007628:	d83b      	bhi.n	80076a2 <USBD_StdDevReq+0xc2>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <USBD_StdDevReq+0x50>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007685 	.word	0x08007685
 8007634:	08007699 	.word	0x08007699
 8007638:	080076a3 	.word	0x080076a3
 800763c:	0800768f 	.word	0x0800768f
 8007640:	080076a3 	.word	0x080076a3
 8007644:	08007663 	.word	0x08007663
 8007648:	08007659 	.word	0x08007659
 800764c:	080076a3 	.word	0x080076a3
 8007650:	0800767b 	.word	0x0800767b
 8007654:	0800766d 	.word	0x0800766d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa3e 	bl	8007adc <USBD_GetDescriptor>
          break;
 8007660:	e024      	b.n	80076ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fba3 	bl	8007db0 <USBD_SetAddress>
          break;
 800766a:	e01f      	b.n	80076ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fbe2 	bl	8007e38 <USBD_SetConfig>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]
          break;
 8007678:	e018      	b.n	80076ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc85 	bl	8007f8c <USBD_GetConfig>
          break;
 8007682:	e013      	b.n	80076ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fcb6 	bl	8007ff8 <USBD_GetStatus>
          break;
 800768c:	e00e      	b.n	80076ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fce5 	bl	8008060 <USBD_SetFeature>
          break;
 8007696:	e009      	b.n	80076ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fd09 	bl	80080b2 <USBD_ClrFeature>
          break;
 80076a0:	e004      	b.n	80076ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fd60 	bl	800816a <USBD_CtlError>
          break;
 80076aa:	bf00      	nop
      }
      break;
 80076ac:	e004      	b.n	80076b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fd5a 	bl	800816a <USBD_CtlError>
      break;
 80076b6:	bf00      	nop
  }

  return ret;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop

080076c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d005      	beq.n	80076ea <USBD_StdItfReq+0x26>
 80076de:	2b40      	cmp	r3, #64	; 0x40
 80076e0:	d852      	bhi.n	8007788 <USBD_StdItfReq+0xc4>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <USBD_StdItfReq+0x26>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d14e      	bne.n	8007788 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d840      	bhi.n	800777a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	889b      	ldrh	r3, [r3, #4]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d836      	bhi.n	8007770 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	889b      	ldrh	r3, [r3, #4]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff fed8 	bl	80074c0 <USBD_CoreFindIF>
 8007710:	4603      	mov	r3, r0
 8007712:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	2bff      	cmp	r3, #255	; 0xff
 8007718:	d01d      	beq.n	8007756 <USBD_StdItfReq+0x92>
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11a      	bne.n	8007756 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007720:	7bba      	ldrb	r2, [r7, #14]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32ae      	adds	r2, #174	; 0xae
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00f      	beq.n	8007750 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007730:	7bba      	ldrb	r2, [r7, #14]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007738:	7bba      	ldrb	r2, [r7, #14]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32ae      	adds	r2, #174	; 0xae
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800774e:	e004      	b.n	800775a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007750:	2303      	movs	r3, #3
 8007752:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007754:	e001      	b.n	800775a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	88db      	ldrh	r3, [r3, #6]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d110      	bne.n	8007784 <USBD_StdItfReq+0xc0>
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10d      	bne.n	8007784 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fddc 	bl	8008326 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800776e:	e009      	b.n	8007784 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fcf9 	bl	800816a <USBD_CtlError>
          break;
 8007778:	e004      	b.n	8007784 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fcf4 	bl	800816a <USBD_CtlError>
          break;
 8007782:	e000      	b.n	8007786 <USBD_StdItfReq+0xc2>
          break;
 8007784:	bf00      	nop
      }
      break;
 8007786:	e004      	b.n	8007792 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fced 	bl	800816a <USBD_CtlError>
      break;
 8007790:	bf00      	nop
  }

  return ret;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	889b      	ldrh	r3, [r3, #4]
 80077ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b8:	2b40      	cmp	r3, #64	; 0x40
 80077ba:	d007      	beq.n	80077cc <USBD_StdEPReq+0x30>
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	f200 8181 	bhi.w	8007ac4 <USBD_StdEPReq+0x328>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d02a      	beq.n	800781c <USBD_StdEPReq+0x80>
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	f040 817c 	bne.w	8007ac4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff fe82 	bl	80074da <USBD_CoreFindEP>
 80077d6:	4603      	mov	r3, r0
 80077d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077da:	7b7b      	ldrb	r3, [r7, #13]
 80077dc:	2bff      	cmp	r3, #255	; 0xff
 80077de:	f000 8176 	beq.w	8007ace <USBD_StdEPReq+0x332>
 80077e2:	7b7b      	ldrb	r3, [r7, #13]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 8172 	bne.w	8007ace <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80077ea:	7b7a      	ldrb	r2, [r7, #13]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80077f2:	7b7a      	ldrb	r2, [r7, #13]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	32ae      	adds	r2, #174	; 0xae
 80077f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8165 	beq.w	8007ace <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007804:	7b7a      	ldrb	r2, [r7, #13]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	32ae      	adds	r2, #174	; 0xae
 800780a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800781a:	e158      	b.n	8007ace <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d008      	beq.n	8007836 <USBD_StdEPReq+0x9a>
 8007824:	2b03      	cmp	r3, #3
 8007826:	f300 8147 	bgt.w	8007ab8 <USBD_StdEPReq+0x31c>
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 809b 	beq.w	8007966 <USBD_StdEPReq+0x1ca>
 8007830:	2b01      	cmp	r3, #1
 8007832:	d03c      	beq.n	80078ae <USBD_StdEPReq+0x112>
 8007834:	e140      	b.n	8007ab8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d002      	beq.n	8007848 <USBD_StdEPReq+0xac>
 8007842:	2b03      	cmp	r3, #3
 8007844:	d016      	beq.n	8007874 <USBD_StdEPReq+0xd8>
 8007846:	e02c      	b.n	80078a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00d      	beq.n	800786a <USBD_StdEPReq+0xce>
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d00a      	beq.n	800786a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f9e7 	bl	8008c2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800785e:	2180      	movs	r1, #128	; 0x80
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f9e3 	bl	8008c2c <USBD_LL_StallEP>
 8007866:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007868:	e020      	b.n	80078ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fc7c 	bl	800816a <USBD_CtlError>
              break;
 8007872:	e01b      	b.n	80078ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	885b      	ldrh	r3, [r3, #2]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10e      	bne.n	800789a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <USBD_StdEPReq+0xfe>
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d008      	beq.n	800789a <USBD_StdEPReq+0xfe>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	88db      	ldrh	r3, [r3, #6]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 f9c9 	bl	8008c2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fd43 	bl	8008326 <USBD_CtlSendStatus>

              break;
 80078a0:	e004      	b.n	80078ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fc60 	bl	800816a <USBD_CtlError>
              break;
 80078aa:	bf00      	nop
          }
          break;
 80078ac:	e109      	b.n	8007ac2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d002      	beq.n	80078c0 <USBD_StdEPReq+0x124>
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d016      	beq.n	80078ec <USBD_StdEPReq+0x150>
 80078be:	e04b      	b.n	8007958 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <USBD_StdEPReq+0x146>
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	d00a      	beq.n	80078e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f9ab 	bl	8008c2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d6:	2180      	movs	r1, #128	; 0x80
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 f9a7 	bl	8008c2c <USBD_LL_StallEP>
 80078de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078e0:	e040      	b.n	8007964 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fc40 	bl	800816a <USBD_CtlError>
              break;
 80078ea:	e03b      	b.n	8007964 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	885b      	ldrh	r3, [r3, #2]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d136      	bne.n	8007962 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 f9b1 	bl	8008c6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fd0c 	bl	8008326 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff fde1 	bl	80074da <USBD_CoreFindEP>
 8007918:	4603      	mov	r3, r0
 800791a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800791c:	7b7b      	ldrb	r3, [r7, #13]
 800791e:	2bff      	cmp	r3, #255	; 0xff
 8007920:	d01f      	beq.n	8007962 <USBD_StdEPReq+0x1c6>
 8007922:	7b7b      	ldrb	r3, [r7, #13]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d11c      	bne.n	8007962 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007928:	7b7a      	ldrb	r2, [r7, #13]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007930:	7b7a      	ldrb	r2, [r7, #13]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	32ae      	adds	r2, #174	; 0xae
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d010      	beq.n	8007962 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007940:	7b7a      	ldrb	r2, [r7, #13]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	32ae      	adds	r2, #174	; 0xae
 8007946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
 8007952:	4603      	mov	r3, r0
 8007954:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007956:	e004      	b.n	8007962 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fc05 	bl	800816a <USBD_CtlError>
              break;
 8007960:	e000      	b.n	8007964 <USBD_StdEPReq+0x1c8>
              break;
 8007962:	bf00      	nop
          }
          break;
 8007964:	e0ad      	b.n	8007ac2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d002      	beq.n	8007978 <USBD_StdEPReq+0x1dc>
 8007972:	2b03      	cmp	r3, #3
 8007974:	d033      	beq.n	80079de <USBD_StdEPReq+0x242>
 8007976:	e099      	b.n	8007aac <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <USBD_StdEPReq+0x1f2>
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b80      	cmp	r3, #128	; 0x80
 8007982:	d004      	beq.n	800798e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fbef 	bl	800816a <USBD_CtlError>
                break;
 800798c:	e093      	b.n	8007ab6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800798e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007992:	2b00      	cmp	r3, #0
 8007994:	da0b      	bge.n	80079ae <USBD_StdEPReq+0x212>
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	3310      	adds	r3, #16
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4413      	add	r3, r2
 80079aa:	3304      	adds	r3, #4
 80079ac:	e00b      	b.n	80079c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	3304      	adds	r3, #4
 80079c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2200      	movs	r2, #0
 80079cc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	330e      	adds	r3, #14
 80079d2:	2202      	movs	r2, #2
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fc44 	bl	8008264 <USBD_CtlSendData>
              break;
 80079dc:	e06b      	b.n	8007ab6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da11      	bge.n	8007a0a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	3323      	adds	r3, #35	; 0x23
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d117      	bne.n	8007a30 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fbb1 	bl	800816a <USBD_CtlError>
                  break;
 8007a08:	e055      	b.n	8007ab6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	f003 020f 	and.w	r2, r3, #15
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	f203 1363 	addw	r3, r3, #355	; 0x163
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fb9e 	bl	800816a <USBD_CtlError>
                  break;
 8007a2e:	e042      	b.n	8007ab6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da0b      	bge.n	8007a50 <USBD_StdEPReq+0x2b4>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	3310      	adds	r3, #16
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	e00b      	b.n	8007a68 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <USBD_StdEPReq+0x2da>
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d103      	bne.n	8007a7e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	739a      	strb	r2, [r3, #14]
 8007a7c:	e00e      	b.n	8007a9c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 f910 	bl	8008ca8 <USBD_LL_IsStallEP>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2201      	movs	r2, #1
 8007a92:	739a      	strb	r2, [r3, #14]
 8007a94:	e002      	b.n	8007a9c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	330e      	adds	r3, #14
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fbdd 	bl	8008264 <USBD_CtlSendData>
              break;
 8007aaa:	e004      	b.n	8007ab6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fb5b 	bl	800816a <USBD_CtlError>
              break;
 8007ab4:	bf00      	nop
          }
          break;
 8007ab6:	e004      	b.n	8007ac2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fb55 	bl	800816a <USBD_CtlError>
          break;
 8007ac0:	bf00      	nop
      }
      break;
 8007ac2:	e005      	b.n	8007ad0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fb4f 	bl	800816a <USBD_CtlError>
      break;
 8007acc:	e000      	b.n	8007ad0 <USBD_StdEPReq+0x334>
      break;
 8007ace:	bf00      	nop
  }

  return ret;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	0a1b      	lsrs	r3, r3, #8
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	2b06      	cmp	r3, #6
 8007afe:	f200 8128 	bhi.w	8007d52 <USBD_GetDescriptor+0x276>
 8007b02:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <USBD_GetDescriptor+0x2c>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b25 	.word	0x08007b25
 8007b0c:	08007b3d 	.word	0x08007b3d
 8007b10:	08007b7d 	.word	0x08007b7d
 8007b14:	08007d53 	.word	0x08007d53
 8007b18:	08007d53 	.word	0x08007d53
 8007b1c:	08007cf3 	.word	0x08007cf3
 8007b20:	08007d1f 	.word	0x08007d1f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7c12      	ldrb	r2, [r2, #16]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	4610      	mov	r0, r2
 8007b36:	4798      	blx	r3
 8007b38:	60f8      	str	r0, [r7, #12]
      break;
 8007b3a:	e112      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7c1b      	ldrb	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10d      	bne.n	8007b60 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	f107 0208 	add.w	r2, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b5e:	e100      	b.n	8007d62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	f107 0208 	add.w	r2, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	2202      	movs	r2, #2
 8007b78:	701a      	strb	r2, [r3, #0]
      break;
 8007b7a:	e0f2      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	885b      	ldrh	r3, [r3, #2]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b05      	cmp	r3, #5
 8007b84:	f200 80ac 	bhi.w	8007ce0 <USBD_GetDescriptor+0x204>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <USBD_GetDescriptor+0xb4>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007ba9 	.word	0x08007ba9
 8007b94:	08007bdd 	.word	0x08007bdd
 8007b98:	08007c11 	.word	0x08007c11
 8007b9c:	08007c45 	.word	0x08007c45
 8007ba0:	08007c79 	.word	0x08007c79
 8007ba4:	08007cad 	.word	0x08007cad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bca:	e091      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 facb 	bl	800816a <USBD_CtlError>
            err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bda:	e089      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7c12      	ldrb	r2, [r2, #16]
 8007bf4:	f107 0108 	add.w	r1, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfe:	e077      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fab1 	bl	800816a <USBD_CtlError>
            err++;
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0e:	e06f      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00b      	beq.n	8007c34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	7c12      	ldrb	r2, [r2, #16]
 8007c28:	f107 0108 	add.w	r1, r7, #8
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4798      	blx	r3
 8007c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c32:	e05d      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa97 	bl	800816a <USBD_CtlError>
            err++;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	72fb      	strb	r3, [r7, #11]
          break;
 8007c42:	e055      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	7c12      	ldrb	r2, [r2, #16]
 8007c5c:	f107 0108 	add.w	r1, r7, #8
 8007c60:	4610      	mov	r0, r2
 8007c62:	4798      	blx	r3
 8007c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c66:	e043      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fa7d 	bl	800816a <USBD_CtlError>
            err++;
 8007c70:	7afb      	ldrb	r3, [r7, #11]
 8007c72:	3301      	adds	r3, #1
 8007c74:	72fb      	strb	r3, [r7, #11]
          break;
 8007c76:	e03b      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00b      	beq.n	8007c9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	7c12      	ldrb	r2, [r2, #16]
 8007c90:	f107 0108 	add.w	r1, r7, #8
 8007c94:	4610      	mov	r0, r2
 8007c96:	4798      	blx	r3
 8007c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c9a:	e029      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa63 	bl	800816a <USBD_CtlError>
            err++;
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8007caa:	e021      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7c12      	ldrb	r2, [r2, #16]
 8007cc4:	f107 0108 	add.w	r1, r7, #8
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cce:	e00f      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa49 	bl	800816a <USBD_CtlError>
            err++;
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cde:	e007      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa41 	bl	800816a <USBD_CtlError>
          err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007cee:	bf00      	nop
      }
      break;
 8007cf0:	e037      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	7c1b      	ldrb	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	f107 0208 	add.w	r2, r7, #8
 8007d06:	4610      	mov	r0, r2
 8007d08:	4798      	blx	r3
 8007d0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d0c:	e029      	b.n	8007d62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fa2a 	bl	800816a <USBD_CtlError>
        err++;
 8007d16:	7afb      	ldrb	r3, [r7, #11]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d1c:	e021      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7c1b      	ldrb	r3, [r3, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10d      	bne.n	8007d42 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	f107 0208 	add.w	r2, r7, #8
 8007d32:	4610      	mov	r0, r2
 8007d34:	4798      	blx	r3
 8007d36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	2207      	movs	r2, #7
 8007d3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d40:	e00f      	b.n	8007d62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa10 	bl	800816a <USBD_CtlError>
        err++;
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d50:	e007      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fa08 	bl	800816a <USBD_CtlError>
      err++;
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d60:	bf00      	nop
  }

  if (err != 0U)
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11e      	bne.n	8007da6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	88db      	ldrh	r3, [r3, #6]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d016      	beq.n	8007d9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d70:	893b      	ldrh	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00e      	beq.n	8007d94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	88da      	ldrh	r2, [r3, #6]
 8007d7a:	893b      	ldrh	r3, [r7, #8]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bf28      	it	cs
 8007d80:	4613      	movcs	r3, r2
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d86:	893b      	ldrh	r3, [r7, #8]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fa69 	bl	8008264 <USBD_CtlSendData>
 8007d92:	e009      	b.n	8007da8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f9e7 	bl	800816a <USBD_CtlError>
 8007d9c:	e004      	b.n	8007da8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fac1 	bl	8008326 <USBD_CtlSendStatus>
 8007da4:	e000      	b.n	8007da8 <USBD_GetDescriptor+0x2cc>
    return;
 8007da6:	bf00      	nop
  }
}
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop

08007db0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	889b      	ldrh	r3, [r3, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d131      	bne.n	8007e26 <USBD_SetAddress+0x76>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88db      	ldrh	r3, [r3, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d12d      	bne.n	8007e26 <USBD_SetAddress+0x76>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	885b      	ldrh	r3, [r3, #2]
 8007dce:	2b7f      	cmp	r3, #127	; 0x7f
 8007dd0:	d829      	bhi.n	8007e26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	885b      	ldrh	r3, [r3, #2]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ddc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d104      	bne.n	8007df4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f9bc 	bl	800816a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	e01d      	b.n	8007e30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7bfa      	ldrb	r2, [r7, #15]
 8007df8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 ff7d 	bl	8008d00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa8d 	bl	8008326 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2202      	movs	r2, #2
 8007e16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1a:	e009      	b.n	8007e30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	e004      	b.n	8007e30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f99e 	bl	800816a <USBD_CtlError>
  }
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	885b      	ldrh	r3, [r3, #2]
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	4b4e      	ldr	r3, [pc, #312]	; (8007f88 <USBD_SetConfig+0x150>)
 8007e4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e50:	4b4d      	ldr	r3, [pc, #308]	; (8007f88 <USBD_SetConfig+0x150>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d905      	bls.n	8007e64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f985 	bl	800816a <USBD_CtlError>
    return USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e08c      	b.n	8007f7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d002      	beq.n	8007e76 <USBD_SetConfig+0x3e>
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d029      	beq.n	8007ec8 <USBD_SetConfig+0x90>
 8007e74:	e075      	b.n	8007f62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e76:	4b44      	ldr	r3, [pc, #272]	; (8007f88 <USBD_SetConfig+0x150>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d020      	beq.n	8007ec0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e7e:	4b42      	ldr	r3, [pc, #264]	; (8007f88 <USBD_SetConfig+0x150>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e88:	4b3f      	ldr	r3, [pc, #252]	; (8007f88 <USBD_SetConfig+0x150>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fe ffcb 	bl	8006e2a <USBD_SetClassConfig>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d008      	beq.n	8007eb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f962 	bl	800816a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eae:	e065      	b.n	8007f7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa38 	bl	8008326 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2203      	movs	r2, #3
 8007eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ebe:	e05d      	b.n	8007f7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fa30 	bl	8008326 <USBD_CtlSendStatus>
      break;
 8007ec6:	e059      	b.n	8007f7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ec8:	4b2f      	ldr	r3, [pc, #188]	; (8007f88 <USBD_SetConfig+0x150>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d112      	bne.n	8007ef6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ed8:	4b2b      	ldr	r3, [pc, #172]	; (8007f88 <USBD_SetConfig+0x150>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ee2:	4b29      	ldr	r3, [pc, #164]	; (8007f88 <USBD_SetConfig+0x150>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7fe ffba 	bl	8006e62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa19 	bl	8008326 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ef4:	e042      	b.n	8007f7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007ef6:	4b24      	ldr	r3, [pc, #144]	; (8007f88 <USBD_SetConfig+0x150>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d02a      	beq.n	8007f5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7fe ffa8 	bl	8006e62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f12:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <USBD_SetConfig+0x150>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <USBD_SetConfig+0x150>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fe ff81 	bl	8006e2a <USBD_SetClassConfig>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00f      	beq.n	8007f52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f918 	bl	800816a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fe ff8d 	bl	8006e62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f50:	e014      	b.n	8007f7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f9e7 	bl	8008326 <USBD_CtlSendStatus>
      break;
 8007f58:	e010      	b.n	8007f7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f9e3 	bl	8008326 <USBD_CtlSendStatus>
      break;
 8007f60:	e00c      	b.n	8007f7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f900 	bl	800816a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f6a:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <USBD_SetConfig+0x150>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7fe ff76 	bl	8006e62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f76:	2303      	movs	r3, #3
 8007f78:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7a:	bf00      	nop
  }

  return ret;
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	2000048c 	.word	0x2000048c

08007f8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	88db      	ldrh	r3, [r3, #6]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d004      	beq.n	8007fa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f8e2 	bl	800816a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fa6:	e023      	b.n	8007ff0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	dc02      	bgt.n	8007fba <USBD_GetConfig+0x2e>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dc03      	bgt.n	8007fc0 <USBD_GetConfig+0x34>
 8007fb8:	e015      	b.n	8007fe6 <USBD_GetConfig+0x5a>
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d00b      	beq.n	8007fd6 <USBD_GetConfig+0x4a>
 8007fbe:	e012      	b.n	8007fe6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3308      	adds	r3, #8
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f948 	bl	8008264 <USBD_CtlSendData>
        break;
 8007fd4:	e00c      	b.n	8007ff0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	2201      	movs	r2, #1
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f940 	bl	8008264 <USBD_CtlSendData>
        break;
 8007fe4:	e004      	b.n	8007ff0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f8be 	bl	800816a <USBD_CtlError>
        break;
 8007fee:	bf00      	nop
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008008:	b2db      	uxtb	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	2b02      	cmp	r3, #2
 800800e:	d81e      	bhi.n	800804e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	88db      	ldrh	r3, [r3, #6]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d004      	beq.n	8008022 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f8a5 	bl	800816a <USBD_CtlError>
        break;
 8008020:	e01a      	b.n	8008058 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f043 0202 	orr.w	r2, r3, #2
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	330c      	adds	r3, #12
 8008042:	2202      	movs	r2, #2
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f90c 	bl	8008264 <USBD_CtlSendData>
      break;
 800804c:	e004      	b.n	8008058 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f88a 	bl	800816a <USBD_CtlError>
      break;
 8008056:	bf00      	nop
  }
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	885b      	ldrh	r3, [r3, #2]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d107      	bne.n	8008082 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f953 	bl	8008326 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008080:	e013      	b.n	80080aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	885b      	ldrh	r3, [r3, #2]
 8008086:	2b02      	cmp	r3, #2
 8008088:	d10b      	bne.n	80080a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	889b      	ldrh	r3, [r3, #4]
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	b29b      	uxth	r3, r3
 8008092:	b2da      	uxtb	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f943 	bl	8008326 <USBD_CtlSendStatus>
}
 80080a0:	e003      	b.n	80080aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f860 	bl	800816a <USBD_CtlError>
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d80b      	bhi.n	80080e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	885b      	ldrh	r3, [r3, #2]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d10c      	bne.n	80080ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f923 	bl	8008326 <USBD_CtlSendStatus>
      }
      break;
 80080e0:	e004      	b.n	80080ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f840 	bl	800816a <USBD_CtlError>
      break;
 80080ea:	e000      	b.n	80080ee <USBD_ClrFeature+0x3c>
      break;
 80080ec:	bf00      	nop
  }
}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3301      	adds	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f7ff fa3e 	bl	80075a2 <SWAPBYTE>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3301      	adds	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff fa31 	bl	80075a2 <SWAPBYTE>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff fa24 	bl	80075a2 <SWAPBYTE>
 800815a:	4603      	mov	r3, r0
 800815c:	461a      	mov	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	80da      	strh	r2, [r3, #6]
}
 8008162:	bf00      	nop
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008174:	2180      	movs	r1, #128	; 0x80
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fd58 	bl	8008c2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800817c:	2100      	movs	r1, #0
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fd54 	bl	8008c2c <USBD_LL_StallEP>
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d042      	beq.n	8008228 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80081a6:	6938      	ldr	r0, [r7, #16]
 80081a8:	f000 f842 	bl	8008230 <USBD_GetLen>
 80081ac:	4603      	mov	r3, r0
 80081ae:	3301      	adds	r3, #1
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b6:	d808      	bhi.n	80081ca <USBD_GetString+0x3e>
 80081b8:	6938      	ldr	r0, [r7, #16]
 80081ba:	f000 f839 	bl	8008230 <USBD_GetLen>
 80081be:	4603      	mov	r3, r0
 80081c0:	3301      	adds	r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	e001      	b.n	80081ce <USBD_GetString+0x42>
 80081ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	4413      	add	r3, r2
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	7812      	ldrb	r2, [r2, #0]
 80081dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	3301      	adds	r3, #1
 80081e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	4413      	add	r3, r2
 80081ea:	2203      	movs	r2, #3
 80081ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	3301      	adds	r3, #1
 80081f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081f4:	e013      	b.n	800821e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	4413      	add	r3, r2
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	7812      	ldrb	r2, [r2, #0]
 8008200:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	3301      	adds	r3, #1
 8008206:	613b      	str	r3, [r7, #16]
    idx++;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	3301      	adds	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4413      	add	r3, r2
 8008214:	2200      	movs	r2, #0
 8008216:	701a      	strb	r2, [r3, #0]
    idx++;
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	3301      	adds	r3, #1
 800821c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e7      	bne.n	80081f6 <USBD_GetString+0x6a>
 8008226:	e000      	b.n	800822a <USBD_GetString+0x9e>
    return;
 8008228:	bf00      	nop
  }
}
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008240:	e005      	b.n	800824e <USBD_GetLen+0x1e>
  {
    len++;
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	3301      	adds	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	3301      	adds	r3, #1
 800824c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1f5      	bne.n	8008242 <USBD_GetLen+0x12>
  }

  return len;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2202      	movs	r2, #2
 8008274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fd54 	bl	8008d3e <USBD_LL_Transmit>

  return USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	2100      	movs	r1, #0
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fd43 	bl	8008d3e <USBD_LL_Transmit>

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2203      	movs	r2, #3
 80082d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	2100      	movs	r1, #0
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 fd43 	bl	8008d80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	2100      	movs	r1, #0
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fd32 	bl	8008d80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2204      	movs	r2, #4
 8008332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008336:	2300      	movs	r3, #0
 8008338:	2200      	movs	r2, #0
 800833a:	2100      	movs	r1, #0
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fcfe 	bl	8008d3e <USBD_LL_Transmit>

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2205      	movs	r2, #5
 8008358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800835c:	2300      	movs	r3, #0
 800835e:	2200      	movs	r2, #0
 8008360:	2100      	movs	r1, #0
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fd0c 	bl	8008d80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008378:	2200      	movs	r2, #0
 800837a:	4912      	ldr	r1, [pc, #72]	; (80083c4 <MX_USB_DEVICE_Init+0x50>)
 800837c:	4812      	ldr	r0, [pc, #72]	; (80083c8 <MX_USB_DEVICE_Init+0x54>)
 800837e:	f7fe fcd7 	bl	8006d30 <USBD_Init>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008388:	f7f8 fdac 	bl	8000ee4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800838c:	490f      	ldr	r1, [pc, #60]	; (80083cc <MX_USB_DEVICE_Init+0x58>)
 800838e:	480e      	ldr	r0, [pc, #56]	; (80083c8 <MX_USB_DEVICE_Init+0x54>)
 8008390:	f7fe fcfe 	bl	8006d90 <USBD_RegisterClass>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800839a:	f7f8 fda3 	bl	8000ee4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800839e:	490c      	ldr	r1, [pc, #48]	; (80083d0 <MX_USB_DEVICE_Init+0x5c>)
 80083a0:	4809      	ldr	r0, [pc, #36]	; (80083c8 <MX_USB_DEVICE_Init+0x54>)
 80083a2:	f7fe fbf5 	bl	8006b90 <USBD_CDC_RegisterInterface>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083ac:	f7f8 fd9a 	bl	8000ee4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083b0:	4805      	ldr	r0, [pc, #20]	; (80083c8 <MX_USB_DEVICE_Init+0x54>)
 80083b2:	f7fe fd23 	bl	8006dfc <USBD_Start>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083bc:	f7f8 fd92 	bl	8000ee4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083c0:	bf00      	nop
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	200000b4 	.word	0x200000b4
 80083c8:	20000490 	.word	0x20000490
 80083cc:	20000018 	.word	0x20000018
 80083d0:	200000a0 	.word	0x200000a0

080083d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083d8:	2200      	movs	r2, #0
 80083da:	4905      	ldr	r1, [pc, #20]	; (80083f0 <CDC_Init_FS+0x1c>)
 80083dc:	4805      	ldr	r0, [pc, #20]	; (80083f4 <CDC_Init_FS+0x20>)
 80083de:	f7fe fbf1 	bl	8006bc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083e2:	4905      	ldr	r1, [pc, #20]	; (80083f8 <CDC_Init_FS+0x24>)
 80083e4:	4803      	ldr	r0, [pc, #12]	; (80083f4 <CDC_Init_FS+0x20>)
 80083e6:	f7fe fc0f 	bl	8006c08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	2000096c 	.word	0x2000096c
 80083f4:	20000490 	.word	0x20000490
 80083f8:	2000076c 	.word	0x2000076c

080083fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008400:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008402:	4618      	mov	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
 8008418:	4613      	mov	r3, r2
 800841a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	2b23      	cmp	r3, #35	; 0x23
 8008420:	f200 8098 	bhi.w	8008554 <CDC_Control_FS+0x148>
 8008424:	a201      	add	r2, pc, #4	; (adr r2, 800842c <CDC_Control_FS+0x20>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008555 	.word	0x08008555
 8008430:	08008555 	.word	0x08008555
 8008434:	08008555 	.word	0x08008555
 8008438:	08008555 	.word	0x08008555
 800843c:	08008555 	.word	0x08008555
 8008440:	08008555 	.word	0x08008555
 8008444:	08008555 	.word	0x08008555
 8008448:	08008555 	.word	0x08008555
 800844c:	08008555 	.word	0x08008555
 8008450:	08008555 	.word	0x08008555
 8008454:	08008555 	.word	0x08008555
 8008458:	08008555 	.word	0x08008555
 800845c:	08008555 	.word	0x08008555
 8008460:	08008555 	.word	0x08008555
 8008464:	08008555 	.word	0x08008555
 8008468:	08008555 	.word	0x08008555
 800846c:	08008555 	.word	0x08008555
 8008470:	08008555 	.word	0x08008555
 8008474:	08008555 	.word	0x08008555
 8008478:	08008555 	.word	0x08008555
 800847c:	08008555 	.word	0x08008555
 8008480:	08008555 	.word	0x08008555
 8008484:	08008555 	.word	0x08008555
 8008488:	08008555 	.word	0x08008555
 800848c:	08008555 	.word	0x08008555
 8008490:	08008555 	.word	0x08008555
 8008494:	08008555 	.word	0x08008555
 8008498:	08008555 	.word	0x08008555
 800849c:	08008555 	.word	0x08008555
 80084a0:	08008555 	.word	0x08008555
 80084a4:	08008555 	.word	0x08008555
 80084a8:	08008555 	.word	0x08008555
 80084ac:	080084bd 	.word	0x080084bd
 80084b0:	08008501 	.word	0x08008501
 80084b4:	08008555 	.word	0x08008555
 80084b8:	08008555 	.word	0x08008555
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	3301      	adds	r3, #1
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	021b      	lsls	r3, r3, #8
 80084ca:	431a      	orrs	r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	3302      	adds	r3, #2
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	041b      	lsls	r3, r3, #16
 80084d4:	431a      	orrs	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	3303      	adds	r3, #3
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	061b      	lsls	r3, r3, #24
 80084de:	4313      	orrs	r3, r2
 80084e0:	461a      	mov	r2, r3
 80084e2:	4b20      	ldr	r3, [pc, #128]	; (8008564 <CDC_Control_FS+0x158>)
 80084e4:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	791a      	ldrb	r2, [r3, #4]
 80084ea:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <CDC_Control_FS+0x158>)
 80084ec:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	795a      	ldrb	r2, [r3, #5]
 80084f2:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <CDC_Control_FS+0x158>)
 80084f4:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	799a      	ldrb	r2, [r3, #6]
 80084fa:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <CDC_Control_FS+0x158>)
 80084fc:	719a      	strb	r2, [r3, #6]
    break;
 80084fe:	e02a      	b.n	8008556 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008500:	4b18      	ldr	r3, [pc, #96]	; (8008564 <CDC_Control_FS+0x158>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	b2da      	uxtb	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800850a:	4b16      	ldr	r3, [pc, #88]	; (8008564 <CDC_Control_FS+0x158>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	0a1a      	lsrs	r2, r3, #8
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	3301      	adds	r3, #1
 8008514:	b2d2      	uxtb	r2, r2
 8008516:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008518:	4b12      	ldr	r3, [pc, #72]	; (8008564 <CDC_Control_FS+0x158>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	0c1a      	lsrs	r2, r3, #16
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	3302      	adds	r3, #2
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008526:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <CDC_Control_FS+0x158>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	0e1a      	lsrs	r2, r3, #24
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	3303      	adds	r3, #3
 8008530:	b2d2      	uxtb	r2, r2
 8008532:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	3304      	adds	r3, #4
 8008538:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <CDC_Control_FS+0x158>)
 800853a:	7912      	ldrb	r2, [r2, #4]
 800853c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	3305      	adds	r3, #5
 8008542:	4a08      	ldr	r2, [pc, #32]	; (8008564 <CDC_Control_FS+0x158>)
 8008544:	7952      	ldrb	r2, [r2, #5]
 8008546:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	3306      	adds	r3, #6
 800854c:	4a05      	ldr	r2, [pc, #20]	; (8008564 <CDC_Control_FS+0x158>)
 800854e:	7992      	ldrb	r2, [r2, #6]
 8008550:	701a      	strb	r2, [r3, #0]
    break;
 8008552:	e000      	b.n	8008556 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008554:	bf00      	nop
  }

  return (USBD_OK);
 8008556:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	20000098 	.word	0x20000098

08008568 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <CDC_Receive_FS+0x3c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d007      	beq.n	800858a <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 800857a:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <CDC_Receive_FS+0x3c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	6812      	ldr	r2, [r2, #0]
 8008582:	b292      	uxth	r2, r2
 8008584:	4611      	mov	r1, r2
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	4806      	ldr	r0, [pc, #24]	; (80085a8 <CDC_Receive_FS+0x40>)
 800858e:	f7fe fb3b 	bl	8006c08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008592:	4805      	ldr	r0, [pc, #20]	; (80085a8 <CDC_Receive_FS+0x40>)
 8008594:	f7fe fb96 	bl	8006cc4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008598:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000b6c 	.word	0x20000b6c
 80085a8:	20000490 	.word	0x20000490

080085ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <CDC_Transmit_FS+0x48>)
 80085be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e00b      	b.n	80085ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085d2:	887b      	ldrh	r3, [r7, #2]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4806      	ldr	r0, [pc, #24]	; (80085f4 <CDC_Transmit_FS+0x48>)
 80085da:	f7fe faf3 	bl	8006bc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085de:	4805      	ldr	r0, [pc, #20]	; (80085f4 <CDC_Transmit_FS+0x48>)
 80085e0:	f7fe fb30 	bl	8006c44 <USBD_CDC_TransmitPacket>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000490 	.word	0x20000490

080085f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800860a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800860e:	4618      	mov	r0, r3
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*PtrRx)(uint8_t *buf, uint16_t Len)) //la interfaZ va a llamar cada vez que se envian datos desde el USB hacia la PC
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8008624:	4a04      	ldr	r2, [pc, #16]	; (8008638 <CDC_Attach_Rx+0x1c>)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6013      	str	r3, [r2, #0]
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20000b6c 	.word	0x20000b6c

0800863c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2212      	movs	r2, #18
 800864c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800864e:	4b03      	ldr	r3, [pc, #12]	; (800865c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	200000d0 	.word	0x200000d0

08008660 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	6039      	str	r1, [r7, #0]
 800866a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2204      	movs	r2, #4
 8008670:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008672:	4b03      	ldr	r3, [pc, #12]	; (8008680 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	200000e4 	.word	0x200000e4

08008684 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	6039      	str	r1, [r7, #0]
 800868e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4907      	ldr	r1, [pc, #28]	; (80086b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800869a:	4808      	ldr	r0, [pc, #32]	; (80086bc <USBD_FS_ProductStrDescriptor+0x38>)
 800869c:	f7ff fd76 	bl	800818c <USBD_GetString>
 80086a0:	e004      	b.n	80086ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4904      	ldr	r1, [pc, #16]	; (80086b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80086a6:	4805      	ldr	r0, [pc, #20]	; (80086bc <USBD_FS_ProductStrDescriptor+0x38>)
 80086a8:	f7ff fd70 	bl	800818c <USBD_GetString>
  }
  return USBD_StrDesc;
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000b70 	.word	0x20000b70
 80086bc:	080097e0 	.word	0x080097e0

080086c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	6039      	str	r1, [r7, #0]
 80086ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	4904      	ldr	r1, [pc, #16]	; (80086e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086d0:	4804      	ldr	r0, [pc, #16]	; (80086e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086d2:	f7ff fd5b 	bl	800818c <USBD_GetString>
  return USBD_StrDesc;
 80086d6:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20000b70 	.word	0x20000b70
 80086e4:	080097f8 	.word	0x080097f8

080086e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	221a      	movs	r2, #26
 80086f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086fa:	f000 f843 	bl	8008784 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086fe:	4b02      	ldr	r3, [pc, #8]	; (8008708 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	200000e8 	.word	0x200000e8

0800870c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d105      	bne.n	800872a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	4907      	ldr	r1, [pc, #28]	; (8008740 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008722:	4808      	ldr	r0, [pc, #32]	; (8008744 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008724:	f7ff fd32 	bl	800818c <USBD_GetString>
 8008728:	e004      	b.n	8008734 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4904      	ldr	r1, [pc, #16]	; (8008740 <USBD_FS_ConfigStrDescriptor+0x34>)
 800872e:	4805      	ldr	r0, [pc, #20]	; (8008744 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008730:	f7ff fd2c 	bl	800818c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008734:	4b02      	ldr	r3, [pc, #8]	; (8008740 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20000b70 	.word	0x20000b70
 8008744:	0800980c 	.word	0x0800980c

08008748 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4907      	ldr	r1, [pc, #28]	; (800877c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800875e:	4808      	ldr	r0, [pc, #32]	; (8008780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008760:	f7ff fd14 	bl	800818c <USBD_GetString>
 8008764:	e004      	b.n	8008770 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	4904      	ldr	r1, [pc, #16]	; (800877c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800876a:	4805      	ldr	r0, [pc, #20]	; (8008780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800876c:	f7ff fd0e 	bl	800818c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20000b70 	.word	0x20000b70
 8008780:	08009818 	.word	0x08009818

08008784 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800878a:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <Get_SerialNum+0x44>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008790:	4b0e      	ldr	r3, [pc, #56]	; (80087cc <Get_SerialNum+0x48>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008796:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <Get_SerialNum+0x4c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d009      	beq.n	80087be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087aa:	2208      	movs	r2, #8
 80087ac:	4909      	ldr	r1, [pc, #36]	; (80087d4 <Get_SerialNum+0x50>)
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f814 	bl	80087dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087b4:	2204      	movs	r2, #4
 80087b6:	4908      	ldr	r1, [pc, #32]	; (80087d8 <Get_SerialNum+0x54>)
 80087b8:	68b8      	ldr	r0, [r7, #8]
 80087ba:	f000 f80f 	bl	80087dc <IntToUnicode>
  }
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	1fff7a10 	.word	0x1fff7a10
 80087cc:	1fff7a14 	.word	0x1fff7a14
 80087d0:	1fff7a18 	.word	0x1fff7a18
 80087d4:	200000ea 	.word	0x200000ea
 80087d8:	200000fa 	.word	0x200000fa

080087dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]
 80087f2:	e027      	b.n	8008844 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	0f1b      	lsrs	r3, r3, #28
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d80b      	bhi.n	8008814 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	0f1b      	lsrs	r3, r3, #28
 8008800:	b2da      	uxtb	r2, r3
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4619      	mov	r1, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	440b      	add	r3, r1
 800880c:	3230      	adds	r2, #48	; 0x30
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	e00a      	b.n	800882a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	0f1b      	lsrs	r3, r3, #28
 8008818:	b2da      	uxtb	r2, r3
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	4619      	mov	r1, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	440b      	add	r3, r1
 8008824:	3237      	adds	r2, #55	; 0x37
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	3301      	adds	r3, #1
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	4413      	add	r3, r2
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	3301      	adds	r3, #1
 8008842:	75fb      	strb	r3, [r7, #23]
 8008844:	7dfa      	ldrb	r2, [r7, #23]
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	429a      	cmp	r2, r3
 800884a:	d3d3      	bcc.n	80087f4 <IntToUnicode+0x18>
  }
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	; 0x28
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008864:	f107 0314 	add.w	r3, r7, #20
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	605a      	str	r2, [r3, #4]
 800886e:	609a      	str	r2, [r3, #8]
 8008870:	60da      	str	r2, [r3, #12]
 8008872:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800887c:	d13a      	bne.n	80088f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800887e:	2300      	movs	r3, #0
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <HAL_PCD_MspInit+0xa0>)
 8008884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008886:	4a1d      	ldr	r2, [pc, #116]	; (80088fc <HAL_PCD_MspInit+0xa0>)
 8008888:	f043 0301 	orr.w	r3, r3, #1
 800888c:	6313      	str	r3, [r2, #48]	; 0x30
 800888e:	4b1b      	ldr	r3, [pc, #108]	; (80088fc <HAL_PCD_MspInit+0xa0>)
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	613b      	str	r3, [r7, #16]
 8008898:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800889a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800889e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a0:	2302      	movs	r3, #2
 80088a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088a8:	2303      	movs	r3, #3
 80088aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088ac:	230a      	movs	r3, #10
 80088ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4619      	mov	r1, r3
 80088b6:	4812      	ldr	r0, [pc, #72]	; (8008900 <HAL_PCD_MspInit+0xa4>)
 80088b8:	f7f9 fdae 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <HAL_PCD_MspInit+0xa0>)
 80088be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c0:	4a0e      	ldr	r2, [pc, #56]	; (80088fc <HAL_PCD_MspInit+0xa0>)
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	6353      	str	r3, [r2, #52]	; 0x34
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <HAL_PCD_MspInit+0xa0>)
 80088ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <HAL_PCD_MspInit+0xa0>)
 80088d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088d6:	6453      	str	r3, [r2, #68]	; 0x44
 80088d8:	4b08      	ldr	r3, [pc, #32]	; (80088fc <HAL_PCD_MspInit+0xa0>)
 80088da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088e4:	2200      	movs	r2, #0
 80088e6:	2100      	movs	r1, #0
 80088e8:	2043      	movs	r0, #67	; 0x43
 80088ea:	f7f9 f9ee 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088ee:	2043      	movs	r0, #67	; 0x43
 80088f0:	f7f9 fa07 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088f4:	bf00      	nop
 80088f6:	3728      	adds	r7, #40	; 0x28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	40023800 	.word	0x40023800
 8008900:	40020000 	.word	0x40020000

08008904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f7fe fabb 	bl	8006e96 <USBD_LL_SetupStage>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	00db      	lsls	r3, r3, #3
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	4619      	mov	r1, r3
 8008952:	f7fe faf5 	bl	8006f40 <USBD_LL_DataOutStage>
}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008970:	78fa      	ldrb	r2, [r7, #3]
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	440b      	add	r3, r1
 800897e:	3320      	adds	r3, #32
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	4619      	mov	r1, r3
 8008986:	f7fe fb97 	bl	80070b8 <USBD_LL_DataInStage>
}
 800898a:	bf00      	nop
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe fcdb 	bl	800735c <USBD_LL_SOF>
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089b6:	2301      	movs	r3, #1
 80089b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	79db      	ldrb	r3, [r3, #7]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d001      	beq.n	80089c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089c2:	f7f8 fa8f 	bl	8000ee4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089cc:	7bfa      	ldrb	r2, [r7, #15]
 80089ce:	4611      	mov	r1, r2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fc7f 	bl	80072d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe fc26 	bl	800722e <USBD_LL_Reset>
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fc7a 	bl	80072f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6812      	ldr	r2, [r2, #0]
 8008a0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	7adb      	ldrb	r3, [r3, #11]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a20:	4b04      	ldr	r3, [pc, #16]	; (8008a34 <HAL_PCD_SuspendCallback+0x48>)
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	4a03      	ldr	r2, [pc, #12]	; (8008a34 <HAL_PCD_SuspendCallback+0x48>)
 8008a26:	f043 0306 	orr.w	r3, r3, #6
 8008a2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	e000ed00 	.word	0xe000ed00

08008a38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fc70 	bl	800732c <USBD_LL_Resume>
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe fcc8 	bl	8007400 <USBD_LL_IsoOUTIncomplete>
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe fc84 	bl	800739c <USBD_LL_IsoINIncomplete>
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe fcda 	bl	8007464 <USBD_LL_DevConnected>
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe fcd7 	bl	800747a <USBD_LL_DevDisconnected>
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d13c      	bne.n	8008b5e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ae4:	4a20      	ldr	r2, [pc, #128]	; (8008b68 <USBD_LL_Init+0x94>)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a1e      	ldr	r2, [pc, #120]	; (8008b68 <USBD_LL_Init+0x94>)
 8008af0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008af4:	4b1c      	ldr	r3, [pc, #112]	; (8008b68 <USBD_LL_Init+0x94>)
 8008af6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008afa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008afc:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <USBD_LL_Init+0x94>)
 8008afe:	2204      	movs	r2, #4
 8008b00:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b02:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b04:	2202      	movs	r2, #2
 8008b06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b08:	4b17      	ldr	r3, [pc, #92]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b0e:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b10:	2202      	movs	r2, #2
 8008b12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b14:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b1a:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b20:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b26:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b2c:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b32:	480d      	ldr	r0, [pc, #52]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b34:	f7f9 fe27 	bl	8002786 <HAL_PCD_Init>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b3e:	f7f8 f9d1 	bl	8000ee4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b42:	2180      	movs	r1, #128	; 0x80
 8008b44:	4808      	ldr	r0, [pc, #32]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b46:	f7fb f854 	bl	8003bf2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b4a:	2240      	movs	r2, #64	; 0x40
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4806      	ldr	r0, [pc, #24]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b50:	f7fb f808 	bl	8003b64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b54:	2280      	movs	r2, #128	; 0x80
 8008b56:	2101      	movs	r1, #1
 8008b58:	4803      	ldr	r0, [pc, #12]	; (8008b68 <USBD_LL_Init+0x94>)
 8008b5a:	f7fb f803 	bl	8003b64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20000d70 	.word	0x20000d70

08008b6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f9 ff0e 	bl	80029a4 <HAL_PCD_Start>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 f942 	bl	8008e18 <USBD_Get_USB_Status>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	70fb      	strb	r3, [r7, #3]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70bb      	strb	r3, [r7, #2]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bca:	78bb      	ldrb	r3, [r7, #2]
 8008bcc:	883a      	ldrh	r2, [r7, #0]
 8008bce:	78f9      	ldrb	r1, [r7, #3]
 8008bd0:	f7fa fbe2 	bl	8003398 <HAL_PCD_EP_Open>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 f91c 	bl	8008e18 <USBD_Get_USB_Status>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c08:	78fa      	ldrb	r2, [r7, #3]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fa fc2d 	bl	800346c <HAL_PCD_EP_Close>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 f8fd 	bl	8008e18 <USBD_Get_USB_Status>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fa fce5 	bl	800361a <HAL_PCD_EP_SetStall>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 f8de 	bl	8008e18 <USBD_Get_USB_Status>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c84:	78fa      	ldrb	r2, [r7, #3]
 8008c86:	4611      	mov	r1, r2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fa fd29 	bl	80036e0 <HAL_PCD_EP_ClrStall>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f8bf 	bl	8008e18 <USBD_Get_USB_Status>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	da0b      	bge.n	8008cdc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	3316      	adds	r3, #22
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	e00b      	b.n	8008cf4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008cf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d1a:	78fa      	ldrb	r2, [r7, #3]
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fa fb16 	bl	8003350 <HAL_PCD_SetAddress>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 f874 	bl	8008e18 <USBD_Get_USB_Status>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b086      	sub	sp, #24
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d5c:	7af9      	ldrb	r1, [r7, #11]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	f7fa fc20 	bl	80035a6 <HAL_PCD_EP_Transmit>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 f853 	bl	8008e18 <USBD_Get_USB_Status>
 8008d72:	4603      	mov	r3, r0
 8008d74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d76:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d9e:	7af9      	ldrb	r1, [r7, #11]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	f7fa fbac 	bl	8003500 <HAL_PCD_EP_Receive>
 8008da8:	4603      	mov	r3, r0
 8008daa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f832 	bl	8008e18 <USBD_Get_USB_Status>
 8008db4:	4603      	mov	r3, r0
 8008db6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008db8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dd4:	78fa      	ldrb	r2, [r7, #3]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fa fbcc 	bl	8003576 <HAL_PCD_EP_GetRxCount>
 8008dde:	4603      	mov	r3, r0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008df0:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <USBD_static_malloc+0x18>)
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20001254 	.word	0x20001254

08008e04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]

}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d817      	bhi.n	8008e5c <USBD_Get_USB_Status+0x44>
 8008e2c:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <USBD_Get_USB_Status+0x1c>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e45 	.word	0x08008e45
 8008e38:	08008e4b 	.word	0x08008e4b
 8008e3c:	08008e51 	.word	0x08008e51
 8008e40:	08008e57 	.word	0x08008e57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
    break;
 8008e48:	e00b      	b.n	8008e62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4e:	e008      	b.n	8008e62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
    break;
 8008e54:	e005      	b.n	8008e62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e56:	2303      	movs	r3, #3
 8008e58:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5a:	e002      	b.n	8008e62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e60:	bf00      	nop
  }
  return usb_status;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <siprintf>:
 8008e70:	b40e      	push	{r1, r2, r3}
 8008e72:	b500      	push	{lr}
 8008e74:	b09c      	sub	sp, #112	; 0x70
 8008e76:	ab1d      	add	r3, sp, #116	; 0x74
 8008e78:	9002      	str	r0, [sp, #8]
 8008e7a:	9006      	str	r0, [sp, #24]
 8008e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e80:	4809      	ldr	r0, [pc, #36]	; (8008ea8 <siprintf+0x38>)
 8008e82:	9107      	str	r1, [sp, #28]
 8008e84:	9104      	str	r1, [sp, #16]
 8008e86:	4909      	ldr	r1, [pc, #36]	; (8008eac <siprintf+0x3c>)
 8008e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8c:	9105      	str	r1, [sp, #20]
 8008e8e:	6800      	ldr	r0, [r0, #0]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	a902      	add	r1, sp, #8
 8008e94:	f000 f992 	bl	80091bc <_svfiprintf_r>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	b01c      	add	sp, #112	; 0x70
 8008ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ea4:	b003      	add	sp, #12
 8008ea6:	4770      	bx	lr
 8008ea8:	20000150 	.word	0x20000150
 8008eac:	ffff0208 	.word	0xffff0208

08008eb0 <memset>:
 8008eb0:	4402      	add	r2, r0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d100      	bne.n	8008eba <memset+0xa>
 8008eb8:	4770      	bx	lr
 8008eba:	f803 1b01 	strb.w	r1, [r3], #1
 8008ebe:	e7f9      	b.n	8008eb4 <memset+0x4>

08008ec0 <__errno>:
 8008ec0:	4b01      	ldr	r3, [pc, #4]	; (8008ec8 <__errno+0x8>)
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20000150 	.word	0x20000150

08008ecc <__libc_init_array>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	4d0d      	ldr	r5, [pc, #52]	; (8008f04 <__libc_init_array+0x38>)
 8008ed0:	4c0d      	ldr	r4, [pc, #52]	; (8008f08 <__libc_init_array+0x3c>)
 8008ed2:	1b64      	subs	r4, r4, r5
 8008ed4:	10a4      	asrs	r4, r4, #2
 8008ed6:	2600      	movs	r6, #0
 8008ed8:	42a6      	cmp	r6, r4
 8008eda:	d109      	bne.n	8008ef0 <__libc_init_array+0x24>
 8008edc:	4d0b      	ldr	r5, [pc, #44]	; (8008f0c <__libc_init_array+0x40>)
 8008ede:	4c0c      	ldr	r4, [pc, #48]	; (8008f10 <__libc_init_array+0x44>)
 8008ee0:	f000 fc6a 	bl	80097b8 <_init>
 8008ee4:	1b64      	subs	r4, r4, r5
 8008ee6:	10a4      	asrs	r4, r4, #2
 8008ee8:	2600      	movs	r6, #0
 8008eea:	42a6      	cmp	r6, r4
 8008eec:	d105      	bne.n	8008efa <__libc_init_array+0x2e>
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef4:	4798      	blx	r3
 8008ef6:	3601      	adds	r6, #1
 8008ef8:	e7ee      	b.n	8008ed8 <__libc_init_array+0xc>
 8008efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efe:	4798      	blx	r3
 8008f00:	3601      	adds	r6, #1
 8008f02:	e7f2      	b.n	8008eea <__libc_init_array+0x1e>
 8008f04:	0800987c 	.word	0x0800987c
 8008f08:	0800987c 	.word	0x0800987c
 8008f0c:	0800987c 	.word	0x0800987c
 8008f10:	08009880 	.word	0x08009880

08008f14 <__retarget_lock_acquire_recursive>:
 8008f14:	4770      	bx	lr

08008f16 <__retarget_lock_release_recursive>:
 8008f16:	4770      	bx	lr

08008f18 <_free_r>:
 8008f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f1a:	2900      	cmp	r1, #0
 8008f1c:	d044      	beq.n	8008fa8 <_free_r+0x90>
 8008f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f22:	9001      	str	r0, [sp, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f1a1 0404 	sub.w	r4, r1, #4
 8008f2a:	bfb8      	it	lt
 8008f2c:	18e4      	addlt	r4, r4, r3
 8008f2e:	f000 f8df 	bl	80090f0 <__malloc_lock>
 8008f32:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <_free_r+0x94>)
 8008f34:	9801      	ldr	r0, [sp, #4]
 8008f36:	6813      	ldr	r3, [r2, #0]
 8008f38:	b933      	cbnz	r3, 8008f48 <_free_r+0x30>
 8008f3a:	6063      	str	r3, [r4, #4]
 8008f3c:	6014      	str	r4, [r2, #0]
 8008f3e:	b003      	add	sp, #12
 8008f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f44:	f000 b8da 	b.w	80090fc <__malloc_unlock>
 8008f48:	42a3      	cmp	r3, r4
 8008f4a:	d908      	bls.n	8008f5e <_free_r+0x46>
 8008f4c:	6825      	ldr	r5, [r4, #0]
 8008f4e:	1961      	adds	r1, r4, r5
 8008f50:	428b      	cmp	r3, r1
 8008f52:	bf01      	itttt	eq
 8008f54:	6819      	ldreq	r1, [r3, #0]
 8008f56:	685b      	ldreq	r3, [r3, #4]
 8008f58:	1949      	addeq	r1, r1, r5
 8008f5a:	6021      	streq	r1, [r4, #0]
 8008f5c:	e7ed      	b.n	8008f3a <_free_r+0x22>
 8008f5e:	461a      	mov	r2, r3
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	b10b      	cbz	r3, 8008f68 <_free_r+0x50>
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	d9fa      	bls.n	8008f5e <_free_r+0x46>
 8008f68:	6811      	ldr	r1, [r2, #0]
 8008f6a:	1855      	adds	r5, r2, r1
 8008f6c:	42a5      	cmp	r5, r4
 8008f6e:	d10b      	bne.n	8008f88 <_free_r+0x70>
 8008f70:	6824      	ldr	r4, [r4, #0]
 8008f72:	4421      	add	r1, r4
 8008f74:	1854      	adds	r4, r2, r1
 8008f76:	42a3      	cmp	r3, r4
 8008f78:	6011      	str	r1, [r2, #0]
 8008f7a:	d1e0      	bne.n	8008f3e <_free_r+0x26>
 8008f7c:	681c      	ldr	r4, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	6053      	str	r3, [r2, #4]
 8008f82:	440c      	add	r4, r1
 8008f84:	6014      	str	r4, [r2, #0]
 8008f86:	e7da      	b.n	8008f3e <_free_r+0x26>
 8008f88:	d902      	bls.n	8008f90 <_free_r+0x78>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	6003      	str	r3, [r0, #0]
 8008f8e:	e7d6      	b.n	8008f3e <_free_r+0x26>
 8008f90:	6825      	ldr	r5, [r4, #0]
 8008f92:	1961      	adds	r1, r4, r5
 8008f94:	428b      	cmp	r3, r1
 8008f96:	bf04      	itt	eq
 8008f98:	6819      	ldreq	r1, [r3, #0]
 8008f9a:	685b      	ldreq	r3, [r3, #4]
 8008f9c:	6063      	str	r3, [r4, #4]
 8008f9e:	bf04      	itt	eq
 8008fa0:	1949      	addeq	r1, r1, r5
 8008fa2:	6021      	streq	r1, [r4, #0]
 8008fa4:	6054      	str	r4, [r2, #4]
 8008fa6:	e7ca      	b.n	8008f3e <_free_r+0x26>
 8008fa8:	b003      	add	sp, #12
 8008faa:	bd30      	pop	{r4, r5, pc}
 8008fac:	200015b4 	.word	0x200015b4

08008fb0 <sbrk_aligned>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	4e0e      	ldr	r6, [pc, #56]	; (8008fec <sbrk_aligned+0x3c>)
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	6831      	ldr	r1, [r6, #0]
 8008fb8:	4605      	mov	r5, r0
 8008fba:	b911      	cbnz	r1, 8008fc2 <sbrk_aligned+0x12>
 8008fbc:	f000 fba6 	bl	800970c <_sbrk_r>
 8008fc0:	6030      	str	r0, [r6, #0]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f000 fba1 	bl	800970c <_sbrk_r>
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	d00a      	beq.n	8008fe4 <sbrk_aligned+0x34>
 8008fce:	1cc4      	adds	r4, r0, #3
 8008fd0:	f024 0403 	bic.w	r4, r4, #3
 8008fd4:	42a0      	cmp	r0, r4
 8008fd6:	d007      	beq.n	8008fe8 <sbrk_aligned+0x38>
 8008fd8:	1a21      	subs	r1, r4, r0
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f000 fb96 	bl	800970c <_sbrk_r>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d101      	bne.n	8008fe8 <sbrk_aligned+0x38>
 8008fe4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fe8:	4620      	mov	r0, r4
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	200015b8 	.word	0x200015b8

08008ff0 <_malloc_r>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	1ccd      	adds	r5, r1, #3
 8008ff6:	f025 0503 	bic.w	r5, r5, #3
 8008ffa:	3508      	adds	r5, #8
 8008ffc:	2d0c      	cmp	r5, #12
 8008ffe:	bf38      	it	cc
 8009000:	250c      	movcc	r5, #12
 8009002:	2d00      	cmp	r5, #0
 8009004:	4607      	mov	r7, r0
 8009006:	db01      	blt.n	800900c <_malloc_r+0x1c>
 8009008:	42a9      	cmp	r1, r5
 800900a:	d905      	bls.n	8009018 <_malloc_r+0x28>
 800900c:	230c      	movs	r3, #12
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	2600      	movs	r6, #0
 8009012:	4630      	mov	r0, r6
 8009014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009018:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090ec <_malloc_r+0xfc>
 800901c:	f000 f868 	bl	80090f0 <__malloc_lock>
 8009020:	f8d8 3000 	ldr.w	r3, [r8]
 8009024:	461c      	mov	r4, r3
 8009026:	bb5c      	cbnz	r4, 8009080 <_malloc_r+0x90>
 8009028:	4629      	mov	r1, r5
 800902a:	4638      	mov	r0, r7
 800902c:	f7ff ffc0 	bl	8008fb0 <sbrk_aligned>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	4604      	mov	r4, r0
 8009034:	d155      	bne.n	80090e2 <_malloc_r+0xf2>
 8009036:	f8d8 4000 	ldr.w	r4, [r8]
 800903a:	4626      	mov	r6, r4
 800903c:	2e00      	cmp	r6, #0
 800903e:	d145      	bne.n	80090cc <_malloc_r+0xdc>
 8009040:	2c00      	cmp	r4, #0
 8009042:	d048      	beq.n	80090d6 <_malloc_r+0xe6>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	4631      	mov	r1, r6
 8009048:	4638      	mov	r0, r7
 800904a:	eb04 0903 	add.w	r9, r4, r3
 800904e:	f000 fb5d 	bl	800970c <_sbrk_r>
 8009052:	4581      	cmp	r9, r0
 8009054:	d13f      	bne.n	80090d6 <_malloc_r+0xe6>
 8009056:	6821      	ldr	r1, [r4, #0]
 8009058:	1a6d      	subs	r5, r5, r1
 800905a:	4629      	mov	r1, r5
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff ffa7 	bl	8008fb0 <sbrk_aligned>
 8009062:	3001      	adds	r0, #1
 8009064:	d037      	beq.n	80090d6 <_malloc_r+0xe6>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	442b      	add	r3, r5
 800906a:	6023      	str	r3, [r4, #0]
 800906c:	f8d8 3000 	ldr.w	r3, [r8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d038      	beq.n	80090e6 <_malloc_r+0xf6>
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	42a2      	cmp	r2, r4
 8009078:	d12b      	bne.n	80090d2 <_malloc_r+0xe2>
 800907a:	2200      	movs	r2, #0
 800907c:	605a      	str	r2, [r3, #4]
 800907e:	e00f      	b.n	80090a0 <_malloc_r+0xb0>
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	1b52      	subs	r2, r2, r5
 8009084:	d41f      	bmi.n	80090c6 <_malloc_r+0xd6>
 8009086:	2a0b      	cmp	r2, #11
 8009088:	d917      	bls.n	80090ba <_malloc_r+0xca>
 800908a:	1961      	adds	r1, r4, r5
 800908c:	42a3      	cmp	r3, r4
 800908e:	6025      	str	r5, [r4, #0]
 8009090:	bf18      	it	ne
 8009092:	6059      	strne	r1, [r3, #4]
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	bf08      	it	eq
 8009098:	f8c8 1000 	streq.w	r1, [r8]
 800909c:	5162      	str	r2, [r4, r5]
 800909e:	604b      	str	r3, [r1, #4]
 80090a0:	4638      	mov	r0, r7
 80090a2:	f104 060b 	add.w	r6, r4, #11
 80090a6:	f000 f829 	bl	80090fc <__malloc_unlock>
 80090aa:	f026 0607 	bic.w	r6, r6, #7
 80090ae:	1d23      	adds	r3, r4, #4
 80090b0:	1af2      	subs	r2, r6, r3
 80090b2:	d0ae      	beq.n	8009012 <_malloc_r+0x22>
 80090b4:	1b9b      	subs	r3, r3, r6
 80090b6:	50a3      	str	r3, [r4, r2]
 80090b8:	e7ab      	b.n	8009012 <_malloc_r+0x22>
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	6862      	ldr	r2, [r4, #4]
 80090be:	d1dd      	bne.n	800907c <_malloc_r+0x8c>
 80090c0:	f8c8 2000 	str.w	r2, [r8]
 80090c4:	e7ec      	b.n	80090a0 <_malloc_r+0xb0>
 80090c6:	4623      	mov	r3, r4
 80090c8:	6864      	ldr	r4, [r4, #4]
 80090ca:	e7ac      	b.n	8009026 <_malloc_r+0x36>
 80090cc:	4634      	mov	r4, r6
 80090ce:	6876      	ldr	r6, [r6, #4]
 80090d0:	e7b4      	b.n	800903c <_malloc_r+0x4c>
 80090d2:	4613      	mov	r3, r2
 80090d4:	e7cc      	b.n	8009070 <_malloc_r+0x80>
 80090d6:	230c      	movs	r3, #12
 80090d8:	603b      	str	r3, [r7, #0]
 80090da:	4638      	mov	r0, r7
 80090dc:	f000 f80e 	bl	80090fc <__malloc_unlock>
 80090e0:	e797      	b.n	8009012 <_malloc_r+0x22>
 80090e2:	6025      	str	r5, [r4, #0]
 80090e4:	e7dc      	b.n	80090a0 <_malloc_r+0xb0>
 80090e6:	605b      	str	r3, [r3, #4]
 80090e8:	deff      	udf	#255	; 0xff
 80090ea:	bf00      	nop
 80090ec:	200015b4 	.word	0x200015b4

080090f0 <__malloc_lock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	; (80090f8 <__malloc_lock+0x8>)
 80090f2:	f7ff bf0f 	b.w	8008f14 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	200015b0 	.word	0x200015b0

080090fc <__malloc_unlock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__malloc_unlock+0x8>)
 80090fe:	f7ff bf0a 	b.w	8008f16 <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	200015b0 	.word	0x200015b0

08009108 <__ssputs_r>:
 8009108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910c:	688e      	ldr	r6, [r1, #8]
 800910e:	461f      	mov	r7, r3
 8009110:	42be      	cmp	r6, r7
 8009112:	680b      	ldr	r3, [r1, #0]
 8009114:	4682      	mov	sl, r0
 8009116:	460c      	mov	r4, r1
 8009118:	4690      	mov	r8, r2
 800911a:	d82c      	bhi.n	8009176 <__ssputs_r+0x6e>
 800911c:	898a      	ldrh	r2, [r1, #12]
 800911e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009122:	d026      	beq.n	8009172 <__ssputs_r+0x6a>
 8009124:	6965      	ldr	r5, [r4, #20]
 8009126:	6909      	ldr	r1, [r1, #16]
 8009128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800912c:	eba3 0901 	sub.w	r9, r3, r1
 8009130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009134:	1c7b      	adds	r3, r7, #1
 8009136:	444b      	add	r3, r9
 8009138:	106d      	asrs	r5, r5, #1
 800913a:	429d      	cmp	r5, r3
 800913c:	bf38      	it	cc
 800913e:	461d      	movcc	r5, r3
 8009140:	0553      	lsls	r3, r2, #21
 8009142:	d527      	bpl.n	8009194 <__ssputs_r+0x8c>
 8009144:	4629      	mov	r1, r5
 8009146:	f7ff ff53 	bl	8008ff0 <_malloc_r>
 800914a:	4606      	mov	r6, r0
 800914c:	b360      	cbz	r0, 80091a8 <__ssputs_r+0xa0>
 800914e:	6921      	ldr	r1, [r4, #16]
 8009150:	464a      	mov	r2, r9
 8009152:	f000 faeb 	bl	800972c <memcpy>
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800915c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	6126      	str	r6, [r4, #16]
 8009164:	6165      	str	r5, [r4, #20]
 8009166:	444e      	add	r6, r9
 8009168:	eba5 0509 	sub.w	r5, r5, r9
 800916c:	6026      	str	r6, [r4, #0]
 800916e:	60a5      	str	r5, [r4, #8]
 8009170:	463e      	mov	r6, r7
 8009172:	42be      	cmp	r6, r7
 8009174:	d900      	bls.n	8009178 <__ssputs_r+0x70>
 8009176:	463e      	mov	r6, r7
 8009178:	6820      	ldr	r0, [r4, #0]
 800917a:	4632      	mov	r2, r6
 800917c:	4641      	mov	r1, r8
 800917e:	f000 faab 	bl	80096d8 <memmove>
 8009182:	68a3      	ldr	r3, [r4, #8]
 8009184:	1b9b      	subs	r3, r3, r6
 8009186:	60a3      	str	r3, [r4, #8]
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	4433      	add	r3, r6
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	2000      	movs	r0, #0
 8009190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009194:	462a      	mov	r2, r5
 8009196:	f000 fad7 	bl	8009748 <_realloc_r>
 800919a:	4606      	mov	r6, r0
 800919c:	2800      	cmp	r0, #0
 800919e:	d1e0      	bne.n	8009162 <__ssputs_r+0x5a>
 80091a0:	6921      	ldr	r1, [r4, #16]
 80091a2:	4650      	mov	r0, sl
 80091a4:	f7ff feb8 	bl	8008f18 <_free_r>
 80091a8:	230c      	movs	r3, #12
 80091aa:	f8ca 3000 	str.w	r3, [sl]
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ba:	e7e9      	b.n	8009190 <__ssputs_r+0x88>

080091bc <_svfiprintf_r>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	4698      	mov	r8, r3
 80091c2:	898b      	ldrh	r3, [r1, #12]
 80091c4:	061b      	lsls	r3, r3, #24
 80091c6:	b09d      	sub	sp, #116	; 0x74
 80091c8:	4607      	mov	r7, r0
 80091ca:	460d      	mov	r5, r1
 80091cc:	4614      	mov	r4, r2
 80091ce:	d50e      	bpl.n	80091ee <_svfiprintf_r+0x32>
 80091d0:	690b      	ldr	r3, [r1, #16]
 80091d2:	b963      	cbnz	r3, 80091ee <_svfiprintf_r+0x32>
 80091d4:	2140      	movs	r1, #64	; 0x40
 80091d6:	f7ff ff0b 	bl	8008ff0 <_malloc_r>
 80091da:	6028      	str	r0, [r5, #0]
 80091dc:	6128      	str	r0, [r5, #16]
 80091de:	b920      	cbnz	r0, 80091ea <_svfiprintf_r+0x2e>
 80091e0:	230c      	movs	r3, #12
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	e0d0      	b.n	800938c <_svfiprintf_r+0x1d0>
 80091ea:	2340      	movs	r3, #64	; 0x40
 80091ec:	616b      	str	r3, [r5, #20]
 80091ee:	2300      	movs	r3, #0
 80091f0:	9309      	str	r3, [sp, #36]	; 0x24
 80091f2:	2320      	movs	r3, #32
 80091f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80091fc:	2330      	movs	r3, #48	; 0x30
 80091fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093a4 <_svfiprintf_r+0x1e8>
 8009202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009206:	f04f 0901 	mov.w	r9, #1
 800920a:	4623      	mov	r3, r4
 800920c:	469a      	mov	sl, r3
 800920e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009212:	b10a      	cbz	r2, 8009218 <_svfiprintf_r+0x5c>
 8009214:	2a25      	cmp	r2, #37	; 0x25
 8009216:	d1f9      	bne.n	800920c <_svfiprintf_r+0x50>
 8009218:	ebba 0b04 	subs.w	fp, sl, r4
 800921c:	d00b      	beq.n	8009236 <_svfiprintf_r+0x7a>
 800921e:	465b      	mov	r3, fp
 8009220:	4622      	mov	r2, r4
 8009222:	4629      	mov	r1, r5
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff ff6f 	bl	8009108 <__ssputs_r>
 800922a:	3001      	adds	r0, #1
 800922c:	f000 80a9 	beq.w	8009382 <_svfiprintf_r+0x1c6>
 8009230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009232:	445a      	add	r2, fp
 8009234:	9209      	str	r2, [sp, #36]	; 0x24
 8009236:	f89a 3000 	ldrb.w	r3, [sl]
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 80a1 	beq.w	8009382 <_svfiprintf_r+0x1c6>
 8009240:	2300      	movs	r3, #0
 8009242:	f04f 32ff 	mov.w	r2, #4294967295
 8009246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800924a:	f10a 0a01 	add.w	sl, sl, #1
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	9307      	str	r3, [sp, #28]
 8009252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009256:	931a      	str	r3, [sp, #104]	; 0x68
 8009258:	4654      	mov	r4, sl
 800925a:	2205      	movs	r2, #5
 800925c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009260:	4850      	ldr	r0, [pc, #320]	; (80093a4 <_svfiprintf_r+0x1e8>)
 8009262:	f7f6 ffbd 	bl	80001e0 <memchr>
 8009266:	9a04      	ldr	r2, [sp, #16]
 8009268:	b9d8      	cbnz	r0, 80092a2 <_svfiprintf_r+0xe6>
 800926a:	06d0      	lsls	r0, r2, #27
 800926c:	bf44      	itt	mi
 800926e:	2320      	movmi	r3, #32
 8009270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009274:	0711      	lsls	r1, r2, #28
 8009276:	bf44      	itt	mi
 8009278:	232b      	movmi	r3, #43	; 0x2b
 800927a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800927e:	f89a 3000 	ldrb.w	r3, [sl]
 8009282:	2b2a      	cmp	r3, #42	; 0x2a
 8009284:	d015      	beq.n	80092b2 <_svfiprintf_r+0xf6>
 8009286:	9a07      	ldr	r2, [sp, #28]
 8009288:	4654      	mov	r4, sl
 800928a:	2000      	movs	r0, #0
 800928c:	f04f 0c0a 	mov.w	ip, #10
 8009290:	4621      	mov	r1, r4
 8009292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009296:	3b30      	subs	r3, #48	; 0x30
 8009298:	2b09      	cmp	r3, #9
 800929a:	d94d      	bls.n	8009338 <_svfiprintf_r+0x17c>
 800929c:	b1b0      	cbz	r0, 80092cc <_svfiprintf_r+0x110>
 800929e:	9207      	str	r2, [sp, #28]
 80092a0:	e014      	b.n	80092cc <_svfiprintf_r+0x110>
 80092a2:	eba0 0308 	sub.w	r3, r0, r8
 80092a6:	fa09 f303 	lsl.w	r3, r9, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	46a2      	mov	sl, r4
 80092b0:	e7d2      	b.n	8009258 <_svfiprintf_r+0x9c>
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	1d19      	adds	r1, r3, #4
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	9103      	str	r1, [sp, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bfbb      	ittet	lt
 80092be:	425b      	neglt	r3, r3
 80092c0:	f042 0202 	orrlt.w	r2, r2, #2
 80092c4:	9307      	strge	r3, [sp, #28]
 80092c6:	9307      	strlt	r3, [sp, #28]
 80092c8:	bfb8      	it	lt
 80092ca:	9204      	strlt	r2, [sp, #16]
 80092cc:	7823      	ldrb	r3, [r4, #0]
 80092ce:	2b2e      	cmp	r3, #46	; 0x2e
 80092d0:	d10c      	bne.n	80092ec <_svfiprintf_r+0x130>
 80092d2:	7863      	ldrb	r3, [r4, #1]
 80092d4:	2b2a      	cmp	r3, #42	; 0x2a
 80092d6:	d134      	bne.n	8009342 <_svfiprintf_r+0x186>
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	1d1a      	adds	r2, r3, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	9203      	str	r2, [sp, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfb8      	it	lt
 80092e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80092e8:	3402      	adds	r4, #2
 80092ea:	9305      	str	r3, [sp, #20]
 80092ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80093b4 <_svfiprintf_r+0x1f8>
 80092f0:	7821      	ldrb	r1, [r4, #0]
 80092f2:	2203      	movs	r2, #3
 80092f4:	4650      	mov	r0, sl
 80092f6:	f7f6 ff73 	bl	80001e0 <memchr>
 80092fa:	b138      	cbz	r0, 800930c <_svfiprintf_r+0x150>
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	eba0 000a 	sub.w	r0, r0, sl
 8009302:	2240      	movs	r2, #64	; 0x40
 8009304:	4082      	lsls	r2, r0
 8009306:	4313      	orrs	r3, r2
 8009308:	3401      	adds	r4, #1
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009310:	4825      	ldr	r0, [pc, #148]	; (80093a8 <_svfiprintf_r+0x1ec>)
 8009312:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009316:	2206      	movs	r2, #6
 8009318:	f7f6 ff62 	bl	80001e0 <memchr>
 800931c:	2800      	cmp	r0, #0
 800931e:	d038      	beq.n	8009392 <_svfiprintf_r+0x1d6>
 8009320:	4b22      	ldr	r3, [pc, #136]	; (80093ac <_svfiprintf_r+0x1f0>)
 8009322:	bb1b      	cbnz	r3, 800936c <_svfiprintf_r+0x1b0>
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	3307      	adds	r3, #7
 8009328:	f023 0307 	bic.w	r3, r3, #7
 800932c:	3308      	adds	r3, #8
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009332:	4433      	add	r3, r6
 8009334:	9309      	str	r3, [sp, #36]	; 0x24
 8009336:	e768      	b.n	800920a <_svfiprintf_r+0x4e>
 8009338:	fb0c 3202 	mla	r2, ip, r2, r3
 800933c:	460c      	mov	r4, r1
 800933e:	2001      	movs	r0, #1
 8009340:	e7a6      	b.n	8009290 <_svfiprintf_r+0xd4>
 8009342:	2300      	movs	r3, #0
 8009344:	3401      	adds	r4, #1
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	4619      	mov	r1, r3
 800934a:	f04f 0c0a 	mov.w	ip, #10
 800934e:	4620      	mov	r0, r4
 8009350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009354:	3a30      	subs	r2, #48	; 0x30
 8009356:	2a09      	cmp	r2, #9
 8009358:	d903      	bls.n	8009362 <_svfiprintf_r+0x1a6>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0c6      	beq.n	80092ec <_svfiprintf_r+0x130>
 800935e:	9105      	str	r1, [sp, #20]
 8009360:	e7c4      	b.n	80092ec <_svfiprintf_r+0x130>
 8009362:	fb0c 2101 	mla	r1, ip, r1, r2
 8009366:	4604      	mov	r4, r0
 8009368:	2301      	movs	r3, #1
 800936a:	e7f0      	b.n	800934e <_svfiprintf_r+0x192>
 800936c:	ab03      	add	r3, sp, #12
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	462a      	mov	r2, r5
 8009372:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <_svfiprintf_r+0x1f4>)
 8009374:	a904      	add	r1, sp, #16
 8009376:	4638      	mov	r0, r7
 8009378:	f3af 8000 	nop.w
 800937c:	1c42      	adds	r2, r0, #1
 800937e:	4606      	mov	r6, r0
 8009380:	d1d6      	bne.n	8009330 <_svfiprintf_r+0x174>
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	065b      	lsls	r3, r3, #25
 8009386:	f53f af2d 	bmi.w	80091e4 <_svfiprintf_r+0x28>
 800938a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800938c:	b01d      	add	sp, #116	; 0x74
 800938e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009392:	ab03      	add	r3, sp, #12
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	462a      	mov	r2, r5
 8009398:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <_svfiprintf_r+0x1f4>)
 800939a:	a904      	add	r1, sp, #16
 800939c:	4638      	mov	r0, r7
 800939e:	f000 f879 	bl	8009494 <_printf_i>
 80093a2:	e7eb      	b.n	800937c <_svfiprintf_r+0x1c0>
 80093a4:	08009840 	.word	0x08009840
 80093a8:	0800984a 	.word	0x0800984a
 80093ac:	00000000 	.word	0x00000000
 80093b0:	08009109 	.word	0x08009109
 80093b4:	08009846 	.word	0x08009846

080093b8 <_printf_common>:
 80093b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093bc:	4616      	mov	r6, r2
 80093be:	4699      	mov	r9, r3
 80093c0:	688a      	ldr	r2, [r1, #8]
 80093c2:	690b      	ldr	r3, [r1, #16]
 80093c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093c8:	4293      	cmp	r3, r2
 80093ca:	bfb8      	it	lt
 80093cc:	4613      	movlt	r3, r2
 80093ce:	6033      	str	r3, [r6, #0]
 80093d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093d4:	4607      	mov	r7, r0
 80093d6:	460c      	mov	r4, r1
 80093d8:	b10a      	cbz	r2, 80093de <_printf_common+0x26>
 80093da:	3301      	adds	r3, #1
 80093dc:	6033      	str	r3, [r6, #0]
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	0699      	lsls	r1, r3, #26
 80093e2:	bf42      	ittt	mi
 80093e4:	6833      	ldrmi	r3, [r6, #0]
 80093e6:	3302      	addmi	r3, #2
 80093e8:	6033      	strmi	r3, [r6, #0]
 80093ea:	6825      	ldr	r5, [r4, #0]
 80093ec:	f015 0506 	ands.w	r5, r5, #6
 80093f0:	d106      	bne.n	8009400 <_printf_common+0x48>
 80093f2:	f104 0a19 	add.w	sl, r4, #25
 80093f6:	68e3      	ldr	r3, [r4, #12]
 80093f8:	6832      	ldr	r2, [r6, #0]
 80093fa:	1a9b      	subs	r3, r3, r2
 80093fc:	42ab      	cmp	r3, r5
 80093fe:	dc26      	bgt.n	800944e <_printf_common+0x96>
 8009400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009404:	1e13      	subs	r3, r2, #0
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	bf18      	it	ne
 800940a:	2301      	movne	r3, #1
 800940c:	0692      	lsls	r2, r2, #26
 800940e:	d42b      	bmi.n	8009468 <_printf_common+0xb0>
 8009410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009414:	4649      	mov	r1, r9
 8009416:	4638      	mov	r0, r7
 8009418:	47c0      	blx	r8
 800941a:	3001      	adds	r0, #1
 800941c:	d01e      	beq.n	800945c <_printf_common+0xa4>
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	6922      	ldr	r2, [r4, #16]
 8009422:	f003 0306 	and.w	r3, r3, #6
 8009426:	2b04      	cmp	r3, #4
 8009428:	bf02      	ittt	eq
 800942a:	68e5      	ldreq	r5, [r4, #12]
 800942c:	6833      	ldreq	r3, [r6, #0]
 800942e:	1aed      	subeq	r5, r5, r3
 8009430:	68a3      	ldr	r3, [r4, #8]
 8009432:	bf0c      	ite	eq
 8009434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009438:	2500      	movne	r5, #0
 800943a:	4293      	cmp	r3, r2
 800943c:	bfc4      	itt	gt
 800943e:	1a9b      	subgt	r3, r3, r2
 8009440:	18ed      	addgt	r5, r5, r3
 8009442:	2600      	movs	r6, #0
 8009444:	341a      	adds	r4, #26
 8009446:	42b5      	cmp	r5, r6
 8009448:	d11a      	bne.n	8009480 <_printf_common+0xc8>
 800944a:	2000      	movs	r0, #0
 800944c:	e008      	b.n	8009460 <_printf_common+0xa8>
 800944e:	2301      	movs	r3, #1
 8009450:	4652      	mov	r2, sl
 8009452:	4649      	mov	r1, r9
 8009454:	4638      	mov	r0, r7
 8009456:	47c0      	blx	r8
 8009458:	3001      	adds	r0, #1
 800945a:	d103      	bne.n	8009464 <_printf_common+0xac>
 800945c:	f04f 30ff 	mov.w	r0, #4294967295
 8009460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009464:	3501      	adds	r5, #1
 8009466:	e7c6      	b.n	80093f6 <_printf_common+0x3e>
 8009468:	18e1      	adds	r1, r4, r3
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	2030      	movs	r0, #48	; 0x30
 800946e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009472:	4422      	add	r2, r4
 8009474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800947c:	3302      	adds	r3, #2
 800947e:	e7c7      	b.n	8009410 <_printf_common+0x58>
 8009480:	2301      	movs	r3, #1
 8009482:	4622      	mov	r2, r4
 8009484:	4649      	mov	r1, r9
 8009486:	4638      	mov	r0, r7
 8009488:	47c0      	blx	r8
 800948a:	3001      	adds	r0, #1
 800948c:	d0e6      	beq.n	800945c <_printf_common+0xa4>
 800948e:	3601      	adds	r6, #1
 8009490:	e7d9      	b.n	8009446 <_printf_common+0x8e>
	...

08009494 <_printf_i>:
 8009494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009498:	7e0f      	ldrb	r7, [r1, #24]
 800949a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800949c:	2f78      	cmp	r7, #120	; 0x78
 800949e:	4691      	mov	r9, r2
 80094a0:	4680      	mov	r8, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	469a      	mov	sl, r3
 80094a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094aa:	d807      	bhi.n	80094bc <_printf_i+0x28>
 80094ac:	2f62      	cmp	r7, #98	; 0x62
 80094ae:	d80a      	bhi.n	80094c6 <_printf_i+0x32>
 80094b0:	2f00      	cmp	r7, #0
 80094b2:	f000 80d4 	beq.w	800965e <_printf_i+0x1ca>
 80094b6:	2f58      	cmp	r7, #88	; 0x58
 80094b8:	f000 80c0 	beq.w	800963c <_printf_i+0x1a8>
 80094bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094c4:	e03a      	b.n	800953c <_printf_i+0xa8>
 80094c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094ca:	2b15      	cmp	r3, #21
 80094cc:	d8f6      	bhi.n	80094bc <_printf_i+0x28>
 80094ce:	a101      	add	r1, pc, #4	; (adr r1, 80094d4 <_printf_i+0x40>)
 80094d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094d4:	0800952d 	.word	0x0800952d
 80094d8:	08009541 	.word	0x08009541
 80094dc:	080094bd 	.word	0x080094bd
 80094e0:	080094bd 	.word	0x080094bd
 80094e4:	080094bd 	.word	0x080094bd
 80094e8:	080094bd 	.word	0x080094bd
 80094ec:	08009541 	.word	0x08009541
 80094f0:	080094bd 	.word	0x080094bd
 80094f4:	080094bd 	.word	0x080094bd
 80094f8:	080094bd 	.word	0x080094bd
 80094fc:	080094bd 	.word	0x080094bd
 8009500:	08009645 	.word	0x08009645
 8009504:	0800956d 	.word	0x0800956d
 8009508:	080095ff 	.word	0x080095ff
 800950c:	080094bd 	.word	0x080094bd
 8009510:	080094bd 	.word	0x080094bd
 8009514:	08009667 	.word	0x08009667
 8009518:	080094bd 	.word	0x080094bd
 800951c:	0800956d 	.word	0x0800956d
 8009520:	080094bd 	.word	0x080094bd
 8009524:	080094bd 	.word	0x080094bd
 8009528:	08009607 	.word	0x08009607
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	1d1a      	adds	r2, r3, #4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	602a      	str	r2, [r5, #0]
 8009534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800953c:	2301      	movs	r3, #1
 800953e:	e09f      	b.n	8009680 <_printf_i+0x1ec>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	682b      	ldr	r3, [r5, #0]
 8009544:	0607      	lsls	r7, r0, #24
 8009546:	f103 0104 	add.w	r1, r3, #4
 800954a:	6029      	str	r1, [r5, #0]
 800954c:	d501      	bpl.n	8009552 <_printf_i+0xbe>
 800954e:	681e      	ldr	r6, [r3, #0]
 8009550:	e003      	b.n	800955a <_printf_i+0xc6>
 8009552:	0646      	lsls	r6, r0, #25
 8009554:	d5fb      	bpl.n	800954e <_printf_i+0xba>
 8009556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800955a:	2e00      	cmp	r6, #0
 800955c:	da03      	bge.n	8009566 <_printf_i+0xd2>
 800955e:	232d      	movs	r3, #45	; 0x2d
 8009560:	4276      	negs	r6, r6
 8009562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009566:	485a      	ldr	r0, [pc, #360]	; (80096d0 <_printf_i+0x23c>)
 8009568:	230a      	movs	r3, #10
 800956a:	e012      	b.n	8009592 <_printf_i+0xfe>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	1d19      	adds	r1, r3, #4
 8009572:	6029      	str	r1, [r5, #0]
 8009574:	0605      	lsls	r5, r0, #24
 8009576:	d501      	bpl.n	800957c <_printf_i+0xe8>
 8009578:	681e      	ldr	r6, [r3, #0]
 800957a:	e002      	b.n	8009582 <_printf_i+0xee>
 800957c:	0641      	lsls	r1, r0, #25
 800957e:	d5fb      	bpl.n	8009578 <_printf_i+0xe4>
 8009580:	881e      	ldrh	r6, [r3, #0]
 8009582:	4853      	ldr	r0, [pc, #332]	; (80096d0 <_printf_i+0x23c>)
 8009584:	2f6f      	cmp	r7, #111	; 0x6f
 8009586:	bf0c      	ite	eq
 8009588:	2308      	moveq	r3, #8
 800958a:	230a      	movne	r3, #10
 800958c:	2100      	movs	r1, #0
 800958e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009592:	6865      	ldr	r5, [r4, #4]
 8009594:	60a5      	str	r5, [r4, #8]
 8009596:	2d00      	cmp	r5, #0
 8009598:	bfa2      	ittt	ge
 800959a:	6821      	ldrge	r1, [r4, #0]
 800959c:	f021 0104 	bicge.w	r1, r1, #4
 80095a0:	6021      	strge	r1, [r4, #0]
 80095a2:	b90e      	cbnz	r6, 80095a8 <_printf_i+0x114>
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	d04b      	beq.n	8009640 <_printf_i+0x1ac>
 80095a8:	4615      	mov	r5, r2
 80095aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80095ae:	fb03 6711 	mls	r7, r3, r1, r6
 80095b2:	5dc7      	ldrb	r7, [r0, r7]
 80095b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095b8:	4637      	mov	r7, r6
 80095ba:	42bb      	cmp	r3, r7
 80095bc:	460e      	mov	r6, r1
 80095be:	d9f4      	bls.n	80095aa <_printf_i+0x116>
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d10b      	bne.n	80095dc <_printf_i+0x148>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	07de      	lsls	r6, r3, #31
 80095c8:	d508      	bpl.n	80095dc <_printf_i+0x148>
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	6861      	ldr	r1, [r4, #4]
 80095ce:	4299      	cmp	r1, r3
 80095d0:	bfde      	ittt	le
 80095d2:	2330      	movle	r3, #48	; 0x30
 80095d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095dc:	1b52      	subs	r2, r2, r5
 80095de:	6122      	str	r2, [r4, #16]
 80095e0:	f8cd a000 	str.w	sl, [sp]
 80095e4:	464b      	mov	r3, r9
 80095e6:	aa03      	add	r2, sp, #12
 80095e8:	4621      	mov	r1, r4
 80095ea:	4640      	mov	r0, r8
 80095ec:	f7ff fee4 	bl	80093b8 <_printf_common>
 80095f0:	3001      	adds	r0, #1
 80095f2:	d14a      	bne.n	800968a <_printf_i+0x1f6>
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	b004      	add	sp, #16
 80095fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	f043 0320 	orr.w	r3, r3, #32
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	4833      	ldr	r0, [pc, #204]	; (80096d4 <_printf_i+0x240>)
 8009608:	2778      	movs	r7, #120	; 0x78
 800960a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	6829      	ldr	r1, [r5, #0]
 8009612:	061f      	lsls	r7, r3, #24
 8009614:	f851 6b04 	ldr.w	r6, [r1], #4
 8009618:	d402      	bmi.n	8009620 <_printf_i+0x18c>
 800961a:	065f      	lsls	r7, r3, #25
 800961c:	bf48      	it	mi
 800961e:	b2b6      	uxthmi	r6, r6
 8009620:	07df      	lsls	r7, r3, #31
 8009622:	bf48      	it	mi
 8009624:	f043 0320 	orrmi.w	r3, r3, #32
 8009628:	6029      	str	r1, [r5, #0]
 800962a:	bf48      	it	mi
 800962c:	6023      	strmi	r3, [r4, #0]
 800962e:	b91e      	cbnz	r6, 8009638 <_printf_i+0x1a4>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	f023 0320 	bic.w	r3, r3, #32
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	2310      	movs	r3, #16
 800963a:	e7a7      	b.n	800958c <_printf_i+0xf8>
 800963c:	4824      	ldr	r0, [pc, #144]	; (80096d0 <_printf_i+0x23c>)
 800963e:	e7e4      	b.n	800960a <_printf_i+0x176>
 8009640:	4615      	mov	r5, r2
 8009642:	e7bd      	b.n	80095c0 <_printf_i+0x12c>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	6826      	ldr	r6, [r4, #0]
 8009648:	6961      	ldr	r1, [r4, #20]
 800964a:	1d18      	adds	r0, r3, #4
 800964c:	6028      	str	r0, [r5, #0]
 800964e:	0635      	lsls	r5, r6, #24
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	d501      	bpl.n	8009658 <_printf_i+0x1c4>
 8009654:	6019      	str	r1, [r3, #0]
 8009656:	e002      	b.n	800965e <_printf_i+0x1ca>
 8009658:	0670      	lsls	r0, r6, #25
 800965a:	d5fb      	bpl.n	8009654 <_printf_i+0x1c0>
 800965c:	8019      	strh	r1, [r3, #0]
 800965e:	2300      	movs	r3, #0
 8009660:	6123      	str	r3, [r4, #16]
 8009662:	4615      	mov	r5, r2
 8009664:	e7bc      	b.n	80095e0 <_printf_i+0x14c>
 8009666:	682b      	ldr	r3, [r5, #0]
 8009668:	1d1a      	adds	r2, r3, #4
 800966a:	602a      	str	r2, [r5, #0]
 800966c:	681d      	ldr	r5, [r3, #0]
 800966e:	6862      	ldr	r2, [r4, #4]
 8009670:	2100      	movs	r1, #0
 8009672:	4628      	mov	r0, r5
 8009674:	f7f6 fdb4 	bl	80001e0 <memchr>
 8009678:	b108      	cbz	r0, 800967e <_printf_i+0x1ea>
 800967a:	1b40      	subs	r0, r0, r5
 800967c:	6060      	str	r0, [r4, #4]
 800967e:	6863      	ldr	r3, [r4, #4]
 8009680:	6123      	str	r3, [r4, #16]
 8009682:	2300      	movs	r3, #0
 8009684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009688:	e7aa      	b.n	80095e0 <_printf_i+0x14c>
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	462a      	mov	r2, r5
 800968e:	4649      	mov	r1, r9
 8009690:	4640      	mov	r0, r8
 8009692:	47d0      	blx	sl
 8009694:	3001      	adds	r0, #1
 8009696:	d0ad      	beq.n	80095f4 <_printf_i+0x160>
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	079b      	lsls	r3, r3, #30
 800969c:	d413      	bmi.n	80096c6 <_printf_i+0x232>
 800969e:	68e0      	ldr	r0, [r4, #12]
 80096a0:	9b03      	ldr	r3, [sp, #12]
 80096a2:	4298      	cmp	r0, r3
 80096a4:	bfb8      	it	lt
 80096a6:	4618      	movlt	r0, r3
 80096a8:	e7a6      	b.n	80095f8 <_printf_i+0x164>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4632      	mov	r2, r6
 80096ae:	4649      	mov	r1, r9
 80096b0:	4640      	mov	r0, r8
 80096b2:	47d0      	blx	sl
 80096b4:	3001      	adds	r0, #1
 80096b6:	d09d      	beq.n	80095f4 <_printf_i+0x160>
 80096b8:	3501      	adds	r5, #1
 80096ba:	68e3      	ldr	r3, [r4, #12]
 80096bc:	9903      	ldr	r1, [sp, #12]
 80096be:	1a5b      	subs	r3, r3, r1
 80096c0:	42ab      	cmp	r3, r5
 80096c2:	dcf2      	bgt.n	80096aa <_printf_i+0x216>
 80096c4:	e7eb      	b.n	800969e <_printf_i+0x20a>
 80096c6:	2500      	movs	r5, #0
 80096c8:	f104 0619 	add.w	r6, r4, #25
 80096cc:	e7f5      	b.n	80096ba <_printf_i+0x226>
 80096ce:	bf00      	nop
 80096d0:	08009851 	.word	0x08009851
 80096d4:	08009862 	.word	0x08009862

080096d8 <memmove>:
 80096d8:	4288      	cmp	r0, r1
 80096da:	b510      	push	{r4, lr}
 80096dc:	eb01 0402 	add.w	r4, r1, r2
 80096e0:	d902      	bls.n	80096e8 <memmove+0x10>
 80096e2:	4284      	cmp	r4, r0
 80096e4:	4623      	mov	r3, r4
 80096e6:	d807      	bhi.n	80096f8 <memmove+0x20>
 80096e8:	1e43      	subs	r3, r0, #1
 80096ea:	42a1      	cmp	r1, r4
 80096ec:	d008      	beq.n	8009700 <memmove+0x28>
 80096ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096f6:	e7f8      	b.n	80096ea <memmove+0x12>
 80096f8:	4402      	add	r2, r0
 80096fa:	4601      	mov	r1, r0
 80096fc:	428a      	cmp	r2, r1
 80096fe:	d100      	bne.n	8009702 <memmove+0x2a>
 8009700:	bd10      	pop	{r4, pc}
 8009702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970a:	e7f7      	b.n	80096fc <memmove+0x24>

0800970c <_sbrk_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d06      	ldr	r5, [pc, #24]	; (8009728 <_sbrk_r+0x1c>)
 8009710:	2300      	movs	r3, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	602b      	str	r3, [r5, #0]
 8009718:	f7f7 fcf8 	bl	800110c <_sbrk>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d102      	bne.n	8009726 <_sbrk_r+0x1a>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b103      	cbz	r3, 8009726 <_sbrk_r+0x1a>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	200015ac 	.word	0x200015ac

0800972c <memcpy>:
 800972c:	440a      	add	r2, r1
 800972e:	4291      	cmp	r1, r2
 8009730:	f100 33ff 	add.w	r3, r0, #4294967295
 8009734:	d100      	bne.n	8009738 <memcpy+0xc>
 8009736:	4770      	bx	lr
 8009738:	b510      	push	{r4, lr}
 800973a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009742:	4291      	cmp	r1, r2
 8009744:	d1f9      	bne.n	800973a <memcpy+0xe>
 8009746:	bd10      	pop	{r4, pc}

08009748 <_realloc_r>:
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	4680      	mov	r8, r0
 800974e:	4614      	mov	r4, r2
 8009750:	460e      	mov	r6, r1
 8009752:	b921      	cbnz	r1, 800975e <_realloc_r+0x16>
 8009754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009758:	4611      	mov	r1, r2
 800975a:	f7ff bc49 	b.w	8008ff0 <_malloc_r>
 800975e:	b92a      	cbnz	r2, 800976c <_realloc_r+0x24>
 8009760:	f7ff fbda 	bl	8008f18 <_free_r>
 8009764:	4625      	mov	r5, r4
 8009766:	4628      	mov	r0, r5
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	f000 f81b 	bl	80097a6 <_malloc_usable_size_r>
 8009770:	4284      	cmp	r4, r0
 8009772:	4607      	mov	r7, r0
 8009774:	d802      	bhi.n	800977c <_realloc_r+0x34>
 8009776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800977a:	d812      	bhi.n	80097a2 <_realloc_r+0x5a>
 800977c:	4621      	mov	r1, r4
 800977e:	4640      	mov	r0, r8
 8009780:	f7ff fc36 	bl	8008ff0 <_malloc_r>
 8009784:	4605      	mov	r5, r0
 8009786:	2800      	cmp	r0, #0
 8009788:	d0ed      	beq.n	8009766 <_realloc_r+0x1e>
 800978a:	42bc      	cmp	r4, r7
 800978c:	4622      	mov	r2, r4
 800978e:	4631      	mov	r1, r6
 8009790:	bf28      	it	cs
 8009792:	463a      	movcs	r2, r7
 8009794:	f7ff ffca 	bl	800972c <memcpy>
 8009798:	4631      	mov	r1, r6
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff fbbc 	bl	8008f18 <_free_r>
 80097a0:	e7e1      	b.n	8009766 <_realloc_r+0x1e>
 80097a2:	4635      	mov	r5, r6
 80097a4:	e7df      	b.n	8009766 <_realloc_r+0x1e>

080097a6 <_malloc_usable_size_r>:
 80097a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097aa:	1f18      	subs	r0, r3, #4
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bfbc      	itt	lt
 80097b0:	580b      	ldrlt	r3, [r1, r0]
 80097b2:	18c0      	addlt	r0, r0, r3
 80097b4:	4770      	bx	lr
	...

080097b8 <_init>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr

080097c4 <_fini>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr
