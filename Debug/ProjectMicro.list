
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c98  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e90  08008e90  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08008e90  08008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e98  08008e98  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e9c  08008e9c  00018e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08008ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  20000104  08008fa4  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000157c  08008fa4  0002157c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015031  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003821  00000000  00000000  000351a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  000389d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e32  00000000  00000000  00039c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a758  00000000  00000000  0003aaa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f79  00000000  00000000  000551fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bbc0  00000000  00000000  0006d173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d84  00000000  00000000  00108d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0010dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008e18 	.word	0x08008e18

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08008e18 	.word	0x08008e18

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <datafromUSB>:
/**
 * recibo la informacion enviada por puerto USB (lo enviado por QT), y guardo los bytes recibidos en el buffer circular Rx.buffercomm[] de la estructura datosComSerie
 * UNER = 55 4E 45 52 // Nbytes= 02 // ':' = 3A // Alive= F0 // 0xC4 = checksum
 */

void datafromUSB(uint8_t *buf, uint16_t length){
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	81fb      	strh	r3, [r7, #14]
 80004e4:	e016      	b.n	8000514 <datafromUSB+0x40>
	datosComSerie.Rx.buffercomm[datosComSerie.Rx.indexWrite] = buf[i];
 80004e6:	89fb      	ldrh	r3, [r7, #14]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a0f      	ldr	r2, [pc, #60]	; (800052c <datafromUSB+0x58>)
 80004ee:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80004f2:	4611      	mov	r1, r2
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <datafromUSB+0x58>)
 80004f8:	440b      	add	r3, r1
 80004fa:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	datosComSerie.Rx.indexWrite++;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <datafromUSB+0x58>)
 8000500:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000504:	3301      	adds	r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <datafromUSB+0x58>)
 800050a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  for (i = 0; i < length; i++) {
 800050e:	89fb      	ldrh	r3, [r7, #14]
 8000510:	3301      	adds	r3, #1
 8000512:	81fb      	strh	r3, [r7, #14]
 8000514:	89fa      	ldrh	r2, [r7, #14]
 8000516:	887b      	ldrh	r3, [r7, #2]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3e4      	bcc.n	80004e6 <datafromUSB+0x12>
  }

}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000024c 	.word	0x2000024c

08000530 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]

	//si llegó informacion entonces llamo a decodeheader para el analisis del protocolo "UNER"
	if(datosCom->Rx.indexRead!=datosCom->Rx.indexWrite ){ //si Recepcion write =! Recepcion read => buffer lleno
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000544:	429a      	cmp	r2, r3
 8000546:	d008      	beq.n	800055a <comunicationsTask+0x2a>
		DecodeHeader(datosCom);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f80d 	bl	8000568 <DecodeHeader>
		datosComSerie.Rx.indexRead=datosComSerie.Rx.indexWrite;
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <comunicationsTask+0x34>)
 8000550:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <comunicationsTask+0x34>)
 8000556:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
//	}
//
//	if(CDC_Transmit_FS(&datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexRead], datosComSerie.bytesTosend) == USBD_OK){
//		datosComSerie.Tx.indexRead += datosComSerie.bytesTosend;
//	}
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000024c 	.word	0x2000024c

08000568 <DecodeHeader>:

/**
 * Máquina de estados que busca: 'U', 'N', 'E', 'R', nBytes, ':', Payload, Checksum
 * Si todo es válido, llama a: decodeData(datosCom);
 */
void DecodeHeader(_sDato *datosCom){ //Recibo un puntero a la estructura de comunicación que contiene los buffers y los índices
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;		//Variable estática para recordar cuántos bytes de payload quedan por procesar

    uint8_t indexWriteRxCopy = datosCom->Rx.indexWrite; //Guardo una copia del índice de escritura para no interferir con interrupciones
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000576:	73fb      	strb	r3, [r7, #15]

    while (datosCom->Rx.indexRead!=indexWriteRxCopy)
 8000578:	e100      	b.n	800077c <DecodeHeader+0x214>
    {
        switch (estadoProtocolo) {					//Mientras haya nuevos datos no leídos en el buffer de recepción...
 800057a:	4b86      	ldr	r3, [pc, #536]	; (8000794 <DecodeHeader+0x22c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b06      	cmp	r3, #6
 8000580:	f200 80f8 	bhi.w	8000774 <DecodeHeader+0x20c>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <DecodeHeader+0x24>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	080005a9 	.word	0x080005a9
 8000590:	080005d7 	.word	0x080005d7
 8000594:	08000615 	.word	0x08000615
 8000598:	08000653 	.word	0x08000653
 800059c:	08000691 	.word	0x08000691
 80005a0:	080006c1 	.word	0x080006c1
 80005a4:	0800070d 	.word	0x0800070d
            case START:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='U'){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	b2d1      	uxtb	r1, r2
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80005c2:	2b55      	cmp	r3, #85	; 0x55
 80005c4:	f040 80da 	bne.w	800077c <DecodeHeader+0x214>
                    estadoProtocolo=HEADER_1;
 80005c8:	4b72      	ldr	r3, [pc, #456]	; (8000794 <DecodeHeader+0x22c>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	709a      	strb	r2, [r3, #2]
                }
                break;
 80005d4:	e0d2      	b.n	800077c <DecodeHeader+0x214>
            case HEADER_1:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='N')
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	b2d1      	uxtb	r1, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80005f0:	2b4e      	cmp	r3, #78	; 0x4e
 80005f2:	d103      	bne.n	80005fc <DecodeHeader+0x94>
                   estadoProtocolo=HEADER_2;
 80005f4:	4b67      	ldr	r3, [pc, #412]	; (8000794 <DecodeHeader+0x22c>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e0bf      	b.n	800077c <DecodeHeader+0x214>
                else{
                    datosCom->Rx.indexRead--;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000602:	3b01      	subs	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                    estadoProtocolo=START;
 800060c:	4b61      	ldr	r3, [pc, #388]	; (8000794 <DecodeHeader+0x22c>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000612:	e0b3      	b.n	800077c <DecodeHeader+0x214>
            case HEADER_2:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='E')
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	b2d1      	uxtb	r1, r2
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800062e:	2b45      	cmp	r3, #69	; 0x45
 8000630:	d103      	bne.n	800063a <DecodeHeader+0xd2>
                    estadoProtocolo=HEADER_3;
 8000632:	4b58      	ldr	r3, [pc, #352]	; (8000794 <DecodeHeader+0x22c>)
 8000634:	2203      	movs	r2, #3
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e0a0      	b.n	800077c <DecodeHeader+0x214>
                else{
                    datosCom->Rx.indexRead--;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000640:	3b01      	subs	r3, #1
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                   estadoProtocolo=START;
 800064a:	4b52      	ldr	r3, [pc, #328]	; (8000794 <DecodeHeader+0x22c>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000650:	e094      	b.n	800077c <DecodeHeader+0x214>
			case HEADER_3:
				if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]=='R')
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	b2d1      	uxtb	r1, r2
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800066c:	2b52      	cmp	r3, #82	; 0x52
 800066e:	d103      	bne.n	8000678 <DecodeHeader+0x110>
					estadoProtocolo=NBYTES;
 8000670:	4b48      	ldr	r3, [pc, #288]	; (8000794 <DecodeHeader+0x22c>)
 8000672:	2204      	movs	r2, #4
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e081      	b.n	800077c <DecodeHeader+0x214>
				else{
					datosCom->Rx.indexRead--;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800067e:	3b01      	subs	r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				    estadoProtocolo=START;
 8000688:	4b42      	ldr	r3, [pc, #264]	; (8000794 <DecodeHeader+0x22c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
				}
            break;
 800068e:	e075      	b.n	800077c <DecodeHeader+0x214>
            case NBYTES: //Leer byte de cantidad de datos (nBytes) y avanzar
                datosCom->indexStart=datosCom->Rx.indexRead;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->Rx.buffercomm[datosCom->Rx.indexRead++];
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	b2d1      	uxtb	r1, r2
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <DecodeHeader+0x230>)
 80006b6:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <DecodeHeader+0x22c>)
 80006ba:	2205      	movs	r2, #5
 80006bc:	701a      	strb	r2, [r3, #0]
                break;
 80006be:	e05d      	b.n	800077c <DecodeHeader+0x214>
            case TOKEN:
                if (datosCom->Rx.buffercomm[datosCom->Rx.indexRead++]==':'){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	b2d1      	uxtb	r1, r2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 80006d0:	461a      	mov	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80006da:	2b3a      	cmp	r3, #58	; 0x3a
 80006dc:	d10a      	bne.n	80006f4 <DecodeHeader+0x18c>

                   estadoProtocolo=PAYLOAD;
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <DecodeHeader+0x22c>)
 80006e0:	2206      	movs	r2, #6
 80006e2:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <DecodeHeader+0x230>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	709a      	strb	r2, [r3, #2]
 80006f2:	e043      	b.n	800077c <DecodeHeader+0x214>
                }
                else{
                    datosCom->Rx.indexRead--;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                    estadoProtocolo=START;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <DecodeHeader+0x22c>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
                }
                break;
 800070a:	e037      	b.n	800077c <DecodeHeader+0x214>
            case PAYLOAD:

                if (nBytes>1){
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <DecodeHeader+0x230>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d912      	bls.n	800073a <DecodeHeader+0x1d2>
                    datosCom->cheksumRx ^= datosCom->Rx.buffercomm[datosCom->Rx.indexRead++];
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	b2d1      	uxtb	r1, r2
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	f882 1106 	strb.w	r1, [r2, #262]	; 0x106
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	789b      	ldrb	r3, [r3, #2]
 8000732:	4053      	eors	r3, r2
 8000734:	b2da      	uxtb	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <DecodeHeader+0x230>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <DecodeHeader+0x230>)
 8000744:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){ //Cuando ya se leyeron todos los datos, compara el checksum. Si es correcto, llama a decodeData() para procesar el mensaje.
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <DecodeHeader+0x230>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d116      	bne.n	800077c <DecodeHeader+0x214>
                    estadoProtocolo=START;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <DecodeHeader+0x22c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->Rx.buffercomm[datosCom->Rx.indexRead]){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	789a      	ldrb	r2, [r3, #2]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800075e:	4619      	mov	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	440b      	add	r3, r1
 8000764:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8000768:	429a      	cmp	r2, r3
 800076a:	d107      	bne.n	800077c <DecodeHeader+0x214>
                        decodeData(datosCom);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f815 	bl	800079c <decodeData>
                    }
                }

                break;
 8000772:	e003      	b.n	800077c <DecodeHeader+0x214>
            default:
                estadoProtocolo=START;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <DecodeHeader+0x22c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
                break;
 800077a:	bf00      	nop
    while (datosCom->Rx.indexRead!=indexWriteRxCopy)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	429a      	cmp	r2, r3
 8000786:	f47f aef8 	bne.w	800057a <DecodeHeader+0x12>
        }
    }
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000554 	.word	0x20000554
 8000798:	20000154 	.word	0x20000154

0800079c <decodeData>:

//si el protocolo fue valido => preparo respuestas
void decodeData(_sDato *datosCom){ //responde segun el ID recibido. Busca el ID del comando en la tercera posición del payload (después del token y del byte de longitud).
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]


    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    switch (datosCom->Rx.buffercomm[datosCom->indexStart+2])//CMD EN LA POSICION 2, /ID EN LA POSICION 2, porque es donde se adjunta el byte que te dice "ALIVE, FIRMWARE, ETC"
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	3302      	adds	r3, #2
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80007be:	2bf1      	cmp	r3, #241	; 0xf1
 80007c0:	d01d      	beq.n	80007fe <decodeData+0x62>
 80007c2:	2bf1      	cmp	r3, #241	; 0xf1
 80007c4:	dc64      	bgt.n	8000890 <decodeData+0xf4>
 80007c6:	2ba0      	cmp	r3, #160	; 0xa0
 80007c8:	d027      	beq.n	800081a <decodeData+0x7e>
 80007ca:	2bf0      	cmp	r3, #240	; 0xf0
 80007cc:	d160      	bne.n	8000890 <decodeData+0xf4>
    {

	case ALIVE:
		bufAux[indiceAux++] = ALIVE;   	// ID de respuesta
 80007ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80007d8:	3328      	adds	r3, #40	; 0x28
 80007da:	443b      	add	r3, r7
 80007dc:	22f0      	movs	r2, #240	; 0xf0
 80007de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		bufAux[indiceAux++] = 0x0D;    	// Respuesta: ACK
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80007ec:	3328      	adds	r3, #40	; 0x28
 80007ee:	443b      	add	r3, r7
 80007f0:	220d      	movs	r2, #13
 80007f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		bytes = 0x03;        			// NBYTES = 3 (ID + Dato + Checksum)
 80007f6:	2303      	movs	r3, #3
 80007f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	break;
 80007fc:	e056      	b.n	80008ac <decodeData+0x110>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80007fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000808:	3328      	adds	r3, #40	; 0x28
 800080a:	443b      	add	r3, r7
 800080c:	22f1      	movs	r2, #241	; 0xf1
 800080e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		bytes=0x02;
 8000812:	2302      	movs	r3, #2
 8000814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    break;
 8000818:	e048      	b.n	80008ac <decodeData+0x110>

    break;

    case IR:
		bufAux[indiceAux++] = IR;
 800081a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000824:	3328      	adds	r3, #40	; 0x28
 8000826:	443b      	add	r3, r7
 8000828:	22a0      	movs	r2, #160	; 0xa0
 800082a:	f803 2c1c 	strb.w	r2, [r3, #-28]
			for (int i = 0; i < 3; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
 8000832:	e026      	b.n	8000882 <decodeData+0xe6>
				w.u16[0] = irSensor[i].currentValue;
 8000834:	4923      	ldr	r1, [pc, #140]	; (80008c4 <decodeData+0x128>)
 8000836:	6a3a      	ldr	r2, [r7, #32]
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	440b      	add	r3, r1
 8000842:	881a      	ldrh	r2, [r3, #0]
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <decodeData+0x12c>)
 8000846:	801a      	strh	r2, [r3, #0]
				bufAux[indiceAux++] = w.u8[0];
 8000848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000852:	4619      	mov	r1, r3
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <decodeData+0x12c>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	f101 0328 	add.w	r3, r1, #40	; 0x28
 800085c:	443b      	add	r3, r7
 800085e:	f803 2c1c 	strb.w	r2, [r3, #-28]
				bufAux[indiceAux++] = w.u8[1];
 8000862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800086c:	4619      	mov	r1, r3
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <decodeData+0x12c>)
 8000870:	785a      	ldrb	r2, [r3, #1]
 8000872:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8000876:	443b      	add	r3, r7
 8000878:	f803 2c1c 	strb.w	r2, [r3, #-28]
			for (int i = 0; i < 3; i++) {
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	3301      	adds	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
 8000882:	6a3b      	ldr	r3, [r7, #32]
 8000884:	2b02      	cmp	r3, #2
 8000886:	ddd5      	ble.n	8000834 <decodeData+0x98>
			}
		bytes = 1 + (3 * 2);  // ID + 3 valores de 2 bytes
 8000888:	2307      	movs	r3, #7
 800088a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		break;
 800088e:	e00d      	b.n	80008ac <decodeData+0x110>
    default:
        bufAux[indiceAux++]=0xFF;
 8000890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800089a:	3328      	adds	r3, #40	; 0x28
 800089c:	443b      	add	r3, r7
 800089e:	22ff      	movs	r2, #255	; 0xff
 80008a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
        bytes=0x02;
 80008a4:	2302      	movs	r3, #2
 80008a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    break;
 80008aa:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 80008ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f808 	bl	80008cc <SendInfo>
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000124 	.word	0x20000124
 80008c8:	20000120 	.word	0x20000120

080008cc <SendInfo>:

//calculo y envio el checksum
void SendInfo(uint8_t bufferAux[], uint8_t bytes){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[20], indiceAux=0,cks=0,i=0;
 80008d8:	2300      	movs	r3, #0
 80008da:	77fb      	strb	r3, [r7, #31]
 80008dc:	2300      	movs	r3, #0
 80008de:	77bb      	strb	r3, [r7, #30]
 80008e0:	2300      	movs	r3, #0
 80008e2:	777b      	strb	r3, [r7, #29]

    bufAux[indiceAux++]='U';
 80008e4:	7ffb      	ldrb	r3, [r7, #31]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	77fa      	strb	r2, [r7, #31]
 80008ea:	3320      	adds	r3, #32
 80008ec:	443b      	add	r3, r7
 80008ee:	2255      	movs	r2, #85	; 0x55
 80008f0:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 80008f4:	7ffb      	ldrb	r3, [r7, #31]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	77fa      	strb	r2, [r7, #31]
 80008fa:	3320      	adds	r3, #32
 80008fc:	443b      	add	r3, r7
 80008fe:	224e      	movs	r2, #78	; 0x4e
 8000900:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000904:	7ffb      	ldrb	r3, [r7, #31]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	77fa      	strb	r2, [r7, #31]
 800090a:	3320      	adds	r3, #32
 800090c:	443b      	add	r3, r7
 800090e:	2245      	movs	r2, #69	; 0x45
 8000910:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000914:	7ffb      	ldrb	r3, [r7, #31]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	77fa      	strb	r2, [r7, #31]
 800091a:	3320      	adds	r3, #32
 800091c:	443b      	add	r3, r7
 800091e:	2252      	movs	r2, #82	; 0x52
 8000920:	f803 2c18 	strb.w	r2, [r3, #-24]

    bufAux[indiceAux++]=bytes;
 8000924:	7ffb      	ldrb	r3, [r7, #31]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	77fa      	strb	r2, [r7, #31]
 800092a:	3320      	adds	r3, #32
 800092c:	443b      	add	r3, r7
 800092e:	78fa      	ldrb	r2, [r7, #3]
 8000930:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	77fa      	strb	r2, [r7, #31]
 800093a:	3320      	adds	r3, #32
 800093c:	443b      	add	r3, r7
 800093e:	223a      	movs	r2, #58	; 0x3a
 8000940:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(i=0; i<bytes-1; i++){
 8000944:	2300      	movs	r3, #0
 8000946:	777b      	strb	r3, [r7, #29]
 8000948:	e00d      	b.n	8000966 <SendInfo+0x9a>
        bufAux[indiceAux++] = bufferAux[i];
 800094a:	7f7b      	ldrb	r3, [r7, #29]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	441a      	add	r2, r3
 8000950:	7ffb      	ldrb	r3, [r7, #31]
 8000952:	1c59      	adds	r1, r3, #1
 8000954:	77f9      	strb	r1, [r7, #31]
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	3320      	adds	r3, #32
 800095a:	443b      	add	r3, r7
 800095c:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(i=0; i<bytes-1; i++){
 8000960:	7f7b      	ldrb	r3, [r7, #29]
 8000962:	3301      	adds	r3, #1
 8000964:	777b      	strb	r3, [r7, #29]
 8000966:	7f7a      	ldrb	r2, [r7, #29]
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	3b01      	subs	r3, #1
 800096c:	429a      	cmp	r2, r3
 800096e:	dbec      	blt.n	800094a <SendInfo+0x7e>
    }

    cks	= 0;
 8000970:	2300      	movs	r3, #0
 8000972:	77bb      	strb	r3, [r7, #30]

    //Cargar en Tx.buffercomm con checksum:
    for(i=0 ;i<indiceAux;i++){
 8000974:	2300      	movs	r3, #0
 8000976:	777b      	strb	r3, [r7, #29]
 8000978:	e01a      	b.n	80009b0 <SendInfo+0xe4>
        cks^= bufAux[i];
 800097a:	7f7b      	ldrb	r3, [r7, #29]
 800097c:	3320      	adds	r3, #32
 800097e:	443b      	add	r3, r7
 8000980:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000984:	7fbb      	ldrb	r3, [r7, #30]
 8000986:	4053      	eors	r3, r2
 8000988:	77bb      	strb	r3, [r7, #30]
        datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexWrite++]=bufAux[i];
 800098a:	7f7a      	ldrb	r2, [r7, #29]
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <SendInfo+0x138>)
 800098e:	78db      	ldrb	r3, [r3, #3]
 8000990:	1c59      	adds	r1, r3, #1
 8000992:	b2c8      	uxtb	r0, r1
 8000994:	491b      	ldr	r1, [pc, #108]	; (8000a04 <SendInfo+0x138>)
 8000996:	70c8      	strb	r0, [r1, #3]
 8000998:	4619      	mov	r1, r3
 800099a:	f102 0320 	add.w	r3, r2, #32
 800099e:	443b      	add	r3, r7
 80009a0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <SendInfo+0x138>)
 80009a6:	440b      	add	r3, r1
 80009a8:	715a      	strb	r2, [r3, #5]
    for(i=0 ;i<indiceAux;i++){
 80009aa:	7f7b      	ldrb	r3, [r7, #29]
 80009ac:	3301      	adds	r3, #1
 80009ae:	777b      	strb	r3, [r7, #29]
 80009b0:	7f7a      	ldrb	r2, [r7, #29]
 80009b2:	7ffb      	ldrb	r3, [r7, #31]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3e0      	bcc.n	800097a <SendInfo+0xae>
    }
    // Agregar el checksum al final
    datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexWrite++]=cks;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <SendInfo+0x138>)
 80009ba:	78db      	ldrb	r3, [r3, #3]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	b2d1      	uxtb	r1, r2
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <SendInfo+0x138>)
 80009c2:	70d1      	strb	r1, [r2, #3]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <SendInfo+0x138>)
 80009c8:	4413      	add	r3, r2
 80009ca:	7fba      	ldrb	r2, [r7, #30]
 80009cc:	715a      	strb	r2, [r3, #5]
    // Cantidad total de bytes a transmitir (incluyendo checksum)
    datosComSerie.bytesTosend = datosComSerie.Tx.indexWrite;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <SendInfo+0x138>)
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <SendInfo+0x138>)
 80009d4:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307

    // Paquete enviado hacia QT: 55 4E 45 52   01 	 3A     F0         0D          C8
    //							 'U''N''E''R''Nbytes'':''ID:Alive''Payload: ACK''Cheksum'
    CDC_Transmit_FS(&datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexRead], datosComSerie.bytesTosend); //transmision por USB hacia QT
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <SendInfo+0x138>)
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <SendInfo+0x138>)
 80009e0:	4413      	add	r3, r2
 80009e2:	3305      	adds	r3, #5
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <SendInfo+0x138>)
 80009e6:	f892 2307 	ldrb.w	r2, [r2, #775]	; 0x307
 80009ea:	b292      	uxth	r2, r2
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 fd84 	bl	80084fc <CDC_Transmit_FS>
    datosComSerie.Tx.indexWrite = 0;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <SendInfo+0x138>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	70da      	strb	r2, [r3, #3]

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000024c 	.word	0x2000024c

08000a08 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d104      	bne.n	8000a24 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000a1a:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a1c:	7813      	ldrb	r3, [r2, #0]
 8000a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a22:	7013      	strb	r3, [r2, #0]
	}

}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40010000 	.word	0x40010000
 8000a34:	20000248 	.word	0x20000248

08000a38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

	if (hadc->Instance == ADC1) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_ADC_ConvCpltCallback+0x50>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d115      	bne.n	8000a7a <HAL_ADC_ConvCpltCallback+0x42>
		for (i = 0; i < NUM_CHANNELS; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	e00f      	b.n	8000a74 <HAL_ADC_ConvCpltCallback+0x3c>
			sensorIR[i].currentValue = adcBuffer[i];
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	7bfa      	ldrb	r2, [r7, #15]
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <HAL_ADC_ConvCpltCallback+0x54>)
 8000a5a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8000a5e:	490c      	ldr	r1, [pc, #48]	; (8000a90 <HAL_ADC_ConvCpltCallback+0x58>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	440b      	add	r3, r1
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < NUM_CHANNELS; i++) {
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	3301      	adds	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d9ec      	bls.n	8000a54 <HAL_ADC_ConvCpltCallback+0x1c>
//			adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
//
//
//	CDC_Transmit_FS((uint8_t*)usbMsg, strlen(usbMsg));

}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40012000 	.word	0x40012000
 8000a8c:	20000588 	.word	0x20000588
 8000a90:	20000558 	.word	0x20000558

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 fb4d 	bl	8001140 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_Attach_Rx(&datafromUSB);
 8000aa6:	482b      	ldr	r0, [pc, #172]	; (8000b54 <main+0xc0>)
 8000aa8:	f007 fd60 	bl	800856c <CDC_Attach_Rx>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f860 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 f9a4 	bl	8000dfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab4:	f000 f982 	bl	8000dbc <MX_DMA_Init>
  MX_TIM1_Init();
 8000ab8:	f000 f930 	bl	8000d1c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000abc:	f007 fc02 	bl	80082c4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000ac0:	f000 f8be 	bl	8000c40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000ac4:	4824      	ldr	r0, [pc, #144]	; (8000b58 <main+0xc4>)
 8000ac6:	f003 fcd9 	bl	800447c <HAL_TIM_Base_Start_IT>

  IS10MS = FALSE;
 8000aca:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <main+0xc8>)
 8000acc:	7813      	ldrb	r3, [r2, #0]
 8000ace:	f36f 1386 	bfc	r3, #6, #1
 8000ad2:	7013      	strb	r3, [r2, #0]
  datosComSerie.Rx.indexRead = 0;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <main+0xcc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
  datosComSerie.Rx.indexWrite =0;
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <main+0xcc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  myFlags.allFlags = 0;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <main+0xc8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  comunicationsTask(&datosComSerie);
 8000aea:	481d      	ldr	r0, [pc, #116]	; (8000b60 <main+0xcc>)
 8000aec:	f7ff fd20 	bl	8000530 <comunicationsTask>

	  if(IS10MS){
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <main+0xc8>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f5      	beq.n	8000aea <main+0x56>
		  time250us++;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	3301      	adds	r3, #1
 8000b02:	71fb      	strb	r3, [r7, #7]
		  IS10MS =! IS10MS;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <main+0xc8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2d9      	uxtb	r1, r3
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <main+0xc8>)
 8000b1a:	7813      	ldrb	r3, [r2, #0]
 8000b1c:	f361 1386 	bfi	r3, r1, #6, #1
 8000b20:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b27      	cmp	r3, #39	; 0x27
 8000b26:	d9e0      	bls.n	8000aea <main+0x56>
			  time10ms++;
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	71bb      	strb	r3, [r7, #6]
			  time250us = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	71fb      	strb	r3, [r7, #7]
			  if(time10ms == 10){
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	2b0a      	cmp	r3, #10
 8000b36:	d1d8      	bne.n	8000aea <main+0x56>
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <main+0xd0>)
 8000b3e:	f001 fdb0 	bl	80026a2 <HAL_GPIO_TogglePin>
				  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, NUM_CHANNELS);
 8000b42:	2203      	movs	r2, #3
 8000b44:	4908      	ldr	r1, [pc, #32]	; (8000b68 <main+0xd4>)
 8000b46:	4809      	ldr	r0, [pc, #36]	; (8000b6c <main+0xd8>)
 8000b48:	f000 fbd4 	bl	80012f4 <HAL_ADC_Start_DMA>
				  time10ms = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	71bb      	strb	r3, [r7, #6]
	  comunicationsTask(&datosComSerie);
 8000b50:	e7cb      	b.n	8000aea <main+0x56>
 8000b52:	bf00      	nop
 8000b54:	080004d5 	.word	0x080004d5
 8000b58:	20000200 	.word	0x20000200
 8000b5c:	20000248 	.word	0x20000248
 8000b60:	2000024c 	.word	0x2000024c
 8000b64:	40020800 	.word	0x40020800
 8000b68:	20000588 	.word	0x20000588
 8000b6c:	20000158 	.word	0x20000158

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	; 0x50
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2230      	movs	r2, #48	; 0x30
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 f91e 	bl	8008dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <SystemClock_Config+0xc8>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <SystemClock_Config+0xc8>)
 8000b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <SystemClock_Config+0xc8>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <SystemClock_Config+0xcc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <SystemClock_Config+0xcc>)
 8000bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <SystemClock_Config+0xcc>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000be0:	2319      	movs	r3, #25
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000be4:	23c0      	movs	r3, #192	; 0xc0
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 ffc1 	bl	8003b7c <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c00:	f000 f94e 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2103      	movs	r1, #3
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fa23 	bl	800406c <HAL_RCC_ClockConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c2c:	f000 f938 	bl	8000ea0 <Error_Handler>
  }
}
 8000c30:	bf00      	nop
 8000c32:	3750      	adds	r7, #80	; 0x50
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40007000 	.word	0x40007000

08000c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c54:	4a2f      	ldr	r2, [pc, #188]	; (8000d14 <MX_ADC1_Init+0xd4>)
 8000c56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c82:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <MX_ADC1_Init+0xd8>)
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca0:	481b      	ldr	r0, [pc, #108]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000ca2:	f000 fae3 	bl	800126c <HAL_ADC_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f8f8 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000cc2:	f000 fc1f 	bl	8001504 <HAL_ADC_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ccc:	f000 f8e8 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000cde:	f000 fc11 	bl	8001504 <HAL_ADC_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ce8:	f000 f8da 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_ADC1_Init+0xd0>)
 8000cfa:	f000 fc03 	bl	8001504 <HAL_ADC_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d04:	f000 f8cc 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000158 	.word	0x20000158
 8000d14:	40012000 	.word	0x40012000
 8000d18:	0f000001 	.word	0x0f000001

08000d1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <MX_TIM1_Init+0x9c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d4c:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000d50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d66:	f003 fb39 	bl	80043dc <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d70:	f000 f896 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d82:	f003 fccd 	bl	8004720 <HAL_TIM_ConfigClockSource>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d8c:	f000 f888 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_TIM1_Init+0x98>)
 8000d9e:	f003 fecf 	bl	8004b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da8:	f000 f87a 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000200 	.word	0x20000200
 8000db8:	40010000 	.word	0x40010000

08000dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_DMA_Init+0x3c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <MX_DMA_Init+0x3c>)
 8000dcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_DMA_Init+0x3c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2038      	movs	r0, #56	; 0x38
 8000de4:	f000 ff19 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000de8:	2038      	movs	r0, #56	; 0x38
 8000dea:	f000 ff32 	bl	8001c52 <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_GPIO_Init+0x9c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6c:	480b      	ldr	r0, [pc, #44]	; (8000e9c <MX_GPIO_Init+0xa0>)
 8000e6e:	f001 fbff 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_GPIO_Init+0xa0>)
 8000e8c:	f001 fa6c 	bl	8002368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020800 	.word	0x40020800

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <Error_Handler+0x8>
	...

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <HAL_ADC_MspInit+0xd8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d156      	bne.n	8000fcc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a2c      	ldr	r2, [pc, #176]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_ADC_MspInit+0xdc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f56:	2307      	movs	r3, #7
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	481c      	ldr	r0, [pc, #112]	; (8000fdc <HAL_ADC_MspInit+0xe0>)
 8000f6a:	f001 f9fd 	bl	8002368 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_ADC_MspInit+0xe8>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000fb2:	f000 fe69 	bl	8001c88 <HAL_DMA_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000fbc:	f7ff ff70 	bl	8000ea0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_ADC_MspInit+0xe4>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	200001a0 	.word	0x200001a0
 8000fe4:	40026410 	.word	0x40026410

08000fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_TIM_Base_MspInit+0x48>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d115      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_TIM_Base_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <HAL_TIM_Base_MspInit+0x4c>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_TIM_Base_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2019      	movs	r0, #25
 800101c:	f000 fdfd 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001020:	2019      	movs	r0, #25
 8001022:	f000 fe16 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40010000 	.word	0x40010000
 8001034:	40023800 	.word	0x40023800

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f8ae 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001092:	f003 fa55 	bl	8004540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000200 	.word	0x20000200

080010a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <DMA2_Stream0_IRQHandler+0x10>)
 80010a6:	f000 fef5 	bl	8001e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001a0 	.word	0x200001a0

080010b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <OTG_FS_IRQHandler+0x10>)
 80010ba:	f001 fc50 	bl	800295e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000e78 	.word	0x20000e78

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001124 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f0:	f7ff ffea 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111a:	f007 fe59 	bl	8008dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff fcb9 	bl	8000a94 <main>
  bx  lr    
 8001122:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001130:	08008ea0 	.word	0x08008ea0
  ldr r2, =_sbss
 8001134:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001138:	2000157c 	.word	0x2000157c

0800113c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_Init+0x40>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_Init+0x40>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_Init+0x40>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 fd4b 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	200f      	movs	r0, #15
 8001170:	f000 f808 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff fe9a 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fd63 	bl	8001c6e <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 fd2b 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000590 	.word	0x20000590

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000590 	.word	0x20000590

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e033      	b.n	80012ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fe36 	bl	8000efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012b2:	f023 0302 	bic.w	r3, r3, #2
 80012b6:	f043 0202 	orr.w	r2, r3, #2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fa52 	bl	8001768 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f023 0303 	bic.w	r3, r3, #3
 80012d2:	f043 0201 	orr.w	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40
 80012da:	e001      	b.n	80012e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Start_DMA+0x22>
 8001312:	2302      	movs	r3, #2
 8001314:	e0d0      	b.n	80014b8 <HAL_ADC_Start_DMA+0x1c4>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b01      	cmp	r3, #1
 800132a:	d018      	beq.n	800135e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <HAL_ADC_Start_DMA+0x1cc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a60      	ldr	r2, [pc, #384]	; (80014c4 <HAL_ADC_Start_DMA+0x1d0>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9a      	lsrs	r2, r3, #18
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001350:	e002      	b.n	8001358 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3b01      	subs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f9      	bne.n	8001352 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800136c:	d107      	bne.n	800137e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800137c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	f040 8088 	bne.w	800149e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d007      	beq.n	80013c0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013cc:	d106      	bne.n	80013dc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f023 0206 	bic.w	r2, r3, #6
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
 80013da:	e002      	b.n	80013e2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ea:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <HAL_ADC_Start_DMA+0x1d4>)
 80013ec:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	4a36      	ldr	r2, [pc, #216]	; (80014cc <HAL_ADC_Start_DMA+0x1d8>)
 80013f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <HAL_ADC_Start_DMA+0x1dc>)
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001402:	4a34      	ldr	r2, [pc, #208]	; (80014d4 <HAL_ADC_Start_DMA+0x1e0>)
 8001404:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800140e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800141e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800142e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	334c      	adds	r3, #76	; 0x4c
 800143a:	4619      	mov	r1, r3
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f000 fcd0 	bl	8001de4 <HAL_DMA_Start_IT>
 8001444:	4603      	mov	r3, r0
 8001446:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10f      	bne.n	8001474 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d129      	bne.n	80014b6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	e020      	b.n	80014b6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_ADC_Start_DMA+0x1e4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d11b      	bne.n	80014b6 <HAL_ADC_Start_DMA+0x1c2>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d114      	bne.n	80014b6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e00b      	b.n	80014b6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f043 0210 	orr.w	r2, r3, #16
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80014b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	431bde83 	.word	0x431bde83
 80014c8:	40012300 	.word	0x40012300
 80014cc:	08001961 	.word	0x08001961
 80014d0:	08001a1b 	.word	0x08001a1b
 80014d4:	08001a37 	.word	0x08001a37
 80014d8:	40012000 	.word	0x40012000

080014dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1c>
 800151c:	2302      	movs	r3, #2
 800151e:	e113      	b.n	8001748 <HAL_ADC_ConfigChannel+0x244>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b09      	cmp	r3, #9
 800152e:	d925      	bls.n	800157c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	3b1e      	subs	r3, #30
 8001546:	2207      	movs	r2, #7
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43da      	mvns	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	400a      	ands	r2, r1
 8001554:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68d9      	ldr	r1, [r3, #12]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	4603      	mov	r3, r0
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4403      	add	r3, r0
 800156e:	3b1e      	subs	r3, #30
 8001570:	409a      	lsls	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	e022      	b.n	80015c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6919      	ldr	r1, [r3, #16]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	2207      	movs	r2, #7
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4403      	add	r3, r0
 80015b8:	409a      	lsls	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d824      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b05      	subs	r3, #5
 80015dc:	221f      	movs	r2, #31
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b05      	subs	r3, #5
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
 8001612:	e04c      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b0c      	cmp	r3, #12
 800161a:	d824      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b23      	subs	r3, #35	; 0x23
 800162e:	221f      	movs	r2, #31
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	3b23      	subs	r3, #35	; 0x23
 8001658:	fa00 f203 	lsl.w	r2, r0, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
 8001664:	e023      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b41      	subs	r3, #65	; 0x41
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b41      	subs	r3, #65	; 0x41
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_ADC_ConfigChannel+0x250>)
 80016b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a28      	ldr	r2, [pc, #160]	; (8001758 <HAL_ADC_ConfigChannel+0x254>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d10f      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1d8>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	d10b      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <HAL_ADC_ConfigChannel+0x254>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12b      	bne.n	800173e <HAL_ADC_ConfigChannel+0x23a>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <HAL_ADC_ConfigChannel+0x258>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d003      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x1f4>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b11      	cmp	r3, #17
 80016f6:	d122      	bne.n	800173e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_ADC_ConfigChannel+0x258>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d111      	bne.n	800173e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_ADC_ConfigChannel+0x25c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a11      	ldr	r2, [pc, #68]	; (8001764 <HAL_ADC_ConfigChannel+0x260>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0c9a      	lsrs	r2, r3, #18
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001730:	e002      	b.n	8001738 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3b01      	subs	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f9      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40012300 	.word	0x40012300
 8001758:	40012000 	.word	0x40012000
 800175c:	10000012 	.word	0x10000012
 8001760:	20000000 	.word	0x20000000
 8001764:	431bde83 	.word	0x431bde83

08001768 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001770:	4b79      	ldr	r3, [pc, #484]	; (8001958 <ADC_Init+0x1f0>)
 8001772:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	431a      	orrs	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800179c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	021a      	lsls	r2, r3, #8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6899      	ldr	r1, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	4a58      	ldr	r2, [pc, #352]	; (800195c <ADC_Init+0x1f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d022      	beq.n	8001846 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800180e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6899      	ldr	r1, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	e00f      	b.n	8001866 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001854:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001864:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0202 	bic.w	r2, r2, #2
 8001874:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6899      	ldr	r1, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7e1b      	ldrb	r3, [r3, #24]
 8001880:	005a      	lsls	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01b      	beq.n	80018cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	3b01      	subs	r3, #1
 80018c0:	035a      	lsls	r2, r3, #13
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	e007      	b.n	80018dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	051a      	lsls	r2, r3, #20
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001910:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6899      	ldr	r1, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191e:	025a      	lsls	r2, r3, #9
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	029a      	lsls	r2, r3, #10
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	609a      	str	r2, [r3, #8]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40012300 	.word	0x40012300
 800195c:	0f000001 	.word	0x0f000001

08001960 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001976:	2b00      	cmp	r3, #0
 8001978:	d13c      	bne.n	80019f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d12b      	bne.n	80019ec <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001998:	2b00      	cmp	r3, #0
 800199a:	d127      	bne.n	80019ec <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d119      	bne.n	80019ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0220 	bic.w	r2, r2, #32
 80019c6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff f823 	bl	8000a38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019f2:	e00e      	b.n	8001a12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff fd75 	bl	80014f0 <HAL_ADC_ErrorCallback>
}
 8001a06:	e004      	b.n	8001a12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff fd57 	bl	80014dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a42:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2240      	movs	r2, #64	; 0x40
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f043 0204 	orr.w	r2, r3, #4
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff fd4a 	bl	80014f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff29 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff3e 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff8e 	bl	8001b58 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff31 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa2 	bl	8001bc0 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff faba 	bl	800120c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e099      	b.n	8001dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc4:	e00f      	b.n	8001ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc6:	f7ff faa1 	bl	800120c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d908      	bls.n	8001ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e078      	b.n	8001dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e8      	bne.n	8001cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <HAL_DMA_Init+0x158>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d107      	bne.n	8001d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f023 0307 	bic.w	r3, r3, #7
 8001d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d117      	bne.n	8001daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00e      	beq.n	8001daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fa6f 	bl	8002270 <DMA_CheckFifoParam>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001da6:	2301      	movs	r3, #1
 8001da8:	e016      	b.n	8001dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fa26 	bl	8002204 <DMA_CalcBaseAndBitshift>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	223f      	movs	r2, #63	; 0x3f
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	f010803f 	.word	0xf010803f

08001de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_DMA_Start_IT+0x26>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e040      	b.n	8001e8c <HAL_DMA_Start_IT+0xa8>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d12f      	bne.n	8001e7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2202      	movs	r2, #2
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f9b8 	bl	80021a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	223f      	movs	r2, #63	; 0x3f
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0216 	orr.w	r2, r2, #22
 8001e52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0208 	orr.w	r2, r2, #8
 8001e6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e005      	b.n	8001e8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
 8001e88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ea0:	4b8e      	ldr	r3, [pc, #568]	; (80020dc <HAL_DMA_IRQHandler+0x248>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a8e      	ldr	r2, [pc, #568]	; (80020e0 <HAL_DMA_IRQHandler+0x24c>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a9b      	lsrs	r3, r3, #10
 8001eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01a      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0204 	bic.w	r2, r2, #4
 8001ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2208      	movs	r2, #8
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2201      	movs	r2, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d012      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2201      	movs	r2, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f043 0202 	orr.w	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	2204      	movs	r2, #4
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2210      	movs	r2, #16
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d043      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03c      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2210      	movs	r2, #16
 8001f90:	409a      	lsls	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d024      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
 8001fc2:	e01f      	b.n	8002004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01b      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e016      	b.n	8002004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0208 	bic.w	r2, r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2220      	movs	r2, #32
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 808f 	beq.w	8002134 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8087 	beq.w	8002134 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2220      	movs	r2, #32
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b05      	cmp	r3, #5
 800203c:	d136      	bne.n	80020ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0216 	bic.w	r2, r2, #22
 800204c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800205c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d103      	bne.n	800206e <HAL_DMA_IRQHandler+0x1da>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0208 	bic.w	r2, r2, #8
 800207c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	223f      	movs	r2, #63	; 0x3f
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d07e      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
        }
        return;
 80020aa:	e079      	b.n	80021a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d01d      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d031      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
 80020d8:	e02c      	b.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
 80020da:	bf00      	nop
 80020dc:	20000000 	.word	0x20000000
 80020e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
 80020f4:	e01e      	b.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10f      	bne.n	8002124 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0210 	bic.w	r2, r2, #16
 8002112:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	2b00      	cmp	r3, #0
 800213a:	d032      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d022      	beq.n	800218e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2205      	movs	r2, #5
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	3301      	adds	r3, #1
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	d307      	bcc.n	800217c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f2      	bne.n	8002160 <HAL_DMA_IRQHandler+0x2cc>
 800217a:	e000      	b.n	800217e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800217c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e000      	b.n	80021a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021a0:	bf00      	nop
    }
  }
}
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d108      	bne.n	80021e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021e6:	e007      	b.n	80021f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3b10      	subs	r3, #16
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <DMA_CalcBaseAndBitshift+0x64>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <DMA_CalcBaseAndBitshift+0x68>)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d909      	bls.n	8002246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	659a      	str	r2, [r3, #88]	; 0x58
 8002244:	e007      	b.n	8002256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	aaaaaaab 	.word	0xaaaaaaab
 800226c:	08008e88 	.word	0x08008e88

08002270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11f      	bne.n	80022ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d856      	bhi.n	800233e <DMA_CheckFifoParam+0xce>
 8002290:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <DMA_CheckFifoParam+0x28>)
 8002292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002296:	bf00      	nop
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022bb 	.word	0x080022bb
 80022a0:	080022a9 	.word	0x080022a9
 80022a4:	0800233f 	.word	0x0800233f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d046      	beq.n	8002342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b8:	e043      	b.n	8002342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022c2:	d140      	bne.n	8002346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c8:	e03d      	b.n	8002346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d2:	d121      	bne.n	8002318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d837      	bhi.n	800234a <DMA_CheckFifoParam+0xda>
 80022da:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <DMA_CheckFifoParam+0x70>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	080022f1 	.word	0x080022f1
 80022e4:	080022f7 	.word	0x080022f7
 80022e8:	080022f1 	.word	0x080022f1
 80022ec:	08002309 	.word	0x08002309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      break;
 80022f4:	e030      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d025      	beq.n	800234e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002306:	e022      	b.n	800234e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002310:	d11f      	bne.n	8002352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002316:	e01c      	b.n	8002352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d903      	bls.n	8002326 <DMA_CheckFifoParam+0xb6>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d003      	beq.n	800232c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002324:	e018      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
      break;
 800232a:	e015      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      break;
 800233c:	e00b      	b.n	8002356 <DMA_CheckFifoParam+0xe6>
      break;
 800233e:	bf00      	nop
 8002340:	e00a      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
 8002344:	e008      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e006      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e004      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
 8002350:	e002      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;   
 8002352:	bf00      	nop
 8002354:	e000      	b.n	8002358 <DMA_CheckFifoParam+0xe8>
      break;
 8002356:	bf00      	nop
    }
  } 
  
  return status; 
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	e159      	b.n	8002638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002384:	2201      	movs	r2, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	429a      	cmp	r2, r3
 800239e:	f040 8148 	bne.w	8002632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d005      	beq.n	80023ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d130      	bne.n	800241c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b03      	cmp	r3, #3
 8002426:	d017      	beq.n	8002458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d123      	bne.n	80024ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	220f      	movs	r2, #15
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	08da      	lsrs	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a2 	beq.w	8002632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_GPIO_Init+0x2e8>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4a56      	ldr	r2, [pc, #344]	; (8002650 <HAL_GPIO_Init+0x2e8>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
 80024fe:	4b54      	ldr	r3, [pc, #336]	; (8002650 <HAL_GPIO_Init+0x2e8>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250a:	4a52      	ldr	r2, [pc, #328]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	220f      	movs	r2, #15
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a49      	ldr	r2, [pc, #292]	; (8002658 <HAL_GPIO_Init+0x2f0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x202>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <HAL_GPIO_Init+0x2f4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x1fe>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a47      	ldr	r2, [pc, #284]	; (8002660 <HAL_GPIO_Init+0x2f8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x1fa>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a46      	ldr	r2, [pc, #280]	; (8002664 <HAL_GPIO_Init+0x2fc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x1f6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a45      	ldr	r2, [pc, #276]	; (8002668 <HAL_GPIO_Init+0x300>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x1f2>
 8002556:	2304      	movs	r3, #4
 8002558:	e008      	b.n	800256c <HAL_GPIO_Init+0x204>
 800255a:	2307      	movs	r3, #7
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x204>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_Init+0x204>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_Init+0x204>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x204>
 800256a:	2300      	movs	r3, #0
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	4093      	lsls	r3, r2
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257c:	4935      	ldr	r1, [pc, #212]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258a:	4b38      	ldr	r3, [pc, #224]	; (800266c <HAL_GPIO_Init+0x304>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ae:	4a2f      	ldr	r2, [pc, #188]	; (800266c <HAL_GPIO_Init+0x304>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_GPIO_Init+0x304>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_GPIO_Init+0x304>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025de:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_GPIO_Init+0x304>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002602:	4a1a      	ldr	r2, [pc, #104]	; (800266c <HAL_GPIO_Init+0x304>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_GPIO_Init+0x304>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <HAL_GPIO_Init+0x304>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	f67f aea2 	bls.w	8002384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	40013800 	.word	0x40013800
 8002658:	40020000 	.word	0x40020000
 800265c:	40020400 	.word	0x40020400
 8002660:	40020800 	.word	0x40020800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	40021000 	.word	0x40021000
 800266c:	40013c00 	.word	0x40013c00

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	041a      	lsls	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	619a      	str	r2, [r3, #24]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	041a      	lsls	r2, r3, #16
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43d9      	mvns	r1, r3
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	400b      	ands	r3, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af02      	add	r7, sp, #8
 80026dc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e101      	b.n	80028ec <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f006 f852 	bl	80087ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2203      	movs	r2, #3
 800270c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002716:	d102      	bne.n	800271e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fba5 	bl	8004e72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7c1a      	ldrb	r2, [r3, #16]
 8002730:	f88d 2000 	strb.w	r2, [sp]
 8002734:	3304      	adds	r3, #4
 8002736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002738:	f002 fa84 	bl	8004c44 <USB_CoreInit>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2202      	movs	r2, #2
 8002746:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0ce      	b.n	80028ec <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fb9d 	bl	8004e94 <USB_SetCurrentMode>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0bf      	b.n	80028ec <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e04a      	b.n	8002808 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3315      	adds	r3, #21
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3314      	adds	r3, #20
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	b298      	uxth	r0, r3
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	332e      	adds	r3, #46	; 0x2e
 80027ae:	4602      	mov	r2, r0
 80027b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3318      	adds	r3, #24
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	331c      	adds	r3, #28
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3320      	adds	r3, #32
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3324      	adds	r3, #36	; 0x24
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	3301      	adds	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	429a      	cmp	r2, r3
 8002810:	d3af      	bcc.n	8002772 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	e044      	b.n	80028a2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	f203 2355 	addw	r3, r3, #597	; 0x255
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	3301      	adds	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	791b      	ldrb	r3, [r3, #4]
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d3b5      	bcc.n	8002818 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	7c1a      	ldrb	r2, [r3, #16]
 80028b4:	f88d 2000 	strb.w	r2, [sp]
 80028b8:	3304      	adds	r3, #4
 80028ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028bc:	f002 fb36 	bl	8004f2c <USB_DevInit>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00c      	b.n	80028ec <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fb80 	bl	8005fea <USB_DevDisconnect>

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_PCD_Start+0x1c>
 800290c:	2302      	movs	r3, #2
 800290e:	e022      	b.n	8002956 <HAL_PCD_Start+0x62>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f002 fa87 	bl	8004e50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f003 fb2e 	bl	8005fa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800295e:	b590      	push	{r4, r7, lr}
 8002960:	b08d      	sub	sp, #52	; 0x34
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fbec 	bl	8006152 <USB_GetMode>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 848c 	bne.w	800329a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f003 fb50 	bl	800602c <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8482 	beq.w	8003298 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fb3d 	bl	800602c <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d107      	bne.n	80029cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f002 0202 	and.w	r2, r2, #2
 80029ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fb2b 	bl	800602c <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d161      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0210 	bic.w	r2, r2, #16
 80029ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 020f 	and.w	r2, r3, #15
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	0c5b      	lsrs	r3, r3, #17
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d124      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d035      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6a38      	ldr	r0, [r7, #32]
 8002a3c:	f003 f962 	bl	8005d04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4c:	441a      	add	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a5e:	441a      	add	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	615a      	str	r2, [r3, #20]
 8002a64:	e016      	b.n	8002a94 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	0c5b      	lsrs	r3, r3, #17
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d110      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a78:	2208      	movs	r2, #8
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6a38      	ldr	r0, [r7, #32]
 8002a7e:	f003 f941 	bl	8005d04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a8e:	441a      	add	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0210 	orr.w	r2, r2, #16
 8002aa2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fabf 	bl	800602c <USB_ReadInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ab8:	f040 80a7 	bne.w	8002c0a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fac4 	bl	8006052 <USB_ReadDevAllOutEpInterrupt>
 8002aca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002acc:	e099      	b.n	8002c02 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 808e 	beq.w	8002bf6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 fae8 	bl	80060ba <USB_ReadDevOutEPInterrupt>
 8002aea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b02:	461a      	mov	r2, r3
 8002b04:	2301      	movs	r3, #1
 8002b06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fea4 	bl	8003858 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b26:	461a      	mov	r2, r3
 8002b28:	2308      	movs	r3, #8
 8002b2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 ff7a 	bl	8003a28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d030      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d109      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b78:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f005 fefd 	bl	80089a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2302      	movs	r3, #2
 8002bba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f af62 	bne.w	8002ace <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 fa0c 	bl	800602c <USB_ReadInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c1e:	f040 80db 	bne.w	8002dd8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fa2d 	bl	8006086 <USB_ReadDevAllInEpInterrupt>
 8002c2c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c32:	e0cd      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80c2 	beq.w	8002dc4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fa53 	bl	80060f6 <USB_ReadDevInEPInterrupt>
 8002c50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d057      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	2201      	movs	r2, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69f9      	ldr	r1, [r7, #28]
 8002c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2301      	movs	r3, #1
 8002c90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	799b      	ldrb	r3, [r3, #6]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d132      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3320      	adds	r3, #32
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4403      	add	r3, r0
 8002cba:	331c      	adds	r3, #28
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4419      	add	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4403      	add	r3, r0
 8002cce:	3320      	adds	r3, #32
 8002cd0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d113      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x3a2>
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3324      	adds	r3, #36	; 0x24
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d108      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f003 fa5a 	bl	80061b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f005 fdd1 	bl	80088ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d22:	461a      	mov	r2, r3
 8002d24:	2308      	movs	r3, #8
 8002d26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2310      	movs	r3, #16
 8002d42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2340      	movs	r3, #64	; 0x40
 8002d5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d023      	beq.n	8002db2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6c:	6a38      	ldr	r0, [r7, #32]
 8002d6e:	f002 fa41 	bl	80051f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	3310      	adds	r3, #16
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	78db      	ldrb	r3, [r3, #3]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f005 fe14 	bl	80089c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dac:	461a      	mov	r2, r3
 8002dae:	2302      	movs	r3, #2
 8002db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fcbd 	bl	800373e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f47f af2e 	bne.w	8002c34 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 f925 	bl	800602c <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dec:	d122      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d108      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e14:	2100      	movs	r1, #0
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fea4 	bl	8003b64 <HAL_PCDEx_LPM_Callback>
 8002e1c:	e002      	b.n	8002e24 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f005 fdb2 	bl	8008988 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 f8f7 	bl	800602c <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e48:	d112      	bne.n	8002e70 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f005 fd6e 	bl	800893c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e6e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 f8d9 	bl	800602c <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	f040 80b7 	bne.w	8002ff6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2110      	movs	r1, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 f9a6 	bl	80051f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eac:	e046      	b.n	8002f3c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002edc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ef4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f06:	0151      	lsls	r1, r2, #5
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	440a      	add	r2, r1
 8002f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f26:	0151      	lsls	r1, r2, #5
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f34:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	3301      	adds	r3, #1
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	791b      	ldrb	r3, [r3, #4]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d3b2      	bcc.n	8002eae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f5a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7bdb      	ldrb	r3, [r3, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d016      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f74:	f043 030b 	orr.w	r3, r3, #11
 8002f78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8a:	f043 030b 	orr.w	r3, r3, #11
 8002f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f90:	e015      	b.n	8002fbe <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002fa8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb8:	f043 030b 	orr.w	r3, r3, #11
 8002fbc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002fd0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f003 f8e7 	bl	80061b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 f816 	bl	800602c <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300a:	d123      	bne.n	8003054 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f003 f8ac 	bl	800616e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f002 f963 	bl	80052e6 <USB_GetDevSpeed>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681c      	ldr	r4, [r3, #0]
 800302c:	f001 f9ca 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8003030:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003036:	461a      	mov	r2, r3
 8003038:	4620      	mov	r0, r4
 800303a:	f001 fe67 	bl	8004d0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f005 fc5d 	bl	80088fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003052:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f002 ffe7 	bl	800602c <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d10a      	bne.n	800307e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f005 fc3a 	bl	80088e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f002 0208 	and.w	r2, r2, #8
 800307c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f002 ffd2 	bl	800602c <USB_ReadInterrupts>
 8003088:	4603      	mov	r3, r0
 800308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308e:	2b80      	cmp	r3, #128	; 0x80
 8003090:	d123      	bne.n	80030da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309e:	2301      	movs	r3, #1
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	e014      	b.n	80030ce <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fb0a 	bl	80036dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	3301      	adds	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	791b      	ldrb	r3, [r3, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d3e4      	bcc.n	80030a4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 ffa4 	bl	800602c <USB_ReadInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d13c      	bne.n	800316a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f0:	2301      	movs	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
 80030f4:	e02b      	b.n	800314e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3318      	adds	r3, #24
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d115      	bne.n	8003148 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800311c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800311e:	2b00      	cmp	r3, #0
 8003120:	da12      	bge.n	8003148 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3317      	adds	r3, #23
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 faca 	bl	80036dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	3301      	adds	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	791b      	ldrb	r3, [r3, #4]
 8003152:	461a      	mov	r2, r3
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	4293      	cmp	r3, r2
 8003158:	d3cd      	bcc.n	80030f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f002 ff5c 	bl	800602c <USB_ReadInterrupts>
 8003174:	4603      	mov	r3, r0
 8003176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800317e:	d156      	bne.n	800322e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003180:	2301      	movs	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	e045      	b.n	8003212 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d12e      	bne.n	800320c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da2b      	bge.n	800320c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	0c1a      	lsrs	r2, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80031be:	4053      	eors	r3, r2
 80031c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d121      	bne.n	800320c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	f203 2357 	addw	r3, r3, #599	; 0x257
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003208:	6053      	str	r3, [r2, #4]
            break;
 800320a:	e008      	b.n	800321e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	3301      	adds	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	791b      	ldrb	r3, [r3, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	4293      	cmp	r3, r2
 800321c:	d3b3      	bcc.n	8003186 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800322c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f002 fefa 	bl	800602c <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003242:	d10a      	bne.n	800325a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f005 fbd1 	bl	80089ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f002 fee4 	bl	800602c <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d115      	bne.n	800329a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f005 fbc1 	bl	8008a08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e000      	b.n	800329a <HAL_PCD_IRQHandler+0x93c>
      return;
 8003298:	bf00      	nop
    }
  }
}
 800329a:	3734      	adds	r7, #52	; 0x34
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}

080032a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_PCD_SetAddress+0x1a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e012      	b.n	80032e0 <HAL_PCD_SetAddress+0x40>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 fe43 	bl	8005f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	70fb      	strb	r3, [r7, #3]
 80032fa:	460b      	mov	r3, r1
 80032fc:	803b      	strh	r3, [r7, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800330a:	2b00      	cmp	r3, #0
 800330c:	da0f      	bge.n	800332e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	f003 020f 	and.w	r2, r3, #15
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	3310      	adds	r3, #16
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	3304      	adds	r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	705a      	strb	r2, [r3, #1]
 800332c:	e00f      	b.n	800334e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 020f 	and.w	r2, r3, #15
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800335a:	883b      	ldrh	r3, [r7, #0]
 800335c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	78ba      	ldrb	r2, [r7, #2]
 8003368:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800337c:	78bb      	ldrb	r3, [r7, #2]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d102      	bne.n	8003388 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_PCD_EP_Open+0xae>
 8003392:	2302      	movs	r3, #2
 8003394:	e00e      	b.n	80033b4 <HAL_PCD_EP_Open+0xcc>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68f9      	ldr	r1, [r7, #12]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 ffc3 	bl	8005330 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80033b2:	7afb      	ldrb	r3, [r7, #11]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da0f      	bge.n	80033f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3310      	adds	r3, #16
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	705a      	strb	r2, [r3, #1]
 80033ee:	e00f      	b.n	8003410 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 020f 	and.w	r2, r3, #15
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	3304      	adds	r3, #4
 8003408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_PCD_EP_Close+0x6e>
 8003426:	2302      	movs	r3, #2
 8003428:	e00e      	b.n	8003448 <HAL_PCD_EP_Close+0x8c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	4618      	mov	r0, r3
 800343a:	f002 f801 	bl	8005440 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	460b      	mov	r3, r1
 800345e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	b2da      	uxtb	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	799b      	ldrb	r3, [r3, #6]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	799b      	ldrb	r3, [r3, #6]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	f002 f89e 	bl	80055f8 <USB_EPStartXfer>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80034e8:	681b      	ldr	r3, [r3, #0]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	460b      	mov	r3, r1
 8003504:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003506:	7afb      	ldrb	r3, [r7, #11]
 8003508:	f003 020f 	and.w	r2, r3, #15
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	3310      	adds	r3, #16
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2201      	movs	r2, #1
 8003534:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	b2da      	uxtb	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	799b      	ldrb	r3, [r3, #6]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d102      	bne.n	8003550 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	799b      	ldrb	r3, [r3, #6]
 8003558:	461a      	mov	r2, r3
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	f002 f84c 	bl	80055f8 <USB_EPStartXfer>

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	7912      	ldrb	r2, [r2, #4]
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e04f      	b.n	8003628 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	da0f      	bge.n	80035b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	3310      	adds	r3, #16
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	705a      	strb	r2, [r3, #1]
 80035ae:	e00d      	b.n	80035cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_PCD_EP_SetStall+0x82>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e01d      	b.n	8003628 <HAL_PCD_EP_SetStall+0xbe>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68f9      	ldr	r1, [r7, #12]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f002 fbda 	bl	8005db4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7999      	ldrb	r1, [r3, #6]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003618:	461a      	mov	r2, r3
 800361a:	f002 fdcb 	bl	80061b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	7912      	ldrb	r2, [r2, #4]
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e042      	b.n	80036d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800364e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003652:	2b00      	cmp	r3, #0
 8003654:	da0f      	bge.n	8003676 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3310      	adds	r3, #16
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	705a      	strb	r2, [r3, #1]
 8003674:	e00f      	b.n	8003696 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	f003 020f 	and.w	r2, r3, #15
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_PCD_EP_ClrStall+0x86>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e00e      	b.n	80036d4 <HAL_PCD_EP_ClrStall+0xa4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fbe3 	bl	8005e90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da0c      	bge.n	800370a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 020f 	and.w	r2, r3, #15
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	3310      	adds	r3, #16
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e00c      	b.n	8003724 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68f9      	ldr	r1, [r7, #12]
 800372a:	4618      	mov	r0, r3
 800372c:	f002 fa02 	bl	8005b34 <USB_EPStopXfer>
 8003730:	4603      	mov	r3, r0
 8003732:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003734:	7afb      	ldrb	r3, [r7, #11]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b08a      	sub	sp, #40	; 0x28
 8003742:	af02      	add	r7, sp, #8
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3310      	adds	r3, #16
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	3304      	adds	r3, #4
 8003764:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	429a      	cmp	r2, r3
 8003770:	d901      	bls.n	8003776 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06b      	b.n	800384e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	429a      	cmp	r2, r3
 800378a:	d902      	bls.n	8003792 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3303      	adds	r3, #3
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800379a:	e02a      	b.n	80037f2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d902      	bls.n	80037b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3303      	adds	r3, #3
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68d9      	ldr	r1, [r3, #12]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	4603      	mov	r3, r0
 80037d4:	6978      	ldr	r0, [r7, #20]
 80037d6:	f002 fa57 	bl	8005c88 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	441a      	add	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	441a      	add	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	429a      	cmp	r2, r3
 8003806:	d809      	bhi.n	800381c <PCD_WriteEmptyTxFifo+0xde>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003810:	429a      	cmp	r2, r3
 8003812:	d203      	bcs.n	800381c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1bf      	bne.n	800379c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	d811      	bhi.n	800384c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	2201      	movs	r2, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	43db      	mvns	r3, r3
 8003842:	6939      	ldr	r1, [r7, #16]
 8003844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003848:	4013      	ands	r3, r2
 800384a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	333c      	adds	r3, #60	; 0x3c
 8003870:	3304      	adds	r3, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	799b      	ldrb	r3, [r3, #6]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d17b      	bne.n	8003986 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d015      	beq.n	80038c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	4a61      	ldr	r2, [pc, #388]	; (8003a20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	f240 80b9 	bls.w	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80b3 	beq.w	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ba:	461a      	mov	r2, r3
 80038bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c0:	6093      	str	r3, [r2, #8]
 80038c2:	e0a7      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	461a      	mov	r2, r3
 80038dc:	2320      	movs	r3, #32
 80038de:	6093      	str	r3, [r2, #8]
 80038e0:	e098      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 8093 	bne.w	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4a4b      	ldr	r2, [pc, #300]	; (8003a20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d90f      	bls.n	8003916 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003912:	6093      	str	r3, [r2, #8]
 8003914:	e07e      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	3304      	adds	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1a      	ldr	r2, [r3, #32]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	0159      	lsls	r1, r3, #5
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	440b      	add	r3, r1
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d114      	bne.n	8003978 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	f002 fc26 	bl	80061b4 <USB_EP0_OutStart>
 8003968:	e006      	b.n	8003978 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4619      	mov	r1, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f004 ff7a 	bl	8008878 <HAL_PCD_DataOutStageCallback>
 8003984:	e046      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d124      	bne.n	80039d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	461a      	mov	r2, r3
 80039a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039aa:	6093      	str	r3, [r2, #8]
 80039ac:	e032      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	461a      	mov	r2, r3
 80039c6:	2320      	movs	r3, #32
 80039c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4619      	mov	r1, r3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f004 ff51 	bl	8008878 <HAL_PCD_DataOutStageCallback>
 80039d6:	e01d      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d114      	bne.n	8003a08 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a00:	461a      	mov	r2, r3
 8003a02:	2100      	movs	r1, #0
 8003a04:	f002 fbd6 	bl	80061b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f004 ff32 	bl	8008878 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	4f54300a 	.word	0x4f54300a
 8003a24:	4f54310a 	.word	0x4f54310a

08003a28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	333c      	adds	r3, #60	; 0x3c
 8003a40:	3304      	adds	r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d90e      	bls.n	8003a7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f004 fee9 	bl	8008854 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d90c      	bls.n	8003aa4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	799b      	ldrb	r3, [r3, #6]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d108      	bne.n	8003aa4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f002 fb88 	bl	80061b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	4f54300a 	.word	0x4f54300a

08003ab4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ad2:	883b      	ldrh	r3, [r7, #0]
 8003ad4:	0419      	lsls	r1, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae0:	e028      	b.n	8003b34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	4413      	add	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e00d      	b.n	8003b12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	3340      	adds	r3, #64	; 0x40
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4413      	add	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3ec      	bcc.n	8003af6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b1c:	883b      	ldrh	r3, [r7, #0]
 8003b1e:	0418      	lsls	r0, r3, #16
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	4302      	orrs	r2, r0
 8003b2c:	3340      	adds	r3, #64	; 0x40
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e267      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d075      	beq.n	8003c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b9a:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4b85      	ldr	r3, [pc, #532]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d112      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4b82      	ldr	r3, [pc, #520]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	4b7e      	ldr	r3, [pc, #504]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x108>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d157      	bne.n	8003c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e242      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x74>
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a75      	ldr	r2, [pc, #468]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x98>
 8003bfa:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6f      	ldr	r2, [pc, #444]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6c      	ldr	r2, [pc, #432]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003c14:	4b69      	ldr	r3, [pc, #420]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a68      	ldr	r2, [pc, #416]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd faea 	bl	800120c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fae6 	bl	800120c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e207      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b5b      	ldr	r3, [pc, #364]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xc0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fad6 	bl	800120c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fad2 	bl	800120c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1f3      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	4b51      	ldr	r3, [pc, #324]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0xe8>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c92:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d11c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003caa:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1c7      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4937      	ldr	r1, [pc, #220]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	e03a      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cec:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <HAL_RCC_OscConfig+0x244>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fd fa8b 	bl	800120c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fd fa87 	bl	800120c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e1a8      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4925      	ldr	r1, [pc, #148]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_RCC_OscConfig+0x244>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd fa6a 	bl	800120c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7fd fa66 	bl	800120c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e187      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d036      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_RCC_OscConfig+0x248>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fd fa4a 	bl	800120c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fd fa46 	bl	800120c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e167      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x200>
 8003d9a:	e01b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_OscConfig+0x248>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fd fa33 	bl	800120c <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	e00e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fd fa2f 	bl	800120c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d907      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e150      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	42470000 	.word	0x42470000
 8003dc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	4b88      	ldr	r3, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ea      	bne.n	8003daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8097 	beq.w	8003f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10f      	bne.n	8003e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	4b7d      	ldr	r3, [pc, #500]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b7a      	ldr	r3, [pc, #488]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	4b77      	ldr	r3, [pc, #476]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d118      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1e:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a73      	ldr	r2, [pc, #460]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd f9ef 	bl	800120c <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e32:	f7fd f9eb 	bl	800120c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e10c      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2ea>
 8003e58:	4b64      	ldr	r3, [pc, #400]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a63      	ldr	r2, [pc, #396]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
 8003e64:	e01c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x324>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x30c>
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a5e      	ldr	r2, [pc, #376]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	4b5c      	ldr	r3, [pc, #368]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a5b      	ldr	r2, [pc, #364]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x324>
 8003e88:	4b58      	ldr	r3, [pc, #352]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a57      	ldr	r2, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	4b55      	ldr	r3, [pc, #340]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a54      	ldr	r2, [pc, #336]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e9a:	f023 0304 	bic.w	r3, r3, #4
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d015      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd f9b0 	bl	800120c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fd f9ac 	bl	800120c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0cb      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	4b49      	ldr	r3, [pc, #292]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ee      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x334>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed4:	f7fd f99a 	bl	800120c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fd f996 	bl	800120c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0b5      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	4b3e      	ldr	r3, [pc, #248]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ee      	bne.n	8003edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f04:	4b39      	ldr	r3, [pc, #228]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	4a38      	ldr	r2, [pc, #224]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a1 	beq.w	800405c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f1a:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d05c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d141      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fd f96a 	bl	800120c <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd f966 	bl	800120c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e087      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	019b      	lsls	r3, r3, #6
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	3b01      	subs	r3, #1
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	491b      	ldr	r1, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd f93f 	bl	800120c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd f93b 	bl	800120c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e05c      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x416>
 8003fb0:	e054      	b.n	800405c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fd f928 	bl	800120c <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fd f924 	bl	800120c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e045      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x444>
 8003fde:	e03d      	b.n	800405c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e038      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x4ec>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d028      	beq.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d121      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d11a      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800402e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004030:	4293      	cmp	r3, r2
 8004032:	d111      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800

0800406c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0cc      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004080:	4b68      	ldr	r3, [pc, #416]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d90c      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b65      	ldr	r3, [pc, #404]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d044      	beq.n	800418c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d119      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d003      	beq.n	800412a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004126:	2b03      	cmp	r3, #3
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412a:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e067      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4934      	ldr	r1, [pc, #208]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800415c:	f7fd f856 	bl	800120c <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	e00a      	b.n	800417a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004164:	f7fd f852 	bl	800120c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e04f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 020c 	and.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	429a      	cmp	r2, r3
 800418a:	d1eb      	bne.n	8004164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d20c      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f821 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1c8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc ffb6 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023c00 	.word	0x40023c00
 8004228:	40023800 	.word	0x40023800
 800422c:	08008e78 	.word	0x08008e78
 8004230:	20000000 	.word	0x20000000
 8004234:	20000004 	.word	0x20000004

08004238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800423c:	b090      	sub	sp, #64	; 0x40
 800423e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004250:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d00d      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x40>
 800425c:	2b08      	cmp	r3, #8
 800425e:	f200 80a1 	bhi.w	80043a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x34>
 8004266:	2b04      	cmp	r3, #4
 8004268:	d003      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x3a>
 800426a:	e09b      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b53      	ldr	r3, [pc, #332]	; (80043bc <HAL_RCC_GetSysClockFreq+0x184>)
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004270:	e09b      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4b53      	ldr	r3, [pc, #332]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004276:	e098      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b4f      	ldr	r3, [pc, #316]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4b4d      	ldr	r3, [pc, #308]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d028      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b4a      	ldr	r3, [pc, #296]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	627a      	str	r2, [r7, #36]	; 0x24
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042a0:	2100      	movs	r1, #0
 80042a2:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042a4:	fb03 f201 	mul.w	r2, r3, r1
 80042a8:	2300      	movs	r3, #0
 80042aa:	fb00 f303 	mul.w	r3, r0, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	4a43      	ldr	r2, [pc, #268]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042b2:	fba0 1202 	umull	r1, r2, r0, r2
 80042b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b8:	460a      	mov	r2, r1
 80042ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80042bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042be:	4413      	add	r3, r2
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c4:	2200      	movs	r2, #0
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	61fa      	str	r2, [r7, #28]
 80042ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042d2:	f7fb ff81 	bl	80001d8 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4613      	mov	r3, r2
 80042dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042de:	e053      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e0:	4b35      	ldr	r3, [pc, #212]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	2200      	movs	r2, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	617a      	str	r2, [r7, #20]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042f2:	f04f 0b00 	mov.w	fp, #0
 80042f6:	4652      	mov	r2, sl
 80042f8:	465b      	mov	r3, fp
 80042fa:	f04f 0000 	mov.w	r0, #0
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	0159      	lsls	r1, r3, #5
 8004304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004308:	0150      	lsls	r0, r2, #5
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	ebb2 080a 	subs.w	r8, r2, sl
 8004312:	eb63 090b 	sbc.w	r9, r3, fp
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004322:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004326:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800432a:	ebb2 0408 	subs.w	r4, r2, r8
 800432e:	eb63 0509 	sbc.w	r5, r3, r9
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	00eb      	lsls	r3, r5, #3
 800433c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004340:	00e2      	lsls	r2, r4, #3
 8004342:	4614      	mov	r4, r2
 8004344:	461d      	mov	r5, r3
 8004346:	eb14 030a 	adds.w	r3, r4, sl
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	eb45 030b 	adc.w	r3, r5, fp
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435e:	4629      	mov	r1, r5
 8004360:	028b      	lsls	r3, r1, #10
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004368:	4621      	mov	r1, r4
 800436a:	028a      	lsls	r2, r1, #10
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	2200      	movs	r2, #0
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	60fa      	str	r2, [r7, #12]
 8004378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800437c:	f7fb ff2c 	bl	80001d8 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	3301      	adds	r3, #1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043a2:	e002      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetSysClockFreq+0x184>)
 80043a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3740      	adds	r7, #64	; 0x40
 80043b0:	46bd      	mov	sp, r7
 80043b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	017d7840 	.word	0x017d7840

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e041      	b.n	8004472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fc fdf0 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f000 fa70 	bl	8004900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d001      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e044      	b.n	800451e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1e      	ldr	r2, [pc, #120]	; (800452c <HAL_TIM_Base_Start_IT+0xb0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x6c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d013      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x6c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <HAL_TIM_Base_Start_IT+0xb4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x6c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a19      	ldr	r2, [pc, #100]	; (8004534 <HAL_TIM_Base_Start_IT+0xb8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x6c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <HAL_TIM_Base_Start_IT+0xbc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x6c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a16      	ldr	r2, [pc, #88]	; (800453c <HAL_TIM_Base_Start_IT+0xc0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d111      	bne.n	800450c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d010      	beq.n	800451c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450a:	e007      	b.n	800451c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40014000 	.word	0x40014000

08004540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0202 	mvn.w	r2, #2
 8004574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f999 	bl	80048c2 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f98b 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f99c 	bl	80048d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d020      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0204 	mvn.w	r2, #4
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f973 	bl	80048c2 <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f965 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f976 	bl	80048d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d020      	beq.n	800463c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01b      	beq.n	800463c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0208 	mvn.w	r2, #8
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2204      	movs	r2, #4
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f94d 	bl	80048c2 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f93f 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f950 	bl	80048d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d020      	beq.n	8004688 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0210 	mvn.w	r2, #16
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2208      	movs	r2, #8
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f927 	bl	80048c2 <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f919 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f92a 	bl	80048d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0201 	mvn.w	r2, #1
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc f9ae 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00c      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fab0 	bl	8004c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8fb 	bl	80048ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0220 	mvn.w	r2, #32
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa82 	bl	8004c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIM_ConfigClockSource+0x1c>
 8004738:	2302      	movs	r3, #2
 800473a:	e0b4      	b.n	80048a6 <HAL_TIM_ConfigClockSource+0x186>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800475a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004774:	d03e      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477a:	f200 8087 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	f000 8086 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x172>
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d87f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b70      	cmp	r3, #112	; 0x70
 800478e:	d01a      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004790:	2b70      	cmp	r3, #112	; 0x70
 8004792:	d87b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d050      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x11a>
 8004798:	2b60      	cmp	r3, #96	; 0x60
 800479a:	d877      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b50      	cmp	r3, #80	; 0x50
 800479e:	d03c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xfa>
 80047a0:	2b50      	cmp	r3, #80	; 0x50
 80047a2:	d873      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d058      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x13a>
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d86f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b30      	cmp	r3, #48	; 0x30
 80047ae:	d064      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047b0:	2b30      	cmp	r3, #48	; 0x30
 80047b2:	d86b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d060      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d867      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05c      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d05a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047c4:	e062      	b.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047d6:	f000 f993 	bl	8004b00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	609a      	str	r2, [r3, #8]
      break;
 80047f2:	e04f      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	f000 f97c 	bl	8004b00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004816:	609a      	str	r2, [r3, #8]
      break;
 8004818:	e03c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	461a      	mov	r2, r3
 8004828:	f000 f8f0 	bl	8004a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2150      	movs	r1, #80	; 0x50
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f949 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 8004838:	e02c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f90f 	bl	8004a6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2160      	movs	r1, #96	; 0x60
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f939 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 8004858:	e01c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004866:	461a      	mov	r2, r3
 8004868:	f000 f8d0 	bl	8004a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2140      	movs	r1, #64	; 0x40
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f929 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 8004878:	e00c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f000 f920 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 800488a:	e003      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e000      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a37      	ldr	r2, [pc, #220]	; (80049f0 <TIM_Base_SetConfig+0xf0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00f      	beq.n	8004938 <TIM_Base_SetConfig+0x38>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x38>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a34      	ldr	r2, [pc, #208]	; (80049f4 <TIM_Base_SetConfig+0xf4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x38>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a33      	ldr	r2, [pc, #204]	; (80049f8 <TIM_Base_SetConfig+0xf8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x38>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a32      	ldr	r2, [pc, #200]	; (80049fc <TIM_Base_SetConfig+0xfc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a28      	ldr	r2, [pc, #160]	; (80049f0 <TIM_Base_SetConfig+0xf0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01b      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d017      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a25      	ldr	r2, [pc, #148]	; (80049f4 <TIM_Base_SetConfig+0xf4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <TIM_Base_SetConfig+0xf8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00f      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a23      	ldr	r2, [pc, #140]	; (80049fc <TIM_Base_SetConfig+0xfc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00b      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <TIM_Base_SetConfig+0x100>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <TIM_Base_SetConfig+0x104>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <TIM_Base_SetConfig+0x108>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d108      	bne.n	800499c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <TIM_Base_SetConfig+0xf0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d103      	bne.n	80049ca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f043 0204 	orr.w	r2, r3, #4
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0201 	bic.w	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f023 030a 	bic.w	r3, r3, #10
 8004a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b087      	sub	sp, #28
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f023 0210 	bic.w	r2, r3, #16
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f043 0307 	orr.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	609a      	str	r2, [r3, #8]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e050      	b.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d018      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba4:	d013      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00e      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d10c      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40000c00 	.word	0x40000c00
 8004c18:	40014000 	.word	0x40014000

08004c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c44:	b084      	sub	sp, #16
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	f107 001c 	add.w	r0, r7, #28
 8004c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d123      	bne.n	8004ca6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d105      	bne.n	8004c9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 fae8 	bl	8006270 <USB_CoreReset>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	73fb      	strb	r3, [r7, #15]
 8004ca4:	e01b      	b.n	8004cde <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 fadc 	bl	8006270 <USB_CoreReset>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cbc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
 8004cd0:	e005      	b.n	8004cde <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cde:	7fbb      	ldrb	r3, [r7, #30]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10b      	bne.n	8004cfc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f043 0206 	orr.w	r2, r3, #6
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d08:	b004      	add	sp, #16
 8004d0a:	4770      	bx	lr

08004d0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d165      	bne.n	8004dec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4a41      	ldr	r2, [pc, #260]	; (8004e28 <USB_SetTurnaroundTime+0x11c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d906      	bls.n	8004d36 <USB_SetTurnaroundTime+0x2a>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4a40      	ldr	r2, [pc, #256]	; (8004e2c <USB_SetTurnaroundTime+0x120>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d202      	bcs.n	8004d36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d30:	230f      	movs	r3, #15
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e062      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4a3c      	ldr	r2, [pc, #240]	; (8004e2c <USB_SetTurnaroundTime+0x120>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d306      	bcc.n	8004d4c <USB_SetTurnaroundTime+0x40>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4a3b      	ldr	r2, [pc, #236]	; (8004e30 <USB_SetTurnaroundTime+0x124>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d202      	bcs.n	8004d4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d46:	230e      	movs	r3, #14
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e057      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4a38      	ldr	r2, [pc, #224]	; (8004e30 <USB_SetTurnaroundTime+0x124>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d306      	bcc.n	8004d62 <USB_SetTurnaroundTime+0x56>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a37      	ldr	r2, [pc, #220]	; (8004e34 <USB_SetTurnaroundTime+0x128>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d202      	bcs.n	8004d62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d5c:	230d      	movs	r3, #13
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e04c      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4a33      	ldr	r2, [pc, #204]	; (8004e34 <USB_SetTurnaroundTime+0x128>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d306      	bcc.n	8004d78 <USB_SetTurnaroundTime+0x6c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a32      	ldr	r2, [pc, #200]	; (8004e38 <USB_SetTurnaroundTime+0x12c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d802      	bhi.n	8004d78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d72:	230c      	movs	r3, #12
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e041      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <USB_SetTurnaroundTime+0x12c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d906      	bls.n	8004d8e <USB_SetTurnaroundTime+0x82>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a2e      	ldr	r2, [pc, #184]	; (8004e3c <USB_SetTurnaroundTime+0x130>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d802      	bhi.n	8004d8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d88:	230b      	movs	r3, #11
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e036      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <USB_SetTurnaroundTime+0x130>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d906      	bls.n	8004da4 <USB_SetTurnaroundTime+0x98>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <USB_SetTurnaroundTime+0x134>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d802      	bhi.n	8004da4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d9e:	230a      	movs	r3, #10
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e02b      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <USB_SetTurnaroundTime+0x134>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d906      	bls.n	8004dba <USB_SetTurnaroundTime+0xae>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <USB_SetTurnaroundTime+0x138>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d202      	bcs.n	8004dba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004db4:	2309      	movs	r3, #9
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e020      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <USB_SetTurnaroundTime+0x138>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d306      	bcc.n	8004dd0 <USB_SetTurnaroundTime+0xc4>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a20      	ldr	r2, [pc, #128]	; (8004e48 <USB_SetTurnaroundTime+0x13c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d802      	bhi.n	8004dd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004dca:	2308      	movs	r3, #8
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e015      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <USB_SetTurnaroundTime+0x13c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d906      	bls.n	8004de6 <USB_SetTurnaroundTime+0xda>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a1c      	ldr	r2, [pc, #112]	; (8004e4c <USB_SetTurnaroundTime+0x140>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d202      	bcs.n	8004de6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004de0:	2307      	movs	r3, #7
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e00a      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004de6:	2306      	movs	r3, #6
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e007      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004df2:	2309      	movs	r3, #9
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e001      	b.n	8004dfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004df8:	2309      	movs	r3, #9
 8004dfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	029b      	lsls	r3, r3, #10
 8004e10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	00d8acbf 	.word	0x00d8acbf
 8004e2c:	00e4e1c0 	.word	0x00e4e1c0
 8004e30:	00f42400 	.word	0x00f42400
 8004e34:	01067380 	.word	0x01067380
 8004e38:	011a499f 	.word	0x011a499f
 8004e3c:	01312cff 	.word	0x01312cff
 8004e40:	014ca43f 	.word	0x014ca43f
 8004e44:	016e3600 	.word	0x016e3600
 8004e48:	01a6ab1f 	.word	0x01a6ab1f
 8004e4c:	01e84800 	.word	0x01e84800

08004e50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f043 0201 	orr.w	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d115      	bne.n	8004ee2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ec2:	200a      	movs	r0, #10
 8004ec4:	f7fc f9ae 	bl	8001224 <HAL_Delay>
      ms += 10U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	330a      	adds	r3, #10
 8004ecc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 f93f 	bl	8006152 <USB_GetMode>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d01e      	beq.n	8004f18 <USB_SetCurrentMode+0x84>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2bc7      	cmp	r3, #199	; 0xc7
 8004ede:	d9f0      	bls.n	8004ec2 <USB_SetCurrentMode+0x2e>
 8004ee0:	e01a      	b.n	8004f18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d115      	bne.n	8004f14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ef4:	200a      	movs	r0, #10
 8004ef6:	f7fc f995 	bl	8001224 <HAL_Delay>
      ms += 10U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	330a      	adds	r3, #10
 8004efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f926 	bl	8006152 <USB_GetMode>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <USB_SetCurrentMode+0x84>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2bc7      	cmp	r3, #199	; 0xc7
 8004f10:	d9f0      	bls.n	8004ef4 <USB_SetCurrentMode+0x60>
 8004f12:	e001      	b.n	8004f18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e005      	b.n	8004f24 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2bc8      	cmp	r3, #200	; 0xc8
 8004f1c:	d101      	bne.n	8004f22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e009      	b.n	8004f60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3340      	adds	r3, #64	; 0x40
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	2200      	movs	r2, #0
 8004f58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b0e      	cmp	r3, #14
 8004f64:	d9f2      	bls.n	8004f4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11c      	bne.n	8004fa8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f7c:	f043 0302 	orr.w	r3, r3, #2
 8004f80:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8004fa6:	e00b      	b.n	8004fc0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fcc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d10d      	bne.n	8004ff0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f968 	bl	80052b4 <USB_SetDevSpeed>
 8004fe4:	e008      	b.n	8004ff8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f963 	bl	80052b4 <USB_SetDevSpeed>
 8004fee:	e003      	b.n	8004ff8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ff0:	2103      	movs	r1, #3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f95e 	bl	80052b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ff8:	2110      	movs	r1, #16
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f8fa 	bl	80051f4 <USB_FlushTxFifo>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f924 	bl	8005258 <USB_FlushRxFifo>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005020:	461a      	mov	r2, r3
 8005022:	2300      	movs	r3, #0
 8005024:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502c:	461a      	mov	r2, r3
 800502e:	2300      	movs	r3, #0
 8005030:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e043      	b.n	80050cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800505a:	d118      	bne.n	800508e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	461a      	mov	r2, r3
 8005070:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e013      	b.n	80050a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	461a      	mov	r2, r3
 8005086:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e008      	b.n	80050a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	461a      	mov	r2, r3
 800509c:	2300      	movs	r3, #0
 800509e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	461a      	mov	r2, r3
 80050c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3301      	adds	r3, #1
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050d0:	461a      	mov	r2, r3
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d3b5      	bcc.n	8005044 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	e043      	b.n	8005166 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050f4:	d118      	bne.n	8005128 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	461a      	mov	r2, r3
 800510a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e013      	b.n	800513a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	461a      	mov	r2, r3
 8005120:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e008      	b.n	800513a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	461a      	mov	r2, r3
 8005136:	2300      	movs	r3, #0
 8005138:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	2300      	movs	r3, #0
 800514a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	461a      	mov	r2, r3
 800515a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800515e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	3301      	adds	r3, #1
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800516a:	461a      	mov	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4293      	cmp	r3, r2
 8005170:	d3b5      	bcc.n	80050de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005184:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005192:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f043 0210 	orr.w	r2, r3, #16
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <USB_DevInit+0x2c4>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f043 0208 	orr.w	r2, r3, #8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ec:	b004      	add	sp, #16
 80051ee:	4770      	bx	lr
 80051f0:	803c3800 	.word	0x803c3800

080051f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800520e:	d901      	bls.n	8005214 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e01b      	b.n	800524c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	daf2      	bge.n	8005202 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	019b      	lsls	r3, r3, #6
 8005224:	f043 0220 	orr.w	r2, r3, #32
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005238:	d901      	bls.n	800523e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e006      	b.n	800524c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b20      	cmp	r3, #32
 8005248:	d0f0      	beq.n	800522c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005270:	d901      	bls.n	8005276 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e018      	b.n	80052a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	daf2      	bge.n	8005264 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2210      	movs	r2, #16
 8005286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005294:	d901      	bls.n	800529a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e006      	b.n	80052a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d0f0      	beq.n	8005288 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d4:	4313      	orrs	r3, r2
 80052d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0306 	and.w	r3, r3, #6
 80052fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005306:	2300      	movs	r3, #0
 8005308:	75fb      	strb	r3, [r7, #23]
 800530a:	e00a      	b.n	8005322 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d002      	beq.n	8005318 <USB_GetDevSpeed+0x32>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b06      	cmp	r3, #6
 8005316:	d102      	bne.n	800531e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005318:	2302      	movs	r3, #2
 800531a:	75fb      	strb	r3, [r7, #23]
 800531c:	e001      	b.n	8005322 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800531e:	230f      	movs	r3, #15
 8005320:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005322:	7dfb      	ldrb	r3, [r7, #23]
}
 8005324:	4618      	mov	r0, r3
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d13a      	bne.n	80053c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	2101      	movs	r1, #1
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	b29b      	uxth	r3, r3
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800536a:	4313      	orrs	r3, r2
 800536c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d155      	bne.n	8005430 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	791b      	ldrb	r3, [r3, #4]
 800539e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	059b      	lsls	r3, r3, #22
 80053a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053a8:	4313      	orrs	r3, r2
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	e036      	b.n	8005430 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	68f9      	ldr	r1, [r7, #12]
 80053dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d11a      	bne.n	8005430 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	791b      	ldrb	r3, [r3, #4]
 8005414:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005416:	430b      	orrs	r3, r1
 8005418:	4313      	orrs	r3, r2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d161      	bne.n	8005520 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800546e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005472:	d11f      	bne.n	80054b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005492:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d4:	4013      	ands	r3, r2
 80054d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	2101      	movs	r1, #1
 80054ea:	fa01 f303 	lsl.w	r3, r1, r3
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f8:	4013      	ands	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	0159      	lsls	r1, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	440b      	add	r3, r1
 8005512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005516:	4619      	mov	r1, r3
 8005518:	4b35      	ldr	r3, [pc, #212]	; (80055f0 <USB_DeactivateEndpoint+0x1b0>)
 800551a:	4013      	ands	r3, r2
 800551c:	600b      	str	r3, [r1, #0]
 800551e:	e060      	b.n	80055e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005536:	d11f      	bne.n	8005578 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005552:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005556:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005576:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	2101      	movs	r1, #1
 800558a:	fa01 f303 	lsl.w	r3, r1, r3
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	43db      	mvns	r3, r3
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005598:	4013      	ands	r3, r2
 800559a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	2101      	movs	r1, #1
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	43db      	mvns	r3, r3
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055bc:	4013      	ands	r3, r2
 80055be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0159      	lsls	r1, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	440b      	add	r3, r1
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	4619      	mov	r1, r3
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <USB_DeactivateEndpoint+0x1b4>)
 80055de:	4013      	ands	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	ec337800 	.word	0xec337800
 80055f4:	eff37800 	.word	0xeff37800

080055f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	4613      	mov	r3, r2
 8005604:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 817f 	bne.w	8005918 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d132      	bne.n	8005688 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005640:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005680:	0cdb      	lsrs	r3, r3, #19
 8005682:	04db      	lsls	r3, r3, #19
 8005684:	6113      	str	r3, [r2, #16]
 8005686:	e097      	b.n	80057b8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a2:	0cdb      	lsrs	r3, r3, #19
 80056a4:	04db      	lsls	r3, r3, #19
 80056a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11a      	bne.n	8005708 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d903      	bls.n	80056e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005704:	6113      	str	r3, [r2, #16]
 8005706:	e044      	b.n	8005792 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4413      	add	r3, r2
 8005712:	1e5a      	subs	r2, r3, #1
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	8afb      	ldrh	r3, [r7, #22]
 800572e:	04d9      	lsls	r1, r3, #19
 8005730:	4ba4      	ldr	r3, [pc, #656]	; (80059c4 <USB_EPStartXfer+0x3cc>)
 8005732:	400b      	ands	r3, r1
 8005734:	69b9      	ldr	r1, [r7, #24]
 8005736:	0148      	lsls	r0, r1, #5
 8005738:	69f9      	ldr	r1, [r7, #28]
 800573a:	4401      	add	r1, r0
 800573c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	791b      	ldrb	r3, [r3, #4]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d122      	bne.n	8005792 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005766:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800576a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	8afb      	ldrh	r3, [r7, #22]
 800577c:	075b      	lsls	r3, r3, #29
 800577e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	0148      	lsls	r0, r1, #5
 8005786:	69f9      	ldr	r1, [r7, #28]
 8005788:	4401      	add	r1, r0
 800578a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800578e:	4313      	orrs	r3, r2
 8005790:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a8:	69b9      	ldr	r1, [r7, #24]
 80057aa:	0148      	lsls	r0, r1, #5
 80057ac:	69f9      	ldr	r1, [r7, #28]
 80057ae:	4401      	add	r1, r0
 80057b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057b4:	4313      	orrs	r3, r2
 80057b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d14b      	bne.n	8005856 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	461a      	mov	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	791b      	ldrb	r3, [r3, #4]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d128      	bne.n	8005834 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d110      	bne.n	8005814 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e00f      	b.n	8005834 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005832:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	e166      	b.n	8005b24 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005874:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	791b      	ldrb	r3, [r3, #4]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d015      	beq.n	80058aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 814e 	beq.w	8005b24 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	2101      	movs	r1, #1
 800589a:	fa01 f303 	lsl.w	r3, r1, r3
 800589e:	69f9      	ldr	r1, [r7, #28]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a4:	4313      	orrs	r3, r2
 80058a6:	634b      	str	r3, [r1, #52]	; 0x34
 80058a8:	e13c      	b.n	8005b24 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d110      	bne.n	80058dc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	e00f      	b.n	80058fc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	68d9      	ldr	r1, [r3, #12]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	b298      	uxth	r0, r3
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	4603      	mov	r3, r0
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f9b9 	bl	8005c88 <USB_WritePacket>
 8005916:	e105      	b.n	8005b24 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005932:	0cdb      	lsrs	r3, r3, #19
 8005934:	04db      	lsls	r3, r3, #19
 8005936:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005952:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005956:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800595a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d132      	bne.n	80059c8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005990:	69b9      	ldr	r1, [r7, #24]
 8005992:	0148      	lsls	r0, r1, #5
 8005994:	69f9      	ldr	r1, [r7, #28]
 8005996:	4401      	add	r1, r0
 8005998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800599c:	4313      	orrs	r3, r2
 800599e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059be:	6113      	str	r3, [r2, #16]
 80059c0:	e062      	b.n	8005a88 <USB_EPStartXfer+0x490>
 80059c2:	bf00      	nop
 80059c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d123      	bne.n	8005a18 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e6:	69b9      	ldr	r1, [r7, #24]
 80059e8:	0148      	lsls	r0, r1, #5
 80059ea:	69f9      	ldr	r1, [r7, #28]
 80059ec:	4401      	add	r1, r0
 80059ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059f2:	4313      	orrs	r3, r2
 80059f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a14:	6113      	str	r3, [r2, #16]
 8005a16:	e037      	b.n	8005a88 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	1e5a      	subs	r2, r3, #1
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	8afa      	ldrh	r2, [r7, #22]
 8005a34:	fb03 f202 	mul.w	r2, r3, r2
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	8afb      	ldrh	r3, [r7, #22]
 8005a4c:	04d9      	lsls	r1, r3, #19
 8005a4e:	4b38      	ldr	r3, [pc, #224]	; (8005b30 <USB_EPStartXfer+0x538>)
 8005a50:	400b      	ands	r3, r1
 8005a52:	69b9      	ldr	r1, [r7, #24]
 8005a54:	0148      	lsls	r0, r1, #5
 8005a56:	69f9      	ldr	r1, [r7, #28]
 8005a58:	4401      	add	r1, r0
 8005a5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	0148      	lsls	r0, r1, #5
 8005a7c:	69f9      	ldr	r1, [r7, #28]
 8005a7e:	4401      	add	r1, r0
 8005a80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a84:	4313      	orrs	r3, r2
 8005a86:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d10d      	bne.n	8005aaa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68d9      	ldr	r1, [r3, #12]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	791b      	ldrb	r3, [r3, #4]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d128      	bne.n	8005b04 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d110      	bne.n	8005ae4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e00f      	b.n	8005b04 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	1ff80000 	.word	0x1ff80000

08005b34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d14a      	bne.n	8005be8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6a:	f040 8086 	bne.w	8005c7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d902      	bls.n	8005bcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bca:	e056      	b.n	8005c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be4:	d0e7      	beq.n	8005bb6 <USB_EPStopXfer+0x82>
 8005be6:	e048      	b.n	8005c7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c00:	d13b      	bne.n	8005c7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d902      	bls.n	8005c60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c5e:	e00c      	b.n	8005c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c78:	d0e7      	beq.n	8005c4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b089      	sub	sp, #36	; 0x24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	4611      	mov	r1, r2
 8005c94:	461a      	mov	r2, r3
 8005c96:	460b      	mov	r3, r1
 8005c98:	71fb      	strb	r3, [r7, #7]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d123      	bne.n	8005cf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cae:	88bb      	ldrh	r3, [r7, #4]
 8005cb0:	3303      	adds	r3, #3
 8005cb2:	089b      	lsrs	r3, r3, #2
 8005cb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e018      	b.n	8005cee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	031a      	lsls	r2, r3, #12
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc8:	461a      	mov	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d3e2      	bcc.n	8005cbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3724      	adds	r7, #36	; 0x24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b08b      	sub	sp, #44	; 0x2c
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	e014      	b.n	8005d5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	3301      	adds	r3, #1
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	3301      	adds	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	3301      	adds	r3, #1
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	3301      	adds	r3, #1
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3e6      	bcc.n	8005d30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d62:	8bfb      	ldrh	r3, [r7, #30]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01e      	beq.n	8005da6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d72:	461a      	mov	r2, r3
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	3301      	adds	r3, #1
 8005d92:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	3301      	adds	r3, #1
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d9a:	8bfb      	ldrh	r3, [r7, #30]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005da0:	8bfb      	ldrh	r3, [r7, #30]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1ea      	bne.n	8005d7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	372c      	adds	r7, #44	; 0x2c
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d12c      	bne.n	8005e2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db12      	blt.n	8005e08 <USB_EPSetStall+0x54>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e02b      	b.n	8005e82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db12      	blt.n	8005e62 <USB_EPSetStall+0xae>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d128      	bne.n	8005efe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	791b      	ldrb	r3, [r3, #4]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d003      	beq.n	8005edc <USB_EPClearStall+0x4c>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	791b      	ldrb	r3, [r3, #4]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d138      	bne.n	8005f4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e027      	b.n	8005f4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	791b      	ldrb	r3, [r3, #4]
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d003      	beq.n	8005f2e <USB_EPClearStall+0x9e>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	791b      	ldrb	r3, [r3, #4]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d10f      	bne.n	8005f4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd6:	f023 0302 	bic.w	r3, r3, #2
 8005fda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006004:	f023 0303 	bic.w	r3, r3, #3
 8006008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	0c1b      	lsrs	r3, r3, #16
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	b29b      	uxth	r3, r3
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060e8:	68bb      	ldr	r3, [r7, #8]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006118:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	01db      	lsls	r3, r3, #7
 8006128:	b2db      	uxtb	r3, r3
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4013      	ands	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006144:	68bb      	ldr	r3, [r7, #8]
}
 8006146:	4618      	mov	r0, r3
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0301 	and.w	r3, r3, #1
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006188:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800618c:	f023 0307 	bic.w	r3, r3, #7
 8006190:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	460b      	mov	r3, r1
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	333c      	adds	r3, #60	; 0x3c
 80061ca:	3304      	adds	r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4a26      	ldr	r2, [pc, #152]	; (800626c <USB_EP0_OutStart+0xb8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d90a      	bls.n	80061ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e8:	d101      	bne.n	80061ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e037      	b.n	800625e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800620c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621c:	f043 0318 	orr.w	r3, r3, #24
 8006220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006230:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006234:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d10f      	bne.n	800625c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800625a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	4f54300a 	.word	0x4f54300a

08006270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006288:	d901      	bls.n	800628e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e022      	b.n	80062d4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	daf2      	bge.n	800627c <USB_CoreReset+0xc>

  count = 10U;
 8006296:	230a      	movs	r3, #10
 8006298:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800629a:	e002      	b.n	80062a2 <USB_CoreReset+0x32>
  {
    count--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f9      	bne.n	800629c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f043 0201 	orr.w	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062c0:	d901      	bls.n	80062c6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e006      	b.n	80062d4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d0f0      	beq.n	80062b4 <USB_CoreReset+0x44>

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062f0:	f002 fd22 	bl	8008d38 <USBD_static_malloc>
 80062f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	32b0      	adds	r2, #176	; 0xb0
 8006306:	2100      	movs	r1, #0
 8006308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800630c:	2302      	movs	r3, #2
 800630e:	e0d4      	b.n	80064ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006310:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006314:	2100      	movs	r1, #0
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f002 fd52 	bl	8008dc0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	32b0      	adds	r2, #176	; 0xb0
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	32b0      	adds	r2, #176	; 0xb0
 8006336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7c1b      	ldrb	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d138      	bne.n	80063ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006348:	4b5e      	ldr	r3, [pc, #376]	; (80064c4 <USBD_CDC_Init+0x1e4>)
 800634a:	7819      	ldrb	r1, [r3, #0]
 800634c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006350:	2202      	movs	r2, #2
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f002 fbcd 	bl	8008af2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006358:	4b5a      	ldr	r3, [pc, #360]	; (80064c4 <USBD_CDC_Init+0x1e4>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f003 020f 	and.w	r2, r3, #15
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	3323      	adds	r3, #35	; 0x23
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006372:	4b55      	ldr	r3, [pc, #340]	; (80064c8 <USBD_CDC_Init+0x1e8>)
 8006374:	7819      	ldrb	r1, [r3, #0]
 8006376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800637a:	2202      	movs	r2, #2
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f002 fbb8 	bl	8008af2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006382:	4b51      	ldr	r3, [pc, #324]	; (80064c8 <USBD_CDC_Init+0x1e8>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 020f 	and.w	r2, r3, #15
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	f203 1363 	addw	r3, r3, #355	; 0x163
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800639e:	4b4b      	ldr	r3, [pc, #300]	; (80064cc <USBD_CDC_Init+0x1ec>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	f003 020f 	and.w	r2, r3, #15
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	331c      	adds	r3, #28
 80063b4:	2210      	movs	r2, #16
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	e035      	b.n	8006426 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063ba:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <USBD_CDC_Init+0x1e4>)
 80063bc:	7819      	ldrb	r1, [r3, #0]
 80063be:	2340      	movs	r3, #64	; 0x40
 80063c0:	2202      	movs	r2, #2
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f002 fb95 	bl	8008af2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063c8:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <USBD_CDC_Init+0x1e4>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f003 020f 	and.w	r2, r3, #15
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	3323      	adds	r3, #35	; 0x23
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063e2:	4b39      	ldr	r3, [pc, #228]	; (80064c8 <USBD_CDC_Init+0x1e8>)
 80063e4:	7819      	ldrb	r1, [r3, #0]
 80063e6:	2340      	movs	r3, #64	; 0x40
 80063e8:	2202      	movs	r2, #2
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f002 fb81 	bl	8008af2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063f0:	4b35      	ldr	r3, [pc, #212]	; (80064c8 <USBD_CDC_Init+0x1e8>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	f003 020f 	and.w	r2, r3, #15
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800640c:	4b2f      	ldr	r3, [pc, #188]	; (80064cc <USBD_CDC_Init+0x1ec>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	f003 020f 	and.w	r2, r3, #15
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	331c      	adds	r3, #28
 8006422:	2210      	movs	r2, #16
 8006424:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006426:	4b29      	ldr	r3, [pc, #164]	; (80064cc <USBD_CDC_Init+0x1ec>)
 8006428:	7819      	ldrb	r1, [r3, #0]
 800642a:	2308      	movs	r3, #8
 800642c:	2203      	movs	r2, #3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f002 fb5f 	bl	8008af2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006434:	4b25      	ldr	r3, [pc, #148]	; (80064cc <USBD_CDC_Init+0x1ec>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 020f 	and.w	r2, r3, #15
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	3323      	adds	r3, #35	; 0x23
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	33b0      	adds	r3, #176	; 0xb0
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006484:	2302      	movs	r3, #2
 8006486:	e018      	b.n	80064ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	7c1b      	ldrb	r3, [r3, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006490:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <USBD_CDC_Init+0x1e8>)
 8006492:	7819      	ldrb	r1, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800649a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f002 fc16 	bl	8008cd0 <USBD_LL_PrepareReceive>
 80064a4:	e008      	b.n	80064b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064a6:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <USBD_CDC_Init+0x1e8>)
 80064a8:	7819      	ldrb	r1, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064b0:	2340      	movs	r3, #64	; 0x40
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 fc0c 	bl	8008cd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000093 	.word	0x20000093
 80064c8:	20000094 	.word	0x20000094
 80064cc:	20000095 	.word	0x20000095

080064d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80064dc:	4b3a      	ldr	r3, [pc, #232]	; (80065c8 <USBD_CDC_DeInit+0xf8>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f002 fb2b 	bl	8008b3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80064e8:	4b37      	ldr	r3, [pc, #220]	; (80065c8 <USBD_CDC_DeInit+0xf8>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f003 020f 	and.w	r2, r3, #15
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	3323      	adds	r3, #35	; 0x23
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006502:	4b32      	ldr	r3, [pc, #200]	; (80065cc <USBD_CDC_DeInit+0xfc>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f002 fb18 	bl	8008b3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800650e:	4b2f      	ldr	r3, [pc, #188]	; (80065cc <USBD_CDC_DeInit+0xfc>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f003 020f 	and.w	r2, r3, #15
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800652a:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <USBD_CDC_DeInit+0x100>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f002 fb04 	bl	8008b3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006536:	4b26      	ldr	r3, [pc, #152]	; (80065d0 <USBD_CDC_DeInit+0x100>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f003 020f 	and.w	r2, r3, #15
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	3323      	adds	r3, #35	; 0x23
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006550:	4b1f      	ldr	r3, [pc, #124]	; (80065d0 <USBD_CDC_DeInit+0x100>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f003 020f 	and.w	r2, r3, #15
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	331c      	adds	r3, #28
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	32b0      	adds	r2, #176	; 0xb0
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01f      	beq.n	80065bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	33b0      	adds	r3, #176	; 0xb0
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	32b0      	adds	r2, #176	; 0xb0
 800659a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659e:	4618      	mov	r0, r3
 80065a0:	f002 fbd8 	bl	8008d54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	32b0      	adds	r2, #176	; 0xb0
 80065ae:	2100      	movs	r1, #0
 80065b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000093 	.word	0x20000093
 80065cc:	20000094 	.word	0x20000094
 80065d0:	20000095 	.word	0x20000095

080065d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	32b0      	adds	r2, #176	; 0xb0
 80065e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	e0bf      	b.n	8006784 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800660c:	2b00      	cmp	r3, #0
 800660e:	d050      	beq.n	80066b2 <USBD_CDC_Setup+0xde>
 8006610:	2b20      	cmp	r3, #32
 8006612:	f040 80af 	bne.w	8006774 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	88db      	ldrh	r3, [r3, #6]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d03a      	beq.n	8006694 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b25b      	sxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	da1b      	bge.n	8006660 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	33b0      	adds	r3, #176	; 0xb0
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800663e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	88d2      	ldrh	r2, [r2, #6]
 8006644:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	88db      	ldrh	r3, [r3, #6]
 800664a:	2b07      	cmp	r3, #7
 800664c:	bf28      	it	cs
 800664e:	2307      	movcs	r3, #7
 8006650:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	89fa      	ldrh	r2, [r7, #14]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fdab 	bl	80081b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800665e:	e090      	b.n	8006782 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	785a      	ldrb	r2, [r3, #1]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	88db      	ldrh	r3, [r3, #6]
 800666e:	2b3f      	cmp	r3, #63	; 0x3f
 8006670:	d803      	bhi.n	800667a <USBD_CDC_Setup+0xa6>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	88db      	ldrh	r3, [r3, #6]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	e000      	b.n	800667c <USBD_CDC_Setup+0xa8>
 800667a:	2240      	movs	r2, #64	; 0x40
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006682:	6939      	ldr	r1, [r7, #16]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800668a:	461a      	mov	r2, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fdc0 	bl	8008212 <USBD_CtlPrepareRx>
      break;
 8006692:	e076      	b.n	8006782 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	33b0      	adds	r3, #176	; 0xb0
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	7850      	ldrb	r0, [r2, #1]
 80066aa:	2200      	movs	r2, #0
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	4798      	blx	r3
      break;
 80066b0:	e067      	b.n	8006782 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b0b      	cmp	r3, #11
 80066b8:	d851      	bhi.n	800675e <USBD_CDC_Setup+0x18a>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <USBD_CDC_Setup+0xec>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066f1 	.word	0x080066f1
 80066c4:	0800676d 	.word	0x0800676d
 80066c8:	0800675f 	.word	0x0800675f
 80066cc:	0800675f 	.word	0x0800675f
 80066d0:	0800675f 	.word	0x0800675f
 80066d4:	0800675f 	.word	0x0800675f
 80066d8:	0800675f 	.word	0x0800675f
 80066dc:	0800675f 	.word	0x0800675f
 80066e0:	0800675f 	.word	0x0800675f
 80066e4:	0800675f 	.word	0x0800675f
 80066e8:	0800671b 	.word	0x0800671b
 80066ec:	08006745 	.word	0x08006745
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d107      	bne.n	800670c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066fc:	f107 030a 	add.w	r3, r7, #10
 8006700:	2202      	movs	r2, #2
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 fd55 	bl	80081b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800670a:	e032      	b.n	8006772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 fcd3 	bl	80080ba <USBD_CtlError>
            ret = USBD_FAIL;
 8006714:	2303      	movs	r3, #3
 8006716:	75fb      	strb	r3, [r7, #23]
          break;
 8006718:	e02b      	b.n	8006772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b03      	cmp	r3, #3
 8006724:	d107      	bne.n	8006736 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006726:	f107 030d 	add.w	r3, r7, #13
 800672a:	2201      	movs	r2, #1
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fd40 	bl	80081b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006734:	e01d      	b.n	8006772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fcbe 	bl	80080ba <USBD_CtlError>
            ret = USBD_FAIL;
 800673e:	2303      	movs	r3, #3
 8006740:	75fb      	strb	r3, [r7, #23]
          break;
 8006742:	e016      	b.n	8006772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b03      	cmp	r3, #3
 800674e:	d00f      	beq.n	8006770 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 fcb1 	bl	80080ba <USBD_CtlError>
            ret = USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800675c:	e008      	b.n	8006770 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fcaa 	bl	80080ba <USBD_CtlError>
          ret = USBD_FAIL;
 8006766:	2303      	movs	r3, #3
 8006768:	75fb      	strb	r3, [r7, #23]
          break;
 800676a:	e002      	b.n	8006772 <USBD_CDC_Setup+0x19e>
          break;
 800676c:	bf00      	nop
 800676e:	e008      	b.n	8006782 <USBD_CDC_Setup+0x1ae>
          break;
 8006770:	bf00      	nop
      }
      break;
 8006772:	e006      	b.n	8006782 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 fc9f 	bl	80080ba <USBD_CtlError>
      ret = USBD_FAIL;
 800677c:	2303      	movs	r3, #3
 800677e:	75fb      	strb	r3, [r7, #23]
      break;
 8006780:	bf00      	nop
  }

  return (uint8_t)ret;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800679e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	32b0      	adds	r2, #176	; 0xb0
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e065      	b.n	8006882 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	32b0      	adds	r2, #176	; 0xb0
 80067c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f003 020f 	and.w	r2, r3, #15
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	3314      	adds	r3, #20
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d02f      	beq.n	8006840 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	f003 020f 	and.w	r2, r3, #15
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	3314      	adds	r3, #20
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	f003 010f 	and.w	r1, r3, #15
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	460b      	mov	r3, r1
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	440b      	add	r3, r1
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4403      	add	r3, r0
 8006808:	331c      	adds	r3, #28
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006816:	2b00      	cmp	r3, #0
 8006818:	d112      	bne.n	8006840 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	f003 020f 	and.w	r2, r3, #15
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	3314      	adds	r3, #20
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006832:	78f9      	ldrb	r1, [r7, #3]
 8006834:	2300      	movs	r3, #0
 8006836:	2200      	movs	r2, #0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f002 fa28 	bl	8008c8e <USBD_LL_Transmit>
 800683e:	e01f      	b.n	8006880 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	33b0      	adds	r3, #176	; 0xb0
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d010      	beq.n	8006880 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	33b0      	adds	r3, #176	; 0xb0
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	32b0      	adds	r2, #176	; 0xb0
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	32b0      	adds	r2, #176	; 0xb0
 80068b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e01a      	b.n	80068f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f002 fa26 	bl	8008d12 <USBD_LL_GetRxDataSize>
 80068c6:	4602      	mov	r2, r0
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	33b0      	adds	r3, #176	; 0xb0
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068ec:	4611      	mov	r1, r2
 80068ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	32b0      	adds	r2, #176	; 0xb0
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	e025      	b.n	8006968 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	33b0      	adds	r3, #176	; 0xb0
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01a      	beq.n	8006966 <USBD_CDC_EP0_RxReady+0x6c>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006936:	2bff      	cmp	r3, #255	; 0xff
 8006938:	d015      	beq.n	8006966 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	33b0      	adds	r3, #176	; 0xb0
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006952:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800695a:	b292      	uxth	r2, r2
 800695c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006978:	2182      	movs	r1, #130	; 0x82
 800697a:	4818      	ldr	r0, [pc, #96]	; (80069dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800697c:	f000 fd62 	bl	8007444 <USBD_GetEpDesc>
 8006980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006982:	2101      	movs	r1, #1
 8006984:	4815      	ldr	r0, [pc, #84]	; (80069dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006986:	f000 fd5d 	bl	8007444 <USBD_GetEpDesc>
 800698a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800698c:	2181      	movs	r1, #129	; 0x81
 800698e:	4813      	ldr	r0, [pc, #76]	; (80069dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006990:	f000 fd58 	bl	8007444 <USBD_GetEpDesc>
 8006994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2210      	movs	r2, #16
 80069a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d006      	beq.n	80069b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b0:	711a      	strb	r2, [r3, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c4:	711a      	strb	r2, [r3, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2243      	movs	r2, #67	; 0x43
 80069ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069d0:	4b02      	ldr	r3, [pc, #8]	; (80069dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000050 	.word	0x20000050

080069e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069e8:	2182      	movs	r1, #130	; 0x82
 80069ea:	4818      	ldr	r0, [pc, #96]	; (8006a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069ec:	f000 fd2a 	bl	8007444 <USBD_GetEpDesc>
 80069f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069f2:	2101      	movs	r1, #1
 80069f4:	4815      	ldr	r0, [pc, #84]	; (8006a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069f6:	f000 fd25 	bl	8007444 <USBD_GetEpDesc>
 80069fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069fc:	2181      	movs	r1, #129	; 0x81
 80069fe:	4813      	ldr	r0, [pc, #76]	; (8006a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a00:	f000 fd20 	bl	8007444 <USBD_GetEpDesc>
 8006a04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2210      	movs	r2, #16
 8006a10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d006      	beq.n	8006a26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	711a      	strb	r2, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f042 0202 	orr.w	r2, r2, #2
 8006a24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d006      	beq.n	8006a3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	711a      	strb	r2, [r3, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f042 0202 	orr.w	r2, r2, #2
 8006a38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2243      	movs	r2, #67	; 0x43
 8006a3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a40:	4b02      	ldr	r3, [pc, #8]	; (8006a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000050 	.word	0x20000050

08006a50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a58:	2182      	movs	r1, #130	; 0x82
 8006a5a:	4818      	ldr	r0, [pc, #96]	; (8006abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a5c:	f000 fcf2 	bl	8007444 <USBD_GetEpDesc>
 8006a60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a62:	2101      	movs	r1, #1
 8006a64:	4815      	ldr	r0, [pc, #84]	; (8006abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a66:	f000 fced 	bl	8007444 <USBD_GetEpDesc>
 8006a6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a6c:	2181      	movs	r1, #129	; 0x81
 8006a6e:	4813      	ldr	r0, [pc, #76]	; (8006abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a70:	f000 fce8 	bl	8007444 <USBD_GetEpDesc>
 8006a74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2210      	movs	r2, #16
 8006a80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d006      	beq.n	8006a96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a90:	711a      	strb	r2, [r3, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa4:	711a      	strb	r2, [r3, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2243      	movs	r2, #67	; 0x43
 8006aae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000050 	.word	0x20000050

08006ac0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	220a      	movs	r2, #10
 8006acc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006ace:	4b03      	ldr	r3, [pc, #12]	; (8006adc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	2000000c 	.word	0x2000000c

08006ae0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e009      	b.n	8006b08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	33b0      	adds	r3, #176	; 0xb0
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	32b0      	adds	r2, #176	; 0xb0
 8006b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e008      	b.n	8006b4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	32b0      	adds	r2, #176	; 0xb0
 8006b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e004      	b.n	8006b86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	32b0      	adds	r2, #176	; 0xb0
 8006ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006baa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e025      	b.n	8006c06 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d11f      	bne.n	8006c04 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006bcc:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <USBD_CDC_TransmitPacket+0x7c>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f003 020f 	and.w	r2, r3, #15
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4403      	add	r3, r0
 8006be6:	3314      	adds	r3, #20
 8006be8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <USBD_CDC_TransmitPacket+0x7c>)
 8006bec:	7819      	ldrb	r1, [r3, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f002 f847 	bl	8008c8e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000093 	.word	0x20000093

08006c14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32b0      	adds	r2, #176	; 0xb0
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32b0      	adds	r2, #176	; 0xb0
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e018      	b.n	8006c74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7c1b      	ldrb	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <USBD_CDC_ReceivePacket+0x68>)
 8006c4c:	7819      	ldrb	r1, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f002 f839 	bl	8008cd0 <USBD_LL_PrepareReceive>
 8006c5e:	e008      	b.n	8006c72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <USBD_CDC_ReceivePacket+0x68>)
 8006c62:	7819      	ldrb	r1, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f002 f82f 	bl	8008cd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000094 	.word	0x20000094

08006c80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e01f      	b.n	8006cd8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	79fa      	ldrb	r2, [r7, #7]
 8006cca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f001 fea9 	bl	8008a24 <USBD_LL_Init>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e025      	b.n	8006d44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32ae      	adds	r2, #174	; 0xae
 8006d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00f      	beq.n	8006d34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32ae      	adds	r2, #174	; 0xae
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	f107 020e 	add.w	r2, r7, #14
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 feb1 	bl	8008abc <USBD_LL_Start>
 8006d5a:	4603      	mov	r3, r0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	78fa      	ldrb	r2, [r7, #3]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	4798      	blx	r3
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	78fa      	ldrb	r2, [r7, #3]
 8006dcc:	4611      	mov	r1, r2
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	4798      	blx	r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 f924 	bl	8008046 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d01a      	beq.n	8006e58 <USBD_LL_SetupStage+0x72>
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d822      	bhi.n	8006e6c <USBD_LL_SetupStage+0x86>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <USBD_LL_SetupStage+0x4a>
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d00a      	beq.n	8006e44 <USBD_LL_SetupStage+0x5e>
 8006e2e:	e01d      	b.n	8006e6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fb79 	bl	8007530 <USBD_StdDevReq>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73fb      	strb	r3, [r7, #15]
      break;
 8006e42:	e020      	b.n	8006e86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fbe1 	bl	8007614 <USBD_StdItfReq>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
      break;
 8006e56:	e016      	b.n	8006e86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fc43 	bl	80076ec <USBD_StdEPReq>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6a:	e00c      	b.n	8006e86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 fe7e 	bl	8008b7c <USBD_LL_StallEP>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]
      break;
 8006e84:	bf00      	nop
  }

  return ret;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d177      	bne.n	8006f98 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006eae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	f040 80a1 	bne.w	8006ffe <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	8992      	ldrh	r2, [r2, #12]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d91c      	bls.n	8006f02 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	8992      	ldrh	r2, [r2, #12]
 8006ed0:	1a9a      	subs	r2, r3, r2
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	8992      	ldrh	r2, [r2, #12]
 8006ede:	441a      	add	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6919      	ldr	r1, [r3, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	899b      	ldrh	r3, [r3, #12]
 8006eec:	461a      	mov	r2, r3
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	bf38      	it	cc
 8006ef6:	4613      	movcc	r3, r2
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f001 f9aa 	bl	8008254 <USBD_CtlContinueRx>
 8006f00:	e07d      	b.n	8006ffe <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d014      	beq.n	8006f3a <USBD_LL_DataOutStage+0xaa>
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d81d      	bhi.n	8006f50 <USBD_LL_DataOutStage+0xc0>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <USBD_LL_DataOutStage+0x8e>
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d003      	beq.n	8006f24 <USBD_LL_DataOutStage+0x94>
 8006f1c:	e018      	b.n	8006f50 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	75bb      	strb	r3, [r7, #22]
            break;
 8006f22:	e018      	b.n	8006f56 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fa6e 	bl	8007410 <USBD_CoreFindIF>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75bb      	strb	r3, [r7, #22]
            break;
 8006f38:	e00d      	b.n	8006f56 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fa70 	bl	800742a <USBD_CoreFindEP>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75bb      	strb	r3, [r7, #22]
            break;
 8006f4e:	e002      	b.n	8006f56 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	75bb      	strb	r3, [r7, #22]
            break;
 8006f54:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f56:	7dbb      	ldrb	r3, [r7, #22]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d119      	bne.n	8006f90 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d113      	bne.n	8006f90 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f68:	7dba      	ldrb	r2, [r7, #22]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	32ae      	adds	r2, #174	; 0xae
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006f78:	7dba      	ldrb	r2, [r7, #22]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f80:	7dba      	ldrb	r2, [r7, #22]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	32ae      	adds	r2, #174	; 0xae
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f001 f970 	bl	8008276 <USBD_CtlSendStatus>
 8006f96:	e032      	b.n	8006ffe <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 fa41 	bl	800742a <USBD_CoreFindEP>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fac:	7dbb      	ldrb	r3, [r7, #22]
 8006fae:	2bff      	cmp	r3, #255	; 0xff
 8006fb0:	d025      	beq.n	8006ffe <USBD_LL_DataOutStage+0x16e>
 8006fb2:	7dbb      	ldrb	r3, [r7, #22]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d122      	bne.n	8006ffe <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d117      	bne.n	8006ff4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006fc4:	7dba      	ldrb	r2, [r7, #22]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	32ae      	adds	r2, #174	; 0xae
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00f      	beq.n	8006ff4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006fd4:	7dba      	ldrb	r2, [r7, #22]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006fdc:	7dba      	ldrb	r2, [r7, #22]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	32ae      	adds	r2, #174	; 0xae
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	7afa      	ldrb	r2, [r7, #11]
 8006fea:	4611      	mov	r1, r2
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	4798      	blx	r3
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	e000      	b.n	8007000 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	460b      	mov	r3, r1
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007016:	7afb      	ldrb	r3, [r7, #11]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d178      	bne.n	800710e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3314      	adds	r3, #20
 8007020:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007028:	2b02      	cmp	r3, #2
 800702a:	d163      	bne.n	80070f4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	8992      	ldrh	r2, [r2, #12]
 8007034:	4293      	cmp	r3, r2
 8007036:	d91c      	bls.n	8007072 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	8992      	ldrh	r2, [r2, #12]
 8007040:	1a9a      	subs	r2, r3, r2
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	8992      	ldrh	r2, [r2, #12]
 800704e:	441a      	add	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6919      	ldr	r1, [r3, #16]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	461a      	mov	r2, r3
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f001 f8c6 	bl	80081f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007064:	2300      	movs	r3, #0
 8007066:	2200      	movs	r2, #0
 8007068:	2100      	movs	r1, #0
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f001 fe30 	bl	8008cd0 <USBD_LL_PrepareReceive>
 8007070:	e040      	b.n	80070f4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	899b      	ldrh	r3, [r3, #12]
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	d11c      	bne.n	80070ba <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007088:	4293      	cmp	r3, r2
 800708a:	d316      	bcc.n	80070ba <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007096:	429a      	cmp	r2, r3
 8007098:	d20f      	bcs.n	80070ba <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800709a:	2200      	movs	r2, #0
 800709c:	2100      	movs	r1, #0
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 f8a6 	bl	80081f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ac:	2300      	movs	r3, #0
 80070ae:	2200      	movs	r2, #0
 80070b0:	2100      	movs	r1, #0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f001 fe0c 	bl	8008cd0 <USBD_LL_PrepareReceive>
 80070b8:	e01c      	b.n	80070f4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d10f      	bne.n	80070e6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d009      	beq.n	80070e6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070e6:	2180      	movs	r1, #128	; 0x80
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f001 fd47 	bl	8008b7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f001 f8d4 	bl	800829c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d03a      	beq.n	8007174 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fe30 	bl	8006d64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800710c:	e032      	b.n	8007174 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800710e:	7afb      	ldrb	r3, [r7, #11]
 8007110:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007114:	b2db      	uxtb	r3, r3
 8007116:	4619      	mov	r1, r3
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f986 	bl	800742a <USBD_CoreFindEP>
 800711e:	4603      	mov	r3, r0
 8007120:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	2bff      	cmp	r3, #255	; 0xff
 8007126:	d025      	beq.n	8007174 <USBD_LL_DataInStage+0x16c>
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d122      	bne.n	8007174 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b03      	cmp	r3, #3
 8007138:	d11c      	bne.n	8007174 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800713a:	7dfa      	ldrb	r2, [r7, #23]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	32ae      	adds	r2, #174	; 0xae
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d014      	beq.n	8007174 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800714a:	7dfa      	ldrb	r2, [r7, #23]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007152:	7dfa      	ldrb	r2, [r7, #23]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	32ae      	adds	r2, #174	; 0xae
 8007158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	7afa      	ldrb	r2, [r7, #11]
 8007160:	4611      	mov	r1, r2
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	4798      	blx	r3
 8007166:	4603      	mov	r3, r0
 8007168:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800716a:	7dbb      	ldrb	r3, [r7, #22]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007170:	7dbb      	ldrb	r3, [r7, #22]
 8007172:	e000      	b.n	8007176 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d014      	beq.n	80071e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00e      	beq.n	80071e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6852      	ldr	r2, [r2, #4]
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	4611      	mov	r1, r2
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80071e0:	2303      	movs	r3, #3
 80071e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071e4:	2340      	movs	r3, #64	; 0x40
 80071e6:	2200      	movs	r2, #0
 80071e8:	2100      	movs	r1, #0
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fc81 	bl	8008af2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2240      	movs	r2, #64	; 0x40
 80071fc:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007200:	2340      	movs	r3, #64	; 0x40
 8007202:	2200      	movs	r2, #0
 8007204:	2180      	movs	r1, #128	; 0x80
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fc73 	bl	8008af2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	841a      	strh	r2, [r3, #32]

  return ret;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	78fa      	ldrb	r2, [r7, #3]
 8007234:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b04      	cmp	r3, #4
 8007256:	d006      	beq.n	8007266 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725e:	b2da      	uxtb	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2204      	movs	r2, #4
 800726a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b04      	cmp	r3, #4
 800728e:	d106      	bne.n	800729e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007296:	b2da      	uxtb	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d110      	bne.n	80072e2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00b      	beq.n	80072e2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32ae      	adds	r2, #174	; 0xae
 8007302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800730a:	2303      	movs	r3, #3
 800730c:	e01c      	b.n	8007348 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b03      	cmp	r3, #3
 8007318:	d115      	bne.n	8007346 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	32ae      	adds	r2, #174	; 0xae
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	32ae      	adds	r2, #174	; 0xae
 8007338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	4611      	mov	r1, r2
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	32ae      	adds	r2, #174	; 0xae
 8007366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800736e:	2303      	movs	r3, #3
 8007370:	e01c      	b.n	80073ac <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d115      	bne.n	80073aa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	32ae      	adds	r2, #174	; 0xae
 8007388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	32ae      	adds	r2, #174	; 0xae
 800739c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	4611      	mov	r1, r2
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6852      	ldr	r2, [r2, #4]
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	4611      	mov	r1, r2
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007402:	2303      	movs	r3, #3
 8007404:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800741c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800741e:	4618      	mov	r0, r3
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007436:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	885b      	ldrh	r3, [r3, #2]
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	429a      	cmp	r2, r3
 800746a:	d920      	bls.n	80074ae <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007474:	e013      	b.n	800749e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007476:	f107 030a 	add.w	r3, r7, #10
 800747a:	4619      	mov	r1, r3
 800747c:	6978      	ldr	r0, [r7, #20]
 800747e:	f000 f81b 	bl	80074b8 <USBD_GetNextDesc>
 8007482:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b05      	cmp	r3, #5
 800748a:	d108      	bne.n	800749e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	789b      	ldrb	r3, [r3, #2]
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	429a      	cmp	r2, r3
 8007498:	d008      	beq.n	80074ac <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	885b      	ldrh	r3, [r3, #2]
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	897b      	ldrh	r3, [r7, #10]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d8e5      	bhi.n	8007476 <USBD_GetEpDesc+0x32>
 80074aa:	e000      	b.n	80074ae <USBD_GetEpDesc+0x6a>
          break;
 80074ac:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80074ae:	693b      	ldr	r3, [r7, #16]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	881a      	ldrh	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	4413      	add	r3, r2
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80074e4:	68fb      	ldr	r3, [r7, #12]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b087      	sub	sp, #28
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	3301      	adds	r3, #1
 8007508:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007510:	8a3b      	ldrh	r3, [r7, #16]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	b21a      	sxth	r2, r3
 8007516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800751a:	4313      	orrs	r3, r2
 800751c:	b21b      	sxth	r3, r3
 800751e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007520:	89fb      	ldrh	r3, [r7, #14]
}
 8007522:	4618      	mov	r0, r3
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d005      	beq.n	8007556 <USBD_StdDevReq+0x26>
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d857      	bhi.n	80075fe <USBD_StdDevReq+0xce>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00f      	beq.n	8007572 <USBD_StdDevReq+0x42>
 8007552:	2b20      	cmp	r3, #32
 8007554:	d153      	bne.n	80075fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	32ae      	adds	r2, #174	; 0xae
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
      break;
 8007570:	e04a      	b.n	8007608 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b09      	cmp	r3, #9
 8007578:	d83b      	bhi.n	80075f2 <USBD_StdDevReq+0xc2>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <USBD_StdDevReq+0x50>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075d5 	.word	0x080075d5
 8007584:	080075e9 	.word	0x080075e9
 8007588:	080075f3 	.word	0x080075f3
 800758c:	080075df 	.word	0x080075df
 8007590:	080075f3 	.word	0x080075f3
 8007594:	080075b3 	.word	0x080075b3
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075f3 	.word	0x080075f3
 80075a0:	080075cb 	.word	0x080075cb
 80075a4:	080075bd 	.word	0x080075bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa3e 	bl	8007a2c <USBD_GetDescriptor>
          break;
 80075b0:	e024      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fba3 	bl	8007d00 <USBD_SetAddress>
          break;
 80075ba:	e01f      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fbe2 	bl	8007d88 <USBD_SetConfig>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
          break;
 80075c8:	e018      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fc85 	bl	8007edc <USBD_GetConfig>
          break;
 80075d2:	e013      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fcb6 	bl	8007f48 <USBD_GetStatus>
          break;
 80075dc:	e00e      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fce5 	bl	8007fb0 <USBD_SetFeature>
          break;
 80075e6:	e009      	b.n	80075fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fd09 	bl	8008002 <USBD_ClrFeature>
          break;
 80075f0:	e004      	b.n	80075fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fd60 	bl	80080ba <USBD_CtlError>
          break;
 80075fa:	bf00      	nop
      }
      break;
 80075fc:	e004      	b.n	8007608 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fd5a 	bl	80080ba <USBD_CtlError>
      break;
 8007606:	bf00      	nop
  }

  return ret;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	d005      	beq.n	800763a <USBD_StdItfReq+0x26>
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d852      	bhi.n	80076d8 <USBD_StdItfReq+0xc4>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <USBD_StdItfReq+0x26>
 8007636:	2b20      	cmp	r3, #32
 8007638:	d14e      	bne.n	80076d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	2b02      	cmp	r3, #2
 8007646:	d840      	bhi.n	80076ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	889b      	ldrh	r3, [r3, #4]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b01      	cmp	r3, #1
 8007650:	d836      	bhi.n	80076c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	889b      	ldrh	r3, [r3, #4]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fed8 	bl	8007410 <USBD_CoreFindIF>
 8007660:	4603      	mov	r3, r0
 8007662:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2bff      	cmp	r3, #255	; 0xff
 8007668:	d01d      	beq.n	80076a6 <USBD_StdItfReq+0x92>
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11a      	bne.n	80076a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007670:	7bba      	ldrb	r2, [r7, #14]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32ae      	adds	r2, #174	; 0xae
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00f      	beq.n	80076a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007680:	7bba      	ldrb	r2, [r7, #14]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007688:	7bba      	ldrb	r2, [r7, #14]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32ae      	adds	r2, #174	; 0xae
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800769e:	e004      	b.n	80076aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80076a0:	2303      	movs	r3, #3
 80076a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076a4:	e001      	b.n	80076aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	88db      	ldrh	r3, [r3, #6]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d110      	bne.n	80076d4 <USBD_StdItfReq+0xc0>
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10d      	bne.n	80076d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fddc 	bl	8008276 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076be:	e009      	b.n	80076d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fcf9 	bl	80080ba <USBD_CtlError>
          break;
 80076c8:	e004      	b.n	80076d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fcf4 	bl	80080ba <USBD_CtlError>
          break;
 80076d2:	e000      	b.n	80076d6 <USBD_StdItfReq+0xc2>
          break;
 80076d4:	bf00      	nop
      }
      break;
 80076d6:	e004      	b.n	80076e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fced 	bl	80080ba <USBD_CtlError>
      break;
 80076e0:	bf00      	nop
  }

  return ret;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	889b      	ldrh	r3, [r3, #4]
 80076fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	d007      	beq.n	800771c <USBD_StdEPReq+0x30>
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	f200 8181 	bhi.w	8007a14 <USBD_StdEPReq+0x328>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d02a      	beq.n	800776c <USBD_StdEPReq+0x80>
 8007716:	2b20      	cmp	r3, #32
 8007718:	f040 817c 	bne.w	8007a14 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff fe82 	bl	800742a <USBD_CoreFindEP>
 8007726:	4603      	mov	r3, r0
 8007728:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800772a:	7b7b      	ldrb	r3, [r7, #13]
 800772c:	2bff      	cmp	r3, #255	; 0xff
 800772e:	f000 8176 	beq.w	8007a1e <USBD_StdEPReq+0x332>
 8007732:	7b7b      	ldrb	r3, [r7, #13]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f040 8172 	bne.w	8007a1e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800773a:	7b7a      	ldrb	r2, [r7, #13]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007742:	7b7a      	ldrb	r2, [r7, #13]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	32ae      	adds	r2, #174	; 0xae
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 8165 	beq.w	8007a1e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007754:	7b7a      	ldrb	r2, [r7, #13]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	32ae      	adds	r2, #174	; 0xae
 800775a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800776a:	e158      	b.n	8007a1e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d008      	beq.n	8007786 <USBD_StdEPReq+0x9a>
 8007774:	2b03      	cmp	r3, #3
 8007776:	f300 8147 	bgt.w	8007a08 <USBD_StdEPReq+0x31c>
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 809b 	beq.w	80078b6 <USBD_StdEPReq+0x1ca>
 8007780:	2b01      	cmp	r3, #1
 8007782:	d03c      	beq.n	80077fe <USBD_StdEPReq+0x112>
 8007784:	e140      	b.n	8007a08 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d002      	beq.n	8007798 <USBD_StdEPReq+0xac>
 8007792:	2b03      	cmp	r3, #3
 8007794:	d016      	beq.n	80077c4 <USBD_StdEPReq+0xd8>
 8007796:	e02c      	b.n	80077f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00d      	beq.n	80077ba <USBD_StdEPReq+0xce>
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	2b80      	cmp	r3, #128	; 0x80
 80077a2:	d00a      	beq.n	80077ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 f9e7 	bl	8008b7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ae:	2180      	movs	r1, #128	; 0x80
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 f9e3 	bl	8008b7c <USBD_LL_StallEP>
 80077b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077b8:	e020      	b.n	80077fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fc7c 	bl	80080ba <USBD_CtlError>
              break;
 80077c2:	e01b      	b.n	80077fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	885b      	ldrh	r3, [r3, #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10e      	bne.n	80077ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <USBD_StdEPReq+0xfe>
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d008      	beq.n	80077ea <USBD_StdEPReq+0xfe>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	88db      	ldrh	r3, [r3, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f9c9 	bl	8008b7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fd43 	bl	8008276 <USBD_CtlSendStatus>

              break;
 80077f0:	e004      	b.n	80077fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc60 	bl	80080ba <USBD_CtlError>
              break;
 80077fa:	bf00      	nop
          }
          break;
 80077fc:	e109      	b.n	8007a12 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d002      	beq.n	8007810 <USBD_StdEPReq+0x124>
 800780a:	2b03      	cmp	r3, #3
 800780c:	d016      	beq.n	800783c <USBD_StdEPReq+0x150>
 800780e:	e04b      	b.n	80078a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00d      	beq.n	8007832 <USBD_StdEPReq+0x146>
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	2b80      	cmp	r3, #128	; 0x80
 800781a:	d00a      	beq.n	8007832 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 f9ab 	bl	8008b7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007826:	2180      	movs	r1, #128	; 0x80
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 f9a7 	bl	8008b7c <USBD_LL_StallEP>
 800782e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007830:	e040      	b.n	80078b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fc40 	bl	80080ba <USBD_CtlError>
              break;
 800783a:	e03b      	b.n	80078b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	885b      	ldrh	r3, [r3, #2]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d136      	bne.n	80078b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f9b1 	bl	8008bba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fd0c 	bl	8008276 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fde1 	bl	800742a <USBD_CoreFindEP>
 8007868:	4603      	mov	r3, r0
 800786a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800786c:	7b7b      	ldrb	r3, [r7, #13]
 800786e:	2bff      	cmp	r3, #255	; 0xff
 8007870:	d01f      	beq.n	80078b2 <USBD_StdEPReq+0x1c6>
 8007872:	7b7b      	ldrb	r3, [r7, #13]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d11c      	bne.n	80078b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007878:	7b7a      	ldrb	r2, [r7, #13]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007880:	7b7a      	ldrb	r2, [r7, #13]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	32ae      	adds	r2, #174	; 0xae
 8007886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d010      	beq.n	80078b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007890:	7b7a      	ldrb	r2, [r7, #13]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	32ae      	adds	r2, #174	; 0xae
 8007896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80078a6:	e004      	b.n	80078b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fc05 	bl	80080ba <USBD_CtlError>
              break;
 80078b0:	e000      	b.n	80078b4 <USBD_StdEPReq+0x1c8>
              break;
 80078b2:	bf00      	nop
          }
          break;
 80078b4:	e0ad      	b.n	8007a12 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d002      	beq.n	80078c8 <USBD_StdEPReq+0x1dc>
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d033      	beq.n	800792e <USBD_StdEPReq+0x242>
 80078c6:	e099      	b.n	80079fc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <USBD_StdEPReq+0x1f2>
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b80      	cmp	r3, #128	; 0x80
 80078d2:	d004      	beq.n	80078de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fbef 	bl	80080ba <USBD_CtlError>
                break;
 80078dc:	e093      	b.n	8007a06 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da0b      	bge.n	80078fe <USBD_StdEPReq+0x212>
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	3310      	adds	r3, #16
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	4413      	add	r3, r2
 80078fa:	3304      	adds	r3, #4
 80078fc:	e00b      	b.n	8007916 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	4413      	add	r3, r2
 8007914:	3304      	adds	r3, #4
 8007916:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2200      	movs	r2, #0
 800791c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	330e      	adds	r3, #14
 8007922:	2202      	movs	r2, #2
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fc44 	bl	80081b4 <USBD_CtlSendData>
              break;
 800792c:	e06b      	b.n	8007a06 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800792e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007932:	2b00      	cmp	r3, #0
 8007934:	da11      	bge.n	800795a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	f003 020f 	and.w	r2, r3, #15
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	440b      	add	r3, r1
 8007948:	3323      	adds	r3, #35	; 0x23
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d117      	bne.n	8007980 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fbb1 	bl	80080ba <USBD_CtlError>
                  break;
 8007958:	e055      	b.n	8007a06 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	f203 1363 	addw	r3, r3, #355	; 0x163
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fb9e 	bl	80080ba <USBD_CtlError>
                  break;
 800797e:	e042      	b.n	8007a06 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007984:	2b00      	cmp	r3, #0
 8007986:	da0b      	bge.n	80079a0 <USBD_StdEPReq+0x2b4>
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	3310      	adds	r3, #16
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	4413      	add	r3, r2
 800799c:	3304      	adds	r3, #4
 800799e:	e00b      	b.n	80079b8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	3304      	adds	r3, #4
 80079b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <USBD_StdEPReq+0x2da>
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d103      	bne.n	80079ce <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2200      	movs	r2, #0
 80079ca:	739a      	strb	r2, [r3, #14]
 80079cc:	e00e      	b.n	80079ec <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 f910 	bl	8008bf8 <USBD_LL_IsStallEP>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2201      	movs	r2, #1
 80079e2:	739a      	strb	r2, [r3, #14]
 80079e4:	e002      	b.n	80079ec <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2200      	movs	r2, #0
 80079ea:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	330e      	adds	r3, #14
 80079f0:	2202      	movs	r2, #2
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fbdd 	bl	80081b4 <USBD_CtlSendData>
              break;
 80079fa:	e004      	b.n	8007a06 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fb5b 	bl	80080ba <USBD_CtlError>
              break;
 8007a04:	bf00      	nop
          }
          break;
 8007a06:	e004      	b.n	8007a12 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fb55 	bl	80080ba <USBD_CtlError>
          break;
 8007a10:	bf00      	nop
      }
      break;
 8007a12:	e005      	b.n	8007a20 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fb4f 	bl	80080ba <USBD_CtlError>
      break;
 8007a1c:	e000      	b.n	8007a20 <USBD_StdEPReq+0x334>
      break;
 8007a1e:	bf00      	nop
  }

  return ret;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	885b      	ldrh	r3, [r3, #2]
 8007a46:	0a1b      	lsrs	r3, r3, #8
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	2b06      	cmp	r3, #6
 8007a4e:	f200 8128 	bhi.w	8007ca2 <USBD_GetDescriptor+0x276>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <USBD_GetDescriptor+0x2c>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a75 	.word	0x08007a75
 8007a5c:	08007a8d 	.word	0x08007a8d
 8007a60:	08007acd 	.word	0x08007acd
 8007a64:	08007ca3 	.word	0x08007ca3
 8007a68:	08007ca3 	.word	0x08007ca3
 8007a6c:	08007c43 	.word	0x08007c43
 8007a70:	08007c6f 	.word	0x08007c6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	7c12      	ldrb	r2, [r2, #16]
 8007a80:	f107 0108 	add.w	r1, r7, #8
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	60f8      	str	r0, [r7, #12]
      break;
 8007a8a:	e112      	b.n	8007cb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	7c1b      	ldrb	r3, [r3, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10d      	bne.n	8007ab0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	f107 0208 	add.w	r2, r7, #8
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	2202      	movs	r2, #2
 8007aac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007aae:	e100      	b.n	8007cb2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	f107 0208 	add.w	r2, r7, #8
 8007abc:	4610      	mov	r0, r2
 8007abe:	4798      	blx	r3
 8007ac0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	701a      	strb	r2, [r3, #0]
      break;
 8007aca:	e0f2      	b.n	8007cb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	885b      	ldrh	r3, [r3, #2]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b05      	cmp	r3, #5
 8007ad4:	f200 80ac 	bhi.w	8007c30 <USBD_GetDescriptor+0x204>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <USBD_GetDescriptor+0xb4>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007af9 	.word	0x08007af9
 8007ae4:	08007b2d 	.word	0x08007b2d
 8007ae8:	08007b61 	.word	0x08007b61
 8007aec:	08007b95 	.word	0x08007b95
 8007af0:	08007bc9 	.word	0x08007bc9
 8007af4:	08007bfd 	.word	0x08007bfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	7c12      	ldrb	r2, [r2, #16]
 8007b10:	f107 0108 	add.w	r1, r7, #8
 8007b14:	4610      	mov	r0, r2
 8007b16:	4798      	blx	r3
 8007b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b1a:	e091      	b.n	8007c40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 facb 	bl	80080ba <USBD_CtlError>
            err++;
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	3301      	adds	r3, #1
 8007b28:	72fb      	strb	r3, [r7, #11]
          break;
 8007b2a:	e089      	b.n	8007c40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00b      	beq.n	8007b50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7c12      	ldrb	r2, [r2, #16]
 8007b44:	f107 0108 	add.w	r1, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4e:	e077      	b.n	8007c40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fab1 	bl	80080ba <USBD_CtlError>
            err++;
 8007b58:	7afb      	ldrb	r3, [r7, #11]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5e:	e06f      	b.n	8007c40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7c12      	ldrb	r2, [r2, #16]
 8007b78:	f107 0108 	add.w	r1, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b82:	e05d      	b.n	8007c40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa97 	bl	80080ba <USBD_CtlError>
            err++;
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	72fb      	strb	r3, [r7, #11]
          break;
 8007b92:	e055      	b.n	8007c40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	7c12      	ldrb	r2, [r2, #16]
 8007bac:	f107 0108 	add.w	r1, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb6:	e043      	b.n	8007c40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa7d 	bl	80080ba <USBD_CtlError>
            err++;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc6:	e03b      	b.n	8007c40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 0108 	add.w	r1, r7, #8
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bea:	e029      	b.n	8007c40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa63 	bl	80080ba <USBD_CtlError>
            err++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfa:	e021      	b.n	8007c40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1e:	e00f      	b.n	8007c40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa49 	bl	80080ba <USBD_CtlError>
            err++;
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2e:	e007      	b.n	8007c40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa41 	bl	80080ba <USBD_CtlError>
          err++;
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c3e:	bf00      	nop
      }
      break;
 8007c40:	e037      	b.n	8007cb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7c1b      	ldrb	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d109      	bne.n	8007c5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c52:	f107 0208 	add.w	r2, r7, #8
 8007c56:	4610      	mov	r0, r2
 8007c58:	4798      	blx	r3
 8007c5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c5c:	e029      	b.n	8007cb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fa2a 	bl	80080ba <USBD_CtlError>
        err++;
 8007c66:	7afb      	ldrb	r3, [r7, #11]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c6c:	e021      	b.n	8007cb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	7c1b      	ldrb	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10d      	bne.n	8007c92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	f107 0208 	add.w	r2, r7, #8
 8007c82:	4610      	mov	r0, r2
 8007c84:	4798      	blx	r3
 8007c86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	2207      	movs	r2, #7
 8007c8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c90:	e00f      	b.n	8007cb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fa10 	bl	80080ba <USBD_CtlError>
        err++;
 8007c9a:	7afb      	ldrb	r3, [r7, #11]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007ca0:	e007      	b.n	8007cb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fa08 	bl	80080ba <USBD_CtlError>
      err++;
 8007caa:	7afb      	ldrb	r3, [r7, #11]
 8007cac:	3301      	adds	r3, #1
 8007cae:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb0:	bf00      	nop
  }

  if (err != 0U)
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11e      	bne.n	8007cf6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d016      	beq.n	8007cee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007cc0:	893b      	ldrh	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00e      	beq.n	8007ce4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	88da      	ldrh	r2, [r3, #6]
 8007cca:	893b      	ldrh	r3, [r7, #8]
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	bf28      	it	cs
 8007cd0:	4613      	movcs	r3, r2
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cd6:	893b      	ldrh	r3, [r7, #8]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fa69 	bl	80081b4 <USBD_CtlSendData>
 8007ce2:	e009      	b.n	8007cf8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f9e7 	bl	80080ba <USBD_CtlError>
 8007cec:	e004      	b.n	8007cf8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fac1 	bl	8008276 <USBD_CtlSendStatus>
 8007cf4:	e000      	b.n	8007cf8 <USBD_GetDescriptor+0x2cc>
    return;
 8007cf6:	bf00      	nop
  }
}
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop

08007d00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	889b      	ldrh	r3, [r3, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d131      	bne.n	8007d76 <USBD_SetAddress+0x76>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	88db      	ldrh	r3, [r3, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d12d      	bne.n	8007d76 <USBD_SetAddress+0x76>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	885b      	ldrh	r3, [r3, #2]
 8007d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d20:	d829      	bhi.n	8007d76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	885b      	ldrh	r3, [r3, #2]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d104      	bne.n	8007d44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f9bc 	bl	80080ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d42:	e01d      	b.n	8007d80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7bfa      	ldrb	r2, [r7, #15]
 8007d48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 ff7d 	bl	8008c50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa8d 	bl	8008276 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2202      	movs	r2, #2
 8007d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6a:	e009      	b.n	8007d80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d74:	e004      	b.n	8007d80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f99e 	bl	80080ba <USBD_CtlError>
  }
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	885b      	ldrh	r3, [r3, #2]
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	4b4e      	ldr	r3, [pc, #312]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007d9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007da0:	4b4d      	ldr	r3, [pc, #308]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d905      	bls.n	8007db4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f985 	bl	80080ba <USBD_CtlError>
    return USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e08c      	b.n	8007ece <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d002      	beq.n	8007dc6 <USBD_SetConfig+0x3e>
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d029      	beq.n	8007e18 <USBD_SetConfig+0x90>
 8007dc4:	e075      	b.n	8007eb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007dc6:	4b44      	ldr	r3, [pc, #272]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007dce:	4b42      	ldr	r3, [pc, #264]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dd8:	4b3f      	ldr	r3, [pc, #252]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7fe ffcb 	bl	8006d7a <USBD_SetClassConfig>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f962 	bl	80080ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dfe:	e065      	b.n	8007ecc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fa38 	bl	8008276 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2203      	movs	r2, #3
 8007e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e0e:	e05d      	b.n	8007ecc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fa30 	bl	8008276 <USBD_CtlSendStatus>
      break;
 8007e16:	e059      	b.n	8007ecc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e18:	4b2f      	ldr	r3, [pc, #188]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d112      	bne.n	8007e46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e28:	4b2b      	ldr	r3, [pc, #172]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e32:	4b29      	ldr	r3, [pc, #164]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7fe ffba 	bl	8006db2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa19 	bl	8008276 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e44:	e042      	b.n	8007ecc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e46:	4b24      	ldr	r3, [pc, #144]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d02a      	beq.n	8007eaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7fe ffa8 	bl	8006db2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e62:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7fe ff81 	bl	8006d7a <USBD_SetClassConfig>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00f      	beq.n	8007ea2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f918 	bl	80080ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7fe ff8d 	bl	8006db2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ea0:	e014      	b.n	8007ecc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f9e7 	bl	8008276 <USBD_CtlSendStatus>
      break;
 8007ea8:	e010      	b.n	8007ecc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f9e3 	bl	8008276 <USBD_CtlSendStatus>
      break;
 8007eb0:	e00c      	b.n	8007ecc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f900 	bl	80080ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eba:	4b07      	ldr	r3, [pc, #28]	; (8007ed8 <USBD_SetConfig+0x150>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fe ff76 	bl	8006db2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eca:	bf00      	nop
  }

  return ret;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000594 	.word	0x20000594

08007edc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	88db      	ldrh	r3, [r3, #6]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d004      	beq.n	8007ef8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f8e2 	bl	80080ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ef6:	e023      	b.n	8007f40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	dc02      	bgt.n	8007f0a <USBD_GetConfig+0x2e>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dc03      	bgt.n	8007f10 <USBD_GetConfig+0x34>
 8007f08:	e015      	b.n	8007f36 <USBD_GetConfig+0x5a>
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d00b      	beq.n	8007f26 <USBD_GetConfig+0x4a>
 8007f0e:	e012      	b.n	8007f36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f948 	bl	80081b4 <USBD_CtlSendData>
        break;
 8007f24:	e00c      	b.n	8007f40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f940 	bl	80081b4 <USBD_CtlSendData>
        break;
 8007f34:	e004      	b.n	8007f40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f8be 	bl	80080ba <USBD_CtlError>
        break;
 8007f3e:	bf00      	nop
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d81e      	bhi.n	8007f9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	88db      	ldrh	r3, [r3, #6]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d004      	beq.n	8007f72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f8a5 	bl	80080ba <USBD_CtlError>
        break;
 8007f70:	e01a      	b.n	8007fa8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f043 0202 	orr.w	r2, r3, #2
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	330c      	adds	r3, #12
 8007f92:	2202      	movs	r2, #2
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f90c 	bl	80081b4 <USBD_CtlSendData>
      break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f88a 	bl	80080ba <USBD_CtlError>
      break;
 8007fa6:	bf00      	nop
  }
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	885b      	ldrh	r3, [r3, #2]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d107      	bne.n	8007fd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f953 	bl	8008276 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fd0:	e013      	b.n	8007ffa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d10b      	bne.n	8007ff2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	889b      	ldrh	r3, [r3, #4]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f943 	bl	8008276 <USBD_CtlSendStatus>
}
 8007ff0:	e003      	b.n	8007ffa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f860 	bl	80080ba <USBD_CtlError>
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008012:	b2db      	uxtb	r3, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	2b02      	cmp	r3, #2
 8008018:	d80b      	bhi.n	8008032 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d10c      	bne.n	800803c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f923 	bl	8008276 <USBD_CtlSendStatus>
      }
      break;
 8008030:	e004      	b.n	800803c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f840 	bl	80080ba <USBD_CtlError>
      break;
 800803a:	e000      	b.n	800803e <USBD_ClrFeature+0x3c>
      break;
 800803c:	bf00      	nop
  }
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	781a      	ldrb	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	781a      	ldrb	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fa3e 	bl	80074f2 <SWAPBYTE>
 8008076:	4603      	mov	r3, r0
 8008078:	461a      	mov	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3301      	adds	r3, #1
 8008088:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff fa31 	bl	80074f2 <SWAPBYTE>
 8008090:	4603      	mov	r3, r0
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7ff fa24 	bl	80074f2 <SWAPBYTE>
 80080aa:	4603      	mov	r3, r0
 80080ac:	461a      	mov	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	80da      	strh	r2, [r3, #6]
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080c4:	2180      	movs	r1, #128	; 0x80
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fd58 	bl	8008b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080cc:	2100      	movs	r1, #0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fd54 	bl	8008b7c <USBD_LL_StallEP>
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d042      	beq.n	8008178 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80080f6:	6938      	ldr	r0, [r7, #16]
 80080f8:	f000 f842 	bl	8008180 <USBD_GetLen>
 80080fc:	4603      	mov	r3, r0
 80080fe:	3301      	adds	r3, #1
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008106:	d808      	bhi.n	800811a <USBD_GetString+0x3e>
 8008108:	6938      	ldr	r0, [r7, #16]
 800810a:	f000 f839 	bl	8008180 <USBD_GetLen>
 800810e:	4603      	mov	r3, r0
 8008110:	3301      	adds	r3, #1
 8008112:	b29b      	uxth	r3, r3
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	e001      	b.n	800811e <USBD_GetString+0x42>
 800811a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	4413      	add	r3, r2
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	7812      	ldrb	r2, [r2, #0]
 800812c:	701a      	strb	r2, [r3, #0]
  idx++;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	3301      	adds	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	4413      	add	r3, r2
 800813a:	2203      	movs	r2, #3
 800813c:	701a      	strb	r2, [r3, #0]
  idx++;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	3301      	adds	r3, #1
 8008142:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008144:	e013      	b.n	800816e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	4413      	add	r3, r2
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	7812      	ldrb	r2, [r2, #0]
 8008150:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	3301      	adds	r3, #1
 8008156:	613b      	str	r3, [r7, #16]
    idx++;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	3301      	adds	r3, #1
 800815c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	4413      	add	r3, r2
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]
    idx++;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	3301      	adds	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e7      	bne.n	8008146 <USBD_GetString+0x6a>
 8008176:	e000      	b.n	800817a <USBD_GetString+0x9e>
    return;
 8008178:	bf00      	nop
  }
}
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008190:	e005      	b.n	800819e <USBD_GetLen+0x1e>
  {
    len++;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	3301      	adds	r3, #1
 8008196:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	3301      	adds	r3, #1
 800819c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f5      	bne.n	8008192 <USBD_GetLen+0x12>
  }

  return len;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	2100      	movs	r1, #0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fd54 	bl	8008c8e <USBD_LL_Transmit>

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	2100      	movs	r1, #0
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 fd43 	bl	8008c8e <USBD_LL_Transmit>

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2203      	movs	r2, #3
 8008222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	2100      	movs	r1, #0
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fd43 	bl	8008cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	2100      	movs	r1, #0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fd32 	bl	8008cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2204      	movs	r2, #4
 8008282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008286:	2300      	movs	r3, #0
 8008288:	2200      	movs	r2, #0
 800828a:	2100      	movs	r1, #0
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fcfe 	bl	8008c8e <USBD_LL_Transmit>

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2205      	movs	r2, #5
 80082a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082ac:	2300      	movs	r3, #0
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fd0c 	bl	8008cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082c8:	2200      	movs	r2, #0
 80082ca:	4912      	ldr	r1, [pc, #72]	; (8008314 <MX_USB_DEVICE_Init+0x50>)
 80082cc:	4812      	ldr	r0, [pc, #72]	; (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082ce:	f7fe fcd7 	bl	8006c80 <USBD_Init>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082d8:	f7f8 fde2 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082dc:	490f      	ldr	r1, [pc, #60]	; (800831c <MX_USB_DEVICE_Init+0x58>)
 80082de:	480e      	ldr	r0, [pc, #56]	; (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082e0:	f7fe fcfe 	bl	8006ce0 <USBD_RegisterClass>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082ea:	f7f8 fdd9 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082ee:	490c      	ldr	r1, [pc, #48]	; (8008320 <MX_USB_DEVICE_Init+0x5c>)
 80082f0:	4809      	ldr	r0, [pc, #36]	; (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082f2:	f7fe fbf5 	bl	8006ae0 <USBD_CDC_RegisterInterface>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082fc:	f7f8 fdd0 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008300:	4805      	ldr	r0, [pc, #20]	; (8008318 <MX_USB_DEVICE_Init+0x54>)
 8008302:	f7fe fd23 	bl	8006d4c <USBD_Start>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800830c:	f7f8 fdc8 	bl	8000ea0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008310:	bf00      	nop
 8008312:	bd80      	pop	{r7, pc}
 8008314:	200000b4 	.word	0x200000b4
 8008318:	20000598 	.word	0x20000598
 800831c:	20000018 	.word	0x20000018
 8008320:	200000a0 	.word	0x200000a0

08008324 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008328:	2200      	movs	r2, #0
 800832a:	4905      	ldr	r1, [pc, #20]	; (8008340 <CDC_Init_FS+0x1c>)
 800832c:	4805      	ldr	r0, [pc, #20]	; (8008344 <CDC_Init_FS+0x20>)
 800832e:	f7fe fbf1 	bl	8006b14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008332:	4905      	ldr	r1, [pc, #20]	; (8008348 <CDC_Init_FS+0x24>)
 8008334:	4803      	ldr	r0, [pc, #12]	; (8008344 <CDC_Init_FS+0x20>)
 8008336:	f7fe fc0f 	bl	8006b58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800833a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800833c:	4618      	mov	r0, r3
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000a74 	.word	0x20000a74
 8008344:	20000598 	.word	0x20000598
 8008348:	20000874 	.word	0x20000874

0800834c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008350:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008352:	4618      	mov	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
 8008368:	4613      	mov	r3, r2
 800836a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2b23      	cmp	r3, #35	; 0x23
 8008370:	f200 8098 	bhi.w	80084a4 <CDC_Control_FS+0x148>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <CDC_Control_FS+0x20>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	080084a5 	.word	0x080084a5
 8008380:	080084a5 	.word	0x080084a5
 8008384:	080084a5 	.word	0x080084a5
 8008388:	080084a5 	.word	0x080084a5
 800838c:	080084a5 	.word	0x080084a5
 8008390:	080084a5 	.word	0x080084a5
 8008394:	080084a5 	.word	0x080084a5
 8008398:	080084a5 	.word	0x080084a5
 800839c:	080084a5 	.word	0x080084a5
 80083a0:	080084a5 	.word	0x080084a5
 80083a4:	080084a5 	.word	0x080084a5
 80083a8:	080084a5 	.word	0x080084a5
 80083ac:	080084a5 	.word	0x080084a5
 80083b0:	080084a5 	.word	0x080084a5
 80083b4:	080084a5 	.word	0x080084a5
 80083b8:	080084a5 	.word	0x080084a5
 80083bc:	080084a5 	.word	0x080084a5
 80083c0:	080084a5 	.word	0x080084a5
 80083c4:	080084a5 	.word	0x080084a5
 80083c8:	080084a5 	.word	0x080084a5
 80083cc:	080084a5 	.word	0x080084a5
 80083d0:	080084a5 	.word	0x080084a5
 80083d4:	080084a5 	.word	0x080084a5
 80083d8:	080084a5 	.word	0x080084a5
 80083dc:	080084a5 	.word	0x080084a5
 80083e0:	080084a5 	.word	0x080084a5
 80083e4:	080084a5 	.word	0x080084a5
 80083e8:	080084a5 	.word	0x080084a5
 80083ec:	080084a5 	.word	0x080084a5
 80083f0:	080084a5 	.word	0x080084a5
 80083f4:	080084a5 	.word	0x080084a5
 80083f8:	080084a5 	.word	0x080084a5
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	08008451 	.word	0x08008451
 8008404:	080084a5 	.word	0x080084a5
 8008408:	080084a5 	.word	0x080084a5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	431a      	orrs	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	3302      	adds	r3, #2
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	041b      	lsls	r3, r3, #16
 8008424:	431a      	orrs	r2, r3
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	3303      	adds	r3, #3
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	061b      	lsls	r3, r3, #24
 800842e:	4313      	orrs	r3, r2
 8008430:	461a      	mov	r2, r3
 8008432:	4b20      	ldr	r3, [pc, #128]	; (80084b4 <CDC_Control_FS+0x158>)
 8008434:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	791a      	ldrb	r2, [r3, #4]
 800843a:	4b1e      	ldr	r3, [pc, #120]	; (80084b4 <CDC_Control_FS+0x158>)
 800843c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	795a      	ldrb	r2, [r3, #5]
 8008442:	4b1c      	ldr	r3, [pc, #112]	; (80084b4 <CDC_Control_FS+0x158>)
 8008444:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	799a      	ldrb	r2, [r3, #6]
 800844a:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <CDC_Control_FS+0x158>)
 800844c:	719a      	strb	r2, [r3, #6]
    break;
 800844e:	e02a      	b.n	80084a6 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008450:	4b18      	ldr	r3, [pc, #96]	; (80084b4 <CDC_Control_FS+0x158>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	b2da      	uxtb	r2, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800845a:	4b16      	ldr	r3, [pc, #88]	; (80084b4 <CDC_Control_FS+0x158>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	0a1a      	lsrs	r2, r3, #8
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	b2d2      	uxtb	r2, r2
 8008466:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008468:	4b12      	ldr	r3, [pc, #72]	; (80084b4 <CDC_Control_FS+0x158>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	0c1a      	lsrs	r2, r3, #16
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	3302      	adds	r3, #2
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008476:	4b0f      	ldr	r3, [pc, #60]	; (80084b4 <CDC_Control_FS+0x158>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	0e1a      	lsrs	r2, r3, #24
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	3303      	adds	r3, #3
 8008480:	b2d2      	uxtb	r2, r2
 8008482:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	3304      	adds	r3, #4
 8008488:	4a0a      	ldr	r2, [pc, #40]	; (80084b4 <CDC_Control_FS+0x158>)
 800848a:	7912      	ldrb	r2, [r2, #4]
 800848c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	3305      	adds	r3, #5
 8008492:	4a08      	ldr	r2, [pc, #32]	; (80084b4 <CDC_Control_FS+0x158>)
 8008494:	7952      	ldrb	r2, [r2, #5]
 8008496:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	3306      	adds	r3, #6
 800849c:	4a05      	ldr	r2, [pc, #20]	; (80084b4 <CDC_Control_FS+0x158>)
 800849e:	7992      	ldrb	r2, [r2, #6]
 80084a0:	701a      	strb	r2, [r3, #0]
    break;
 80084a2:	e000      	b.n	80084a6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084a4:	bf00      	nop
  }

  return (USBD_OK);
 80084a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	20000098 	.word	0x20000098

080084b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 80084c2:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <CDC_Receive_FS+0x3c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d007      	beq.n	80084da <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 80084ca:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <CDC_Receive_FS+0x3c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	b292      	uxth	r2, r2
 80084d4:	4611      	mov	r1, r2
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4806      	ldr	r0, [pc, #24]	; (80084f8 <CDC_Receive_FS+0x40>)
 80084de:	f7fe fb3b 	bl	8006b58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084e2:	4805      	ldr	r0, [pc, #20]	; (80084f8 <CDC_Receive_FS+0x40>)
 80084e4:	f7fe fb96 	bl	8006c14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000c74 	.word	0x20000c74
 80084f8:	20000598 	.word	0x20000598

080084fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800850c:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <CDC_Transmit_FS+0x48>)
 800850e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008512:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800851e:	2301      	movs	r3, #1
 8008520:	e00b      	b.n	800853a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008522:	887b      	ldrh	r3, [r7, #2]
 8008524:	461a      	mov	r2, r3
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4806      	ldr	r0, [pc, #24]	; (8008544 <CDC_Transmit_FS+0x48>)
 800852a:	f7fe faf3 	bl	8006b14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800852e:	4805      	ldr	r0, [pc, #20]	; (8008544 <CDC_Transmit_FS+0x48>)
 8008530:	f7fe fb30 	bl	8006b94 <USBD_CDC_TransmitPacket>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000598 	.word	0x20000598

08008548 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800855a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800855e:	4618      	mov	r0, r3
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
	...

0800856c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*PtrRx)(uint8_t *buf, uint16_t Len)) //la interfaZ va a llamar cada vez que se envian datos desde el USB hacia la PC
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8008574:	4a04      	ldr	r2, [pc, #16]	; (8008588 <CDC_Attach_Rx+0x1c>)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6013      	str	r3, [r2, #0]
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20000c74 	.word	0x20000c74

0800858c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2212      	movs	r2, #18
 800859c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800859e:	4b03      	ldr	r3, [pc, #12]	; (80085ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	200000d0 	.word	0x200000d0

080085b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2204      	movs	r2, #4
 80085c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085c2:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	200000e4 	.word	0x200000e4

080085d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d105      	bne.n	80085f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4907      	ldr	r1, [pc, #28]	; (8008608 <USBD_FS_ProductStrDescriptor+0x34>)
 80085ea:	4808      	ldr	r0, [pc, #32]	; (800860c <USBD_FS_ProductStrDescriptor+0x38>)
 80085ec:	f7ff fd76 	bl	80080dc <USBD_GetString>
 80085f0:	e004      	b.n	80085fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	4904      	ldr	r1, [pc, #16]	; (8008608 <USBD_FS_ProductStrDescriptor+0x34>)
 80085f6:	4805      	ldr	r0, [pc, #20]	; (800860c <USBD_FS_ProductStrDescriptor+0x38>)
 80085f8:	f7ff fd70 	bl	80080dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80085fc:	4b02      	ldr	r3, [pc, #8]	; (8008608 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000c78 	.word	0x20000c78
 800860c:	08008e30 	.word	0x08008e30

08008610 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	4904      	ldr	r1, [pc, #16]	; (8008630 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008620:	4804      	ldr	r0, [pc, #16]	; (8008634 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008622:	f7ff fd5b 	bl	80080dc <USBD_GetString>
  return USBD_StrDesc;
 8008626:	4b02      	ldr	r3, [pc, #8]	; (8008630 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20000c78 	.word	0x20000c78
 8008634:	08008e48 	.word	0x08008e48

08008638 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	6039      	str	r1, [r7, #0]
 8008642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	221a      	movs	r2, #26
 8008648:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800864a:	f000 f843 	bl	80086d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800864e:	4b02      	ldr	r3, [pc, #8]	; (8008658 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	200000e8 	.word	0x200000e8

0800865c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d105      	bne.n	800867a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4907      	ldr	r1, [pc, #28]	; (8008690 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008672:	4808      	ldr	r0, [pc, #32]	; (8008694 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008674:	f7ff fd32 	bl	80080dc <USBD_GetString>
 8008678:	e004      	b.n	8008684 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	4904      	ldr	r1, [pc, #16]	; (8008690 <USBD_FS_ConfigStrDescriptor+0x34>)
 800867e:	4805      	ldr	r0, [pc, #20]	; (8008694 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008680:	f7ff fd2c 	bl	80080dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008684:	4b02      	ldr	r3, [pc, #8]	; (8008690 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000c78 	.word	0x20000c78
 8008694:	08008e5c 	.word	0x08008e5c

08008698 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4907      	ldr	r1, [pc, #28]	; (80086cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ae:	4808      	ldr	r0, [pc, #32]	; (80086d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086b0:	f7ff fd14 	bl	80080dc <USBD_GetString>
 80086b4:	e004      	b.n	80086c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4904      	ldr	r1, [pc, #16]	; (80086cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ba:	4805      	ldr	r0, [pc, #20]	; (80086d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086bc:	f7ff fd0e 	bl	80080dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c0:	4b02      	ldr	r3, [pc, #8]	; (80086cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000c78 	.word	0x20000c78
 80086d0:	08008e68 	.word	0x08008e68

080086d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <Get_SerialNum+0x44>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086e0:	4b0e      	ldr	r3, [pc, #56]	; (800871c <Get_SerialNum+0x48>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086e6:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <Get_SerialNum+0x4c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4413      	add	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086fa:	2208      	movs	r2, #8
 80086fc:	4909      	ldr	r1, [pc, #36]	; (8008724 <Get_SerialNum+0x50>)
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f814 	bl	800872c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008704:	2204      	movs	r2, #4
 8008706:	4908      	ldr	r1, [pc, #32]	; (8008728 <Get_SerialNum+0x54>)
 8008708:	68b8      	ldr	r0, [r7, #8]
 800870a:	f000 f80f 	bl	800872c <IntToUnicode>
  }
}
 800870e:	bf00      	nop
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	1fff7a10 	.word	0x1fff7a10
 800871c:	1fff7a14 	.word	0x1fff7a14
 8008720:	1fff7a18 	.word	0x1fff7a18
 8008724:	200000ea 	.word	0x200000ea
 8008728:	200000fa 	.word	0x200000fa

0800872c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800873e:	2300      	movs	r3, #0
 8008740:	75fb      	strb	r3, [r7, #23]
 8008742:	e027      	b.n	8008794 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	0f1b      	lsrs	r3, r3, #28
 8008748:	2b09      	cmp	r3, #9
 800874a:	d80b      	bhi.n	8008764 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	0f1b      	lsrs	r3, r3, #28
 8008750:	b2da      	uxtb	r2, r3
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	4619      	mov	r1, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	440b      	add	r3, r1
 800875c:	3230      	adds	r2, #48	; 0x30
 800875e:	b2d2      	uxtb	r2, r2
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	e00a      	b.n	800877a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	0f1b      	lsrs	r3, r3, #28
 8008768:	b2da      	uxtb	r2, r3
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	4619      	mov	r1, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	440b      	add	r3, r1
 8008774:	3237      	adds	r2, #55	; 0x37
 8008776:	b2d2      	uxtb	r2, r2
 8008778:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	3301      	adds	r3, #1
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	4413      	add	r3, r2
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	3301      	adds	r3, #1
 8008792:	75fb      	strb	r3, [r7, #23]
 8008794:	7dfa      	ldrb	r2, [r7, #23]
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	429a      	cmp	r2, r3
 800879a:	d3d3      	bcc.n	8008744 <IntToUnicode+0x18>
  }
}
 800879c:	bf00      	nop
 800879e:	bf00      	nop
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
	...

080087ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08a      	sub	sp, #40	; 0x28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b4:	f107 0314 	add.w	r3, r7, #20
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	605a      	str	r2, [r3, #4]
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	60da      	str	r2, [r3, #12]
 80087c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087cc:	d13a      	bne.n	8008844 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ce:	2300      	movs	r3, #0
 80087d0:	613b      	str	r3, [r7, #16]
 80087d2:	4b1e      	ldr	r3, [pc, #120]	; (800884c <HAL_PCD_MspInit+0xa0>)
 80087d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d6:	4a1d      	ldr	r2, [pc, #116]	; (800884c <HAL_PCD_MspInit+0xa0>)
 80087d8:	f043 0301 	orr.w	r3, r3, #1
 80087dc:	6313      	str	r3, [r2, #48]	; 0x30
 80087de:	4b1b      	ldr	r3, [pc, #108]	; (800884c <HAL_PCD_MspInit+0xa0>)
 80087e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80087ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f0:	2302      	movs	r3, #2
 80087f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087f8:	2303      	movs	r3, #3
 80087fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087fc:	230a      	movs	r3, #10
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008800:	f107 0314 	add.w	r3, r7, #20
 8008804:	4619      	mov	r1, r3
 8008806:	4812      	ldr	r0, [pc, #72]	; (8008850 <HAL_PCD_MspInit+0xa4>)
 8008808:	f7f9 fdae 	bl	8002368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800880c:	4b0f      	ldr	r3, [pc, #60]	; (800884c <HAL_PCD_MspInit+0xa0>)
 800880e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008810:	4a0e      	ldr	r2, [pc, #56]	; (800884c <HAL_PCD_MspInit+0xa0>)
 8008812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008816:	6353      	str	r3, [r2, #52]	; 0x34
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	4b0b      	ldr	r3, [pc, #44]	; (800884c <HAL_PCD_MspInit+0xa0>)
 800881e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008820:	4a0a      	ldr	r2, [pc, #40]	; (800884c <HAL_PCD_MspInit+0xa0>)
 8008822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008826:	6453      	str	r3, [r2, #68]	; 0x44
 8008828:	4b08      	ldr	r3, [pc, #32]	; (800884c <HAL_PCD_MspInit+0xa0>)
 800882a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	2043      	movs	r0, #67	; 0x43
 800883a:	f7f9 f9ee 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800883e:	2043      	movs	r0, #67	; 0x43
 8008840:	f7f9 fa07 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008844:	bf00      	nop
 8008846:	3728      	adds	r7, #40	; 0x28
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	40023800 	.word	0x40023800
 8008850:	40020000 	.word	0x40020000

08008854 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f7fe fabb 	bl	8006de6 <USBD_LL_SetupStage>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800888a:	78fa      	ldrb	r2, [r7, #3]
 800888c:	6879      	ldr	r1, [r7, #4]
 800888e:	4613      	mov	r3, r2
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	4413      	add	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	440b      	add	r3, r1
 8008898:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	78fb      	ldrb	r3, [r7, #3]
 80088a0:	4619      	mov	r1, r3
 80088a2:	f7fe faf5 	bl	8006e90 <USBD_LL_DataOutStage>
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	460b      	mov	r3, r1
 80088b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80088c0:	78fa      	ldrb	r2, [r7, #3]
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	4613      	mov	r3, r2
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	3320      	adds	r3, #32
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	78fb      	ldrb	r3, [r7, #3]
 80088d4:	4619      	mov	r1, r3
 80088d6:	f7fe fb97 	bl	8007008 <USBD_LL_DataInStage>
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fe fcdb 	bl	80072ac <USBD_LL_SOF>
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008906:	2301      	movs	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	79db      	ldrb	r3, [r3, #7]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d001      	beq.n	8008916 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008912:	f7f8 fac5 	bl	8000ea0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800891c:	7bfa      	ldrb	r2, [r7, #15]
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe fc7f 	bl	8007224 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fc26 	bl	800717e <USBD_LL_Reset>
}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fc7a 	bl	8007244 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008962:	f043 0301 	orr.w	r3, r3, #1
 8008966:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	7adb      	ldrb	r3, [r3, #11]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <HAL_PCD_SuspendCallback+0x48>)
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	4a03      	ldr	r2, [pc, #12]	; (8008984 <HAL_PCD_SuspendCallback+0x48>)
 8008976:	f043 0306 	orr.w	r3, r3, #6
 800897a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	e000ed00 	.word	0xe000ed00

08008988 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fc70 	bl	800727c <USBD_LL_Resume>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	4611      	mov	r1, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fe fcc8 	bl	8007350 <USBD_LL_IsoOUTIncomplete>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fc84 	bl	80072ec <USBD_LL_IsoINIncomplete>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fcda 	bl	80073b4 <USBD_LL_DevConnected>
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fcd7 	bl	80073ca <USBD_LL_DevDisconnected>
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d13c      	bne.n	8008aae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a34:	4a20      	ldr	r2, [pc, #128]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a1e      	ldr	r2, [pc, #120]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a40:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a44:	4b1c      	ldr	r3, [pc, #112]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a4c:	4b1a      	ldr	r3, [pc, #104]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a4e:	2204      	movs	r2, #4
 8008a50:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a52:	4b19      	ldr	r3, [pc, #100]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a54:	2202      	movs	r2, #2
 8008a56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a58:	4b17      	ldr	r3, [pc, #92]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a5e:	4b16      	ldr	r3, [pc, #88]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a60:	2202      	movs	r2, #2
 8008a62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a64:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a6a:	4b13      	ldr	r3, [pc, #76]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a70:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a76:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a7c:	4b0e      	ldr	r3, [pc, #56]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a82:	480d      	ldr	r0, [pc, #52]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a84:	f7f9 fe27 	bl	80026d6 <HAL_PCD_Init>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a8e:	f7f8 fa07 	bl	8000ea0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a92:	2180      	movs	r1, #128	; 0x80
 8008a94:	4808      	ldr	r0, [pc, #32]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008a96:	f7fb f854 	bl	8003b42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a9a:	2240      	movs	r2, #64	; 0x40
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4806      	ldr	r0, [pc, #24]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008aa0:	f7fb f808 	bl	8003ab4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008aa4:	2280      	movs	r2, #128	; 0x80
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	4803      	ldr	r0, [pc, #12]	; (8008ab8 <USBD_LL_Init+0x94>)
 8008aaa:	f7fb f803 	bl	8003ab4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20000e78 	.word	0x20000e78

08008abc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f9 ff0e 	bl	80028f4 <HAL_PCD_Start>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f942 	bl	8008d68 <USBD_Get_USB_Status>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	461a      	mov	r2, r3
 8008b00:	4603      	mov	r3, r0
 8008b02:	70fb      	strb	r3, [r7, #3]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70bb      	strb	r3, [r7, #2]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b1a:	78bb      	ldrb	r3, [r7, #2]
 8008b1c:	883a      	ldrh	r2, [r7, #0]
 8008b1e:	78f9      	ldrb	r1, [r7, #3]
 8008b20:	f7fa fbe2 	bl	80032e8 <HAL_PCD_EP_Open>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f91c 	bl	8008d68 <USBD_Get_USB_Status>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b58:	78fa      	ldrb	r2, [r7, #3]
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fa fc2d 	bl	80033bc <HAL_PCD_EP_Close>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 f8fd 	bl	8008d68 <USBD_Get_USB_Status>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fa fce5 	bl	800356a <HAL_PCD_EP_SetStall>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f8de 	bl	8008d68 <USBD_Get_USB_Status>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bd4:	78fa      	ldrb	r2, [r7, #3]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fa fd29 	bl	8003630 <HAL_PCD_EP_ClrStall>
 8008bde:	4603      	mov	r3, r0
 8008be0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f8bf 	bl	8008d68 <USBD_Get_USB_Status>
 8008bea:	4603      	mov	r3, r0
 8008bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	da0b      	bge.n	8008c2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	3316      	adds	r3, #22
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	e00b      	b.n	8008c44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	4613      	mov	r3, r2
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008c42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fa fb16 	bl	80032a0 <HAL_PCD_SetAddress>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f874 	bl	8008d68 <USBD_Get_USB_Status>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	603b      	str	r3, [r7, #0]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cac:	7af9      	ldrb	r1, [r7, #11]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	f7fa fc20 	bl	80034f6 <HAL_PCD_EP_Transmit>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f853 	bl	8008d68 <USBD_Get_USB_Status>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cee:	7af9      	ldrb	r1, [r7, #11]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	f7fa fbac 	bl	8003450 <HAL_PCD_EP_Receive>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 f832 	bl	8008d68 <USBD_Get_USB_Status>
 8008d04:	4603      	mov	r3, r0
 8008d06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d08:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d24:	78fa      	ldrb	r2, [r7, #3]
 8008d26:	4611      	mov	r1, r2
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fa fbcc 	bl	80034c6 <HAL_PCD_EP_GetRxCount>
 8008d2e:	4603      	mov	r3, r0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d40:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <USBD_static_malloc+0x18>)
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	2000135c 	.word	0x2000135c

08008d54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]

}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d817      	bhi.n	8008dac <USBD_Get_USB_Status+0x44>
 8008d7c:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <USBD_Get_USB_Status+0x1c>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008d95 	.word	0x08008d95
 8008d88:	08008d9b 	.word	0x08008d9b
 8008d8c:	08008da1 	.word	0x08008da1
 8008d90:	08008da7 	.word	0x08008da7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e00b      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e008      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	e005      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008da6:	2303      	movs	r3, #3
 8008da8:	73fb      	strb	r3, [r7, #15]
    break;
 8008daa:	e002      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dac:	2303      	movs	r3, #3
 8008dae:	73fb      	strb	r3, [r7, #15]
    break;
 8008db0:	bf00      	nop
  }
  return usb_status;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <memset>:
 8008dc0:	4402      	add	r2, r0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d100      	bne.n	8008dca <memset+0xa>
 8008dc8:	4770      	bx	lr
 8008dca:	f803 1b01 	strb.w	r1, [r3], #1
 8008dce:	e7f9      	b.n	8008dc4 <memset+0x4>

08008dd0 <__libc_init_array>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4d0d      	ldr	r5, [pc, #52]	; (8008e08 <__libc_init_array+0x38>)
 8008dd4:	4c0d      	ldr	r4, [pc, #52]	; (8008e0c <__libc_init_array+0x3c>)
 8008dd6:	1b64      	subs	r4, r4, r5
 8008dd8:	10a4      	asrs	r4, r4, #2
 8008dda:	2600      	movs	r6, #0
 8008ddc:	42a6      	cmp	r6, r4
 8008dde:	d109      	bne.n	8008df4 <__libc_init_array+0x24>
 8008de0:	4d0b      	ldr	r5, [pc, #44]	; (8008e10 <__libc_init_array+0x40>)
 8008de2:	4c0c      	ldr	r4, [pc, #48]	; (8008e14 <__libc_init_array+0x44>)
 8008de4:	f000 f818 	bl	8008e18 <_init>
 8008de8:	1b64      	subs	r4, r4, r5
 8008dea:	10a4      	asrs	r4, r4, #2
 8008dec:	2600      	movs	r6, #0
 8008dee:	42a6      	cmp	r6, r4
 8008df0:	d105      	bne.n	8008dfe <__libc_init_array+0x2e>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df8:	4798      	blx	r3
 8008dfa:	3601      	adds	r6, #1
 8008dfc:	e7ee      	b.n	8008ddc <__libc_init_array+0xc>
 8008dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e02:	4798      	blx	r3
 8008e04:	3601      	adds	r6, #1
 8008e06:	e7f2      	b.n	8008dee <__libc_init_array+0x1e>
 8008e08:	08008e98 	.word	0x08008e98
 8008e0c:	08008e98 	.word	0x08008e98
 8008e10:	08008e98 	.word	0x08008e98
 8008e14:	08008e9c 	.word	0x08008e9c

08008e18 <_init>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr

08008e24 <_fini>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	bf00      	nop
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr
