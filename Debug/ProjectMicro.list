
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a48  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007be0  08007be0  00017be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c38  08007c38  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08007c38  08007c38  00017c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c40  08007c40  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c44  08007c44  00017c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08007c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001264  20000104  08007d4c  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001368  08007d4c  00021368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dda  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a4  00000000  00000000  00032f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  000361f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce7  00000000  00000000  000372f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fab  00000000  00000000  00037fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154f6  00000000  00000000  00050f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fb86  00000000  00000000  00066478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004660  00000000  00000000  000f6000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000fa660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007bc8 	.word	0x08007bc8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08007bc8 	.word	0x08007bc8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <datafromUSB>:
/**
 * recibo la informacion enviada por puerto USB (lo enviado por QT), y guardo los bytes recibidos en el buffer circular bufferRx[] de la estructura datosComSerie
 * UNER = 55 4E 45 52 // Nbytes= 02 // ':' = 3A // Alive= F0 // 0xC4 = checksum
 */

void datafromUSB(uint8_t *buf, uint16_t length){
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	81fb      	strh	r3, [r7, #14]
 80004e4:	e014      	b.n	8000510 <datafromUSB+0x3c>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 80004e6:	89fb      	ldrh	r3, [r7, #14]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <datafromUSB+0x54>)
 80004ee:	78d2      	ldrb	r2, [r2, #3]
 80004f0:	b2d2      	uxtb	r2, r2
 80004f2:	4611      	mov	r1, r2
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <datafromUSB+0x54>)
 80004f8:	440b      	add	r3, r1
 80004fa:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <datafromUSB+0x54>)
 80004fe:	78db      	ldrb	r3, [r3, #3]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	3301      	adds	r3, #1
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <datafromUSB+0x54>)
 8000508:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 800050a:	89fb      	ldrh	r3, [r7, #14]
 800050c:	3301      	adds	r3, #1
 800050e:	81fb      	strh	r3, [r7, #14]
 8000510:	89fa      	ldrh	r2, [r7, #14]
 8000512:	887b      	ldrh	r3, [r7, #2]
 8000514:	429a      	cmp	r2, r3
 8000516:	d3e6      	bcc.n	80004e6 <datafromUSB+0x12>
  }

}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000170 	.word	0x20000170

0800052c <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

	//si llegó informacion entonces llamo a decodeheader para el analisis del protocolo "UNER"
	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){ //si Recepcion write =! Recepcion read => buffer lleno
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791a      	ldrb	r2, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	78db      	ldrb	r3, [r3, #3]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	429a      	cmp	r2, r3
 8000540:	d007      	beq.n	8000552 <comunicationsTask+0x26>
		DecodeHeader(datosCom);
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f80c 	bl	8000560 <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <comunicationsTask+0x30>)
 800054a:	78db      	ldrb	r3, [r3, #3]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b03      	ldr	r3, [pc, #12]	; (800055c <comunicationsTask+0x30>)
 8000550:	711a      	strb	r2, [r3, #4]
//	}
//
//	if(CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend) == USBD_OK){
//		datosComSerie.indexReadTx += datosComSerie.bytesTosend;
//	}
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000170 	.word	0x20000170

08000560 <DecodeHeader>:

/**
 * Máquina de estados que busca: 'U', 'N', 'E', 'R', nBytes, ':', Payload, Checksum
 * Si todo es válido, llama a: decodeData(datosCom);
 */
void DecodeHeader(_sDato *datosCom){ //Recibo un puntero a la estructura de comunicación que contiene los buffers y los índices
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;		//Variable estática para recordar cuántos bytes de payload quedan por procesar

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx; //Guardo una copia del índice de escritura para no interferir con interrupciones
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	78db      	ldrb	r3, [r3, #3]
 800056c:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 800056e:	e0df      	b.n	8000730 <DecodeHeader+0x1d0>
    {
        switch (estadoProtocolo) {					//Mientras haya nuevos datos no leídos en el buffer de recepción...
 8000570:	4b75      	ldr	r3, [pc, #468]	; (8000748 <DecodeHeader+0x1e8>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b06      	cmp	r3, #6
 8000576:	f200 80d7 	bhi.w	8000728 <DecodeHeader+0x1c8>
 800057a:	a201      	add	r2, pc, #4	; (adr r2, 8000580 <DecodeHeader+0x20>)
 800057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000580:	0800059d 	.word	0x0800059d
 8000584:	080005c5 	.word	0x080005c5
 8000588:	080005f9 	.word	0x080005f9
 800058c:	0800062d 	.word	0x0800062d
 8000590:	08000661 	.word	0x08000661
 8000594:	08000689 	.word	0x08000689
 8000598:	080006cb 	.word	0x080006cb
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	b2d1      	uxtb	r1, r2
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	7111      	strb	r1, [r2, #4]
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	79db      	ldrb	r3, [r3, #7]
 80005b0:	2b55      	cmp	r3, #85	; 0x55
 80005b2:	f040 80bd 	bne.w	8000730 <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80005b6:	4b64      	ldr	r3, [pc, #400]	; (8000748 <DecodeHeader+0x1e8>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80005c2:	e0b5      	b.n	8000730 <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	1c5a      	adds	r2, r3, #1
 80005ca:	b2d1      	uxtb	r1, r2
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7111      	strb	r1, [r2, #4]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	79db      	ldrb	r3, [r3, #7]
 80005d8:	2b4e      	cmp	r3, #78	; 0x4e
 80005da:	d103      	bne.n	80005e4 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80005dc:	4b5a      	ldr	r3, [pc, #360]	; (8000748 <DecodeHeader+0x1e8>)
 80005de:	2202      	movs	r2, #2
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	e0a5      	b.n	8000730 <DecodeHeader+0x1d0>
                else{
                    datosCom->indexReadRx--;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80005f0:	4b55      	ldr	r3, [pc, #340]	; (8000748 <DecodeHeader+0x1e8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
                }
                break;
 80005f6:	e09b      	b.n	8000730 <DecodeHeader+0x1d0>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	b2d1      	uxtb	r1, r2
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7111      	strb	r1, [r2, #4]
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	79db      	ldrb	r3, [r3, #7]
 800060c:	2b45      	cmp	r3, #69	; 0x45
 800060e:	d103      	bne.n	8000618 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000610:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <DecodeHeader+0x1e8>)
 8000612:	2203      	movs	r2, #3
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	e08b      	b.n	8000730 <DecodeHeader+0x1d0>
                else{
                    datosCom->indexReadRx--;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	3b01      	subs	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000624:	4b48      	ldr	r3, [pc, #288]	; (8000748 <DecodeHeader+0x1e8>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
                }
                break;
 800062a:	e081      	b.n	8000730 <DecodeHeader+0x1d0>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	b2d1      	uxtb	r1, r2
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	7111      	strb	r1, [r2, #4]
 8000638:	461a      	mov	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	79db      	ldrb	r3, [r3, #7]
 8000640:	2b52      	cmp	r3, #82	; 0x52
 8000642:	d103      	bne.n	800064c <DecodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <DecodeHeader+0x1e8>)
 8000646:	2204      	movs	r2, #4
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	e071      	b.n	8000730 <DecodeHeader+0x1d0>
				else{
					datosCom->indexReadRx--;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	3b01      	subs	r3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 8000658:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <DecodeHeader+0x1e8>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
				}
            break;
 800065e:	e067      	b.n	8000730 <DecodeHeader+0x1d0>
            case NBYTES: //Leer byte de cantidad de datos (nBytes) y avanzar
                datosCom->indexStart=datosCom->indexReadRx;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791a      	ldrb	r2, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	b2d1      	uxtb	r1, r2
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7111      	strb	r1, [r2, #4]
 8000674:	461a      	mov	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	79da      	ldrb	r2, [r3, #7]
 800067c:	4b33      	ldr	r3, [pc, #204]	; (800074c <DecodeHeader+0x1ec>)
 800067e:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <DecodeHeader+0x1e8>)
 8000682:	2205      	movs	r2, #5
 8000684:	701a      	strb	r2, [r3, #0]
                break;
 8000686:	e053      	b.n	8000730 <DecodeHeader+0x1d0>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	b2d1      	uxtb	r1, r2
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7111      	strb	r1, [r2, #4]
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	79db      	ldrb	r3, [r3, #7]
 800069c:	2b3a      	cmp	r3, #58	; 0x3a
 800069e:	d10a      	bne.n	80006b6 <DecodeHeader+0x156>

                   estadoProtocolo=PAYLOAD;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <DecodeHeader+0x1e8>)
 80006a2:	2206      	movs	r2, #6
 80006a4:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <DecodeHeader+0x1ec>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	709a      	strb	r2, [r3, #2]
 80006b4:	e03c      	b.n	8000730 <DecodeHeader+0x1d0>
                }
                else{
                    datosCom->indexReadRx--;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <DecodeHeader+0x1e8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006c8:	e032      	b.n	8000730 <DecodeHeader+0x1d0>
            case PAYLOAD:

                if (nBytes>1){
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <DecodeHeader+0x1ec>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d90f      	bls.n	80006f2 <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	b2d1      	uxtb	r1, r2
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7111      	strb	r1, [r2, #4]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	79da      	ldrb	r2, [r3, #7]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	789b      	ldrb	r3, [r3, #2]
 80006ea:	4053      	eors	r3, r2
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <DecodeHeader+0x1ec>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <DecodeHeader+0x1ec>)
 80006fc:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){ //Cuando ya se leyeron todos los datos, compara el checksum. Si es correcto, llama a decodeData() para procesar el mensaje.
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <DecodeHeader+0x1ec>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d114      	bne.n	8000730 <DecodeHeader+0x1d0>
                    estadoProtocolo=START;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <DecodeHeader+0x1e8>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	789a      	ldrb	r2, [r3, #2]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	440b      	add	r3, r1
 800071a:	79db      	ldrb	r3, [r3, #7]
 800071c:	429a      	cmp	r2, r3
 800071e:	d107      	bne.n	8000730 <DecodeHeader+0x1d0>
                        decodeData(datosCom);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f815 	bl	8000750 <decodeData>
                    }
                }

                break;
 8000726:	e003      	b.n	8000730 <DecodeHeader+0x1d0>
            default:
                estadoProtocolo=START;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <DecodeHeader+0x1e8>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
                break;
 800072e:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	7bfa      	ldrb	r2, [r7, #15]
 8000736:	429a      	cmp	r2, r3
 8000738:	f47f af1a 	bne.w	8000570 <DecodeHeader+0x10>
        }
    }
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000378 	.word	0x20000378
 800074c:	20000120 	.word	0x20000120

08000750 <decodeData>:

//si el protocolo fue valido => preparo respuestas
void decodeData(_sDato *datosCom){ //responde segun el ID recibido. Busca el ID del comando en la tercera posición del payload (después del token y del byte de longitud).
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]


    uint8_t bufAux[20], indiceAux=0,bytes=0;
 8000758:	2300      	movs	r3, #0
 800075a:	77bb      	strb	r3, [r7, #30]
 800075c:	2300      	movs	r3, #0
 800075e:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2, /ID EN LA POSICION 2, porque es donde se adjunta el byte que te dice "ALIVE, FIRMWARE, ETC"
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	785b      	ldrb	r3, [r3, #1]
 8000764:	3302      	adds	r3, #2
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	79db      	ldrb	r3, [r3, #7]
 800076c:	2bf2      	cmp	r3, #242	; 0xf2
 800076e:	d024      	beq.n	80007ba <decodeData+0x6a>
 8000770:	2bf2      	cmp	r3, #242	; 0xf2
 8000772:	dc2b      	bgt.n	80007cc <decodeData+0x7c>
 8000774:	2bf0      	cmp	r3, #240	; 0xf0
 8000776:	d002      	beq.n	800077e <decodeData+0x2e>
 8000778:	2bf1      	cmp	r3, #241	; 0xf1
 800077a:	d013      	beq.n	80007a4 <decodeData+0x54>
 800077c:	e026      	b.n	80007cc <decodeData+0x7c>
    {

	case ALIVE:
		bufAux[indiceAux++] = ALIVE;   	// ID de respuesta
 800077e:	7fbb      	ldrb	r3, [r7, #30]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	77ba      	strb	r2, [r7, #30]
 8000784:	3320      	adds	r3, #32
 8000786:	443b      	add	r3, r7
 8000788:	22f0      	movs	r2, #240	; 0xf0
 800078a:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = 0x0D;    	// Respuesta: ACK
 800078e:	7fbb      	ldrb	r3, [r7, #30]
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	77ba      	strb	r2, [r7, #30]
 8000794:	3320      	adds	r3, #32
 8000796:	443b      	add	r3, r7
 8000798:	220d      	movs	r2, #13
 800079a:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 0x03;        			// NBYTES = 3 (ID + Dato + Checksum)
 800079e:	2303      	movs	r3, #3
 80007a0:	77fb      	strb	r3, [r7, #31]
	break;
 80007a2:	e01e      	b.n	80007e2 <decodeData+0x92>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80007a4:	7fbb      	ldrb	r3, [r7, #30]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	77ba      	strb	r2, [r7, #30]
 80007aa:	3320      	adds	r3, #32
 80007ac:	443b      	add	r3, r7
 80007ae:	22f1      	movs	r2, #241	; 0xf1
 80007b0:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80007b4:	2302      	movs	r3, #2
 80007b6:	77fb      	strb	r3, [r7, #31]

    break;
 80007b8:	e013      	b.n	80007e2 <decodeData+0x92>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80007ba:	7fbb      	ldrb	r3, [r7, #30]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	77ba      	strb	r2, [r7, #30]
 80007c0:	3320      	adds	r3, #32
 80007c2:	443b      	add	r3, r7
 80007c4:	22f2      	movs	r2, #242	; 0xf2
 80007c6:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 80007ca:	e00a      	b.n	80007e2 <decodeData+0x92>

    default:

        bufAux[indiceAux++]=0xFF;
 80007cc:	7fbb      	ldrb	r3, [r7, #30]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	77ba      	strb	r2, [r7, #30]
 80007d2:	3320      	adds	r3, #32
 80007d4:	443b      	add	r3, r7
 80007d6:	22ff      	movs	r2, #255	; 0xff
 80007d8:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 80007dc:	2302      	movs	r3, #2
 80007de:	77fb      	strb	r3, [r7, #31]

    break;
 80007e0:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 80007e2:	7ffa      	ldrb	r2, [r7, #31]
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f804 	bl	80007f8 <SendInfo>
}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <SendInfo>:

//calculo y envio el checksum
void SendInfo(uint8_t bufferAux[], uint8_t bytes){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[20], indiceAux=0,cks=0,i=0;
 8000804:	2300      	movs	r3, #0
 8000806:	77fb      	strb	r3, [r7, #31]
 8000808:	2300      	movs	r3, #0
 800080a:	77bb      	strb	r3, [r7, #30]
 800080c:	2300      	movs	r3, #0
 800080e:	777b      	strb	r3, [r7, #29]

    bufAux[indiceAux++]='U';
 8000810:	7ffb      	ldrb	r3, [r7, #31]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	77fa      	strb	r2, [r7, #31]
 8000816:	3320      	adds	r3, #32
 8000818:	443b      	add	r3, r7
 800081a:	2255      	movs	r2, #85	; 0x55
 800081c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000820:	7ffb      	ldrb	r3, [r7, #31]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	77fa      	strb	r2, [r7, #31]
 8000826:	3320      	adds	r3, #32
 8000828:	443b      	add	r3, r7
 800082a:	224e      	movs	r2, #78	; 0x4e
 800082c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000830:	7ffb      	ldrb	r3, [r7, #31]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	77fa      	strb	r2, [r7, #31]
 8000836:	3320      	adds	r3, #32
 8000838:	443b      	add	r3, r7
 800083a:	2245      	movs	r2, #69	; 0x45
 800083c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000840:	7ffb      	ldrb	r3, [r7, #31]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	77fa      	strb	r2, [r7, #31]
 8000846:	3320      	adds	r3, #32
 8000848:	443b      	add	r3, r7
 800084a:	2252      	movs	r2, #82	; 0x52
 800084c:	f803 2c18 	strb.w	r2, [r3, #-24]

    bufAux[indiceAux++]=bytes;
 8000850:	7ffb      	ldrb	r3, [r7, #31]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	77fa      	strb	r2, [r7, #31]
 8000856:	3320      	adds	r3, #32
 8000858:	443b      	add	r3, r7
 800085a:	78fa      	ldrb	r2, [r7, #3]
 800085c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000860:	7ffb      	ldrb	r3, [r7, #31]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	77fa      	strb	r2, [r7, #31]
 8000866:	3320      	adds	r3, #32
 8000868:	443b      	add	r3, r7
 800086a:	223a      	movs	r2, #58	; 0x3a
 800086c:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(i=0; i<bytes-1; i++){
 8000870:	2300      	movs	r3, #0
 8000872:	777b      	strb	r3, [r7, #29]
 8000874:	e00d      	b.n	8000892 <SendInfo+0x9a>
        bufAux[indiceAux++] = bufferAux[i];
 8000876:	7f7b      	ldrb	r3, [r7, #29]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	441a      	add	r2, r3
 800087c:	7ffb      	ldrb	r3, [r7, #31]
 800087e:	1c59      	adds	r1, r3, #1
 8000880:	77f9      	strb	r1, [r7, #31]
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	3320      	adds	r3, #32
 8000886:	443b      	add	r3, r7
 8000888:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(i=0; i<bytes-1; i++){
 800088c:	7f7b      	ldrb	r3, [r7, #29]
 800088e:	3301      	adds	r3, #1
 8000890:	777b      	strb	r3, [r7, #29]
 8000892:	7f7a      	ldrb	r2, [r7, #29]
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	3b01      	subs	r3, #1
 8000898:	429a      	cmp	r2, r3
 800089a:	dbec      	blt.n	8000876 <SendInfo+0x7e>
    }

    cks	= 0;
 800089c:	2300      	movs	r3, #0
 800089e:	77bb      	strb	r3, [r7, #30]

    //Cargar en bufferTx con checksum:
    for(i=0 ;i<indiceAux;i++){
 80008a0:	2300      	movs	r3, #0
 80008a2:	777b      	strb	r3, [r7, #29]
 80008a4:	e01b      	b.n	80008de <SendInfo+0xe6>
        cks^= bufAux[i];
 80008a6:	7f7b      	ldrb	r3, [r7, #29]
 80008a8:	3320      	adds	r3, #32
 80008aa:	443b      	add	r3, r7
 80008ac:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80008b0:	7fbb      	ldrb	r3, [r7, #30]
 80008b2:	4053      	eors	r3, r2
 80008b4:	77bb      	strb	r3, [r7, #30]
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 80008b6:	7f7a      	ldrb	r2, [r7, #29]
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <SendInfo+0x13c>)
 80008ba:	795b      	ldrb	r3, [r3, #5]
 80008bc:	1c59      	adds	r1, r3, #1
 80008be:	b2c8      	uxtb	r0, r1
 80008c0:	491c      	ldr	r1, [pc, #112]	; (8000934 <SendInfo+0x13c>)
 80008c2:	7148      	strb	r0, [r1, #5]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f102 0320 	add.w	r3, r2, #32
 80008ca:	443b      	add	r3, r7
 80008cc:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <SendInfo+0x13c>)
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    for(i=0 ;i<indiceAux;i++){
 80008d8:	7f7b      	ldrb	r3, [r7, #29]
 80008da:	3301      	adds	r3, #1
 80008dc:	777b      	strb	r3, [r7, #29]
 80008de:	7f7a      	ldrb	r2, [r7, #29]
 80008e0:	7ffb      	ldrb	r3, [r7, #31]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d3df      	bcc.n	80008a6 <SendInfo+0xae>
    }
    // Agregar el checksum al final
    datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <SendInfo+0x13c>)
 80008e8:	795b      	ldrb	r3, [r3, #5]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	b2d1      	uxtb	r1, r2
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <SendInfo+0x13c>)
 80008f0:	7151      	strb	r1, [r2, #5]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <SendInfo+0x13c>)
 80008f6:	4413      	add	r3, r2
 80008f8:	7fba      	ldrb	r2, [r7, #30]
 80008fa:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    // Cantidad total de bytes a transmitir (incluyendo checksum)
    datosComSerie.bytesTosend = datosComSerie.indexWriteTx;
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <SendInfo+0x13c>)
 8000900:	795a      	ldrb	r2, [r3, #5]
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <SendInfo+0x13c>)
 8000904:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207

    // Paquete enviado hacia QT: 55 4E 45 52   01 	 3A     F0         0D          C8
    //							 'U''N''E''R''Nbytes'':''ID:Alive''Payload: ACK''Cheksum'
    CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend); //transmision por USB hacia QT
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <SendInfo+0x13c>)
 800090a:	799b      	ldrb	r3, [r3, #6]
 800090c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000910:	4a08      	ldr	r2, [pc, #32]	; (8000934 <SendInfo+0x13c>)
 8000912:	4413      	add	r3, r2
 8000914:	3307      	adds	r3, #7
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <SendInfo+0x13c>)
 8000918:	f892 2207 	ldrb.w	r2, [r2, #519]	; 0x207
 800091c:	b292      	uxth	r2, r2
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f006 fcc3 	bl	80072ac <CDC_Transmit_FS>
    datosComSerie.indexWriteTx = 0;
 8000926:	4b03      	ldr	r3, [pc, #12]	; (8000934 <SendInfo+0x13c>)
 8000928:	2200      	movs	r2, #0
 800092a:	715a      	strb	r2, [r3, #5]

}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000170 	.word	0x20000170

08000938 <HAL_TIM_PeriodElapsedCallback>:
void CDC_Attach_Rx(void(*PtRx)(uint8_t *buf, uint16_t len)); //buf contiene los bytes recibidos, y len cuantos bytes llegaron
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d104      	bne.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 800094a:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800094c:	7813      	ldrb	r3, [r2, #0]
 800094e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000952:	7013      	strb	r3, [r2, #0]
	}

}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40010000 	.word	0x40010000
 8000964:	2000016c 	.word	0x2000016c

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	2300      	movs	r3, #0
 8000974:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fa27 	bl	8000dc8 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_Attach_Rx(&datafromUSB);
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <main+0x98>)
 800097c:	f006 fcce 	bl	800731c <CDC_Attach_Rx>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f848 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 f8fe 	bl	8000b84 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000988:	f000 f8ac 	bl	8000ae4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800098c:	f006 fb72 	bl	8007074 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <main+0x9c>)
 8000992:	f002 fc4b 	bl	800322c <HAL_TIM_Base_Start_IT>

  IS10MS = FALSE;
 8000996:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <main+0xa0>)
 8000998:	7813      	ldrb	r3, [r2, #0]
 800099a:	f36f 1386 	bfc	r3, #6, #1
 800099e:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  comunicationsTask(&datosComSerie);
 80009a0:	481a      	ldr	r0, [pc, #104]	; (8000a0c <main+0xa4>)
 80009a2:	f7ff fdc3 	bl	800052c <comunicationsTask>

	  if(IS10MS){
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <main+0xa0>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0f5      	beq.n	80009a0 <main+0x38>
		  time250us++;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	3301      	adds	r3, #1
 80009b8:	71fb      	strb	r3, [r7, #7]
		  IS10MS =! IS10MS;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <main+0xa0>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	b2d9      	uxtb	r1, r3
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <main+0xa0>)
 80009d0:	7813      	ldrb	r3, [r2, #0]
 80009d2:	f361 1386 	bfi	r3, r1, #6, #1
 80009d6:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b27      	cmp	r3, #39	; 0x27
 80009dc:	d9e0      	bls.n	80009a0 <main+0x38>
			  time10ms++;
 80009de:	79bb      	ldrb	r3, [r7, #6]
 80009e0:	3301      	adds	r3, #1
 80009e2:	71bb      	strb	r3, [r7, #6]
			  time250us = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	71fb      	strb	r3, [r7, #7]
			  if(time10ms == 10){
 80009e8:	79bb      	ldrb	r3, [r7, #6]
 80009ea:	2b0a      	cmp	r3, #10
 80009ec:	d1d8      	bne.n	80009a0 <main+0x38>
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <main+0xa8>)
 80009f4:	f000 fd2d 	bl	8001452 <HAL_GPIO_TogglePin>
				  time10ms = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71bb      	strb	r3, [r7, #6]
	  comunicationsTask(&datosComSerie);
 80009fc:	e7d0      	b.n	80009a0 <main+0x38>
 80009fe:	bf00      	nop
 8000a00:	080004d5 	.word	0x080004d5
 8000a04:	20000124 	.word	0x20000124
 8000a08:	2000016c 	.word	0x2000016c
 8000a0c:	20000170 	.word	0x20000170
 8000a10:	40020800 	.word	0x40020800

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	; 0x50
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	2230      	movs	r2, #48	; 0x30
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f007 f8a4 	bl	8007b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <SystemClock_Config+0xc8>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	4a26      	ldr	r2, [pc, #152]	; (8000adc <SystemClock_Config+0xc8>)
 8000a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a46:	6413      	str	r3, [r2, #64]	; 0x40
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <SystemClock_Config+0xc8>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <SystemClock_Config+0xcc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <SystemClock_Config+0xcc>)
 8000a5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <SystemClock_Config+0xcc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a84:	2319      	movs	r3, #25
 8000a86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a88:	23c0      	movs	r3, #192	; 0xc0
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 ff47 	bl	800292c <HAL_RCC_OscConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa4:	f000 f8c0 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aac:	2302      	movs	r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 f9a9 	bl	8002e1c <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ad0:	f000 f8aa 	bl	8000c28 <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3750      	adds	r7, #80	; 0x50
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <MX_TIM1_Init+0x9c>)
 8000b04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b14:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b2c:	4813      	ldr	r0, [pc, #76]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b2e:	f002 fb2d 	bl	800318c <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b38:	f000 f876 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b4a:	f002 fcc1 	bl	80034d0 <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b54:	f000 f868 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_TIM1_Init+0x98>)
 8000b66:	f002 fec3 	bl	80038f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b70:	f000 f85a 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000124 	.word	0x20000124
 8000b80:	40010000 	.word	0x40010000

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_GPIO_Init+0x9c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <MX_GPIO_Init+0xa0>)
 8000bf6:	f000 fc13 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_GPIO_Init+0xa0>)
 8000c14:	f000 fa80 	bl	8001118 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020800 	.word	0x40020800

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_TIM_Base_MspInit+0x48>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d115      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2019      	movs	r0, #25
 8000cb8:	f000 f9f7 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cbc:	2019      	movs	r0, #25
 8000cbe:	f000 fa10 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f8a4 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d2e:	f002 fadf 	bl	80032f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000124 	.word	0x20000124

08000d3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <OTG_FS_IRQHandler+0x10>)
 8000d42:	f000 fce4 	bl	800170e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000c64 	.word	0x20000c64

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d78:	f7ff ffea 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	; (8000dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f006 feed 	bl	8007b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fddf 	bl	8000968 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000db8:	08007c48 	.word	0x08007c48
  ldr r2, =_sbss
 8000dbc:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000dc0:	20001368 	.word	0x20001368

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f94f 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	200f      	movs	r0, #15
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff ff1a 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f967 	bl	80010fe <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f92f 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	2000037c 	.word	0x2000037c

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000037c 	.word	0x2000037c

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff3e 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff31 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa2 	bl	8001050 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e159      	b.n	80013e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 8148 	bne.w	80013e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80a2 	beq.w	80013e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b57      	ldr	r3, [pc, #348]	; (8001400 <HAL_GPIO_Init+0x2e8>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a56      	ldr	r2, [pc, #344]	; (8001400 <HAL_GPIO_Init+0x2e8>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b54      	ldr	r3, [pc, #336]	; (8001400 <HAL_GPIO_Init+0x2e8>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_GPIO_Init+0x2ec>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a49      	ldr	r2, [pc, #292]	; (8001408 <HAL_GPIO_Init+0x2f0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x202>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a48      	ldr	r2, [pc, #288]	; (800140c <HAL_GPIO_Init+0x2f4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x1fe>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a47      	ldr	r2, [pc, #284]	; (8001410 <HAL_GPIO_Init+0x2f8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x1fa>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a46      	ldr	r2, [pc, #280]	; (8001414 <HAL_GPIO_Init+0x2fc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x1f6>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a45      	ldr	r2, [pc, #276]	; (8001418 <HAL_GPIO_Init+0x300>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x1f2>
 8001306:	2304      	movs	r3, #4
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x204>
 800130a:	2307      	movs	r3, #7
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x204>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x204>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x204>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x204>
 800131a:	2300      	movs	r3, #0
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132c:	4935      	ldr	r1, [pc, #212]	; (8001404 <HAL_GPIO_Init+0x2ec>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133a:	4b38      	ldr	r3, [pc, #224]	; (800141c <HAL_GPIO_Init+0x304>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135e:	4a2f      	ldr	r2, [pc, #188]	; (800141c <HAL_GPIO_Init+0x304>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_GPIO_Init+0x304>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001388:	4a24      	ldr	r2, [pc, #144]	; (800141c <HAL_GPIO_Init+0x304>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <HAL_GPIO_Init+0x304>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b2:	4a1a      	ldr	r2, [pc, #104]	; (800141c <HAL_GPIO_Init+0x304>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_GPIO_Init+0x304>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013dc:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_GPIO_Init+0x304>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	f67f aea2 	bls.w	8001134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40020800 	.word	0x40020800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001464:	887a      	ldrh	r2, [r7, #2]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	041a      	lsls	r2, r3, #16
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43d9      	mvns	r1, r3
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	400b      	ands	r3, r1
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af02      	add	r7, sp, #8
 800148c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e101      	b.n	800169c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f006 f852 	bl	800755c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c6:	d102      	bne.n	80014ce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fba5 	bl	8003c22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c1a      	ldrb	r2, [r3, #16]
 80014e0:	f88d 2000 	strb.w	r2, [sp]
 80014e4:	3304      	adds	r3, #4
 80014e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e8:	f002 fa84 	bl	80039f4 <USB_CoreInit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2202      	movs	r2, #2
 80014f6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0ce      	b.n	800169c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f002 fb9d 	bl	8003c44 <USB_SetCurrentMode>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0bf      	b.n	800169c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e04a      	b.n	80015b8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3315      	adds	r3, #21
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3314      	adds	r3, #20
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	b298      	uxth	r0, r3
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	332e      	adds	r3, #46	; 0x2e
 800155e:	4602      	mov	r2, r0
 8001560:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3318      	adds	r3, #24
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	331c      	adds	r3, #28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3320      	adds	r3, #32
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3324      	adds	r3, #36	; 0x24
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	3301      	adds	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3af      	bcc.n	8001522 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e044      	b.n	8001652 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	f203 2355 	addw	r3, r3, #597	; 0x255
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	3301      	adds	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	791b      	ldrb	r3, [r3, #4]
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	429a      	cmp	r2, r3
 800165a:	d3b5      	bcc.n	80015c8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7c1a      	ldrb	r2, [r3, #16]
 8001664:	f88d 2000 	strb.w	r2, [sp]
 8001668:	3304      	adds	r3, #4
 800166a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166c:	f002 fb36 	bl	8003cdc <USB_DevInit>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2202      	movs	r2, #2
 800167a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00c      	b.n	800169c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fb80 	bl	8004d9a <USB_DevDisconnect>

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_PCD_Start+0x1c>
 80016bc:	2302      	movs	r3, #2
 80016be:	e022      	b.n	8001706 <HAL_PCD_Start+0x62>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d009      	beq.n	80016e8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fa87 	bl	8003c00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fb2e 	bl	8004d58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800170e:	b590      	push	{r4, r7, lr}
 8001710:	b08d      	sub	sp, #52	; 0x34
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fbec 	bl	8004f02 <USB_GetMode>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 848c 	bne.w	800204a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fb50 	bl	8004ddc <USB_ReadInterrupts>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8482 	beq.w	8002048 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fb3d 	bl	8004ddc <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b02      	cmp	r3, #2
 800176a:	d107      	bne.n	800177c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f002 0202 	and.w	r2, r2, #2
 800177a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f003 fb2b 	bl	8004ddc <USB_ReadInterrupts>
 8001786:	4603      	mov	r3, r0
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b10      	cmp	r3, #16
 800178e:	d161      	bne.n	8001854 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0210 	bic.w	r2, r2, #16
 800179e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f003 020f 	and.w	r2, r3, #15
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	3304      	adds	r3, #4
 80017be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	0c5b      	lsrs	r3, r3, #17
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d124      	bne.n	8001816 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d035      	beq.n	8001844 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	6a38      	ldr	r0, [r7, #32]
 80017ec:	f003 f962 	bl	8004ab4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fc:	441a      	add	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800180e:	441a      	add	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	e016      	b.n	8001844 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	0c5b      	lsrs	r3, r3, #17
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	2b06      	cmp	r3, #6
 8001820:	d110      	bne.n	8001844 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001828:	2208      	movs	r2, #8
 800182a:	4619      	mov	r1, r3
 800182c:	6a38      	ldr	r0, [r7, #32]
 800182e:	f003 f941 	bl	8004ab4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800183e:	441a      	add	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0210 	orr.w	r2, r2, #16
 8001852:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f003 fabf 	bl	8004ddc <USB_ReadInterrupts>
 800185e:	4603      	mov	r3, r0
 8001860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001864:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001868:	f040 80a7 	bne.w	80019ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fac4 	bl	8004e02 <USB_ReadDevAllOutEpInterrupt>
 800187a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800187c:	e099      	b.n	80019b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 808e 	beq.w	80019a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fae8 	bl	8004e6a <USB_ReadDevOutEPInterrupt>
 800189a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b2:	461a      	mov	r2, r3
 80018b4:	2301      	movs	r3, #1
 80018b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fea4 	bl	8002608 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00c      	beq.n	80018e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d6:	461a      	mov	r2, r3
 80018d8:	2308      	movs	r3, #8
 80018da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 ff7a 	bl	80027d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fa:	461a      	mov	r2, r3
 80018fc:	2310      	movs	r3, #16
 80018fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d030      	beq.n	800196c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	2b80      	cmp	r3, #128	; 0x80
 8001914:	d109      	bne.n	800192a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001928:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800192a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	3304      	adds	r3, #4
 800193e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	78db      	ldrb	r3, [r3, #3]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2200      	movs	r2, #0
 800194c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f005 fefd 	bl	8007754 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001966:	461a      	mov	r2, r3
 8001968:	2302      	movs	r3, #2
 800196a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001982:	461a      	mov	r2, r3
 8001984:	2320      	movs	r3, #32
 8001986:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	4413      	add	r3, r2
 800199a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800199e:	461a      	mov	r2, r3
 80019a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	3301      	adds	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ae:	085b      	lsrs	r3, r3, #1
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f af62 	bne.w	800187e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fa0c 	bl	8004ddc <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019ce:	f040 80db 	bne.w	8001b88 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fa2d 	bl	8004e36 <USB_ReadDevAllInEpInterrupt>
 80019dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80019e2:	e0cd      	b.n	8001b80 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80c2 	beq.w	8001b74 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fa53 	bl	8004ea6 <USB_ReadDevInEPInterrupt>
 8001a00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d057      	beq.n	8001abc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	2201      	movs	r2, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69f9      	ldr	r1, [r7, #28]
 8001a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2301      	movs	r3, #1
 8001a40:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	799b      	ldrb	r3, [r3, #6]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d132      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3320      	adds	r3, #32
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4403      	add	r3, r0
 8001a6a:	331c      	adds	r3, #28
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4419      	add	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4403      	add	r3, r0
 8001a7e:	3320      	adds	r3, #32
 8001a80:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d113      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x3a2>
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	3324      	adds	r3, #36	; 0x24
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2101      	movs	r1, #1
 8001aac:	f003 fa5a 	bl	8004f64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f005 fdd1 	bl	800765e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aee:	461a      	mov	r2, r3
 8001af0:	2310      	movs	r3, #16
 8001af2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d023      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b1c:	6a38      	ldr	r0, [r7, #32]
 8001b1e:	f002 fa41 	bl	8003fa4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	3310      	adds	r3, #16
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	78db      	ldrb	r3, [r3, #3]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d108      	bne.n	8001b50 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2200      	movs	r2, #0
 8001b42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f005 fe14 	bl	8007778 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2302      	movs	r3, #2
 8001b60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fcbd 	bl	80024ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	3301      	adds	r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f47f af2e 	bne.w	80019e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 f925 	bl	8004ddc <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b9c:	d122      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d108      	bne.n	8001bce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fea4 	bl	8002914 <HAL_PCDEx_LPM_Callback>
 8001bcc:	e002      	b.n	8001bd4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f005 fdb2 	bl	8007738 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f8f7 	bl	8004ddc <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf8:	d112      	bne.n	8001c20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f005 fd6e 	bl	80076ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c1e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 f8d9 	bl	8004ddc <USB_ReadInterrupts>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c34:	f040 80b7 	bne.w	8001da6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2110      	movs	r1, #16
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 f9a6 	bl	8003fa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5c:	e046      	b.n	8001cec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c82:	0151      	lsls	r1, r2, #5
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	440a      	add	r2, r1
 8001c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ca4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb6:	0151      	lsls	r1, r2, #5
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	440a      	add	r2, r1
 8001cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd6:	0151      	lsls	r1, r2, #5
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	440a      	add	r2, r1
 8001cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ce0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ce4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce8:	3301      	adds	r3, #1
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	791b      	ldrb	r3, [r3, #4]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d3b2      	bcc.n	8001c5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7bdb      	ldrb	r3, [r3, #15]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d016      	beq.n	8001d42 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d24:	f043 030b 	orr.w	r3, r3, #11
 8001d28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d3a:	f043 030b 	orr.w	r3, r3, #11
 8001d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d40:	e015      	b.n	8001d6e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d54:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d58:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d68:	f043 030b 	orr.w	r3, r3, #11
 8001d6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d90:	461a      	mov	r2, r3
 8001d92:	f003 f8e7 	bl	8004f64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 f816 	bl	8004ddc <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dba:	d123      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 f8ac 	bl	8004f1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f002 f963 	bl	8004096 <USB_GetDevSpeed>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681c      	ldr	r4, [r3, #0]
 8001ddc:	f001 f9ca 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8001de0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001de6:	461a      	mov	r2, r3
 8001de8:	4620      	mov	r0, r4
 8001dea:	f001 fe67 	bl	8003abc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f005 fc5d 	bl	80076ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 ffe7 	bl	8004ddc <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d10a      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f005 fc3a 	bl	8007692 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f002 0208 	and.w	r2, r2, #8
 8001e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 ffd2 	bl	8004ddc <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	2b80      	cmp	r3, #128	; 0x80
 8001e40:	d123      	bne.n	8001e8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e4e:	2301      	movs	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e014      	b.n	8001e7e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fb0a 	bl	800248c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d3e4      	bcc.n	8001e54 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 ffa4 	bl	8004ddc <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e9e:	d13c      	bne.n	8001f1a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	e02b      	b.n	8001efe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d115      	bne.n	8001ef8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ecc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da12      	bge.n	8001ef8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3317      	adds	r3, #23
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 faca 	bl	800248c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	3301      	adds	r3, #1
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	791b      	ldrb	r3, [r3, #4]
 8001f02:	461a      	mov	r2, r3
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d3cd      	bcc.n	8001ea6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 ff5c 	bl	8004ddc <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f2e:	d156      	bne.n	8001fde <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f30:	2301      	movs	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e045      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d12e      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da2b      	bge.n	8001fbc <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	0c1a      	lsrs	r2, r3, #16
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001f6e:	4053      	eors	r3, r2
 8001f70:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d121      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10a      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb8:	6053      	str	r3, [r2, #4]
            break;
 8001fba:	e008      	b.n	8001fce <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	791b      	ldrb	r3, [r3, #4]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d3b3      	bcc.n	8001f36 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fefa 	bl	8004ddc <USB_ReadInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff2:	d10a      	bne.n	800200a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f005 fbd1 	bl	800779c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fee4 	bl	8004ddc <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b04      	cmp	r3, #4
 800201c:	d115      	bne.n	800204a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f005 fbc1 	bl	80077b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	e000      	b.n	800204a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002048:	bf00      	nop
    }
  }
}
 800204a:	3734      	adds	r7, #52	; 0x34
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}

08002050 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_PCD_SetAddress+0x1a>
 8002066:	2302      	movs	r3, #2
 8002068:	e012      	b.n	8002090 <HAL_PCD_SetAddress+0x40>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f002 fe43 	bl	8004d0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	4608      	mov	r0, r1
 80020a2:	4611      	mov	r1, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	70fb      	strb	r3, [r7, #3]
 80020aa:	460b      	mov	r3, r1
 80020ac:	803b      	strh	r3, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	da0f      	bge.n	80020de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 020f 	and.w	r2, r3, #15
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	3310      	adds	r3, #16
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	705a      	strb	r2, [r3, #1]
 80020dc:	e00f      	b.n	80020fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	f003 020f 	and.w	r2, r3, #15
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	3304      	adds	r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800210a:	883b      	ldrh	r3, [r7, #0]
 800210c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	78ba      	ldrb	r2, [r7, #2]
 8002118:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800212c:	78bb      	ldrb	r3, [r7, #2]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d102      	bne.n	8002138 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_PCD_EP_Open+0xae>
 8002142:	2302      	movs	r3, #2
 8002144:	e00e      	b.n	8002164 <HAL_PCD_EP_Open+0xcc>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	4618      	mov	r0, r3
 8002156:	f001 ffc3 	bl	80040e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002162:	7afb      	ldrb	r3, [r7, #11]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800217c:	2b00      	cmp	r3, #0
 800217e:	da0f      	bge.n	80021a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3310      	adds	r3, #16
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	705a      	strb	r2, [r3, #1]
 800219e:	e00f      	b.n	80021c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	f003 020f 	and.w	r2, r3, #15
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	3304      	adds	r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_PCD_EP_Close+0x6e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e00e      	b.n	80021f8 <HAL_PCD_EP_Close+0x8c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f002 f801 	bl	80041f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	460b      	mov	r3, r1
 800220e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	3304      	adds	r3, #4
 8002228:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2200      	movs	r2, #0
 8002240:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002242:	7afb      	ldrb	r3, [r7, #11]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	b2da      	uxtb	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	799b      	ldrb	r3, [r3, #6]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d102      	bne.n	800225c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	799b      	ldrb	r3, [r3, #6]
 8002264:	461a      	mov	r2, r3
 8002266:	6979      	ldr	r1, [r7, #20]
 8002268:	f002 f89e 	bl	80043a8 <USB_EPStartXfer>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002298:	681b      	ldr	r3, [r3, #0]
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	460b      	mov	r3, r1
 80022b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	3310      	adds	r3, #16
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2200      	movs	r2, #0
 80022de:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2201      	movs	r2, #1
 80022e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e6:	7afb      	ldrb	r3, [r7, #11]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	799b      	ldrb	r3, [r3, #6]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	799b      	ldrb	r3, [r3, #6]
 8002308:	461a      	mov	r2, r3
 800230a:	6979      	ldr	r1, [r7, #20]
 800230c:	f002 f84c 	bl	80043a8 <USB_EPStartXfer>

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	7912      	ldrb	r2, [r2, #4]
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e04f      	b.n	80023d8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da0f      	bge.n	8002360 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3310      	adds	r3, #16
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	705a      	strb	r2, [r3, #1]
 800235e:	e00d      	b.n	800237c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_PCD_EP_SetStall+0x82>
 8002398:	2302      	movs	r3, #2
 800239a:	e01d      	b.n	80023d8 <HAL_PCD_EP_SetStall+0xbe>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fbda 	bl	8004b64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7999      	ldrb	r1, [r3, #6]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80023c8:	461a      	mov	r2, r3
 80023ca:	f002 fdcb 	bl	8004f64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	7912      	ldrb	r2, [r2, #4]
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e042      	b.n	8002484 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0f      	bge.n	8002426 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3310      	adds	r3, #16
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	705a      	strb	r2, [r3, #1]
 8002424:	e00f      	b.n	8002446 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	b2da      	uxtb	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_PCD_EP_ClrStall+0x86>
 8002462:	2302      	movs	r3, #2
 8002464:	e00e      	b.n	8002484 <HAL_PCD_EP_ClrStall+0xa4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68f9      	ldr	r1, [r7, #12]
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fbe3 	bl	8004c40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800249c:	2b00      	cmp	r3, #0
 800249e:	da0c      	bge.n	80024ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	f003 020f 	and.w	r2, r3, #15
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3310      	adds	r3, #16
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	3304      	adds	r3, #4
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e00c      	b.n	80024d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fa02 	bl	80048e4 <USB_EPStopXfer>
 80024e0:	4603      	mov	r3, r0
 80024e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024e4:	7afb      	ldrb	r3, [r7, #11]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b08a      	sub	sp, #40	; 0x28
 80024f2:	af02      	add	r7, sp, #8
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	3310      	adds	r3, #16
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	3304      	adds	r3, #4
 8002514:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	429a      	cmp	r2, r3
 8002520:	d901      	bls.n	8002526 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06b      	b.n	80025fe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	429a      	cmp	r2, r3
 800253a:	d902      	bls.n	8002542 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3303      	adds	r3, #3
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800254a:	e02a      	b.n	80025a2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	429a      	cmp	r2, r3
 8002560:	d902      	bls.n	8002568 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3303      	adds	r3, #3
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4603      	mov	r3, r0
 8002584:	6978      	ldr	r0, [r7, #20]
 8002586:	f002 fa57 	bl	8004a38 <USB_WritePacket>

    ep->xfer_buff  += len;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	441a      	add	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	441a      	add	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d809      	bhi.n	80025cc <PCD_WriteEmptyTxFifo+0xde>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d203      	bcs.n	80025cc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1bf      	bne.n	800254c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d811      	bhi.n	80025fc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	2201      	movs	r2, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	6939      	ldr	r1, [r7, #16]
 80025f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025f8:	4013      	ands	r3, r2
 80025fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	333c      	adds	r3, #60	; 0x3c
 8002620:	3304      	adds	r3, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	799b      	ldrb	r3, [r3, #6]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d17b      	bne.n	8002736 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	f240 80b9 	bls.w	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80b3 	beq.w	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266a:	461a      	mov	r2, r3
 800266c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002670:	6093      	str	r3, [r2, #8]
 8002672:	e0a7      	b.n	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268a:	461a      	mov	r2, r3
 800268c:	2320      	movs	r3, #32
 800268e:	6093      	str	r3, [r2, #8]
 8002690:	e098      	b.n	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 8093 	bne.w	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4a4b      	ldr	r2, [pc, #300]	; (80027d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d90f      	bls.n	80026c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026bc:	461a      	mov	r2, r3
 80026be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c2:	6093      	str	r3, [r2, #8]
 80026c4:	e07e      	b.n	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	0159      	lsls	r1, r3, #5
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	440b      	add	r3, r1
 80026e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	1ad2      	subs	r2, r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d114      	bne.n	8002728 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002710:	461a      	mov	r2, r3
 8002712:	2101      	movs	r1, #1
 8002714:	f002 fc26 	bl	8004f64 <USB_EP0_OutStart>
 8002718:	e006      	b.n	8002728 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	441a      	add	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f004 ff7a 	bl	8007628 <HAL_PCD_DataOutStageCallback>
 8002734:	e046      	b.n	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d124      	bne.n	8002788 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275a:	6093      	str	r3, [r2, #8]
 800275c:	e032      	b.n	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002774:	461a      	mov	r2, r3
 8002776:	2320      	movs	r3, #32
 8002778:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f004 ff51 	bl	8007628 <HAL_PCD_DataOutStageCallback>
 8002786:	e01d      	b.n	80027c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d114      	bne.n	80027b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80027b0:	461a      	mov	r2, r3
 80027b2:	2100      	movs	r1, #0
 80027b4:	f002 fbd6 	bl	8004f64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f004 ff32 	bl	8007628 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	4f54300a 	.word	0x4f54300a
 80027d4:	4f54310a 	.word	0x4f54310a

080027d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	333c      	adds	r3, #60	; 0x3c
 80027f0:	3304      	adds	r3, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <PCD_EP_OutSetupPacket_int+0x88>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d90e      	bls.n	800282c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002824:	461a      	mov	r2, r3
 8002826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800282a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f004 fee9 	bl	8007604 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <PCD_EP_OutSetupPacket_int+0x88>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d90c      	bls.n	8002854 <PCD_EP_OutSetupPacket_int+0x7c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	799b      	ldrb	r3, [r3, #6]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800284c:	461a      	mov	r2, r3
 800284e:	2101      	movs	r1, #1
 8002850:	f002 fb88 	bl	8004f64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	4f54300a 	.word	0x4f54300a

08002864 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
 8002870:	4613      	mov	r3, r2
 8002872:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002882:	883b      	ldrh	r3, [r7, #0]
 8002884:	0419      	lsls	r1, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	430a      	orrs	r2, r1
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
 8002890:	e028      	b.n	80028e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4413      	add	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e00d      	b.n	80028c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	3340      	adds	r3, #64	; 0x40
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	4413      	add	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	3301      	adds	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3ec      	bcc.n	80028a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028cc:	883b      	ldrh	r3, [r7, #0]
 80028ce:	0418      	lsls	r0, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	4302      	orrs	r2, r0
 80028dc:	3340      	adds	r3, #64	; 0x40
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e267      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d075      	beq.n	8002a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800294a:	4b88      	ldr	r3, [pc, #544]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d00c      	beq.n	8002970 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002956:	4b85      	ldr	r3, [pc, #532]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800295e:	2b08      	cmp	r3, #8
 8002960:	d112      	bne.n	8002988 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002962:	4b82      	ldr	r3, [pc, #520]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296e:	d10b      	bne.n	8002988 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	4b7e      	ldr	r3, [pc, #504]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d05b      	beq.n	8002a34 <HAL_RCC_OscConfig+0x108>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d157      	bne.n	8002a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e242      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x74>
 8002992:	4b76      	ldr	r3, [pc, #472]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a75      	ldr	r2, [pc, #468]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e01d      	b.n	80029dc <HAL_RCC_OscConfig+0xb0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x98>
 80029aa:	4b70      	ldr	r3, [pc, #448]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6f      	ldr	r2, [pc, #444]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b6d      	ldr	r3, [pc, #436]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6c      	ldr	r2, [pc, #432]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0xb0>
 80029c4:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a68      	ldr	r2, [pc, #416]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a65      	ldr	r2, [pc, #404]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 80029d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe fa56 	bl	8000e94 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7fe fa52 	bl	8000e94 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e207      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b5b      	ldr	r3, [pc, #364]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0xc0>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fa42 	bl	8000e94 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe fa3e 	bl	8000e94 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e1f3      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	4b51      	ldr	r3, [pc, #324]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0xe8>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d063      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a42:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d11c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5a:	4b44      	ldr	r3, [pc, #272]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x152>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e1c7      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4937      	ldr	r1, [pc, #220]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	e03a      	b.n	8002b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_RCC_OscConfig+0x244>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe f9f7 	bl	8000e94 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7fe f9f3 	bl	8000e94 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1a8      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4925      	ldr	r1, [pc, #148]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	e015      	b.n	8002b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <HAL_RCC_OscConfig+0x244>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f9d6 	bl	8000e94 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7fe f9d2 	bl	8000e94 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e187      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d036      	beq.n	8002b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d016      	beq.n	8002b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_RCC_OscConfig+0x248>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe f9b6 	bl	8000e94 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fe f9b2 	bl	8000e94 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e167      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_OscConfig+0x240>)
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x200>
 8002b4a:	e01b      	b.n	8002b84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_OscConfig+0x248>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fe f99f 	bl	8000e94 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	e00e      	b.n	8002b78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5a:	f7fe f99b 	bl	8000e94 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d907      	bls.n	8002b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e150      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	42470000 	.word	0x42470000
 8002b74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ea      	bne.n	8002b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8097 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b96:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b7d      	ldr	r3, [pc, #500]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a7c      	ldr	r2, [pc, #496]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b7a      	ldr	r3, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	4b77      	ldr	r3, [pc, #476]	; (8002da0 <HAL_RCC_OscConfig+0x474>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d118      	bne.n	8002c00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bce:	4b74      	ldr	r3, [pc, #464]	; (8002da0 <HAL_RCC_OscConfig+0x474>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a73      	ldr	r2, [pc, #460]	; (8002da0 <HAL_RCC_OscConfig+0x474>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bda:	f7fe f95b 	bl	8000e94 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be2:	f7fe f957 	bl	8000e94 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e10c      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_RCC_OscConfig+0x474>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x2ea>
 8002c08:	4b64      	ldr	r3, [pc, #400]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a63      	ldr	r2, [pc, #396]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
 8002c14:	e01c      	b.n	8002c50 <HAL_RCC_OscConfig+0x324>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x30c>
 8002c1e:	4b5f      	ldr	r3, [pc, #380]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a5e      	ldr	r2, [pc, #376]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2a:	4b5c      	ldr	r3, [pc, #368]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a5b      	ldr	r2, [pc, #364]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0x324>
 8002c38:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a57      	ldr	r2, [pc, #348]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	4b55      	ldr	r3, [pc, #340]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a54      	ldr	r2, [pc, #336]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c4a:	f023 0304 	bic.w	r3, r3, #4
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe f91c 	bl	8000e94 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe f918 	bl	8000e94 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0cb      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0ee      	beq.n	8002c60 <HAL_RCC_OscConfig+0x334>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe f906 	bl	8000e94 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe f902 	bl	8000e94 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0b5      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca2:	4b3e      	ldr	r3, [pc, #248]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ee      	bne.n	8002c8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb4:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80a1 	beq.w	8002e0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cca:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d05c      	beq.n	8002d90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d141      	bne.n	8002d62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_RCC_OscConfig+0x478>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f8d6 	bl	8000e94 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe f8d2 	bl	8000e94 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e087      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	491b      	ldr	r1, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x478>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f8ab 	bl	8000e94 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe f8a7 	bl	8000e94 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e05c      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x416>
 8002d60:	e054      	b.n	8002e0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_RCC_OscConfig+0x478>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe f894 	bl	8000e94 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe f890 	bl	8000e94 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e045      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x444>
 8002d8e:	e03d      	b.n	8002e0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e038      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40007000 	.word	0x40007000
 8002da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x4ec>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d028      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d121      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d11a      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd8:	4013      	ands	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d111      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	3b01      	subs	r3, #1
 8002df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0cc      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e30:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d90c      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0b8      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e70:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e88:	4b53      	ldr	r3, [pc, #332]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e94:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	494d      	ldr	r1, [pc, #308]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d044      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d119      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e07f      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eda:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e06f      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eea:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e067      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f023 0203 	bic.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4934      	ldr	r1, [pc, #208]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f0c:	f7fd ffc2 	bl	8000e94 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f14:	f7fd ffbe 	bl	8000e94 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e04f      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 020c 	and.w	r2, r3, #12
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d1eb      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d20c      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e032      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4916      	ldr	r1, [pc, #88]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fa2:	f000 f821 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	490a      	ldr	r1, [pc, #40]	; (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	5ccb      	ldrb	r3, [r1, r3]
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd ff22 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023c00 	.word	0x40023c00
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	08007c28 	.word	0x08007c28
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	20000004 	.word	0x20000004

08002fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fec:	b090      	sub	sp, #64	; 0x40
 8002fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003000:	4b59      	ldr	r3, [pc, #356]	; (8003168 <HAL_RCC_GetSysClockFreq+0x180>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d00d      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x40>
 800300c:	2b08      	cmp	r3, #8
 800300e:	f200 80a1 	bhi.w	8003154 <HAL_RCC_GetSysClockFreq+0x16c>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x34>
 8003016:	2b04      	cmp	r3, #4
 8003018:	d003      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0x3a>
 800301a:	e09b      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_GetSysClockFreq+0x184>)
 800301e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003020:	e09b      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003022:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_GetSysClockFreq+0x188>)
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003026:	e098      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003028:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <HAL_RCC_GetSysClockFreq+0x180>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003032:	4b4d      	ldr	r3, [pc, #308]	; (8003168 <HAL_RCC_GetSysClockFreq+0x180>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d028      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_RCC_GetSysClockFreq+0x180>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	099b      	lsrs	r3, r3, #6
 8003044:	2200      	movs	r2, #0
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	627a      	str	r2, [r7, #36]	; 0x24
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003050:	2100      	movs	r1, #0
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_RCC_GetSysClockFreq+0x188>)
 8003054:	fb03 f201 	mul.w	r2, r3, r1
 8003058:	2300      	movs	r3, #0
 800305a:	fb00 f303 	mul.w	r3, r0, r3
 800305e:	4413      	add	r3, r2
 8003060:	4a43      	ldr	r2, [pc, #268]	; (8003170 <HAL_RCC_GetSysClockFreq+0x188>)
 8003062:	fba0 1202 	umull	r1, r2, r0, r2
 8003066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003068:	460a      	mov	r2, r1
 800306a:	62ba      	str	r2, [r7, #40]	; 0x28
 800306c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306e:	4413      	add	r3, r2
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	2200      	movs	r2, #0
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	61fa      	str	r2, [r7, #28]
 800307a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800307e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003082:	f7fd f8a9 	bl	80001d8 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4613      	mov	r3, r2
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308e:	e053      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <HAL_RCC_GetSysClockFreq+0x180>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	2200      	movs	r2, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	617a      	str	r2, [r7, #20]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030a2:	f04f 0b00 	mov.w	fp, #0
 80030a6:	4652      	mov	r2, sl
 80030a8:	465b      	mov	r3, fp
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b8:	0150      	lsls	r0, r2, #5
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	ebb2 080a 	subs.w	r8, r2, sl
 80030c2:	eb63 090b 	sbc.w	r9, r3, fp
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030da:	ebb2 0408 	subs.w	r4, r2, r8
 80030de:	eb63 0509 	sbc.w	r5, r3, r9
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	00eb      	lsls	r3, r5, #3
 80030ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f0:	00e2      	lsls	r2, r4, #3
 80030f2:	4614      	mov	r4, r2
 80030f4:	461d      	mov	r5, r3
 80030f6:	eb14 030a 	adds.w	r3, r4, sl
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	eb45 030b 	adc.w	r3, r5, fp
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310e:	4629      	mov	r1, r5
 8003110:	028b      	lsls	r3, r1, #10
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003118:	4621      	mov	r1, r4
 800311a:	028a      	lsls	r2, r1, #10
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	2200      	movs	r2, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	60fa      	str	r2, [r7, #12]
 8003128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800312c:	f7fd f854 	bl	80001d8 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_GetSysClockFreq+0x180>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	3301      	adds	r3, #1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003148:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003152:	e002      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_GetSysClockFreq+0x184>)
 8003156:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800315c:	4618      	mov	r0, r3
 800315e:	3740      	adds	r7, #64	; 0x40
 8003160:	46bd      	mov	sp, r7
 8003162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	00f42400 	.word	0x00f42400
 8003170:	017d7840 	.word	0x017d7840

08003174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000000 	.word	0x20000000

0800318c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e041      	b.n	8003222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fd66 	bl	8000c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 fa70 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d001      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e044      	b.n	80032ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x6c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d013      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x6c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x6c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x6c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x6c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d111      	bne.n	80032bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d010      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	e007      	b.n	80032cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40014000 	.word	0x40014000

080032f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d020      	beq.n	8003354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0202 	mvn.w	r2, #2
 8003324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f999 	bl	8003672 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f98b 	bl	800365e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f99c 	bl	8003686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d020      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0204 	mvn.w	r2, #4
 8003370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f973 	bl	8003672 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f965 	bl	800365e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f976 	bl	8003686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d020      	beq.n	80033ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0208 	mvn.w	r2, #8
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f94d 	bl	8003672 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f93f 	bl	800365e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f950 	bl	8003686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0210 	mvn.w	r2, #16
 8003408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2208      	movs	r2, #8
 800340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f927 	bl	8003672 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f919 	bl	800365e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f92a 	bl	8003686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0201 	mvn.w	r2, #1
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fa6e 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fab0 	bl	80039e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8fb 	bl	800369a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0220 	mvn.w	r2, #32
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa82 	bl	80039cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_TIM_ConfigClockSource+0x1c>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e0b4      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x186>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800350a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003524:	d03e      	beq.n	80035a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352a:	f200 8087 	bhi.w	800363c <HAL_TIM_ConfigClockSource+0x16c>
 800352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003532:	f000 8086 	beq.w	8003642 <HAL_TIM_ConfigClockSource+0x172>
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353a:	d87f      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x16c>
 800353c:	2b70      	cmp	r3, #112	; 0x70
 800353e:	d01a      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0xa6>
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d87b      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x16c>
 8003544:	2b60      	cmp	r3, #96	; 0x60
 8003546:	d050      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x11a>
 8003548:	2b60      	cmp	r3, #96	; 0x60
 800354a:	d877      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x16c>
 800354c:	2b50      	cmp	r3, #80	; 0x50
 800354e:	d03c      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0xfa>
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d873      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x16c>
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d058      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x13a>
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d86f      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x16c>
 800355c:	2b30      	cmp	r3, #48	; 0x30
 800355e:	d064      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x15a>
 8003560:	2b30      	cmp	r3, #48	; 0x30
 8003562:	d86b      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x16c>
 8003564:	2b20      	cmp	r3, #32
 8003566:	d060      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x15a>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d867      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d05c      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x15a>
 8003570:	2b10      	cmp	r3, #16
 8003572:	d05a      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x15a>
 8003574:	e062      	b.n	800363c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003586:	f000 f993 	bl	80038b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	609a      	str	r2, [r3, #8]
      break;
 80035a2:	e04f      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035b4:	f000 f97c 	bl	80038b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035c6:	609a      	str	r2, [r3, #8]
      break;
 80035c8:	e03c      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d6:	461a      	mov	r2, r3
 80035d8:	f000 f8f0 	bl	80037bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2150      	movs	r1, #80	; 0x50
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f949 	bl	800387a <TIM_ITRx_SetConfig>
      break;
 80035e8:	e02c      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 f90f 	bl	800381a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2160      	movs	r1, #96	; 0x60
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f939 	bl	800387a <TIM_ITRx_SetConfig>
      break;
 8003608:	e01c      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003616:	461a      	mov	r2, r3
 8003618:	f000 f8d0 	bl	80037bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2140      	movs	r1, #64	; 0x40
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f929 	bl	800387a <TIM_ITRx_SetConfig>
      break;
 8003628:	e00c      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f000 f920 	bl	800387a <TIM_ITRx_SetConfig>
      break;
 800363a:	e003      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      break;
 8003640:	e000      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a37      	ldr	r2, [pc, #220]	; (80037a0 <TIM_Base_SetConfig+0xf0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00f      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a34      	ldr	r2, [pc, #208]	; (80037a4 <TIM_Base_SetConfig+0xf4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a33      	ldr	r2, [pc, #204]	; (80037a8 <TIM_Base_SetConfig+0xf8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a32      	ldr	r2, [pc, #200]	; (80037ac <TIM_Base_SetConfig+0xfc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <TIM_Base_SetConfig+0xf0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01b      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003708:	d017      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <TIM_Base_SetConfig+0xf4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <TIM_Base_SetConfig+0xf8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00f      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a23      	ldr	r2, [pc, #140]	; (80037ac <TIM_Base_SetConfig+0xfc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <TIM_Base_SetConfig+0x100>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <TIM_Base_SetConfig+0x104>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a20      	ldr	r2, [pc, #128]	; (80037b8 <TIM_Base_SetConfig+0x108>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <TIM_Base_SetConfig+0xf0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d103      	bne.n	800377a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f043 0204 	orr.w	r2, r3, #4
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40014400 	.word	0x40014400
 80037b8:	40014800 	.word	0x40014800

080037bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 030a 	bic.w	r3, r3, #10
 80037f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800381a:	b480      	push	{r7}
 800381c:	b087      	sub	sp, #28
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f023 0210 	bic.w	r2, r3, #16
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	031b      	lsls	r3, r3, #12
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003856:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	f043 0307 	orr.w	r3, r3, #7
 800389c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	021a      	lsls	r2, r3, #8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003904:	2302      	movs	r3, #2
 8003906:	e050      	b.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d018      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d013      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10c      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40014000 	.word	0x40014000

080039cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039f4:	b084      	sub	sp, #16
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	f107 001c 	add.w	r0, r7, #28
 8003a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d123      	bne.n	8003a56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f001 fae8 	bl	8005020 <USB_CoreReset>
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e01b      	b.n	8003a8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f001 fadc 	bl	8005020 <USB_CoreReset>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a80:	e005      	b.n	8003a8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a8e:	7fbb      	ldrb	r3, [r7, #30]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10b      	bne.n	8003aac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f043 0206 	orr.w	r2, r3, #6
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ab8:	b004      	add	sp, #16
 8003aba:	4770      	bx	lr

08003abc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d165      	bne.n	8003b9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4a41      	ldr	r2, [pc, #260]	; (8003bd8 <USB_SetTurnaroundTime+0x11c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d906      	bls.n	8003ae6 <USB_SetTurnaroundTime+0x2a>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4a40      	ldr	r2, [pc, #256]	; (8003bdc <USB_SetTurnaroundTime+0x120>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d202      	bcs.n	8003ae6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ae0:	230f      	movs	r3, #15
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e062      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4a3c      	ldr	r2, [pc, #240]	; (8003bdc <USB_SetTurnaroundTime+0x120>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d306      	bcc.n	8003afc <USB_SetTurnaroundTime+0x40>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4a3b      	ldr	r2, [pc, #236]	; (8003be0 <USB_SetTurnaroundTime+0x124>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d202      	bcs.n	8003afc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003af6:	230e      	movs	r3, #14
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e057      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4a38      	ldr	r2, [pc, #224]	; (8003be0 <USB_SetTurnaroundTime+0x124>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d306      	bcc.n	8003b12 <USB_SetTurnaroundTime+0x56>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4a37      	ldr	r2, [pc, #220]	; (8003be4 <USB_SetTurnaroundTime+0x128>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d202      	bcs.n	8003b12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b0c:	230d      	movs	r3, #13
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e04c      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4a33      	ldr	r2, [pc, #204]	; (8003be4 <USB_SetTurnaroundTime+0x128>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d306      	bcc.n	8003b28 <USB_SetTurnaroundTime+0x6c>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4a32      	ldr	r2, [pc, #200]	; (8003be8 <USB_SetTurnaroundTime+0x12c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d802      	bhi.n	8003b28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b22:	230c      	movs	r3, #12
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e041      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4a2f      	ldr	r2, [pc, #188]	; (8003be8 <USB_SetTurnaroundTime+0x12c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d906      	bls.n	8003b3e <USB_SetTurnaroundTime+0x82>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <USB_SetTurnaroundTime+0x130>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d802      	bhi.n	8003b3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b38:	230b      	movs	r3, #11
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e036      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <USB_SetTurnaroundTime+0x130>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d906      	bls.n	8003b54 <USB_SetTurnaroundTime+0x98>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <USB_SetTurnaroundTime+0x134>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d802      	bhi.n	8003b54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b4e:	230a      	movs	r3, #10
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e02b      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <USB_SetTurnaroundTime+0x134>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d906      	bls.n	8003b6a <USB_SetTurnaroundTime+0xae>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <USB_SetTurnaroundTime+0x138>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d202      	bcs.n	8003b6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b64:	2309      	movs	r3, #9
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	e020      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <USB_SetTurnaroundTime+0x138>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d306      	bcc.n	8003b80 <USB_SetTurnaroundTime+0xc4>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <USB_SetTurnaroundTime+0x13c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d802      	bhi.n	8003b80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e015      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4a1d      	ldr	r2, [pc, #116]	; (8003bf8 <USB_SetTurnaroundTime+0x13c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d906      	bls.n	8003b96 <USB_SetTurnaroundTime+0xda>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <USB_SetTurnaroundTime+0x140>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d202      	bcs.n	8003b96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b90:	2307      	movs	r3, #7
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e00a      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b96:	2306      	movs	r3, #6
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e007      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ba2:	2309      	movs	r3, #9
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e001      	b.n	8003bac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ba8:	2309      	movs	r3, #9
 8003baa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	029b      	lsls	r3, r3, #10
 8003bc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	00d8acbf 	.word	0x00d8acbf
 8003bdc:	00e4e1c0 	.word	0x00e4e1c0
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	01067380 	.word	0x01067380
 8003be8:	011a499f 	.word	0x011a499f
 8003bec:	01312cff 	.word	0x01312cff
 8003bf0:	014ca43f 	.word	0x014ca43f
 8003bf4:	016e3600 	.word	0x016e3600
 8003bf8:	01a6ab1f 	.word	0x01a6ab1f
 8003bfc:	01e84800 	.word	0x01e84800

08003c00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d115      	bne.n	8003c92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c72:	200a      	movs	r0, #10
 8003c74:	f7fd f91a 	bl	8000eac <HAL_Delay>
      ms += 10U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	330a      	adds	r3, #10
 8003c7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f001 f93f 	bl	8004f02 <USB_GetMode>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d01e      	beq.n	8003cc8 <USB_SetCurrentMode+0x84>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2bc7      	cmp	r3, #199	; 0xc7
 8003c8e:	d9f0      	bls.n	8003c72 <USB_SetCurrentMode+0x2e>
 8003c90:	e01a      	b.n	8003cc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d115      	bne.n	8003cc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ca4:	200a      	movs	r0, #10
 8003ca6:	f7fd f901 	bl	8000eac <HAL_Delay>
      ms += 10U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	330a      	adds	r3, #10
 8003cae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 f926 	bl	8004f02 <USB_GetMode>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <USB_SetCurrentMode+0x84>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2bc7      	cmp	r3, #199	; 0xc7
 8003cc0:	d9f0      	bls.n	8003ca4 <USB_SetCurrentMode+0x60>
 8003cc2:	e001      	b.n	8003cc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e005      	b.n	8003cd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2bc8      	cmp	r3, #200	; 0xc8
 8003ccc:	d101      	bne.n	8003cd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cdc:	b084      	sub	sp, #16
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e009      	b.n	8003d10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3340      	adds	r3, #64	; 0x40
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	2200      	movs	r2, #0
 8003d08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b0e      	cmp	r3, #14
 8003d14:	d9f2      	bls.n	8003cfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d11c      	bne.n	8003d58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2c:	f043 0302 	orr.w	r3, r3, #2
 8003d30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38
 8003d56:	e00b      	b.n	8003d70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d76:	461a      	mov	r2, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d7c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10d      	bne.n	8003da0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f968 	bl	8004064 <USB_SetDevSpeed>
 8003d94:	e008      	b.n	8003da8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d96:	2101      	movs	r1, #1
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f963 	bl	8004064 <USB_SetDevSpeed>
 8003d9e:	e003      	b.n	8003da8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003da0:	2103      	movs	r1, #3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f95e 	bl	8004064 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003da8:	2110      	movs	r1, #16
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8fa 	bl	8003fa4 <USB_FlushTxFifo>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f924 	bl	8004008 <USB_FlushRxFifo>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2300      	movs	r3, #0
 8003de0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	461a      	mov	r2, r3
 8003dea:	2300      	movs	r3, #0
 8003dec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e043      	b.n	8003e7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e0a:	d118      	bne.n	8003e3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e013      	b.n	8003e50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	461a      	mov	r2, r3
 8003e36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	e008      	b.n	8003e50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e80:	461a      	mov	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d3b5      	bcc.n	8003df4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	e043      	b.n	8003f16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea4:	d118      	bne.n	8003ed8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e013      	b.n	8003eea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e008      	b.n	8003eea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	3301      	adds	r3, #1
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d3b5      	bcc.n	8003e8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f043 0210 	orr.w	r2, r3, #16
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <USB_DevInit+0x2c4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f043 0208 	orr.w	r2, r3, #8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d107      	bne.n	8003f90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f9c:	b004      	add	sp, #16
 8003f9e:	4770      	bx	lr
 8003fa0:	803c3800 	.word	0x803c3800

08003fa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003fbe:	d901      	bls.n	8003fc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e01b      	b.n	8003ffc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	daf2      	bge.n	8003fb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	019b      	lsls	r3, r3, #6
 8003fd4:	f043 0220 	orr.w	r2, r3, #32
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003fe8:	d901      	bls.n	8003fee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e006      	b.n	8003ffc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d0f0      	beq.n	8003fdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004020:	d901      	bls.n	8004026 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e018      	b.n	8004058 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	daf2      	bge.n	8004014 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2210      	movs	r2, #16
 8004036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3301      	adds	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004044:	d901      	bls.n	800404a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e006      	b.n	8004058 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d0f0      	beq.n	8004038 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004096:	b480      	push	{r7}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0306 	and.w	r3, r3, #6
 80040ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
 80040ba:	e00a      	b.n	80040d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d002      	beq.n	80040c8 <USB_GetDevSpeed+0x32>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d102      	bne.n	80040ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80040c8:	2302      	movs	r3, #2
 80040ca:	75fb      	strb	r3, [r7, #23]
 80040cc:	e001      	b.n	80040d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80040ce:	230f      	movs	r3, #15
 80040d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d13a      	bne.n	8004172 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	68f9      	ldr	r1, [r7, #12]
 8004116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800411a:	4313      	orrs	r3, r2
 800411c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d155      	bne.n	80041e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	791b      	ldrb	r3, [r3, #4]
 800414e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004150:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	059b      	lsls	r3, r3, #22
 8004156:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004158:	4313      	orrs	r3, r2
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	e036      	b.n	80041e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	041b      	lsls	r3, r3, #16
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004190:	4313      	orrs	r3, r2
 8004192:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11a      	bne.n	80041e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	791b      	ldrb	r3, [r3, #4]
 80041c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041c6:	430b      	orrs	r3, r1
 80041c8:	4313      	orrs	r3, r2
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d161      	bne.n	80042d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800421e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004222:	d11f      	bne.n	8004264 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	440a      	add	r2, r1
 800423a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004242:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004262:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	2101      	movs	r1, #1
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	b29b      	uxth	r3, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004284:	4013      	ands	r3, r2
 8004286:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	2101      	movs	r1, #1
 800429a:	fa01 f303 	lsl.w	r3, r1, r3
 800429e:	b29b      	uxth	r3, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	68f9      	ldr	r1, [r7, #12]
 80042a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042a8:	4013      	ands	r3, r2
 80042aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	0159      	lsls	r1, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	440b      	add	r3, r1
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	4619      	mov	r1, r3
 80042c8:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <USB_DeactivateEndpoint+0x1b0>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
 80042ce:	e060      	b.n	8004392 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e6:	d11f      	bne.n	8004328 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004306:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	440a      	add	r2, r1
 800431e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004326:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	43db      	mvns	r3, r3
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004348:	4013      	ands	r3, r2
 800434a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	69da      	ldr	r2, [r3, #28]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	43db      	mvns	r3, r3
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800436c:	4013      	ands	r3, r2
 800436e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	0159      	lsls	r1, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	440b      	add	r3, r1
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	4619      	mov	r1, r3
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <USB_DeactivateEndpoint+0x1b4>)
 800438e:	4013      	ands	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	ec337800 	.word	0xec337800
 80043a4:	eff37800 	.word	0xeff37800

080043a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	; 0x28
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	785b      	ldrb	r3, [r3, #1]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	f040 817f 	bne.w	80046c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d132      	bne.n	8004438 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	0151      	lsls	r1, r2, #5
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	440a      	add	r2, r1
 80043e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004430:	0cdb      	lsrs	r3, r3, #19
 8004432:	04db      	lsls	r3, r3, #19
 8004434:	6113      	str	r3, [r2, #16]
 8004436:	e097      	b.n	8004568 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	440a      	add	r2, r1
 800444e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004452:	0cdb      	lsrs	r3, r3, #19
 8004454:	04db      	lsls	r3, r3, #19
 8004456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004472:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004476:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800447a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d11a      	bne.n	80044b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d903      	bls.n	8004496 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044b4:	6113      	str	r3, [r2, #16]
 80044b6:	e044      	b.n	8004542 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	1e5a      	subs	r2, r3, #1
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	8afb      	ldrh	r3, [r7, #22]
 80044de:	04d9      	lsls	r1, r3, #19
 80044e0:	4ba4      	ldr	r3, [pc, #656]	; (8004774 <USB_EPStartXfer+0x3cc>)
 80044e2:	400b      	ands	r3, r1
 80044e4:	69b9      	ldr	r1, [r7, #24]
 80044e6:	0148      	lsls	r0, r1, #5
 80044e8:	69f9      	ldr	r1, [r7, #28]
 80044ea:	4401      	add	r1, r0
 80044ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044f0:	4313      	orrs	r3, r2
 80044f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	791b      	ldrb	r3, [r3, #4]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d122      	bne.n	8004542 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	440a      	add	r2, r1
 8004512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004516:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800451a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	8afb      	ldrh	r3, [r7, #22]
 800452c:	075b      	lsls	r3, r3, #29
 800452e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004532:	69b9      	ldr	r1, [r7, #24]
 8004534:	0148      	lsls	r0, r1, #5
 8004536:	69f9      	ldr	r1, [r7, #28]
 8004538:	4401      	add	r1, r0
 800453a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800453e:	4313      	orrs	r3, r2
 8004540:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	0148      	lsls	r0, r1, #5
 800455c:	69f9      	ldr	r1, [r7, #28]
 800455e:	4401      	add	r1, r0
 8004560:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004564:	4313      	orrs	r3, r2
 8004566:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d14b      	bne.n	8004606 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	461a      	mov	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	791b      	ldrb	r3, [r3, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d128      	bne.n	80045e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d110      	bne.n	80045c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e00f      	b.n	80045e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e166      	b.n	80048d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	440a      	add	r2, r1
 800461c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004620:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004624:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	791b      	ldrb	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d015      	beq.n	800465a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 814e 	beq.w	80048d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	69f9      	ldr	r1, [r7, #28]
 8004650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004654:	4313      	orrs	r3, r2
 8004656:	634b      	str	r3, [r1, #52]	; 0x34
 8004658:	e13c      	b.n	80048d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d110      	bne.n	800468c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004684:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	e00f      	b.n	80046ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	68d9      	ldr	r1, [r3, #12]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	b298      	uxth	r0, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4603      	mov	r3, r0
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f9b9 	bl	8004a38 <USB_WritePacket>
 80046c6:	e105      	b.n	80048d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e2:	0cdb      	lsrs	r3, r3, #19
 80046e4:	04db      	lsls	r3, r3, #19
 80046e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004702:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004706:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800470a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d132      	bne.n	8004778 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004740:	69b9      	ldr	r1, [r7, #24]
 8004742:	0148      	lsls	r0, r1, #5
 8004744:	69f9      	ldr	r1, [r7, #28]
 8004746:	4401      	add	r1, r0
 8004748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800474c:	4313      	orrs	r3, r2
 800474e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800476e:	6113      	str	r3, [r2, #16]
 8004770:	e062      	b.n	8004838 <USB_EPStartXfer+0x490>
 8004772:	bf00      	nop
 8004774:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d123      	bne.n	80047c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004796:	69b9      	ldr	r1, [r7, #24]
 8004798:	0148      	lsls	r0, r1, #5
 800479a:	69f9      	ldr	r1, [r7, #28]
 800479c:	4401      	add	r1, r0
 800479e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047a2:	4313      	orrs	r3, r2
 80047a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	0151      	lsls	r1, r2, #5
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	440a      	add	r2, r1
 80047bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c4:	6113      	str	r3, [r2, #16]
 80047c6:	e037      	b.n	8004838 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	1e5a      	subs	r2, r3, #1
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	8afa      	ldrh	r2, [r7, #22]
 80047e4:	fb03 f202 	mul.w	r2, r3, r2
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	8afb      	ldrh	r3, [r7, #22]
 80047fc:	04d9      	lsls	r1, r3, #19
 80047fe:	4b38      	ldr	r3, [pc, #224]	; (80048e0 <USB_EPStartXfer+0x538>)
 8004800:	400b      	ands	r3, r1
 8004802:	69b9      	ldr	r1, [r7, #24]
 8004804:	0148      	lsls	r0, r1, #5
 8004806:	69f9      	ldr	r1, [r7, #28]
 8004808:	4401      	add	r1, r0
 800480a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800480e:	4313      	orrs	r3, r2
 8004810:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	0148      	lsls	r0, r1, #5
 800482c:	69f9      	ldr	r1, [r7, #28]
 800482e:	4401      	add	r1, r0
 8004830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004834:	4313      	orrs	r3, r2
 8004836:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10d      	bne.n	800485a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	68d9      	ldr	r1, [r3, #12]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	460a      	mov	r2, r1
 8004858:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	791b      	ldrb	r3, [r3, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d128      	bne.n	80048b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d110      	bne.n	8004894 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e00f      	b.n	80048b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	1ff80000 	.word	0x1ff80000

080048e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d14a      	bne.n	8004998 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800491a:	f040 8086 	bne.w	8004a2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004940:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004964:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3301      	adds	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004972:	4293      	cmp	r3, r2
 8004974:	d902      	bls.n	800497c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
          break;
 800497a:	e056      	b.n	8004a2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004994:	d0e7      	beq.n	8004966 <USB_EPStopXfer+0x82>
 8004996:	e048      	b.n	8004a2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b0:	d13b      	bne.n	8004a2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	7812      	ldrb	r2, [r2, #0]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d902      	bls.n	8004a10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a0e:	e00c      	b.n	8004a2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a28:	d0e7      	beq.n	80049fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b089      	sub	sp, #36	; 0x24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	460b      	mov	r3, r1
 8004a48:	71fb      	strb	r3, [r7, #7]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d123      	bne.n	8004aa6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a5e:	88bb      	ldrh	r3, [r7, #4]
 8004a60:	3303      	adds	r3, #3
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e018      	b.n	8004a9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	031a      	lsls	r2, r3, #12
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a78:	461a      	mov	r2, r3
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3301      	adds	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3e2      	bcc.n	8004a6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3724      	adds	r7, #36	; 0x24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b08b      	sub	sp, #44	; 0x2c
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	e014      	b.n	8004b0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	601a      	str	r2, [r3, #0]
    pDest++;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	3301      	adds	r3, #1
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	3301      	adds	r3, #1
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	3301      	adds	r3, #1
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	3301      	adds	r3, #1
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	3301      	adds	r3, #1
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d3e6      	bcc.n	8004ae0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b12:	8bfb      	ldrh	r3, [r7, #30]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01e      	beq.n	8004b56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b22:	461a      	mov	r2, r3
 8004b24:	f107 0310 	add.w	r3, r7, #16
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	701a      	strb	r2, [r3, #0]
      i++;
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	3301      	adds	r3, #1
 8004b42:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	3301      	adds	r3, #1
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b4a:	8bfb      	ldrh	r3, [r7, #30]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b50:	8bfb      	ldrh	r3, [r7, #30]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ea      	bne.n	8004b2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	372c      	adds	r7, #44	; 0x2c
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d12c      	bne.n	8004bda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	db12      	blt.n	8004bb8 <USB_EPSetStall+0x54>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00f      	beq.n	8004bb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e02b      	b.n	8004c32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db12      	blt.n	8004c12 <USB_EPSetStall+0xae>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00f      	beq.n	8004c12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d128      	bne.n	8004cae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	791b      	ldrb	r3, [r3, #4]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d003      	beq.n	8004c8c <USB_EPClearStall+0x4c>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	791b      	ldrb	r3, [r3, #4]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d138      	bne.n	8004cfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e027      	b.n	8004cfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ccc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	791b      	ldrb	r3, [r3, #4]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d003      	beq.n	8004cde <USB_EPClearStall+0x9e>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	791b      	ldrb	r3, [r3, #4]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d10f      	bne.n	8004cfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d86:	f023 0302 	bic.w	r3, r3, #2
 8004d8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004db4:	f023 0303 	bic.w	r3, r3, #3
 8004db8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004df4:	68fb      	ldr	r3, [r7, #12]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	0c1b      	lsrs	r3, r3, #16
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	b29b      	uxth	r3, r3
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4013      	ands	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e98:	68bb      	ldr	r3, [r7, #8]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	333c      	adds	r3, #60	; 0x3c
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4a26      	ldr	r2, [pc, #152]	; (800501c <USB_EP0_OutStart+0xb8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d90a      	bls.n	8004f9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f98:	d101      	bne.n	8004f9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e037      	b.n	800500e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fcc:	f043 0318 	orr.w	r3, r3, #24
 8004fd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fe4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004fe6:	7afb      	ldrb	r3, [r7, #11]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10f      	bne.n	800500c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005006:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800500a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	4f54300a 	.word	0x4f54300a

08005020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005038:	d901      	bls.n	800503e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e022      	b.n	8005084 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	daf2      	bge.n	800502c <USB_CoreReset+0xc>

  count = 10U;
 8005046:	230a      	movs	r3, #10
 8005048:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800504a:	e002      	b.n	8005052 <USB_CoreReset+0x32>
  {
    count--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b01      	subs	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f9      	bne.n	800504c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f043 0201 	orr.w	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005070:	d901      	bls.n	8005076 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e006      	b.n	8005084 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d0f0      	beq.n	8005064 <USB_CoreReset+0x44>

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800509c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80050a0:	f002 fd22 	bl	8007ae8 <USBD_static_malloc>
 80050a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	32b0      	adds	r2, #176	; 0xb0
 80050b6:	2100      	movs	r1, #0
 80050b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80050bc:	2302      	movs	r3, #2
 80050be:	e0d4      	b.n	800526a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80050c0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80050c4:	2100      	movs	r1, #0
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f002 fd52 	bl	8007b70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	32b0      	adds	r2, #176	; 0xb0
 80050d6:	68f9      	ldr	r1, [r7, #12]
 80050d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	32b0      	adds	r2, #176	; 0xb0
 80050e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	7c1b      	ldrb	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d138      	bne.n	800516a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80050f8:	4b5e      	ldr	r3, [pc, #376]	; (8005274 <USBD_CDC_Init+0x1e4>)
 80050fa:	7819      	ldrb	r1, [r3, #0]
 80050fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005100:	2202      	movs	r2, #2
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f002 fbcd 	bl	80078a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005108:	4b5a      	ldr	r3, [pc, #360]	; (8005274 <USBD_CDC_Init+0x1e4>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3323      	adds	r3, #35	; 0x23
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005122:	4b55      	ldr	r3, [pc, #340]	; (8005278 <USBD_CDC_Init+0x1e8>)
 8005124:	7819      	ldrb	r1, [r3, #0]
 8005126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800512a:	2202      	movs	r2, #2
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f002 fbb8 	bl	80078a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005132:	4b51      	ldr	r3, [pc, #324]	; (8005278 <USBD_CDC_Init+0x1e8>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	f203 1363 	addw	r3, r3, #355	; 0x163
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800514e:	4b4b      	ldr	r3, [pc, #300]	; (800527c <USBD_CDC_Init+0x1ec>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	f003 020f 	and.w	r2, r3, #15
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	331c      	adds	r3, #28
 8005164:	2210      	movs	r2, #16
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e035      	b.n	80051d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800516a:	4b42      	ldr	r3, [pc, #264]	; (8005274 <USBD_CDC_Init+0x1e4>)
 800516c:	7819      	ldrb	r1, [r3, #0]
 800516e:	2340      	movs	r3, #64	; 0x40
 8005170:	2202      	movs	r2, #2
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f002 fb95 	bl	80078a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005178:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <USBD_CDC_Init+0x1e4>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	f003 020f 	and.w	r2, r3, #15
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3323      	adds	r3, #35	; 0x23
 800518e:	2201      	movs	r2, #1
 8005190:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005192:	4b39      	ldr	r3, [pc, #228]	; (8005278 <USBD_CDC_Init+0x1e8>)
 8005194:	7819      	ldrb	r1, [r3, #0]
 8005196:	2340      	movs	r3, #64	; 0x40
 8005198:	2202      	movs	r2, #2
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f002 fb81 	bl	80078a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051a0:	4b35      	ldr	r3, [pc, #212]	; (8005278 <USBD_CDC_Init+0x1e8>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f003 020f 	and.w	r2, r3, #15
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	f203 1363 	addw	r3, r3, #355	; 0x163
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80051bc:	4b2f      	ldr	r3, [pc, #188]	; (800527c <USBD_CDC_Init+0x1ec>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f003 020f 	and.w	r2, r3, #15
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	331c      	adds	r3, #28
 80051d2:	2210      	movs	r2, #16
 80051d4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051d6:	4b29      	ldr	r3, [pc, #164]	; (800527c <USBD_CDC_Init+0x1ec>)
 80051d8:	7819      	ldrb	r1, [r3, #0]
 80051da:	2308      	movs	r3, #8
 80051dc:	2203      	movs	r2, #3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f002 fb5f 	bl	80078a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80051e4:	4b25      	ldr	r3, [pc, #148]	; (800527c <USBD_CDC_Init+0x1ec>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f003 020f 	and.w	r2, r3, #15
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	3323      	adds	r3, #35	; 0x23
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	33b0      	adds	r3, #176	; 0xb0
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005234:	2302      	movs	r3, #2
 8005236:	e018      	b.n	800526a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	7c1b      	ldrb	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005240:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <USBD_CDC_Init+0x1e8>)
 8005242:	7819      	ldrb	r1, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800524a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f002 fc16 	bl	8007a80 <USBD_LL_PrepareReceive>
 8005254:	e008      	b.n	8005268 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <USBD_CDC_Init+0x1e8>)
 8005258:	7819      	ldrb	r1, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005260:	2340      	movs	r3, #64	; 0x40
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f002 fc0c 	bl	8007a80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000093 	.word	0x20000093
 8005278:	20000094 	.word	0x20000094
 800527c:	20000095 	.word	0x20000095

08005280 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800528c:	4b3a      	ldr	r3, [pc, #232]	; (8005378 <USBD_CDC_DeInit+0xf8>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f002 fb2b 	bl	80078ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005298:	4b37      	ldr	r3, [pc, #220]	; (8005378 <USBD_CDC_DeInit+0xf8>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	3323      	adds	r3, #35	; 0x23
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80052b2:	4b32      	ldr	r3, [pc, #200]	; (800537c <USBD_CDC_DeInit+0xfc>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f002 fb18 	bl	80078ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <USBD_CDC_DeInit+0xfc>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	f203 1363 	addw	r3, r3, #355	; 0x163
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80052da:	4b29      	ldr	r3, [pc, #164]	; (8005380 <USBD_CDC_DeInit+0x100>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f002 fb04 	bl	80078ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80052e6:	4b26      	ldr	r3, [pc, #152]	; (8005380 <USBD_CDC_DeInit+0x100>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f003 020f 	and.w	r2, r3, #15
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3323      	adds	r3, #35	; 0x23
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005300:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <USBD_CDC_DeInit+0x100>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	331c      	adds	r3, #28
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	32b0      	adds	r2, #176	; 0xb0
 8005324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01f      	beq.n	800536c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	33b0      	adds	r3, #176	; 0xb0
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	32b0      	adds	r2, #176	; 0xb0
 800534a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534e:	4618      	mov	r0, r3
 8005350:	f002 fbd8 	bl	8007b04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	32b0      	adds	r2, #176	; 0xb0
 800535e:	2100      	movs	r1, #0
 8005360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000093 	.word	0x20000093
 800537c:	20000094 	.word	0x20000094
 8005380:	20000095 	.word	0x20000095

08005384 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	32b0      	adds	r2, #176	; 0xb0
 8005398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0bf      	b.n	8005534 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d050      	beq.n	8005462 <USBD_CDC_Setup+0xde>
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	f040 80af 	bne.w	8005524 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	88db      	ldrh	r3, [r3, #6]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d03a      	beq.n	8005444 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	da1b      	bge.n	8005410 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	33b0      	adds	r3, #176	; 0xb0
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80053ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	88d2      	ldrh	r2, [r2, #6]
 80053f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	88db      	ldrh	r3, [r3, #6]
 80053fa:	2b07      	cmp	r3, #7
 80053fc:	bf28      	it	cs
 80053fe:	2307      	movcs	r3, #7
 8005400:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	89fa      	ldrh	r2, [r7, #14]
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 fdab 	bl	8006f64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800540e:	e090      	b.n	8005532 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	785a      	ldrb	r2, [r3, #1]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	88db      	ldrh	r3, [r3, #6]
 800541e:	2b3f      	cmp	r3, #63	; 0x3f
 8005420:	d803      	bhi.n	800542a <USBD_CDC_Setup+0xa6>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	88db      	ldrh	r3, [r3, #6]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	e000      	b.n	800542c <USBD_CDC_Setup+0xa8>
 800542a:	2240      	movs	r2, #64	; 0x40
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005432:	6939      	ldr	r1, [r7, #16]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800543a:	461a      	mov	r2, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fdc0 	bl	8006fc2 <USBD_CtlPrepareRx>
      break;
 8005442:	e076      	b.n	8005532 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	33b0      	adds	r3, #176	; 0xb0
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	7850      	ldrb	r0, [r2, #1]
 800545a:	2200      	movs	r2, #0
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	4798      	blx	r3
      break;
 8005460:	e067      	b.n	8005532 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	2b0b      	cmp	r3, #11
 8005468:	d851      	bhi.n	800550e <USBD_CDC_Setup+0x18a>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <USBD_CDC_Setup+0xec>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	080054a1 	.word	0x080054a1
 8005474:	0800551d 	.word	0x0800551d
 8005478:	0800550f 	.word	0x0800550f
 800547c:	0800550f 	.word	0x0800550f
 8005480:	0800550f 	.word	0x0800550f
 8005484:	0800550f 	.word	0x0800550f
 8005488:	0800550f 	.word	0x0800550f
 800548c:	0800550f 	.word	0x0800550f
 8005490:	0800550f 	.word	0x0800550f
 8005494:	0800550f 	.word	0x0800550f
 8005498:	080054cb 	.word	0x080054cb
 800549c:	080054f5 	.word	0x080054f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d107      	bne.n	80054bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054ac:	f107 030a 	add.w	r3, r7, #10
 80054b0:	2202      	movs	r2, #2
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 fd55 	bl	8006f64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054ba:	e032      	b.n	8005522 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 fcd3 	bl	8006e6a <USBD_CtlError>
            ret = USBD_FAIL;
 80054c4:	2303      	movs	r3, #3
 80054c6:	75fb      	strb	r3, [r7, #23]
          break;
 80054c8:	e02b      	b.n	8005522 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d107      	bne.n	80054e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054d6:	f107 030d 	add.w	r3, r7, #13
 80054da:	2201      	movs	r2, #1
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f001 fd40 	bl	8006f64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054e4:	e01d      	b.n	8005522 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fcbe 	bl	8006e6a <USBD_CtlError>
            ret = USBD_FAIL;
 80054ee:	2303      	movs	r3, #3
 80054f0:	75fb      	strb	r3, [r7, #23]
          break;
 80054f2:	e016      	b.n	8005522 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d00f      	beq.n	8005520 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 fcb1 	bl	8006e6a <USBD_CtlError>
            ret = USBD_FAIL;
 8005508:	2303      	movs	r3, #3
 800550a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800550c:	e008      	b.n	8005520 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 fcaa 	bl	8006e6a <USBD_CtlError>
          ret = USBD_FAIL;
 8005516:	2303      	movs	r3, #3
 8005518:	75fb      	strb	r3, [r7, #23]
          break;
 800551a:	e002      	b.n	8005522 <USBD_CDC_Setup+0x19e>
          break;
 800551c:	bf00      	nop
 800551e:	e008      	b.n	8005532 <USBD_CDC_Setup+0x1ae>
          break;
 8005520:	bf00      	nop
      }
      break;
 8005522:	e006      	b.n	8005532 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 fc9f 	bl	8006e6a <USBD_CtlError>
      ret = USBD_FAIL;
 800552c:	2303      	movs	r3, #3
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	bf00      	nop
  }

  return (uint8_t)ret;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800554e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	32b0      	adds	r2, #176	; 0xb0
 800555a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005562:	2303      	movs	r3, #3
 8005564:	e065      	b.n	8005632 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	32b0      	adds	r2, #176	; 0xb0
 8005570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005574:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	f003 020f 	and.w	r2, r3, #15
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	3314      	adds	r3, #20
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d02f      	beq.n	80055f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	f003 020f 	and.w	r2, r3, #15
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	3314      	adds	r3, #20
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	f003 010f 	and.w	r1, r3, #15
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	460b      	mov	r3, r1
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	440b      	add	r3, r1
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4403      	add	r3, r0
 80055b8:	331c      	adds	r3, #28
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d112      	bne.n	80055f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	f003 020f 	and.w	r2, r3, #15
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	3314      	adds	r3, #20
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055e2:	78f9      	ldrb	r1, [r7, #3]
 80055e4:	2300      	movs	r3, #0
 80055e6:	2200      	movs	r2, #0
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f002 fa28 	bl	8007a3e <USBD_LL_Transmit>
 80055ee:	e01f      	b.n	8005630 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	33b0      	adds	r3, #176	; 0xb0
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	33b0      	adds	r3, #176	; 0xb0
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	32b0      	adds	r2, #176	; 0xb0
 8005650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005654:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	32b0      	adds	r2, #176	; 0xb0
 8005660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005668:	2303      	movs	r3, #3
 800566a:	e01a      	b.n	80056a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 fa26 	bl	8007ac2 <USBD_LL_GetRxDataSize>
 8005676:	4602      	mov	r2, r0
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	33b0      	adds	r3, #176	; 0xb0
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800569c:	4611      	mov	r1, r2
 800569e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	32b0      	adds	r2, #176	; 0xb0
 80056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e025      	b.n	8005718 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	33b0      	adds	r3, #176	; 0xb0
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01a      	beq.n	8005716 <USBD_CDC_EP0_RxReady+0x6c>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80056e6:	2bff      	cmp	r3, #255	; 0xff
 80056e8:	d015      	beq.n	8005716 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	33b0      	adds	r3, #176	; 0xb0
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005702:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800570a:	b292      	uxth	r2, r2
 800570c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	22ff      	movs	r2, #255	; 0xff
 8005712:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005728:	2182      	movs	r1, #130	; 0x82
 800572a:	4818      	ldr	r0, [pc, #96]	; (800578c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800572c:	f000 fd62 	bl	80061f4 <USBD_GetEpDesc>
 8005730:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005732:	2101      	movs	r1, #1
 8005734:	4815      	ldr	r0, [pc, #84]	; (800578c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005736:	f000 fd5d 	bl	80061f4 <USBD_GetEpDesc>
 800573a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800573c:	2181      	movs	r1, #129	; 0x81
 800573e:	4813      	ldr	r0, [pc, #76]	; (800578c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005740:	f000 fd58 	bl	80061f4 <USBD_GetEpDesc>
 8005744:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2210      	movs	r2, #16
 8005750:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2200      	movs	r2, #0
 800575c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005760:	711a      	strb	r2, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005774:	711a      	strb	r2, [r3, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2243      	movs	r2, #67	; 0x43
 800577e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000050 	.word	0x20000050

08005790 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005798:	2182      	movs	r1, #130	; 0x82
 800579a:	4818      	ldr	r0, [pc, #96]	; (80057fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800579c:	f000 fd2a 	bl	80061f4 <USBD_GetEpDesc>
 80057a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057a2:	2101      	movs	r1, #1
 80057a4:	4815      	ldr	r0, [pc, #84]	; (80057fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057a6:	f000 fd25 	bl	80061f4 <USBD_GetEpDesc>
 80057aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057ac:	2181      	movs	r1, #129	; 0x81
 80057ae:	4813      	ldr	r0, [pc, #76]	; (80057fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057b0:	f000 fd20 	bl	80061f4 <USBD_GetEpDesc>
 80057b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2210      	movs	r2, #16
 80057c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d006      	beq.n	80057d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2200      	movs	r2, #0
 80057cc:	711a      	strb	r2, [r3, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f042 0202 	orr.w	r2, r2, #2
 80057d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	711a      	strb	r2, [r3, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f042 0202 	orr.w	r2, r2, #2
 80057e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2243      	movs	r2, #67	; 0x43
 80057ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057f0:	4b02      	ldr	r3, [pc, #8]	; (80057fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000050 	.word	0x20000050

08005800 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005808:	2182      	movs	r1, #130	; 0x82
 800580a:	4818      	ldr	r0, [pc, #96]	; (800586c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800580c:	f000 fcf2 	bl	80061f4 <USBD_GetEpDesc>
 8005810:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005812:	2101      	movs	r1, #1
 8005814:	4815      	ldr	r0, [pc, #84]	; (800586c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005816:	f000 fced 	bl	80061f4 <USBD_GetEpDesc>
 800581a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800581c:	2181      	movs	r1, #129	; 0x81
 800581e:	4813      	ldr	r0, [pc, #76]	; (800586c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005820:	f000 fce8 	bl	80061f4 <USBD_GetEpDesc>
 8005824:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2210      	movs	r2, #16
 8005830:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d006      	beq.n	8005846 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2200      	movs	r2, #0
 800583c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005840:	711a      	strb	r2, [r3, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d006      	beq.n	800585a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005854:	711a      	strb	r2, [r3, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2243      	movs	r2, #67	; 0x43
 800585e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000050 	.word	0x20000050

08005870 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	220a      	movs	r2, #10
 800587c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800587e:	4b03      	ldr	r3, [pc, #12]	; (800588c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	2000000c 	.word	0x2000000c

08005890 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e009      	b.n	80058b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	33b0      	adds	r3, #176	; 0xb0
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	32b0      	adds	r2, #176	; 0xb0
 80058da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e008      	b.n	80058fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	32b0      	adds	r2, #176	; 0xb0
 800591c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005920:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005928:	2303      	movs	r3, #3
 800592a:	e004      	b.n	8005936 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	32b0      	adds	r2, #176	; 0xb0
 8005956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005966:	2303      	movs	r3, #3
 8005968:	e025      	b.n	80059b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11f      	bne.n	80059b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2201      	movs	r2, #1
 8005978:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <USBD_CDC_TransmitPacket+0x7c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4403      	add	r3, r0
 8005996:	3314      	adds	r3, #20
 8005998:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <USBD_CDC_TransmitPacket+0x7c>)
 800599c:	7819      	ldrb	r1, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f002 f847 	bl	8007a3e <USBD_LL_Transmit>

    ret = USBD_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000093 	.word	0x20000093

080059c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	32b0      	adds	r2, #176	; 0xb0
 80059d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	32b0      	adds	r2, #176	; 0xb0
 80059e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e018      	b.n	8005a24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	7c1b      	ldrb	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <USBD_CDC_ReceivePacket+0x68>)
 80059fc:	7819      	ldrb	r1, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f002 f839 	bl	8007a80 <USBD_LL_PrepareReceive>
 8005a0e:	e008      	b.n	8005a22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <USBD_CDC_ReceivePacket+0x68>)
 8005a12:	7819      	ldrb	r1, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a1a:	2340      	movs	r3, #64	; 0x40
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f002 f82f 	bl	8007a80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000094 	.word	0x20000094

08005a30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e01f      	b.n	8005a88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f001 fea9 	bl	80077d4 <USBD_LL_Init>
 8005a82:	4603      	mov	r3, r0
 8005a84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e025      	b.n	8005af4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	32ae      	adds	r2, #174	; 0xae
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00f      	beq.n	8005ae4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	32ae      	adds	r2, #174	; 0xae
 8005ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f107 020e 	add.w	r2, r7, #14
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	4602      	mov	r2, r0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 feb1 	bl	800786c <USBD_LL_Start>
 8005b0a:	4603      	mov	r3, r0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d009      	beq.n	8005b58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	78fa      	ldrb	r2, [r7, #3]
 8005b4e:	4611      	mov	r1, r2
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4798      	blx	r3
 8005b54:	4603      	mov	r3, r0
 8005b56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 f924 	bl	8006df6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d01a      	beq.n	8005c08 <USBD_LL_SetupStage+0x72>
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d822      	bhi.n	8005c1c <USBD_LL_SetupStage+0x86>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <USBD_LL_SetupStage+0x4a>
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d00a      	beq.n	8005bf4 <USBD_LL_SetupStage+0x5e>
 8005bde:	e01d      	b.n	8005c1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fb79 	bl	80062e0 <USBD_StdDevReq>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf2:	e020      	b.n	8005c36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fbe1 	bl	80063c4 <USBD_StdItfReq>
 8005c02:	4603      	mov	r3, r0
 8005c04:	73fb      	strb	r3, [r7, #15]
      break;
 8005c06:	e016      	b.n	8005c36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fc43 	bl	800649c <USBD_StdEPReq>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1a:	e00c      	b.n	8005c36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 fe7e 	bl	800792c <USBD_LL_StallEP>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]
      break;
 8005c34:	bf00      	nop
  }

  return ret;
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005c52:	7afb      	ldrb	r3, [r7, #11]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d177      	bne.n	8005d48 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	f040 80a1 	bne.w	8005dae <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	8992      	ldrh	r2, [r2, #12]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d91c      	bls.n	8005cb2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	8992      	ldrh	r2, [r2, #12]
 8005c80:	1a9a      	subs	r2, r3, r2
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	8992      	ldrh	r2, [r2, #12]
 8005c8e:	441a      	add	r2, r3
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6919      	ldr	r1, [r3, #16]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	899b      	ldrh	r3, [r3, #12]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	bf38      	it	cc
 8005ca6:	4613      	movcc	r3, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f001 f9aa 	bl	8007004 <USBD_CtlContinueRx>
 8005cb0:	e07d      	b.n	8005dae <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d014      	beq.n	8005cea <USBD_LL_DataOutStage+0xaa>
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d81d      	bhi.n	8005d00 <USBD_LL_DataOutStage+0xc0>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <USBD_LL_DataOutStage+0x8e>
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d003      	beq.n	8005cd4 <USBD_LL_DataOutStage+0x94>
 8005ccc:	e018      	b.n	8005d00 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75bb      	strb	r3, [r7, #22]
            break;
 8005cd2:	e018      	b.n	8005d06 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fa6e 	bl	80061c0 <USBD_CoreFindIF>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ce8:	e00d      	b.n	8005d06 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fa70 	bl	80061da <USBD_CoreFindEP>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75bb      	strb	r3, [r7, #22]
            break;
 8005cfe:	e002      	b.n	8005d06 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	75bb      	strb	r3, [r7, #22]
            break;
 8005d04:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d06:	7dbb      	ldrb	r3, [r7, #22]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d119      	bne.n	8005d40 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d113      	bne.n	8005d40 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d18:	7dba      	ldrb	r2, [r7, #22]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	32ae      	adds	r2, #174	; 0xae
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005d28:	7dba      	ldrb	r2, [r7, #22]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d30:	7dba      	ldrb	r2, [r7, #22]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	32ae      	adds	r2, #174	; 0xae
 8005d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f001 f970 	bl	8007026 <USBD_CtlSendStatus>
 8005d46:	e032      	b.n	8005dae <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d48:	7afb      	ldrb	r3, [r7, #11]
 8005d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	4619      	mov	r1, r3
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fa41 	bl	80061da <USBD_CoreFindEP>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d5c:	7dbb      	ldrb	r3, [r7, #22]
 8005d5e:	2bff      	cmp	r3, #255	; 0xff
 8005d60:	d025      	beq.n	8005dae <USBD_LL_DataOutStage+0x16e>
 8005d62:	7dbb      	ldrb	r3, [r7, #22]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d122      	bne.n	8005dae <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d117      	bne.n	8005da4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d74:	7dba      	ldrb	r2, [r7, #22]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	32ae      	adds	r2, #174	; 0xae
 8005d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00f      	beq.n	8005da4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005d84:	7dba      	ldrb	r2, [r7, #22]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d8c:	7dba      	ldrb	r2, [r7, #22]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	32ae      	adds	r2, #174	; 0xae
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	7afa      	ldrb	r2, [r7, #11]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	4798      	blx	r3
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	e000      	b.n	8005db0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d178      	bne.n	8005ebe <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3314      	adds	r3, #20
 8005dd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d163      	bne.n	8005ea4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	8992      	ldrh	r2, [r2, #12]
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d91c      	bls.n	8005e22 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	8992      	ldrh	r2, [r2, #12]
 8005df0:	1a9a      	subs	r2, r3, r2
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	8992      	ldrh	r2, [r2, #12]
 8005dfe:	441a      	add	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6919      	ldr	r1, [r3, #16]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f001 f8c6 	bl	8006fa0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e14:	2300      	movs	r3, #0
 8005e16:	2200      	movs	r2, #0
 8005e18:	2100      	movs	r1, #0
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f001 fe30 	bl	8007a80 <USBD_LL_PrepareReceive>
 8005e20:	e040      	b.n	8005ea4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	899b      	ldrh	r3, [r3, #12]
 8005e26:	461a      	mov	r2, r3
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d11c      	bne.n	8005e6a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d316      	bcc.n	8005e6a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d20f      	bcs.n	8005e6a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f001 f8a6 	bl	8006fa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2100      	movs	r1, #0
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f001 fe0c 	bl	8007a80 <USBD_LL_PrepareReceive>
 8005e68:	e01c      	b.n	8005ea4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d10f      	bne.n	8005e96 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e96:	2180      	movs	r1, #128	; 0x80
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f001 fd47 	bl	800792c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 f8d4 	bl	800704c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d03a      	beq.n	8005f24 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fe30 	bl	8005b14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ebc:	e032      	b.n	8005f24 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ebe:	7afb      	ldrb	r3, [r7, #11]
 8005ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f986 	bl	80061da <USBD_CoreFindEP>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	2bff      	cmp	r3, #255	; 0xff
 8005ed6:	d025      	beq.n	8005f24 <USBD_LL_DataInStage+0x16c>
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d122      	bne.n	8005f24 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d11c      	bne.n	8005f24 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005eea:	7dfa      	ldrb	r2, [r7, #23]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	32ae      	adds	r2, #174	; 0xae
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d014      	beq.n	8005f24 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005efa:	7dfa      	ldrb	r2, [r7, #23]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f02:	7dfa      	ldrb	r2, [r7, #23]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	32ae      	adds	r2, #174	; 0xae
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	7afa      	ldrb	r2, [r7, #11]
 8005f10:	4611      	mov	r1, r2
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	4798      	blx	r3
 8005f16:	4603      	mov	r3, r0
 8005f18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f1a:	7dbb      	ldrb	r3, [r7, #22]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005f20:	7dbb      	ldrb	r3, [r7, #22]
 8005f22:	e000      	b.n	8005f26 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6852      	ldr	r2, [r2, #4]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	4611      	mov	r1, r2
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f90:	2303      	movs	r3, #3
 8005f92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f94:	2340      	movs	r3, #64	; 0x40
 8005f96:	2200      	movs	r2, #0
 8005f98:	2100      	movs	r1, #0
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fc81 	bl	80078a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2240      	movs	r2, #64	; 0x40
 8005fac:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fb0:	2340      	movs	r3, #64	; 0x40
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fc73 	bl	80078a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2240      	movs	r2, #64	; 0x40
 8005fc8:	841a      	strh	r2, [r3, #32]

  return ret;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b04      	cmp	r3, #4
 8006006:	d006      	beq.n	8006016 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600e:	b2da      	uxtb	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2204      	movs	r2, #4
 800601a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b04      	cmp	r3, #4
 800603e:	d106      	bne.n	800604e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006046:	b2da      	uxtb	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b03      	cmp	r3, #3
 800606e:	d110      	bne.n	8006092 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	32ae      	adds	r2, #174	; 0xae
 80060b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e01c      	b.n	80060f8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d115      	bne.n	80060f6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	32ae      	adds	r2, #174	; 0xae
 80060d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	32ae      	adds	r2, #174	; 0xae
 80060e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	4611      	mov	r1, r2
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	32ae      	adds	r2, #174	; 0xae
 8006116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800611e:	2303      	movs	r3, #3
 8006120:	e01c      	b.n	800615c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d115      	bne.n	800615a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	32ae      	adds	r2, #174	; 0xae
 8006138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	32ae      	adds	r2, #174	; 0xae
 800614c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	4611      	mov	r1, r2
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00e      	beq.n	80061b6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6852      	ldr	r2, [r2, #4]
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	4611      	mov	r1, r2
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80061b2:	2303      	movs	r3, #3
 80061b4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	885b      	ldrh	r3, [r3, #2]
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	429a      	cmp	r2, r3
 800621a:	d920      	bls.n	800625e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006224:	e013      	b.n	800624e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006226:	f107 030a 	add.w	r3, r7, #10
 800622a:	4619      	mov	r1, r3
 800622c:	6978      	ldr	r0, [r7, #20]
 800622e:	f000 f81b 	bl	8006268 <USBD_GetNextDesc>
 8006232:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b05      	cmp	r3, #5
 800623a:	d108      	bne.n	800624e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	789b      	ldrb	r3, [r3, #2]
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	429a      	cmp	r2, r3
 8006248:	d008      	beq.n	800625c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	885b      	ldrh	r3, [r3, #2]
 8006252:	b29a      	uxth	r2, r3
 8006254:	897b      	ldrh	r3, [r7, #10]
 8006256:	429a      	cmp	r2, r3
 8006258:	d8e5      	bhi.n	8006226 <USBD_GetEpDesc+0x32>
 800625a:	e000      	b.n	800625e <USBD_GetEpDesc+0x6a>
          break;
 800625c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800625e:	693b      	ldr	r3, [r7, #16]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	881a      	ldrh	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	4413      	add	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006294:	68fb      	ldr	r3, [r7, #12]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	3301      	adds	r3, #1
 80062b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062c0:	8a3b      	ldrh	r3, [r7, #16]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	b21a      	sxth	r2, r3
 80062c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	b21b      	sxth	r3, r3
 80062ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062d0:	89fb      	ldrh	r3, [r7, #14]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
	...

080062e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d005      	beq.n	8006306 <USBD_StdDevReq+0x26>
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d857      	bhi.n	80063ae <USBD_StdDevReq+0xce>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00f      	beq.n	8006322 <USBD_StdDevReq+0x42>
 8006302:	2b20      	cmp	r3, #32
 8006304:	d153      	bne.n	80063ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	32ae      	adds	r2, #174	; 0xae
 8006310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]
      break;
 8006320:	e04a      	b.n	80063b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b09      	cmp	r3, #9
 8006328:	d83b      	bhi.n	80063a2 <USBD_StdDevReq+0xc2>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <USBD_StdDevReq+0x50>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006385 	.word	0x08006385
 8006334:	08006399 	.word	0x08006399
 8006338:	080063a3 	.word	0x080063a3
 800633c:	0800638f 	.word	0x0800638f
 8006340:	080063a3 	.word	0x080063a3
 8006344:	08006363 	.word	0x08006363
 8006348:	08006359 	.word	0x08006359
 800634c:	080063a3 	.word	0x080063a3
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800636d 	.word	0x0800636d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa3e 	bl	80067dc <USBD_GetDescriptor>
          break;
 8006360:	e024      	b.n	80063ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fba3 	bl	8006ab0 <USBD_SetAddress>
          break;
 800636a:	e01f      	b.n	80063ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fbe2 	bl	8006b38 <USBD_SetConfig>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]
          break;
 8006378:	e018      	b.n	80063ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fc85 	bl	8006c8c <USBD_GetConfig>
          break;
 8006382:	e013      	b.n	80063ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fcb6 	bl	8006cf8 <USBD_GetStatus>
          break;
 800638c:	e00e      	b.n	80063ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fce5 	bl	8006d60 <USBD_SetFeature>
          break;
 8006396:	e009      	b.n	80063ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fd09 	bl	8006db2 <USBD_ClrFeature>
          break;
 80063a0:	e004      	b.n	80063ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fd60 	bl	8006e6a <USBD_CtlError>
          break;
 80063aa:	bf00      	nop
      }
      break;
 80063ac:	e004      	b.n	80063b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fd5a 	bl	8006e6a <USBD_CtlError>
      break;
 80063b6:	bf00      	nop
  }

  return ret;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop

080063c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d005      	beq.n	80063ea <USBD_StdItfReq+0x26>
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d852      	bhi.n	8006488 <USBD_StdItfReq+0xc4>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <USBD_StdItfReq+0x26>
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d14e      	bne.n	8006488 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d840      	bhi.n	800647a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	889b      	ldrh	r3, [r3, #4]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d836      	bhi.n	8006470 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	889b      	ldrh	r3, [r3, #4]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fed8 	bl	80061c0 <USBD_CoreFindIF>
 8006410:	4603      	mov	r3, r0
 8006412:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	2bff      	cmp	r3, #255	; 0xff
 8006418:	d01d      	beq.n	8006456 <USBD_StdItfReq+0x92>
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d11a      	bne.n	8006456 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006420:	7bba      	ldrb	r2, [r7, #14]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	32ae      	adds	r2, #174	; 0xae
 8006426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00f      	beq.n	8006450 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006430:	7bba      	ldrb	r2, [r7, #14]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006438:	7bba      	ldrb	r2, [r7, #14]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	32ae      	adds	r2, #174	; 0xae
 800643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
 800644a:	4603      	mov	r3, r0
 800644c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800644e:	e004      	b.n	800645a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006454:	e001      	b.n	800645a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	88db      	ldrh	r3, [r3, #6]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d110      	bne.n	8006484 <USBD_StdItfReq+0xc0>
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10d      	bne.n	8006484 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fddc 	bl	8007026 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800646e:	e009      	b.n	8006484 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fcf9 	bl	8006e6a <USBD_CtlError>
          break;
 8006478:	e004      	b.n	8006484 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fcf4 	bl	8006e6a <USBD_CtlError>
          break;
 8006482:	e000      	b.n	8006486 <USBD_StdItfReq+0xc2>
          break;
 8006484:	bf00      	nop
      }
      break;
 8006486:	e004      	b.n	8006492 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fced 	bl	8006e6a <USBD_CtlError>
      break;
 8006490:	bf00      	nop
  }

  return ret;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	889b      	ldrh	r3, [r3, #4]
 80064ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d007      	beq.n	80064cc <USBD_StdEPReq+0x30>
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	f200 8181 	bhi.w	80067c4 <USBD_StdEPReq+0x328>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d02a      	beq.n	800651c <USBD_StdEPReq+0x80>
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	f040 817c 	bne.w	80067c4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fe82 	bl	80061da <USBD_CoreFindEP>
 80064d6:	4603      	mov	r3, r0
 80064d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064da:	7b7b      	ldrb	r3, [r7, #13]
 80064dc:	2bff      	cmp	r3, #255	; 0xff
 80064de:	f000 8176 	beq.w	80067ce <USBD_StdEPReq+0x332>
 80064e2:	7b7b      	ldrb	r3, [r7, #13]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 8172 	bne.w	80067ce <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80064ea:	7b7a      	ldrb	r2, [r7, #13]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80064f2:	7b7a      	ldrb	r2, [r7, #13]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	32ae      	adds	r2, #174	; 0xae
 80064f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8165 	beq.w	80067ce <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006504:	7b7a      	ldrb	r2, [r7, #13]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	32ae      	adds	r2, #174	; 0xae
 800650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800651a:	e158      	b.n	80067ce <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b03      	cmp	r3, #3
 8006522:	d008      	beq.n	8006536 <USBD_StdEPReq+0x9a>
 8006524:	2b03      	cmp	r3, #3
 8006526:	f300 8147 	bgt.w	80067b8 <USBD_StdEPReq+0x31c>
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 809b 	beq.w	8006666 <USBD_StdEPReq+0x1ca>
 8006530:	2b01      	cmp	r3, #1
 8006532:	d03c      	beq.n	80065ae <USBD_StdEPReq+0x112>
 8006534:	e140      	b.n	80067b8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d002      	beq.n	8006548 <USBD_StdEPReq+0xac>
 8006542:	2b03      	cmp	r3, #3
 8006544:	d016      	beq.n	8006574 <USBD_StdEPReq+0xd8>
 8006546:	e02c      	b.n	80065a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <USBD_StdEPReq+0xce>
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d00a      	beq.n	800656a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f9e7 	bl	800792c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800655e:	2180      	movs	r1, #128	; 0x80
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 f9e3 	bl	800792c <USBD_LL_StallEP>
 8006566:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006568:	e020      	b.n	80065ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fc7c 	bl	8006e6a <USBD_CtlError>
              break;
 8006572:	e01b      	b.n	80065ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	885b      	ldrh	r3, [r3, #2]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10e      	bne.n	800659a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <USBD_StdEPReq+0xfe>
 8006582:	7bbb      	ldrb	r3, [r7, #14]
 8006584:	2b80      	cmp	r3, #128	; 0x80
 8006586:	d008      	beq.n	800659a <USBD_StdEPReq+0xfe>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	88db      	ldrh	r3, [r3, #6]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f9c9 	bl	800792c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fd43 	bl	8007026 <USBD_CtlSendStatus>

              break;
 80065a0:	e004      	b.n	80065ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc60 	bl	8006e6a <USBD_CtlError>
              break;
 80065aa:	bf00      	nop
          }
          break;
 80065ac:	e109      	b.n	80067c2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d002      	beq.n	80065c0 <USBD_StdEPReq+0x124>
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d016      	beq.n	80065ec <USBD_StdEPReq+0x150>
 80065be:	e04b      	b.n	8006658 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <USBD_StdEPReq+0x146>
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b80      	cmp	r3, #128	; 0x80
 80065ca:	d00a      	beq.n	80065e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f9ab 	bl	800792c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065d6:	2180      	movs	r1, #128	; 0x80
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f9a7 	bl	800792c <USBD_LL_StallEP>
 80065de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065e0:	e040      	b.n	8006664 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc40 	bl	8006e6a <USBD_CtlError>
              break;
 80065ea:	e03b      	b.n	8006664 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	885b      	ldrh	r3, [r3, #2]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d136      	bne.n	8006662 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 f9b1 	bl	800796a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fd0c 	bl	8007026 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fde1 	bl	80061da <USBD_CoreFindEP>
 8006618:	4603      	mov	r3, r0
 800661a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800661c:	7b7b      	ldrb	r3, [r7, #13]
 800661e:	2bff      	cmp	r3, #255	; 0xff
 8006620:	d01f      	beq.n	8006662 <USBD_StdEPReq+0x1c6>
 8006622:	7b7b      	ldrb	r3, [r7, #13]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11c      	bne.n	8006662 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006628:	7b7a      	ldrb	r2, [r7, #13]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006630:	7b7a      	ldrb	r2, [r7, #13]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	32ae      	adds	r2, #174	; 0xae
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d010      	beq.n	8006662 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006640:	7b7a      	ldrb	r2, [r7, #13]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	32ae      	adds	r2, #174	; 0xae
 8006646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
 8006652:	4603      	mov	r3, r0
 8006654:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006656:	e004      	b.n	8006662 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fc05 	bl	8006e6a <USBD_CtlError>
              break;
 8006660:	e000      	b.n	8006664 <USBD_StdEPReq+0x1c8>
              break;
 8006662:	bf00      	nop
          }
          break;
 8006664:	e0ad      	b.n	80067c2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d002      	beq.n	8006678 <USBD_StdEPReq+0x1dc>
 8006672:	2b03      	cmp	r3, #3
 8006674:	d033      	beq.n	80066de <USBD_StdEPReq+0x242>
 8006676:	e099      	b.n	80067ac <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <USBD_StdEPReq+0x1f2>
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d004      	beq.n	800668e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fbef 	bl	8006e6a <USBD_CtlError>
                break;
 800668c:	e093      	b.n	80067b6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800668e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006692:	2b00      	cmp	r3, #0
 8006694:	da0b      	bge.n	80066ae <USBD_StdEPReq+0x212>
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	3310      	adds	r3, #16
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	4413      	add	r3, r2
 80066aa:	3304      	adds	r3, #4
 80066ac:	e00b      	b.n	80066c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	3304      	adds	r3, #4
 80066c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	330e      	adds	r3, #14
 80066d2:	2202      	movs	r2, #2
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fc44 	bl	8006f64 <USBD_CtlSendData>
              break;
 80066dc:	e06b      	b.n	80067b6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da11      	bge.n	800670a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	3323      	adds	r3, #35	; 0x23
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d117      	bne.n	8006730 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbb1 	bl	8006e6a <USBD_CtlError>
                  break;
 8006708:	e055      	b.n	80067b6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800670a:	7bbb      	ldrb	r3, [r7, #14]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fb9e 	bl	8006e6a <USBD_CtlError>
                  break;
 800672e:	e042      	b.n	80067b6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006734:	2b00      	cmp	r3, #0
 8006736:	da0b      	bge.n	8006750 <USBD_StdEPReq+0x2b4>
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	3310      	adds	r3, #16
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	3304      	adds	r3, #4
 800674e:	e00b      	b.n	8006768 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	3304      	adds	r3, #4
 8006768:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <USBD_StdEPReq+0x2da>
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d103      	bne.n	800677e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2200      	movs	r2, #0
 800677a:	739a      	strb	r2, [r3, #14]
 800677c:	e00e      	b.n	800679c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 f910 	bl	80079a8 <USBD_LL_IsStallEP>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2201      	movs	r2, #1
 8006792:	739a      	strb	r2, [r3, #14]
 8006794:	e002      	b.n	800679c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2200      	movs	r2, #0
 800679a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	330e      	adds	r3, #14
 80067a0:	2202      	movs	r2, #2
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fbdd 	bl	8006f64 <USBD_CtlSendData>
              break;
 80067aa:	e004      	b.n	80067b6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fb5b 	bl	8006e6a <USBD_CtlError>
              break;
 80067b4:	bf00      	nop
          }
          break;
 80067b6:	e004      	b.n	80067c2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fb55 	bl	8006e6a <USBD_CtlError>
          break;
 80067c0:	bf00      	nop
      }
      break;
 80067c2:	e005      	b.n	80067d0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fb4f 	bl	8006e6a <USBD_CtlError>
      break;
 80067cc:	e000      	b.n	80067d0 <USBD_StdEPReq+0x334>
      break;
 80067ce:	bf00      	nop
  }

  return ret;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	885b      	ldrh	r3, [r3, #2]
 80067f6:	0a1b      	lsrs	r3, r3, #8
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	2b06      	cmp	r3, #6
 80067fe:	f200 8128 	bhi.w	8006a52 <USBD_GetDescriptor+0x276>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <USBD_GetDescriptor+0x2c>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	08006825 	.word	0x08006825
 800680c:	0800683d 	.word	0x0800683d
 8006810:	0800687d 	.word	0x0800687d
 8006814:	08006a53 	.word	0x08006a53
 8006818:	08006a53 	.word	0x08006a53
 800681c:	080069f3 	.word	0x080069f3
 8006820:	08006a1f 	.word	0x08006a1f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	7c12      	ldrb	r2, [r2, #16]
 8006830:	f107 0108 	add.w	r1, r7, #8
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
 8006838:	60f8      	str	r0, [r7, #12]
      break;
 800683a:	e112      	b.n	8006a62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	7c1b      	ldrb	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10d      	bne.n	8006860 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	f107 0208 	add.w	r2, r7, #8
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
 8006854:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	2202      	movs	r2, #2
 800685c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800685e:	e100      	b.n	8006a62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	f107 0208 	add.w	r2, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	2202      	movs	r2, #2
 8006878:	701a      	strb	r2, [r3, #0]
      break;
 800687a:	e0f2      	b.n	8006a62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	885b      	ldrh	r3, [r3, #2]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b05      	cmp	r3, #5
 8006884:	f200 80ac 	bhi.w	80069e0 <USBD_GetDescriptor+0x204>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <USBD_GetDescriptor+0xb4>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068a9 	.word	0x080068a9
 8006894:	080068dd 	.word	0x080068dd
 8006898:	08006911 	.word	0x08006911
 800689c:	08006945 	.word	0x08006945
 80068a0:	08006979 	.word	0x08006979
 80068a4:	080069ad 	.word	0x080069ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	7c12      	ldrb	r2, [r2, #16]
 80068c0:	f107 0108 	add.w	r1, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ca:	e091      	b.n	80069f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 facb 	bl	8006e6a <USBD_CtlError>
            err++;
 80068d4:	7afb      	ldrb	r3, [r7, #11]
 80068d6:	3301      	adds	r3, #1
 80068d8:	72fb      	strb	r3, [r7, #11]
          break;
 80068da:	e089      	b.n	80069f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	7c12      	ldrb	r2, [r2, #16]
 80068f4:	f107 0108 	add.w	r1, r7, #8
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
 80068fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068fe:	e077      	b.n	80069f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fab1 	bl	8006e6a <USBD_CtlError>
            err++;
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	3301      	adds	r3, #1
 800690c:	72fb      	strb	r3, [r7, #11]
          break;
 800690e:	e06f      	b.n	80069f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7c12      	ldrb	r2, [r2, #16]
 8006928:	f107 0108 	add.w	r1, r7, #8
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
 8006930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006932:	e05d      	b.n	80069f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa97 	bl	8006e6a <USBD_CtlError>
            err++;
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	3301      	adds	r3, #1
 8006940:	72fb      	strb	r3, [r7, #11]
          break;
 8006942:	e055      	b.n	80069f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	7c12      	ldrb	r2, [r2, #16]
 800695c:	f107 0108 	add.w	r1, r7, #8
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
 8006964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006966:	e043      	b.n	80069f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa7d 	bl	8006e6a <USBD_CtlError>
            err++;
 8006970:	7afb      	ldrb	r3, [r7, #11]
 8006972:	3301      	adds	r3, #1
 8006974:	72fb      	strb	r3, [r7, #11]
          break;
 8006976:	e03b      	b.n	80069f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	7c12      	ldrb	r2, [r2, #16]
 8006990:	f107 0108 	add.w	r1, r7, #8
 8006994:	4610      	mov	r0, r2
 8006996:	4798      	blx	r3
 8006998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800699a:	e029      	b.n	80069f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fa63 	bl	8006e6a <USBD_CtlError>
            err++;
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	3301      	adds	r3, #1
 80069a8:	72fb      	strb	r3, [r7, #11]
          break;
 80069aa:	e021      	b.n	80069f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	7c12      	ldrb	r2, [r2, #16]
 80069c4:	f107 0108 	add.w	r1, r7, #8
 80069c8:	4610      	mov	r0, r2
 80069ca:	4798      	blx	r3
 80069cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ce:	e00f      	b.n	80069f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa49 	bl	8006e6a <USBD_CtlError>
            err++;
 80069d8:	7afb      	ldrb	r3, [r7, #11]
 80069da:	3301      	adds	r3, #1
 80069dc:	72fb      	strb	r3, [r7, #11]
          break;
 80069de:	e007      	b.n	80069f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa41 	bl	8006e6a <USBD_CtlError>
          err++;
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	3301      	adds	r3, #1
 80069ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80069ee:	bf00      	nop
      }
      break;
 80069f0:	e037      	b.n	8006a62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7c1b      	ldrb	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a02:	f107 0208 	add.w	r2, r7, #8
 8006a06:	4610      	mov	r0, r2
 8006a08:	4798      	blx	r3
 8006a0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a0c:	e029      	b.n	8006a62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fa2a 	bl	8006e6a <USBD_CtlError>
        err++;
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a1c:	e021      	b.n	8006a62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	7c1b      	ldrb	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10d      	bne.n	8006a42 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f107 0208 	add.w	r2, r7, #8
 8006a32:	4610      	mov	r0, r2
 8006a34:	4798      	blx	r3
 8006a36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	2207      	movs	r2, #7
 8006a3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a40:	e00f      	b.n	8006a62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fa10 	bl	8006e6a <USBD_CtlError>
        err++;
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a50:	e007      	b.n	8006a62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa08 	bl	8006e6a <USBD_CtlError>
      err++;
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a60:	bf00      	nop
  }

  if (err != 0U)
 8006a62:	7afb      	ldrb	r3, [r7, #11]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d11e      	bne.n	8006aa6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	88db      	ldrh	r3, [r3, #6]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d016      	beq.n	8006a9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a70:	893b      	ldrh	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00e      	beq.n	8006a94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	88da      	ldrh	r2, [r3, #6]
 8006a7a:	893b      	ldrh	r3, [r7, #8]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	bf28      	it	cs
 8006a80:	4613      	movcs	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a86:	893b      	ldrh	r3, [r7, #8]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa69 	bl	8006f64 <USBD_CtlSendData>
 8006a92:	e009      	b.n	8006aa8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9e7 	bl	8006e6a <USBD_CtlError>
 8006a9c:	e004      	b.n	8006aa8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fac1 	bl	8007026 <USBD_CtlSendStatus>
 8006aa4:	e000      	b.n	8006aa8 <USBD_GetDescriptor+0x2cc>
    return;
 8006aa6:	bf00      	nop
  }
}
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop

08006ab0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	889b      	ldrh	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d131      	bne.n	8006b26 <USBD_SetAddress+0x76>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	88db      	ldrh	r3, [r3, #6]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d12d      	bne.n	8006b26 <USBD_SetAddress+0x76>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	885b      	ldrh	r3, [r3, #2]
 8006ace:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad0:	d829      	bhi.n	8006b26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	885b      	ldrh	r3, [r3, #2]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006adc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d104      	bne.n	8006af4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9bc 	bl	8006e6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af2:	e01d      	b.n	8006b30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	7bfa      	ldrb	r2, [r7, #15]
 8006af8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 ff7d 	bl	8007a00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa8d 	bl	8007026 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1a:	e009      	b.n	8006b30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b24:	e004      	b.n	8006b30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f99e 	bl	8006e6a <USBD_CtlError>
  }
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	4b4e      	ldr	r3, [pc, #312]	; (8006c88 <USBD_SetConfig+0x150>)
 8006b4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b50:	4b4d      	ldr	r3, [pc, #308]	; (8006c88 <USBD_SetConfig+0x150>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d905      	bls.n	8006b64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f985 	bl	8006e6a <USBD_CtlError>
    return USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e08c      	b.n	8006c7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d002      	beq.n	8006b76 <USBD_SetConfig+0x3e>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d029      	beq.n	8006bc8 <USBD_SetConfig+0x90>
 8006b74:	e075      	b.n	8006c62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b76:	4b44      	ldr	r3, [pc, #272]	; (8006c88 <USBD_SetConfig+0x150>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d020      	beq.n	8006bc0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006b7e:	4b42      	ldr	r3, [pc, #264]	; (8006c88 <USBD_SetConfig+0x150>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b88:	4b3f      	ldr	r3, [pc, #252]	; (8006c88 <USBD_SetConfig+0x150>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fe ffcb 	bl	8005b2a <USBD_SetClassConfig>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d008      	beq.n	8006bb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f962 	bl	8006e6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bae:	e065      	b.n	8006c7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa38 	bl	8007026 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bbe:	e05d      	b.n	8006c7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa30 	bl	8007026 <USBD_CtlSendStatus>
      break;
 8006bc6:	e059      	b.n	8006c7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bc8:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <USBD_SetConfig+0x150>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d112      	bne.n	8006bf6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bd8:	4b2b      	ldr	r3, [pc, #172]	; (8006c88 <USBD_SetConfig+0x150>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006be2:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <USBD_SetConfig+0x150>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7fe ffba 	bl	8005b62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa19 	bl	8007026 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bf4:	e042      	b.n	8006c7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006bf6:	4b24      	ldr	r3, [pc, #144]	; (8006c88 <USBD_SetConfig+0x150>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d02a      	beq.n	8006c5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fe ffa8 	bl	8005b62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c12:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <USBD_SetConfig+0x150>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c1c:	4b1a      	ldr	r3, [pc, #104]	; (8006c88 <USBD_SetConfig+0x150>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fe ff81 	bl	8005b2a <USBD_SetClassConfig>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00f      	beq.n	8006c52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f918 	bl	8006e6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fe ff8d 	bl	8005b62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c50:	e014      	b.n	8006c7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9e7 	bl	8007026 <USBD_CtlSendStatus>
      break;
 8006c58:	e010      	b.n	8006c7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9e3 	bl	8007026 <USBD_CtlSendStatus>
      break;
 8006c60:	e00c      	b.n	8006c7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f900 	bl	8006e6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <USBD_SetConfig+0x150>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fe ff76 	bl	8005b62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c76:	2303      	movs	r3, #3
 8006c78:	73fb      	strb	r3, [r7, #15]
      break;
 8006c7a:	bf00      	nop
  }

  return ret;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000380 	.word	0x20000380

08006c8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	88db      	ldrh	r3, [r3, #6]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d004      	beq.n	8006ca8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8e2 	bl	8006e6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ca6:	e023      	b.n	8006cf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	dc02      	bgt.n	8006cba <USBD_GetConfig+0x2e>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dc03      	bgt.n	8006cc0 <USBD_GetConfig+0x34>
 8006cb8:	e015      	b.n	8006ce6 <USBD_GetConfig+0x5a>
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d00b      	beq.n	8006cd6 <USBD_GetConfig+0x4a>
 8006cbe:	e012      	b.n	8006ce6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f948 	bl	8006f64 <USBD_CtlSendData>
        break;
 8006cd4:	e00c      	b.n	8006cf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	2201      	movs	r2, #1
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f940 	bl	8006f64 <USBD_CtlSendData>
        break;
 8006ce4:	e004      	b.n	8006cf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f8be 	bl	8006e6a <USBD_CtlError>
        break;
 8006cee:	bf00      	nop
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d81e      	bhi.n	8006d4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	88db      	ldrh	r3, [r3, #6]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d004      	beq.n	8006d22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f8a5 	bl	8006e6a <USBD_CtlError>
        break;
 8006d20:	e01a      	b.n	8006d58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f043 0202 	orr.w	r2, r3, #2
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	330c      	adds	r3, #12
 8006d42:	2202      	movs	r2, #2
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f90c 	bl	8006f64 <USBD_CtlSendData>
      break;
 8006d4c:	e004      	b.n	8006d58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f88a 	bl	8006e6a <USBD_CtlError>
      break;
 8006d56:	bf00      	nop
  }
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	885b      	ldrh	r3, [r3, #2]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d107      	bne.n	8006d82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f953 	bl	8007026 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006d80:	e013      	b.n	8006daa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	885b      	ldrh	r3, [r3, #2]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d10b      	bne.n	8006da2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	889b      	ldrh	r3, [r3, #4]
 8006d8e:	0a1b      	lsrs	r3, r3, #8
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f943 	bl	8007026 <USBD_CtlSendStatus>
}
 8006da0:	e003      	b.n	8006daa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f860 	bl	8006e6a <USBD_CtlError>
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d80b      	bhi.n	8006de2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d10c      	bne.n	8006dec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f923 	bl	8007026 <USBD_CtlSendStatus>
      }
      break;
 8006de0:	e004      	b.n	8006dec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f840 	bl	8006e6a <USBD_CtlError>
      break;
 8006dea:	e000      	b.n	8006dee <USBD_ClrFeature+0x3c>
      break;
 8006dec:	bf00      	nop
  }
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	781a      	ldrb	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	781a      	ldrb	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff fa3e 	bl	80062a2 <SWAPBYTE>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fa31 	bl	80062a2 <SWAPBYTE>
 8006e40:	4603      	mov	r3, r0
 8006e42:	461a      	mov	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3301      	adds	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff fa24 	bl	80062a2 <SWAPBYTE>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	80da      	strh	r2, [r3, #6]
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fd58 	bl	800792c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fd54 	bl	800792c <USBD_LL_StallEP>
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d042      	beq.n	8006f28 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006ea6:	6938      	ldr	r0, [r7, #16]
 8006ea8:	f000 f842 	bl	8006f30 <USBD_GetLen>
 8006eac:	4603      	mov	r3, r0
 8006eae:	3301      	adds	r3, #1
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb6:	d808      	bhi.n	8006eca <USBD_GetString+0x3e>
 8006eb8:	6938      	ldr	r0, [r7, #16]
 8006eba:	f000 f839 	bl	8006f30 <USBD_GetLen>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	e001      	b.n	8006ece <USBD_GetString+0x42>
 8006eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	7812      	ldrb	r2, [r2, #0]
 8006edc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4413      	add	r3, r2
 8006eea:	2203      	movs	r2, #3
 8006eec:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ef4:	e013      	b.n	8006f1e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	4413      	add	r3, r2
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	3301      	adds	r3, #1
 8006f06:	613b      	str	r3, [r7, #16]
    idx++;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	4413      	add	r3, r2
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e7      	bne.n	8006ef6 <USBD_GetString+0x6a>
 8006f26:	e000      	b.n	8006f2a <USBD_GetString+0x9e>
    return;
 8006f28:	bf00      	nop
  }
}
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f40:	e005      	b.n	8006f4e <USBD_GetLen+0x1e>
  {
    len++;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	3301      	adds	r3, #1
 8006f46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f5      	bne.n	8006f42 <USBD_GetLen+0x12>
  }

  return len;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	2100      	movs	r1, #0
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fd54 	bl	8007a3e <USBD_LL_Transmit>

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 fd43 	bl	8007a3e <USBD_LL_Transmit>

  return USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fd43 	bl	8007a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	2100      	movs	r1, #0
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 fd32 	bl	8007a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2204      	movs	r2, #4
 8007032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007036:	2300      	movs	r3, #0
 8007038:	2200      	movs	r2, #0
 800703a:	2100      	movs	r1, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fcfe 	bl	8007a3e <USBD_LL_Transmit>

  return USBD_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2205      	movs	r2, #5
 8007058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705c:	2300      	movs	r3, #0
 800705e:	2200      	movs	r2, #0
 8007060:	2100      	movs	r1, #0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fd0c 	bl	8007a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007078:	2200      	movs	r2, #0
 800707a:	4912      	ldr	r1, [pc, #72]	; (80070c4 <MX_USB_DEVICE_Init+0x50>)
 800707c:	4812      	ldr	r0, [pc, #72]	; (80070c8 <MX_USB_DEVICE_Init+0x54>)
 800707e:	f7fe fcd7 	bl	8005a30 <USBD_Init>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007088:	f7f9 fdce 	bl	8000c28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800708c:	490f      	ldr	r1, [pc, #60]	; (80070cc <MX_USB_DEVICE_Init+0x58>)
 800708e:	480e      	ldr	r0, [pc, #56]	; (80070c8 <MX_USB_DEVICE_Init+0x54>)
 8007090:	f7fe fcfe 	bl	8005a90 <USBD_RegisterClass>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800709a:	f7f9 fdc5 	bl	8000c28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800709e:	490c      	ldr	r1, [pc, #48]	; (80070d0 <MX_USB_DEVICE_Init+0x5c>)
 80070a0:	4809      	ldr	r0, [pc, #36]	; (80070c8 <MX_USB_DEVICE_Init+0x54>)
 80070a2:	f7fe fbf5 	bl	8005890 <USBD_CDC_RegisterInterface>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070ac:	f7f9 fdbc 	bl	8000c28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070b0:	4805      	ldr	r0, [pc, #20]	; (80070c8 <MX_USB_DEVICE_Init+0x54>)
 80070b2:	f7fe fd23 	bl	8005afc <USBD_Start>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070bc:	f7f9 fdb4 	bl	8000c28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070c0:	bf00      	nop
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200000b4 	.word	0x200000b4
 80070c8:	20000384 	.word	0x20000384
 80070cc:	20000018 	.word	0x20000018
 80070d0:	200000a0 	.word	0x200000a0

080070d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070d8:	2200      	movs	r2, #0
 80070da:	4905      	ldr	r1, [pc, #20]	; (80070f0 <CDC_Init_FS+0x1c>)
 80070dc:	4805      	ldr	r0, [pc, #20]	; (80070f4 <CDC_Init_FS+0x20>)
 80070de:	f7fe fbf1 	bl	80058c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070e2:	4905      	ldr	r1, [pc, #20]	; (80070f8 <CDC_Init_FS+0x24>)
 80070e4:	4803      	ldr	r0, [pc, #12]	; (80070f4 <CDC_Init_FS+0x20>)
 80070e6:	f7fe fc0f 	bl	8005908 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000860 	.word	0x20000860
 80070f4:	20000384 	.word	0x20000384
 80070f8:	20000660 	.word	0x20000660

080070fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007100:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007102:	4618      	mov	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
 8007118:	4613      	mov	r3, r2
 800711a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	2b23      	cmp	r3, #35	; 0x23
 8007120:	f200 8098 	bhi.w	8007254 <CDC_Control_FS+0x148>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <CDC_Control_FS+0x20>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	08007255 	.word	0x08007255
 8007130:	08007255 	.word	0x08007255
 8007134:	08007255 	.word	0x08007255
 8007138:	08007255 	.word	0x08007255
 800713c:	08007255 	.word	0x08007255
 8007140:	08007255 	.word	0x08007255
 8007144:	08007255 	.word	0x08007255
 8007148:	08007255 	.word	0x08007255
 800714c:	08007255 	.word	0x08007255
 8007150:	08007255 	.word	0x08007255
 8007154:	08007255 	.word	0x08007255
 8007158:	08007255 	.word	0x08007255
 800715c:	08007255 	.word	0x08007255
 8007160:	08007255 	.word	0x08007255
 8007164:	08007255 	.word	0x08007255
 8007168:	08007255 	.word	0x08007255
 800716c:	08007255 	.word	0x08007255
 8007170:	08007255 	.word	0x08007255
 8007174:	08007255 	.word	0x08007255
 8007178:	08007255 	.word	0x08007255
 800717c:	08007255 	.word	0x08007255
 8007180:	08007255 	.word	0x08007255
 8007184:	08007255 	.word	0x08007255
 8007188:	08007255 	.word	0x08007255
 800718c:	08007255 	.word	0x08007255
 8007190:	08007255 	.word	0x08007255
 8007194:	08007255 	.word	0x08007255
 8007198:	08007255 	.word	0x08007255
 800719c:	08007255 	.word	0x08007255
 80071a0:	08007255 	.word	0x08007255
 80071a4:	08007255 	.word	0x08007255
 80071a8:	08007255 	.word	0x08007255
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	08007201 	.word	0x08007201
 80071b4:	08007255 	.word	0x08007255
 80071b8:	08007255 	.word	0x08007255
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	431a      	orrs	r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	3302      	adds	r3, #2
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	041b      	lsls	r3, r3, #16
 80071d4:	431a      	orrs	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	3303      	adds	r3, #3
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	061b      	lsls	r3, r3, #24
 80071de:	4313      	orrs	r3, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4b20      	ldr	r3, [pc, #128]	; (8007264 <CDC_Control_FS+0x158>)
 80071e4:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	791a      	ldrb	r2, [r3, #4]
 80071ea:	4b1e      	ldr	r3, [pc, #120]	; (8007264 <CDC_Control_FS+0x158>)
 80071ec:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	795a      	ldrb	r2, [r3, #5]
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <CDC_Control_FS+0x158>)
 80071f4:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	799a      	ldrb	r2, [r3, #6]
 80071fa:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <CDC_Control_FS+0x158>)
 80071fc:	719a      	strb	r2, [r3, #6]
    break;
 80071fe:	e02a      	b.n	8007256 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8007200:	4b18      	ldr	r3, [pc, #96]	; (8007264 <CDC_Control_FS+0x158>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800720a:	4b16      	ldr	r3, [pc, #88]	; (8007264 <CDC_Control_FS+0x158>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	0a1a      	lsrs	r2, r3, #8
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8007218:	4b12      	ldr	r3, [pc, #72]	; (8007264 <CDC_Control_FS+0x158>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	0c1a      	lsrs	r2, r3, #16
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	3302      	adds	r3, #2
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8007226:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <CDC_Control_FS+0x158>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	0e1a      	lsrs	r2, r3, #24
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	3303      	adds	r3, #3
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	3304      	adds	r3, #4
 8007238:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <CDC_Control_FS+0x158>)
 800723a:	7912      	ldrb	r2, [r2, #4]
 800723c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	3305      	adds	r3, #5
 8007242:	4a08      	ldr	r2, [pc, #32]	; (8007264 <CDC_Control_FS+0x158>)
 8007244:	7952      	ldrb	r2, [r2, #5]
 8007246:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	3306      	adds	r3, #6
 800724c:	4a05      	ldr	r2, [pc, #20]	; (8007264 <CDC_Control_FS+0x158>)
 800724e:	7992      	ldrb	r2, [r2, #6]
 8007250:	701a      	strb	r2, [r3, #0]
    break;
 8007252:	e000      	b.n	8007256 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007254:	bf00      	nop
  }

  return (USBD_OK);
 8007256:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	20000098 	.word	0x20000098

08007268 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <CDC_Receive_FS+0x3c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <CDC_Receive_FS+0x3c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	6812      	ldr	r2, [r2, #0]
 8007282:	b292      	uxth	r2, r2
 8007284:	4611      	mov	r1, r2
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	4806      	ldr	r0, [pc, #24]	; (80072a8 <CDC_Receive_FS+0x40>)
 800728e:	f7fe fb3b 	bl	8005908 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007292:	4805      	ldr	r0, [pc, #20]	; (80072a8 <CDC_Receive_FS+0x40>)
 8007294:	f7fe fb96 	bl	80059c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007298:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000a60 	.word	0x20000a60
 80072a8:	20000384 	.word	0x20000384

080072ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80072bc:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <CDC_Transmit_FS+0x48>)
 80072be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e00b      	b.n	80072ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80072d2:	887b      	ldrh	r3, [r7, #2]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4806      	ldr	r0, [pc, #24]	; (80072f4 <CDC_Transmit_FS+0x48>)
 80072da:	f7fe faf3 	bl	80058c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80072de:	4805      	ldr	r0, [pc, #20]	; (80072f4 <CDC_Transmit_FS+0x48>)
 80072e0:	f7fe fb30 	bl	8005944 <USBD_CDC_TransmitPacket>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20000384 	.word	0x20000384

080072f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800730a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800730e:	4618      	mov	r0, r3
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
	...

0800731c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*PtrRx)(uint8_t *buf, uint16_t Len)) //la interfaZ va a llamar cada vez que se envian datos desde el USB hacia la PC
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8007324:	4a04      	ldr	r2, [pc, #16]	; (8007338 <CDC_Attach_Rx+0x1c>)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6013      	str	r3, [r2, #0]
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000a60 	.word	0x20000a60

0800733c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2212      	movs	r2, #18
 800734c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800734e:	4b03      	ldr	r3, [pc, #12]	; (800735c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	200000d0 	.word	0x200000d0

08007360 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	6039      	str	r1, [r7, #0]
 800736a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2204      	movs	r2, #4
 8007370:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007372:	4b03      	ldr	r3, [pc, #12]	; (8007380 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	200000e4 	.word	0x200000e4

08007384 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d105      	bne.n	80073a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4907      	ldr	r1, [pc, #28]	; (80073b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800739a:	4808      	ldr	r0, [pc, #32]	; (80073bc <USBD_FS_ProductStrDescriptor+0x38>)
 800739c:	f7ff fd76 	bl	8006e8c <USBD_GetString>
 80073a0:	e004      	b.n	80073ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	4904      	ldr	r1, [pc, #16]	; (80073b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80073a6:	4805      	ldr	r0, [pc, #20]	; (80073bc <USBD_FS_ProductStrDescriptor+0x38>)
 80073a8:	f7ff fd70 	bl	8006e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 80073ac:	4b02      	ldr	r3, [pc, #8]	; (80073b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000a64 	.word	0x20000a64
 80073bc:	08007be0 	.word	0x08007be0

080073c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	4904      	ldr	r1, [pc, #16]	; (80073e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073d0:	4804      	ldr	r0, [pc, #16]	; (80073e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073d2:	f7ff fd5b 	bl	8006e8c <USBD_GetString>
  return USBD_StrDesc;
 80073d6:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000a64 	.word	0x20000a64
 80073e4:	08007bf8 	.word	0x08007bf8

080073e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	221a      	movs	r2, #26
 80073f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073fa:	f000 f843 	bl	8007484 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073fe:	4b02      	ldr	r3, [pc, #8]	; (8007408 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	200000e8 	.word	0x200000e8

0800740c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	4603      	mov	r3, r0
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d105      	bne.n	800742a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4907      	ldr	r1, [pc, #28]	; (8007440 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007422:	4808      	ldr	r0, [pc, #32]	; (8007444 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007424:	f7ff fd32 	bl	8006e8c <USBD_GetString>
 8007428:	e004      	b.n	8007434 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	4904      	ldr	r1, [pc, #16]	; (8007440 <USBD_FS_ConfigStrDescriptor+0x34>)
 800742e:	4805      	ldr	r0, [pc, #20]	; (8007444 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007430:	f7ff fd2c 	bl	8006e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007434:	4b02      	ldr	r3, [pc, #8]	; (8007440 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000a64 	.word	0x20000a64
 8007444:	08007c0c 	.word	0x08007c0c

08007448 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	4907      	ldr	r1, [pc, #28]	; (800747c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800745e:	4808      	ldr	r0, [pc, #32]	; (8007480 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007460:	f7ff fd14 	bl	8006e8c <USBD_GetString>
 8007464:	e004      	b.n	8007470 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	4904      	ldr	r1, [pc, #16]	; (800747c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800746a:	4805      	ldr	r0, [pc, #20]	; (8007480 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800746c:	f7ff fd0e 	bl	8006e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007470:	4b02      	ldr	r3, [pc, #8]	; (800747c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000a64 	.word	0x20000a64
 8007480:	08007c18 	.word	0x08007c18

08007484 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <Get_SerialNum+0x44>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007490:	4b0e      	ldr	r3, [pc, #56]	; (80074cc <Get_SerialNum+0x48>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007496:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <Get_SerialNum+0x4c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4413      	add	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d009      	beq.n	80074be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074aa:	2208      	movs	r2, #8
 80074ac:	4909      	ldr	r1, [pc, #36]	; (80074d4 <Get_SerialNum+0x50>)
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f814 	bl	80074dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074b4:	2204      	movs	r2, #4
 80074b6:	4908      	ldr	r1, [pc, #32]	; (80074d8 <Get_SerialNum+0x54>)
 80074b8:	68b8      	ldr	r0, [r7, #8]
 80074ba:	f000 f80f 	bl	80074dc <IntToUnicode>
  }
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	1fff7a10 	.word	0x1fff7a10
 80074cc:	1fff7a14 	.word	0x1fff7a14
 80074d0:	1fff7a18 	.word	0x1fff7a18
 80074d4:	200000ea 	.word	0x200000ea
 80074d8:	200000fa 	.word	0x200000fa

080074dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]
 80074f2:	e027      	b.n	8007544 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	0f1b      	lsrs	r3, r3, #28
 80074f8:	2b09      	cmp	r3, #9
 80074fa:	d80b      	bhi.n	8007514 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	0f1b      	lsrs	r3, r3, #28
 8007500:	b2da      	uxtb	r2, r3
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4619      	mov	r1, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	440b      	add	r3, r1
 800750c:	3230      	adds	r2, #48	; 0x30
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	e00a      	b.n	800752a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	0f1b      	lsrs	r3, r3, #28
 8007518:	b2da      	uxtb	r2, r3
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	4619      	mov	r1, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	440b      	add	r3, r1
 8007524:	3237      	adds	r2, #55	; 0x37
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	3301      	adds	r3, #1
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4413      	add	r3, r2
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	3301      	adds	r3, #1
 8007542:	75fb      	strb	r3, [r7, #23]
 8007544:	7dfa      	ldrb	r2, [r7, #23]
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	429a      	cmp	r2, r3
 800754a:	d3d3      	bcc.n	80074f4 <IntToUnicode+0x18>
  }
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08a      	sub	sp, #40	; 0x28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	609a      	str	r2, [r3, #8]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800757c:	d13a      	bne.n	80075f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	4b1e      	ldr	r3, [pc, #120]	; (80075fc <HAL_PCD_MspInit+0xa0>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	4a1d      	ldr	r2, [pc, #116]	; (80075fc <HAL_PCD_MspInit+0xa0>)
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	6313      	str	r3, [r2, #48]	; 0x30
 800758e:	4b1b      	ldr	r3, [pc, #108]	; (80075fc <HAL_PCD_MspInit+0xa0>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800759a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800759e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a0:	2302      	movs	r3, #2
 80075a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075a8:	2303      	movs	r3, #3
 80075aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075ac:	230a      	movs	r3, #10
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075b0:	f107 0314 	add.w	r3, r7, #20
 80075b4:	4619      	mov	r1, r3
 80075b6:	4812      	ldr	r0, [pc, #72]	; (8007600 <HAL_PCD_MspInit+0xa4>)
 80075b8:	f7f9 fdae 	bl	8001118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <HAL_PCD_MspInit+0xa0>)
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	4a0e      	ldr	r2, [pc, #56]	; (80075fc <HAL_PCD_MspInit+0xa0>)
 80075c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c6:	6353      	str	r3, [r2, #52]	; 0x34
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <HAL_PCD_MspInit+0xa0>)
 80075ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d0:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <HAL_PCD_MspInit+0xa0>)
 80075d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075d6:	6453      	str	r3, [r2, #68]	; 0x44
 80075d8:	4b08      	ldr	r3, [pc, #32]	; (80075fc <HAL_PCD_MspInit+0xa0>)
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075e4:	2200      	movs	r2, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	2043      	movs	r0, #67	; 0x43
 80075ea:	f7f9 fd5e 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075ee:	2043      	movs	r0, #67	; 0x43
 80075f0:	f7f9 fd77 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075f4:	bf00      	nop
 80075f6:	3728      	adds	r7, #40	; 0x28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40023800 	.word	0x40023800
 8007600:	40020000 	.word	0x40020000

08007604 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007618:	4619      	mov	r1, r3
 800761a:	4610      	mov	r0, r2
 800761c:	f7fe fabb 	bl	8005b96 <USBD_LL_SetupStage>
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	4619      	mov	r1, r3
 8007652:	f7fe faf5 	bl	8005c40 <USBD_LL_DataOutStage>
}
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007670:	78fa      	ldrb	r2, [r7, #3]
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	4613      	mov	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	3320      	adds	r3, #32
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	4619      	mov	r1, r3
 8007686:	f7fe fb97 	bl	8005db8 <USBD_LL_DataInStage>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fe fcdb 	bl	800605c <USBD_LL_SOF>
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076b6:	2301      	movs	r3, #1
 80076b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	79db      	ldrb	r3, [r3, #7]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d001      	beq.n	80076c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80076c2:	f7f9 fab1 	bl	8000c28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80076cc:	7bfa      	ldrb	r2, [r7, #15]
 80076ce:	4611      	mov	r1, r2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe fc7f 	bl	8005fd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe fc26 	bl	8005f2e <USBD_LL_Reset>
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fc7a 	bl	8005ff4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	7adb      	ldrb	r3, [r3, #11]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007720:	4b04      	ldr	r3, [pc, #16]	; (8007734 <HAL_PCD_SuspendCallback+0x48>)
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	4a03      	ldr	r2, [pc, #12]	; (8007734 <HAL_PCD_SuspendCallback+0x48>)
 8007726:	f043 0306 	orr.w	r3, r3, #6
 800772a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	e000ed00 	.word	0xe000ed00

08007738 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fc70 	bl	800602c <USBD_LL_Resume>
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007766:	78fa      	ldrb	r2, [r7, #3]
 8007768:	4611      	mov	r1, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fcc8 	bl	8006100 <USBD_LL_IsoOUTIncomplete>
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fc84 	bl	800609c <USBD_LL_IsoINIncomplete>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fcda 	bl	8006164 <USBD_LL_DevConnected>
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fcd7 	bl	800617a <USBD_LL_DevDisconnected>
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d13c      	bne.n	800785e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80077e4:	4a20      	ldr	r2, [pc, #128]	; (8007868 <USBD_LL_Init+0x94>)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1e      	ldr	r2, [pc, #120]	; (8007868 <USBD_LL_Init+0x94>)
 80077f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80077f4:	4b1c      	ldr	r3, [pc, #112]	; (8007868 <USBD_LL_Init+0x94>)
 80077f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80077fc:	4b1a      	ldr	r3, [pc, #104]	; (8007868 <USBD_LL_Init+0x94>)
 80077fe:	2204      	movs	r2, #4
 8007800:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007802:	4b19      	ldr	r3, [pc, #100]	; (8007868 <USBD_LL_Init+0x94>)
 8007804:	2202      	movs	r2, #2
 8007806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007808:	4b17      	ldr	r3, [pc, #92]	; (8007868 <USBD_LL_Init+0x94>)
 800780a:	2200      	movs	r2, #0
 800780c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800780e:	4b16      	ldr	r3, [pc, #88]	; (8007868 <USBD_LL_Init+0x94>)
 8007810:	2202      	movs	r2, #2
 8007812:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007814:	4b14      	ldr	r3, [pc, #80]	; (8007868 <USBD_LL_Init+0x94>)
 8007816:	2200      	movs	r2, #0
 8007818:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <USBD_LL_Init+0x94>)
 800781c:	2200      	movs	r2, #0
 800781e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007820:	4b11      	ldr	r3, [pc, #68]	; (8007868 <USBD_LL_Init+0x94>)
 8007822:	2200      	movs	r2, #0
 8007824:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007826:	4b10      	ldr	r3, [pc, #64]	; (8007868 <USBD_LL_Init+0x94>)
 8007828:	2200      	movs	r2, #0
 800782a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800782c:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <USBD_LL_Init+0x94>)
 800782e:	2200      	movs	r2, #0
 8007830:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007832:	480d      	ldr	r0, [pc, #52]	; (8007868 <USBD_LL_Init+0x94>)
 8007834:	f7f9 fe27 	bl	8001486 <HAL_PCD_Init>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800783e:	f7f9 f9f3 	bl	8000c28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007842:	2180      	movs	r1, #128	; 0x80
 8007844:	4808      	ldr	r0, [pc, #32]	; (8007868 <USBD_LL_Init+0x94>)
 8007846:	f7fb f854 	bl	80028f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800784a:	2240      	movs	r2, #64	; 0x40
 800784c:	2100      	movs	r1, #0
 800784e:	4806      	ldr	r0, [pc, #24]	; (8007868 <USBD_LL_Init+0x94>)
 8007850:	f7fb f808 	bl	8002864 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007854:	2280      	movs	r2, #128	; 0x80
 8007856:	2101      	movs	r1, #1
 8007858:	4803      	ldr	r0, [pc, #12]	; (8007868 <USBD_LL_Init+0x94>)
 800785a:	f7fb f803 	bl	8002864 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000c64 	.word	0x20000c64

0800786c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007882:	4618      	mov	r0, r3
 8007884:	f7f9 ff0e 	bl	80016a4 <HAL_PCD_Start>
 8007888:	4603      	mov	r3, r0
 800788a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 f942 	bl	8007b18 <USBD_Get_USB_Status>
 8007894:	4603      	mov	r3, r0
 8007896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007898:	7bbb      	ldrb	r3, [r7, #14]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	461a      	mov	r2, r3
 80078b0:	4603      	mov	r3, r0
 80078b2:	70fb      	strb	r3, [r7, #3]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70bb      	strb	r3, [r7, #2]
 80078b8:	4613      	mov	r3, r2
 80078ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80078ca:	78bb      	ldrb	r3, [r7, #2]
 80078cc:	883a      	ldrh	r2, [r7, #0]
 80078ce:	78f9      	ldrb	r1, [r7, #3]
 80078d0:	f7fa fbe2 	bl	8002098 <HAL_PCD_EP_Open>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f91c 	bl	8007b18 <USBD_Get_USB_Status>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f7fa fc2d 	bl	800216c <HAL_PCD_EP_Close>
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f8fd 	bl	8007b18 <USBD_Get_USB_Status>
 800791e:	4603      	mov	r3, r0
 8007920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007922:	7bbb      	ldrb	r3, [r7, #14]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	4611      	mov	r1, r2
 800794a:	4618      	mov	r0, r3
 800794c:	f7fa fce5 	bl	800231a <HAL_PCD_EP_SetStall>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f8de 	bl	8007b18 <USBD_Get_USB_Status>
 800795c:	4603      	mov	r3, r0
 800795e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007960:	7bbb      	ldrb	r3, [r7, #14]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	4611      	mov	r1, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f7fa fd29 	bl	80023e0 <HAL_PCD_EP_ClrStall>
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 f8bf 	bl	8007b18 <USBD_Get_USB_Status>
 800799a:	4603      	mov	r3, r0
 800799c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800799e:	7bbb      	ldrb	r3, [r7, #14]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da0b      	bge.n	80079dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ca:	68f9      	ldr	r1, [r7, #12]
 80079cc:	4613      	mov	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	3316      	adds	r3, #22
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	e00b      	b.n	80079f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	4613      	mov	r3, r2
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	f203 2356 	addw	r3, r3, #598	; 0x256
 80079f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a1a:	78fa      	ldrb	r2, [r7, #3]
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fa fb16 	bl	8002050 <HAL_PCD_SetAddress>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f874 	bl	8007b18 <USBD_Get_USB_Status>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b086      	sub	sp, #24
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a5c:	7af9      	ldrb	r1, [r7, #11]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	f7fa fc20 	bl	80022a6 <HAL_PCD_EP_Transmit>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f853 	bl	8007b18 <USBD_Get_USB_Status>
 8007a72:	4603      	mov	r3, r0
 8007a74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a76:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a9e:	7af9      	ldrb	r1, [r7, #11]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	f7fa fbac 	bl	8002200 <HAL_PCD_EP_Receive>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f832 	bl	8007b18 <USBD_Get_USB_Status>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ab8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fa fbcc 	bl	8002276 <HAL_PCD_EP_GetRxCount>
 8007ade:	4603      	mov	r3, r0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007af0:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <USBD_static_malloc+0x18>)
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20001148 	.word	0x20001148

08007b04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]

}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d817      	bhi.n	8007b5c <USBD_Get_USB_Status+0x44>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <USBD_Get_USB_Status+0x1c>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b45 	.word	0x08007b45
 8007b38:	08007b4b 	.word	0x08007b4b
 8007b3c:	08007b51 	.word	0x08007b51
 8007b40:	08007b57 	.word	0x08007b57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
    break;
 8007b48:	e00b      	b.n	8007b62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4e:	e008      	b.n	8007b62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b50:	2301      	movs	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]
    break;
 8007b54:	e005      	b.n	8007b62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5a:	e002      	b.n	8007b62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b60:	bf00      	nop
  }
  return usb_status;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <memset>:
 8007b70:	4402      	add	r2, r0
 8007b72:	4603      	mov	r3, r0
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d100      	bne.n	8007b7a <memset+0xa>
 8007b78:	4770      	bx	lr
 8007b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7e:	e7f9      	b.n	8007b74 <memset+0x4>

08007b80 <__libc_init_array>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4d0d      	ldr	r5, [pc, #52]	; (8007bb8 <__libc_init_array+0x38>)
 8007b84:	4c0d      	ldr	r4, [pc, #52]	; (8007bbc <__libc_init_array+0x3c>)
 8007b86:	1b64      	subs	r4, r4, r5
 8007b88:	10a4      	asrs	r4, r4, #2
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	42a6      	cmp	r6, r4
 8007b8e:	d109      	bne.n	8007ba4 <__libc_init_array+0x24>
 8007b90:	4d0b      	ldr	r5, [pc, #44]	; (8007bc0 <__libc_init_array+0x40>)
 8007b92:	4c0c      	ldr	r4, [pc, #48]	; (8007bc4 <__libc_init_array+0x44>)
 8007b94:	f000 f818 	bl	8007bc8 <_init>
 8007b98:	1b64      	subs	r4, r4, r5
 8007b9a:	10a4      	asrs	r4, r4, #2
 8007b9c:	2600      	movs	r6, #0
 8007b9e:	42a6      	cmp	r6, r4
 8007ba0:	d105      	bne.n	8007bae <__libc_init_array+0x2e>
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba8:	4798      	blx	r3
 8007baa:	3601      	adds	r6, #1
 8007bac:	e7ee      	b.n	8007b8c <__libc_init_array+0xc>
 8007bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb2:	4798      	blx	r3
 8007bb4:	3601      	adds	r6, #1
 8007bb6:	e7f2      	b.n	8007b9e <__libc_init_array+0x1e>
 8007bb8:	08007c40 	.word	0x08007c40
 8007bbc:	08007c40 	.word	0x08007c40
 8007bc0:	08007c40 	.word	0x08007c40
 8007bc4:	08007c44 	.word	0x08007c44

08007bc8 <_init>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	bf00      	nop
 8007bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bce:	bc08      	pop	{r3}
 8007bd0:	469e      	mov	lr, r3
 8007bd2:	4770      	bx	lr

08007bd4 <_fini>:
 8007bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd6:	bf00      	nop
 8007bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bda:	bc08      	pop	{r3}
 8007bdc:	469e      	mov	lr, r3
 8007bde:	4770      	bx	lr
