
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c8  080076c8  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080076c8  080076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076d0  080076d0  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080076d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001054  20000104  080077dc  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001158  080077dc  00021158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128e5  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d0  00000000  00000000  00032a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00035b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb9  00000000  00000000  00036be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ac0  00000000  00000000  000378a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001480a  00000000  00000000  00050361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f9ba  00000000  00000000  00064b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004598  00000000  00000000  000f4528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000f8ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007658 	.word	0x08007658

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08007658 	.word	0x08007658

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_TIM_PeriodElapsedCallback>:
void CDC_Attach_Rx(void(*PtRx)(uint8_t *buf, uint16_t len)); //buf contiene los bytes recibidos, y len cuantos bytes llegaron
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){

	}
	IS10MS = TRUE;
 80004dc:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004de:	7813      	ldrb	r3, [r2, #0]
 80004e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e4:	7013      	strb	r3, [r2, #0]

}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000168 	.word	0x20000168

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
 8000502:	2300      	movs	r3, #0
 8000504:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fa1d 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f841 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f8f7 	bl	8000700 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000512:	f000 f8a5 	bl	8000660 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000516:	f006 fb2b 	bl	8006b70 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800051a:	481a      	ldr	r0, [pc, #104]	; (8000584 <main+0x8c>)
 800051c:	f002 fc44 	bl	8002da8 <HAL_TIM_Base_Start_IT>

  IS10MS = FALSE;
 8000520:	4a19      	ldr	r2, [pc, #100]	; (8000588 <main+0x90>)
 8000522:	7813      	ldrb	r3, [r2, #0]
 8000524:	f36f 1386 	bfc	r3, #6, #1
 8000528:	7013      	strb	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(IS10MS){
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <main+0x90>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f8      	beq.n	800052a <main+0x32>
		  time250us++;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	3301      	adds	r3, #1
 800053c:	71fb      	strb	r3, [r7, #7]
		  IS10MS =! IS10MS;
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <main+0x90>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	bf0c      	ite	eq
 800054c:	2301      	moveq	r3, #1
 800054e:	2300      	movne	r3, #0
 8000550:	b2d9      	uxtb	r1, r3
 8000552:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <main+0x90>)
 8000554:	7813      	ldrb	r3, [r2, #0]
 8000556:	f361 1386 	bfi	r3, r1, #6, #1
 800055a:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b27      	cmp	r3, #39	; 0x27
 8000560:	d9e3      	bls.n	800052a <main+0x32>
			  time10ms++;
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	3301      	adds	r3, #1
 8000566:	71bb      	strb	r3, [r7, #6]
			  time250us = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	71fb      	strb	r3, [r7, #7]
			  if(time10ms == 10){
 800056c:	79bb      	ldrb	r3, [r7, #6]
 800056e:	2b0a      	cmp	r3, #10
 8000570:	d1db      	bne.n	800052a <main+0x32>
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <main+0x94>)
 8000578:	f000 fd29 	bl	8000fce <HAL_GPIO_TogglePin>
				  time10ms = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	71bb      	strb	r3, [r7, #6]
	  if(IS10MS){
 8000580:	e7d3      	b.n	800052a <main+0x32>
 8000582:	bf00      	nop
 8000584:	20000120 	.word	0x20000120
 8000588:	20000168 	.word	0x20000168
 800058c:	40020800 	.word	0x40020800

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f007 f82e 	bl	8007600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <SystemClock_Config+0xc8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <SystemClock_Config+0xcc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000600:	2319      	movs	r3, #25
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000604:	23c0      	movs	r3, #192	; 0xc0
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ff47 	bl	80024a8 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 f8c0 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2103      	movs	r1, #3
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f9a9 	bl	8002998 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800064c:	f000 f8aa 	bl	80007a4 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_TIM1_Init+0x98>)
 800067e:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <MX_TIM1_Init+0x9c>)
 8000680:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_TIM1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_TIM1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_TIM1_Init+0x98>)
 8000690:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_TIM1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_TIM1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_TIM1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <MX_TIM1_Init+0x98>)
 80006aa:	f002 fb2d 	bl	8002d08 <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006b4:	f000 f876 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_TIM1_Init+0x98>)
 80006c6:	f002 fcc1 	bl	800304c <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006d0:	f000 f868 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_TIM1_Init+0x98>)
 80006e2:	f002 fec3 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006ec:	f000 f85a 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000120 	.word	0x20000120
 80006fc:	40010000 	.word	0x40010000

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_GPIO_Init+0x9c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1f      	ldr	r2, [pc, #124]	; (800079c <MX_GPIO_Init+0x9c>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0x9c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_GPIO_Init+0x9c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_GPIO_Init+0x9c>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0x9c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_GPIO_Init+0x9c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a11      	ldr	r2, [pc, #68]	; (800079c <MX_GPIO_Init+0x9c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_GPIO_Init+0x9c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000772:	f000 fc13 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000790:	f000 fa80 	bl	8000c94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020800 	.word	0x40020800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_TIM_Base_MspInit+0x48>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d115      	bne.n	800083e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_TIM_Base_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <HAL_TIM_Base_MspInit+0x4c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_TIM_Base_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2019      	movs	r0, #25
 8000834:	f000 f9f7 	bl	8000c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000838:	2019      	movs	r0, #25
 800083a:	f000 fa10 	bl	8000c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010000 	.word	0x40010000
 800084c:	40023800 	.word	0x40023800

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f8a4 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008aa:	f002 fadf 	bl	8002e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000120 	.word	0x20000120

080008b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <OTG_FS_IRQHandler+0x10>)
 80008be:	f000 fce4 	bl	800128a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000a54 	.word	0x20000a54

080008cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	; (8000930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	; (800093c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f006 fe77 	bl	8007610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff fde9 	bl	80004f8 <main>
  bx  lr    
 8000926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000934:	080076d8 	.word	0x080076d8
  ldr r2, =_sbss
 8000938:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800093c:	20001158 	.word	0x20001158

08000940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <HAL_Init+0x40>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_Init+0x40>)
 800095a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_Init+0x40>)
 8000966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f94f 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	200f      	movs	r0, #15
 8000974:	f000 f808 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff ff1a 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023c00 	.word	0x40023c00

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x54>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f967 	bl	8000c7a <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f92f 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_InitTick+0x5c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	2000016c 	.word	0x2000016c

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2000016c 	.word	0x2000016c

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff ffee 	bl	8000a10 <HAL_GetTick>
 8000a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a40:	d005      	beq.n	8000a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_Delay+0x44>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a4e:	bf00      	nop
 8000a50:	f7ff ffde 	bl	8000a10 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8f7      	bhi.n	8000a50 <HAL_Delay+0x28>
  {
  }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0b      	blt.n	8000afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <__NVIC_EnableIRQ+0x38>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff29 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff3e 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff31 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffa2 	bl	8000bcc <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	e159      	b.n	8000f64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f040 8148 	bne.w	8000f5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d005      	beq.n	8000ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d130      	bne.n	8000d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	f003 0201 	and.w	r2, r3, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d017      	beq.n	8000d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	69b9      	ldr	r1, [r7, #24]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80a2 	beq.w	8000f5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b57      	ldr	r3, [pc, #348]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a56      	ldr	r2, [pc, #344]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e36:	4a52      	ldr	r2, [pc, #328]	; (8000f80 <HAL_GPIO_Init+0x2ec>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <HAL_GPIO_Init+0x2f0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d019      	beq.n	8000e96 <HAL_GPIO_Init+0x202>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <HAL_GPIO_Init+0x2f4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d013      	beq.n	8000e92 <HAL_GPIO_Init+0x1fe>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a47      	ldr	r2, [pc, #284]	; (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d00d      	beq.n	8000e8e <HAL_GPIO_Init+0x1fa>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a46      	ldr	r2, [pc, #280]	; (8000f90 <HAL_GPIO_Init+0x2fc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d007      	beq.n	8000e8a <HAL_GPIO_Init+0x1f6>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a45      	ldr	r2, [pc, #276]	; (8000f94 <HAL_GPIO_Init+0x300>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d101      	bne.n	8000e86 <HAL_GPIO_Init+0x1f2>
 8000e82:	2304      	movs	r3, #4
 8000e84:	e008      	b.n	8000e98 <HAL_GPIO_Init+0x204>
 8000e86:	2307      	movs	r3, #7
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x204>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e004      	b.n	8000e98 <HAL_GPIO_Init+0x204>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_Init+0x204>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <HAL_GPIO_Init+0x204>
 8000e96:	2300      	movs	r3, #0
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	f002 0203 	and.w	r2, r2, #3
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	4093      	lsls	r3, r2
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea8:	4935      	ldr	r1, [pc, #212]	; (8000f80 <HAL_GPIO_Init+0x2ec>)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eda:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f04:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f58:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	f67f aea2 	bls.w	8000cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013800 	.word	0x40013800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40013c00 	.word	0x40013c00

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fb8:	e003      	b.n	8000fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe0:	887a      	ldrh	r2, [r7, #2]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	041a      	lsls	r2, r3, #16
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	400b      	ands	r3, r1
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af02      	add	r7, sp, #8
 8001008:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e101      	b.n	8001218 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d106      	bne.n	8001034 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f005 ffdc 	bl	8006fec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2203      	movs	r2, #3
 8001038:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001042:	d102      	bne.n	800104a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fba5 	bl	800379e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7c1a      	ldrb	r2, [r3, #16]
 800105c:	f88d 2000 	strb.w	r2, [sp]
 8001060:	3304      	adds	r3, #4
 8001062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001064:	f002 fa84 	bl	8003570 <USB_CoreInit>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0ce      	b.n	8001218 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fb9d 	bl	80037c0 <USB_SetCurrentMode>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0bf      	b.n	8001218 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e04a      	b.n	8001134 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3315      	adds	r3, #21
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3314      	adds	r3, #20
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	b298      	uxth	r0, r3
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	332e      	adds	r3, #46	; 0x2e
 80010da:	4602      	mov	r2, r0
 80010dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	3318      	adds	r3, #24
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	331c      	adds	r3, #28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3320      	adds	r3, #32
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3324      	adds	r3, #36	; 0x24
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3af      	bcc.n	800109e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e044      	b.n	80011ce <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3b5      	bcc.n	8001144 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7c1a      	ldrb	r2, [r3, #16]
 80011e0:	f88d 2000 	strb.w	r2, [sp]
 80011e4:	3304      	adds	r3, #4
 80011e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e8:	f002 fb36 	bl	8003858 <USB_DevInit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2202      	movs	r2, #2
 80011f6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00c      	b.n	8001218 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fb80 	bl	8004916 <USB_DevDisconnect>

  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_PCD_Start+0x1c>
 8001238:	2302      	movs	r3, #2
 800123a:	e022      	b.n	8001282 <HAL_PCD_Start+0x62>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124c:	2b00      	cmp	r3, #0
 800124e:	d009      	beq.n	8001264 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fa87 	bl	800377c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fb2e 	bl	80048d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128a:	b590      	push	{r4, r7, lr}
 800128c:	b08d      	sub	sp, #52	; 0x34
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fbec 	bl	8004a7e <USB_GetMode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f040 848c 	bne.w	8001bc6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fb50 	bl	8004958 <USB_ReadInterrupts>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8482 	beq.w	8001bc4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fb3d 	bl	8004958 <USB_ReadInterrupts>
 80012de:	4603      	mov	r3, r0
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d107      	bne.n	80012f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f002 0202 	and.w	r2, r2, #2
 80012f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 fb2b 	bl	8004958 <USB_ReadInterrupts>
 8001302:	4603      	mov	r3, r0
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b10      	cmp	r3, #16
 800130a:	d161      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0210 	bic.w	r2, r2, #16
 800131a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f003 020f 	and.w	r2, r3, #15
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	3304      	adds	r3, #4
 800133a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	0c5b      	lsrs	r3, r3, #17
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	2b02      	cmp	r3, #2
 8001346:	d124      	bne.n	8001392 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d035      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800135e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001362:	b29b      	uxth	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	6a38      	ldr	r0, [r7, #32]
 8001368:	f003 f962 	bl	8004630 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001378:	441a      	add	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138a:	441a      	add	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	e016      	b.n	80013c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	0c5b      	lsrs	r3, r3, #17
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	2b06      	cmp	r3, #6
 800139c:	d110      	bne.n	80013c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80013a4:	2208      	movs	r2, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	6a38      	ldr	r0, [r7, #32]
 80013aa:	f003 f941 	bl	8004630 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ba:	441a      	add	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0210 	orr.w	r2, r2, #16
 80013ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fabf 	bl	8004958 <USB_ReadInterrupts>
 80013da:	4603      	mov	r3, r0
 80013dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013e4:	f040 80a7 	bne.w	8001536 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fac4 	bl	800497e <USB_ReadDevAllOutEpInterrupt>
 80013f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013f8:	e099      	b.n	800152e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 808e 	beq.w	8001522 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fae8 	bl	80049e6 <USB_ReadDevOutEPInterrupt>
 8001416:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142e:	461a      	mov	r2, r3
 8001430:	2301      	movs	r3, #1
 8001432:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fea4 	bl	8002184 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00c      	beq.n	8001460 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001452:	461a      	mov	r2, r3
 8001454:	2308      	movs	r3, #8
 8001456:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 ff7a 	bl	8002354 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b00      	cmp	r3, #0
 8001468:	d008      	beq.n	800147c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	4413      	add	r3, r2
 8001472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001476:	461a      	mov	r2, r3
 8001478:	2310      	movs	r3, #16
 800147a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d030      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	2b80      	cmp	r3, #128	; 0x80
 8001490:	d109      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2200      	movs	r2, #0
 80014c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f005 fe87 	bl	80071e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2302      	movs	r3, #2
 80014e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fe:	461a      	mov	r2, r3
 8001500:	2320      	movs	r3, #32
 8001502:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	015a      	lsls	r2, r3, #5
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4413      	add	r3, r2
 8001516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800151a:	461a      	mov	r2, r3
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	3301      	adds	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f af62 	bne.w	80013fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fa0c 	bl	8004958 <USB_ReadInterrupts>
 8001540:	4603      	mov	r3, r0
 8001542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001546:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800154a:	f040 80db 	bne.w	8001704 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fa2d 	bl	80049b2 <USB_ReadDevAllInEpInterrupt>
 8001558:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800155e:	e0cd      	b.n	80016fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80c2 	beq.w	80016f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fa53 	bl	8004a22 <USB_ReadDevInEPInterrupt>
 800157c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d057      	beq.n	8001638 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	2201      	movs	r2, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800159c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69f9      	ldr	r1, [r7, #28]
 80015a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015a8:	4013      	ands	r3, r2
 80015aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b8:	461a      	mov	r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	799b      	ldrb	r3, [r3, #6]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d132      	bne.n	800162c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3320      	adds	r3, #32
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015dc:	4613      	mov	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4403      	add	r3, r0
 80015e6:	331c      	adds	r3, #28
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4419      	add	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4403      	add	r3, r0
 80015fa:	3320      	adds	r3, #32
 80015fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	2b00      	cmp	r3, #0
 8001602:	d113      	bne.n	800162c <HAL_PCD_IRQHandler+0x3a2>
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3324      	adds	r3, #36	; 0x24
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001624:	461a      	mov	r2, r3
 8001626:	2101      	movs	r1, #1
 8001628:	f003 fa5a 	bl	8004ae0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f005 fd5b 	bl	80070ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164e:	461a      	mov	r2, r3
 8001650:	2308      	movs	r3, #8
 8001652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166a:	461a      	mov	r2, r3
 800166c:	2310      	movs	r3, #16
 800166e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001686:	461a      	mov	r2, r3
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d023      	beq.n	80016de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001698:	6a38      	ldr	r0, [r7, #32]
 800169a:	f002 fa41 	bl	8003b20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	3310      	adds	r3, #16
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	3304      	adds	r3, #4
 80016b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	78db      	ldrb	r3, [r3, #3]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d108      	bne.n	80016cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2200      	movs	r2, #0
 80016be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f005 fd9e 	bl	8007208 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	015a      	lsls	r2, r3, #5
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d8:	461a      	mov	r2, r3
 80016da:	2302      	movs	r3, #2
 80016dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fcbd 	bl	800206a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	3301      	adds	r3, #1
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f47f af2e 	bne.w	8001560 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f003 f925 	bl	8004958 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001718:	d122      	bne.n	8001760 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001740:	2100      	movs	r1, #0
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fea4 	bl	8002490 <HAL_PCDEx_LPM_Callback>
 8001748:	e002      	b.n	8001750 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f005 fd3c 	bl	80071c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800175e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 f8f7 	bl	8004958 <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001774:	d112      	bne.n	800179c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d102      	bne.n	800178c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f005 fcf8 	bl	800717c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800179a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 f8d9 	bl	8004958 <USB_ReadInterrupts>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b0:	f040 80b7 	bne.w	8001922 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2110      	movs	r1, #16
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 f9a6 	bl	8003b20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d8:	e046      	b.n	8001868 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e6:	461a      	mov	r2, r3
 80017e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fe:	0151      	lsls	r1, r2, #5
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	440a      	add	r2, r1
 8001804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800180c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	015a      	lsls	r2, r3, #5
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	4413      	add	r3, r2
 8001816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800181a:	461a      	mov	r2, r3
 800181c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001820:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	015a      	lsls	r2, r3, #5
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4413      	add	r3, r2
 800182a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	0151      	lsls	r1, r2, #5
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	440a      	add	r2, r1
 8001838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800183c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001840:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001852:	0151      	lsls	r1, r2, #5
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	440a      	add	r2, r1
 8001858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800185c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001860:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	3301      	adds	r3, #1
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	461a      	mov	r2, r3
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	4293      	cmp	r3, r2
 8001872:	d3b2      	bcc.n	80017da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001882:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001886:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7bdb      	ldrb	r3, [r3, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d016      	beq.n	80018be <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a0:	f043 030b 	orr.w	r3, r3, #11
 80018a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b6:	f043 030b 	orr.w	r3, r3, #11
 80018ba:	6453      	str	r3, [r2, #68]	; 0x44
 80018bc:	e015      	b.n	80018ea <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e4:	f043 030b 	orr.w	r3, r3, #11
 80018e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800190c:	461a      	mov	r2, r3
 800190e:	f003 f8e7 	bl	8004ae0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 f816 	bl	8004958 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001936:	d123      	bne.n	8001980 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f003 f8ac 	bl	8004a9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 f963 	bl	8003c12 <USB_GetDevSpeed>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681c      	ldr	r4, [r3, #0]
 8001958:	f001 f9ca 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 800195c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001962:	461a      	mov	r2, r3
 8001964:	4620      	mov	r0, r4
 8001966:	f001 fe67 	bl	8003638 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f005 fbe7 	bl	800713e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800197e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f002 ffe7 	bl	8004958 <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b08      	cmp	r3, #8
 8001992:	d10a      	bne.n	80019aa <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f005 fbc4 	bl	8007122 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f002 0208 	and.w	r2, r2, #8
 80019a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 ffd2 	bl	8004958 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b80      	cmp	r3, #128	; 0x80
 80019bc:	d123      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ca:	2301      	movs	r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	e014      	b.n	80019fa <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f203 2357 	addw	r3, r3, #599	; 0x257
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	4619      	mov	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fb0a 	bl	8002008 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	3301      	adds	r3, #1
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	791b      	ldrb	r3, [r3, #4]
 80019fe:	461a      	mov	r2, r3
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d3e4      	bcc.n	80019d0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 ffa4 	bl	8004958 <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a1a:	d13c      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a20:	e02b      	b.n	8001a7a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	015a      	lsls	r2, r3, #5
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3318      	adds	r3, #24
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d115      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da12      	bge.n	8001a74 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3317      	adds	r3, #23
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 faca 	bl	8002008 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3301      	adds	r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d3cd      	bcc.n	8001a22 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 ff5c 	bl	8004958 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aaa:	d156      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aac:	2301      	movs	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	e045      	b.n	8001b3e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d12e      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ada:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da2b      	bge.n	8001b38 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	0c1a      	lsrs	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001aea:	4053      	eors	r3, r2
 8001aec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d121      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10a      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b34:	6053      	str	r3, [r2, #4]
            break;
 8001b36:	e008      	b.n	8001b4a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	461a      	mov	r2, r3
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d3b3      	bcc.n	8001ab2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fefa 	bl	8004958 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6e:	d10a      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f005 fb5b 	bl	800722c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fee4 	bl	8004958 <USB_ReadInterrupts>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d115      	bne.n	8001bc6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f005 fb4b 	bl	8007248 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	e000      	b.n	8001bc6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bc4:	bf00      	nop
    }
  }
}
 8001bc6:	3734      	adds	r7, #52	; 0x34
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}

08001bcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_PCD_SetAddress+0x1a>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e012      	b.n	8001c0c <HAL_PCD_SetAddress+0x40>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fe43 	bl	8004888 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	4611      	mov	r1, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	4603      	mov	r3, r0
 8001c24:	70fb      	strb	r3, [r7, #3]
 8001c26:	460b      	mov	r3, r1
 8001c28:	803b      	strh	r3, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da0f      	bge.n	8001c5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	f003 020f 	and.w	r2, r3, #15
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	3310      	adds	r3, #16
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3304      	adds	r3, #4
 8001c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	705a      	strb	r2, [r3, #1]
 8001c58:	e00f      	b.n	8001c7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	f003 020f 	and.w	r2, r3, #15
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c86:	883b      	ldrh	r3, [r7, #0]
 8001c88:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	78ba      	ldrb	r2, [r7, #2]
 8001c94:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ca8:	78bb      	ldrb	r3, [r7, #2]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d102      	bne.n	8001cb4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_PCD_EP_Open+0xae>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00e      	b.n	8001ce0 <HAL_PCD_EP_Open+0xcc>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68f9      	ldr	r1, [r7, #12]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 ffc3 	bl	8003c5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001cde:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da0f      	bge.n	8001d1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 020f 	and.w	r2, r3, #15
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	3310      	adds	r3, #16
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	3304      	adds	r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	705a      	strb	r2, [r3, #1]
 8001d1a:	e00f      	b.n	8001d3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 020f 	and.w	r2, r3, #15
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	3304      	adds	r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_PCD_EP_Close+0x6e>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e00e      	b.n	8001d74 <HAL_PCD_EP_Close+0x8c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68f9      	ldr	r1, [r7, #12]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 f801 	bl	8003d6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	799b      	ldrb	r3, [r3, #6]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	799b      	ldrb	r3, [r3, #6]
 8001de0:	461a      	mov	r2, r3
 8001de2:	6979      	ldr	r1, [r7, #20]
 8001de4:	f002 f89e 	bl	8003f24 <USB_EPStartXfer>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f003 020f 	and.w	r2, r3, #15
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001e14:	681b      	ldr	r3, [r3, #0]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	3310      	adds	r3, #16
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	3304      	adds	r3, #4
 8001e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	799b      	ldrb	r3, [r3, #6]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	799b      	ldrb	r3, [r3, #6]
 8001e84:	461a      	mov	r2, r3
 8001e86:	6979      	ldr	r1, [r7, #20]
 8001e88:	f002 f84c 	bl	8003f24 <USB_EPStartXfer>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	7912      	ldrb	r2, [r2, #4]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e04f      	b.n	8001f54 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0f      	bge.n	8001edc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3310      	adds	r3, #16
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	705a      	strb	r2, [r3, #1]
 8001eda:	e00d      	b.n	8001ef8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_EP_SetStall+0x82>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e01d      	b.n	8001f54 <HAL_PCD_EP_SetStall+0xbe>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fbda 	bl	80046e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7999      	ldrb	r1, [r3, #6]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001f44:	461a      	mov	r2, r3
 8001f46:	f002 fdcb 	bl	8004ae0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	7912      	ldrb	r2, [r2, #4]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e042      	b.n	8002000 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	da0f      	bge.n	8001fa2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	3310      	adds	r3, #16
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	705a      	strb	r2, [r3, #1]
 8001fa0:	e00f      	b.n	8001fc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_PCD_EP_ClrStall+0x86>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e00e      	b.n	8002000 <HAL_PCD_EP_ClrStall+0xa4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f002 fbe3 	bl	80047bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002018:	2b00      	cmp	r3, #0
 800201a:	da0c      	bge.n	8002036 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	f003 020f 	and.w	r2, r3, #15
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	3310      	adds	r3, #16
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e00c      	b.n	8002050 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	f003 020f 	and.w	r2, r3, #15
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68f9      	ldr	r1, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fa02 	bl	8004460 <USB_EPStopXfer>
 800205c:	4603      	mov	r3, r0
 800205e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002060:	7afb      	ldrb	r3, [r7, #11]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b08a      	sub	sp, #40	; 0x28
 800206e:	af02      	add	r7, sp, #8
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3310      	adds	r3, #16
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	429a      	cmp	r2, r3
 800209c:	d901      	bls.n	80020a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06b      	b.n	800217a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d902      	bls.n	80020be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3303      	adds	r3, #3
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c6:	e02a      	b.n	800211e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d902      	bls.n	80020e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3303      	adds	r3, #3
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4603      	mov	r3, r0
 8002100:	6978      	ldr	r0, [r7, #20]
 8002102:	f002 fa57 	bl	80045b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	441a      	add	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	441a      	add	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	429a      	cmp	r2, r3
 8002132:	d809      	bhi.n	8002148 <PCD_WriteEmptyTxFifo+0xde>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213c:	429a      	cmp	r2, r3
 800213e:	d203      	bcs.n	8002148 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1bf      	bne.n	80020c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	d811      	bhi.n	8002178 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	43db      	mvns	r3, r3
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002174:	4013      	ands	r3, r2
 8002176:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	333c      	adds	r3, #60	; 0x3c
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	799b      	ldrb	r3, [r3, #6]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d17b      	bne.n	80022b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a61      	ldr	r2, [pc, #388]	; (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f240 80b9 	bls.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b3 	beq.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ec:	6093      	str	r3, [r2, #8]
 80021ee:	e0a7      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	2320      	movs	r3, #32
 800220a:	6093      	str	r3, [r2, #8]
 800220c:	e098      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8093 	bne.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d90f      	bls.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e07e      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	440b      	add	r3, r1
 8002264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d114      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800228c:	461a      	mov	r2, r3
 800228e:	2101      	movs	r1, #1
 8002290:	f002 fc26 	bl	8004ae0 <USB_EP0_OutStart>
 8002294:	e006      	b.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	441a      	add	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f004 ff04 	bl	80070b8 <HAL_PCD_DataOutStageCallback>
 80022b0:	e046      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d124      	bne.n	8002304 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	e032      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	2320      	movs	r3, #32
 80022f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f004 fedb 	bl	80070b8 <HAL_PCD_DataOutStageCallback>
 8002302:	e01d      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d114      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800232c:	461a      	mov	r2, r3
 800232e:	2100      	movs	r1, #0
 8002330:	f002 fbd6 	bl	8004ae0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f004 febc 	bl	80070b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a
 8002350:	4f54310a 	.word	0x4f54310a

08002354 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	333c      	adds	r3, #60	; 0x3c
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90e      	bls.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f004 fe73 	bl	8007094 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d90c      	bls.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	799b      	ldrb	r3, [r3, #6]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80023c8:	461a      	mov	r2, r3
 80023ca:	2101      	movs	r1, #1
 80023cc:	f002 fb88 	bl	8004ae0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	4f54300a 	.word	0x4f54300a

080023e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fe:	883b      	ldrh	r3, [r7, #0]
 8002400:	0419      	lsls	r1, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	430a      	orrs	r2, r1
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
 800240c:	e028      	b.n	8002460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e00d      	b.n	800243e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	3340      	adds	r3, #64	; 0x40
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	3b01      	subs	r3, #1
 8002444:	429a      	cmp	r2, r3
 8002446:	d3ec      	bcc.n	8002422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	0418      	lsls	r0, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	3b01      	subs	r3, #1
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4302      	orrs	r2, r0
 8002458:	3340      	adds	r3, #64	; 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e267      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024c6:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b82      	ldr	r3, [pc, #520]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e242      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x74>
 800250e:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a75      	ldr	r2, [pc, #468]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b70      	ldr	r3, [pc, #448]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6f      	ldr	r2, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6c      	ldr	r2, [pc, #432]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 8002540:	4b69      	ldr	r3, [pc, #420]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a68      	ldr	r2, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fa56 	bl	8000a10 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fa52 	bl	8000a10 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e207      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fa42 	bl	8000a10 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fa3e 	bl	8000a10 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1f3      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c7      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4937      	ldr	r1, [pc, #220]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_OscConfig+0x244>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe f9f7 	bl	8000a10 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe f9f3 	bl	8000a10 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a8      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4925      	ldr	r1, [pc, #148]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x244>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe f9d6 	bl	8000a10 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7fe f9d2 	bl	8000a10 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e187      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d036      	beq.n	8002700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_RCC_OscConfig+0x248>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe f9b6 	bl	8000a10 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe f9b2 	bl	8000a10 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e167      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x200>
 80026c6:	e01b      	b.n	8002700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_OscConfig+0x248>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe f99f 	bl	8000a10 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e00e      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe f99b 	bl	8000a10 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d907      	bls.n	80026f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e150      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	42470000 	.word	0x42470000
 80026f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b88      	ldr	r3, [pc, #544]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1ea      	bne.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8097 	beq.w	800283c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b7d      	ldr	r3, [pc, #500]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a7c      	ldr	r2, [pc, #496]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b7a      	ldr	r3, [pc, #488]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b77      	ldr	r3, [pc, #476]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b74      	ldr	r3, [pc, #464]	; (800291c <HAL_RCC_OscConfig+0x474>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a73      	ldr	r2, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7fe f95b 	bl	8000a10 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7fe f957 	bl	8000a10 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e10c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	4b6a      	ldr	r3, [pc, #424]	; (800291c <HAL_RCC_OscConfig+0x474>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x2ea>
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a63      	ldr	r2, [pc, #396]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x30c>
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a5e      	ldr	r2, [pc, #376]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a5b      	ldr	r2, [pc, #364]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 80027b4:	4b58      	ldr	r3, [pc, #352]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a57      	ldr	r2, [pc, #348]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	4b55      	ldr	r3, [pc, #340]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a54      	ldr	r2, [pc, #336]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe f91c 	bl	8000a10 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe f918 	bl	8000a10 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0cb      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCC_OscConfig+0x334>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe f906 	bl	8000a10 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe f902 	bl	8000a10 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0b5      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281e:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ee      	bne.n	8002808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b39      	ldr	r3, [pc, #228]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	4a38      	ldr	r2, [pc, #224]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a1 	beq.w	8002988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002846:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d05c      	beq.n	800290c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d141      	bne.n	80028de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe f8d6 	bl	8000a10 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe f8d2 	bl	8000a10 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e087      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	491b      	ldr	r1, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe f8ab 	bl	8000a10 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe f8a7 	bl	8000a10 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e05c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x416>
 80028dc:	e054      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f894 	bl	8000a10 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe f890 	bl	8000a10 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e045      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x444>
 800290a:	e03d      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e038      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000
 8002920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x4ec>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d028      	beq.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d121      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11a      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800295a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295c:	4293      	cmp	r3, r2
 800295e:	d111      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0cc      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d90c      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d044      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d119      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e067      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4934      	ldr	r1, [pc, #208]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7fd ffc2 	bl	8000a10 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fd ffbe 	bl	8000a10 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e04f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d20c      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd ff22 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00
 8002b54:	40023800 	.word	0x40023800
 8002b58:	080076b8 	.word	0x080076b8
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b68:	b090      	sub	sp, #64	; 0x40
 8002b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7c:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	f200 80a1 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x34>
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b96:	e09b      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b9c:	e09b      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9e:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ba2:	e098      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bae:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd0:	fb03 f201 	mul.w	r2, r3, r1
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a43      	ldr	r2, [pc, #268]	; (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bde:	fba0 1202 	umull	r1, r2, r0, r2
 8002be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be4:	460a      	mov	r2, r1
 8002be6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bea:	4413      	add	r3, r2
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	61fa      	str	r2, [r7, #28]
 8002bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bfe:	f7fd faeb 	bl	80001d8 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4613      	mov	r3, r2
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0a:	e053      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	617a      	str	r2, [r7, #20]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c1e:	f04f 0b00 	mov.w	fp, #0
 8002c22:	4652      	mov	r2, sl
 8002c24:	465b      	mov	r3, fp
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c3e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c56:	ebb2 0408 	subs.w	r4, r2, r8
 8002c5a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	00eb      	lsls	r3, r5, #3
 8002c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6c:	00e2      	lsls	r2, r4, #3
 8002c6e:	4614      	mov	r4, r2
 8002c70:	461d      	mov	r5, r3
 8002c72:	eb14 030a 	adds.w	r3, r4, sl
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	eb45 030b 	adc.w	r3, r5, fp
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	028b      	lsls	r3, r1, #10
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c94:	4621      	mov	r1, r4
 8002c96:	028a      	lsls	r2, r1, #10
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca8:	f7fd fa96 	bl	80001d8 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3740      	adds	r7, #64	; 0x40
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	017d7840 	.word	0x017d7840

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e041      	b.n	8002d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd fd66 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 fa70 	bl	800322c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d001      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e044      	b.n	8002e4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_TIM_Base_Start_IT+0xb0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d018      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dea:	d013      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_TIM_Base_Start_IT+0xb4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <HAL_TIM_Base_Start_IT+0xb8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x6c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d111      	bne.n	8002e38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d010      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e36:	e007      	b.n	8002e48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40014000 	.word	0x40014000

08002e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d020      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0202 	mvn.w	r2, #2
 8002ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f999 	bl	80031ee <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f98b 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f99c 	bl	8003202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d020      	beq.n	8002f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01b      	beq.n	8002f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0204 	mvn.w	r2, #4
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f973 	bl	80031ee <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f965 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f976 	bl	8003202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d020      	beq.n	8002f68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01b      	beq.n	8002f68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0208 	mvn.w	r2, #8
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f94d 	bl	80031ee <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f93f 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f950 	bl	8003202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d020      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0210 	mvn.w	r2, #16
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f927 	bl	80031ee <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f919 	bl	80031da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f92a 	bl	8003202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd fa7e 	bl	80004d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fab0 	bl	800355c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8fb 	bl	8003216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0220 	mvn.w	r2, #32
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa82 	bl	8003548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_TIM_ConfigClockSource+0x1c>
 8003064:	2302      	movs	r3, #2
 8003066:	e0b4      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x186>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800308e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a0:	d03e      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0xd4>
 80030a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a6:	f200 8087 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ae:	f000 8086 	beq.w	80031be <HAL_TIM_ConfigClockSource+0x172>
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b6:	d87f      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b70      	cmp	r3, #112	; 0x70
 80030ba:	d01a      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0xa6>
 80030bc:	2b70      	cmp	r3, #112	; 0x70
 80030be:	d87b      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b60      	cmp	r3, #96	; 0x60
 80030c2:	d050      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x11a>
 80030c4:	2b60      	cmp	r3, #96	; 0x60
 80030c6:	d877      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b50      	cmp	r3, #80	; 0x50
 80030ca:	d03c      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0xfa>
 80030cc:	2b50      	cmp	r3, #80	; 0x50
 80030ce:	d873      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d058      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x13a>
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d86f      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d8:	2b30      	cmp	r3, #48	; 0x30
 80030da:	d064      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x15a>
 80030dc:	2b30      	cmp	r3, #48	; 0x30
 80030de:	d86b      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d060      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x15a>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d867      	bhi.n	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05c      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x15a>
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d05a      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x15a>
 80030f0:	e062      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003102:	f000 f993 	bl	800342c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003114:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	609a      	str	r2, [r3, #8]
      break;
 800311e:	e04f      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003130:	f000 f97c 	bl	800342c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003142:	609a      	str	r2, [r3, #8]
      break;
 8003144:	e03c      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	461a      	mov	r2, r3
 8003154:	f000 f8f0 	bl	8003338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2150      	movs	r1, #80	; 0x50
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f949 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8003164:	e02c      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003172:	461a      	mov	r2, r3
 8003174:	f000 f90f 	bl	8003396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2160      	movs	r1, #96	; 0x60
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f939 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8003184:	e01c      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	461a      	mov	r2, r3
 8003194:	f000 f8d0 	bl	8003338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2140      	movs	r1, #64	; 0x40
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f929 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 80031a4:	e00c      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f000 f920 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 80031b6:	e003      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	e000      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a37      	ldr	r2, [pc, #220]	; (800331c <TIM_Base_SetConfig+0xf0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00f      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a34      	ldr	r2, [pc, #208]	; (8003320 <TIM_Base_SetConfig+0xf4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a33      	ldr	r2, [pc, #204]	; (8003324 <TIM_Base_SetConfig+0xf8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a32      	ldr	r2, [pc, #200]	; (8003328 <TIM_Base_SetConfig+0xfc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a28      	ldr	r2, [pc, #160]	; (800331c <TIM_Base_SetConfig+0xf0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01b      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d017      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <TIM_Base_SetConfig+0xf4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <TIM_Base_SetConfig+0xf8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00f      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a23      	ldr	r2, [pc, #140]	; (8003328 <TIM_Base_SetConfig+0xfc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00b      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a22      	ldr	r2, [pc, #136]	; (800332c <TIM_Base_SetConfig+0x100>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a21      	ldr	r2, [pc, #132]	; (8003330 <TIM_Base_SetConfig+0x104>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d003      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <TIM_Base_SetConfig+0x108>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d108      	bne.n	80032c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a0c      	ldr	r2, [pc, #48]	; (800331c <TIM_Base_SetConfig+0xf0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d103      	bne.n	80032f6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f043 0204 	orr.w	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0201 	bic.w	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 030a 	bic.w	r3, r3, #10
 8003374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f023 0210 	bic.w	r2, r3, #16
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	f043 0307 	orr.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	431a      	orrs	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e050      	b.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d013      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a16      	ldr	r2, [pc, #88]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a13      	ldr	r2, [pc, #76]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10c      	bne.n	8003514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4313      	orrs	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800
 8003540:	40000c00 	.word	0x40000c00
 8003544:	40014000 	.word	0x40014000

08003548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003570:	b084      	sub	sp, #16
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	f107 001c 	add.w	r0, r7, #28
 800357e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003582:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003586:	2b01      	cmp	r3, #1
 8003588:	d123      	bne.n	80035d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800359e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f001 fae8 	bl	8004b9c <USB_CoreReset>
 80035cc:	4603      	mov	r3, r0
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e01b      	b.n	800360a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 fadc 	bl	8004b9c <USB_CoreReset>
 80035e4:	4603      	mov	r3, r0
 80035e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
 80035fc:	e005      	b.n	800360a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800360a:	7fbb      	ldrb	r3, [r7, #30]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10b      	bne.n	8003628 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f043 0206 	orr.w	r2, r3, #6
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003634:	b004      	add	sp, #16
 8003636:	4770      	bx	lr

08003638 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d165      	bne.n	8003718 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4a41      	ldr	r2, [pc, #260]	; (8003754 <USB_SetTurnaroundTime+0x11c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d906      	bls.n	8003662 <USB_SetTurnaroundTime+0x2a>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a40      	ldr	r2, [pc, #256]	; (8003758 <USB_SetTurnaroundTime+0x120>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d202      	bcs.n	8003662 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800365c:	230f      	movs	r3, #15
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	e062      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4a3c      	ldr	r2, [pc, #240]	; (8003758 <USB_SetTurnaroundTime+0x120>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d306      	bcc.n	8003678 <USB_SetTurnaroundTime+0x40>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <USB_SetTurnaroundTime+0x124>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d202      	bcs.n	8003678 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003672:	230e      	movs	r3, #14
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e057      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4a38      	ldr	r2, [pc, #224]	; (800375c <USB_SetTurnaroundTime+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d306      	bcc.n	800368e <USB_SetTurnaroundTime+0x56>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4a37      	ldr	r2, [pc, #220]	; (8003760 <USB_SetTurnaroundTime+0x128>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d202      	bcs.n	800368e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003688:	230d      	movs	r3, #13
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	e04c      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4a33      	ldr	r2, [pc, #204]	; (8003760 <USB_SetTurnaroundTime+0x128>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d306      	bcc.n	80036a4 <USB_SetTurnaroundTime+0x6c>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4a32      	ldr	r2, [pc, #200]	; (8003764 <USB_SetTurnaroundTime+0x12c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d802      	bhi.n	80036a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800369e:	230c      	movs	r3, #12
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e041      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4a2f      	ldr	r2, [pc, #188]	; (8003764 <USB_SetTurnaroundTime+0x12c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d906      	bls.n	80036ba <USB_SetTurnaroundTime+0x82>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a2e      	ldr	r2, [pc, #184]	; (8003768 <USB_SetTurnaroundTime+0x130>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d802      	bhi.n	80036ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036b4:	230b      	movs	r3, #11
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	e036      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <USB_SetTurnaroundTime+0x130>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d906      	bls.n	80036d0 <USB_SetTurnaroundTime+0x98>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4a29      	ldr	r2, [pc, #164]	; (800376c <USB_SetTurnaroundTime+0x134>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d802      	bhi.n	80036d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036ca:	230a      	movs	r3, #10
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	e02b      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <USB_SetTurnaroundTime+0x134>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d906      	bls.n	80036e6 <USB_SetTurnaroundTime+0xae>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <USB_SetTurnaroundTime+0x138>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d202      	bcs.n	80036e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036e0:	2309      	movs	r3, #9
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e020      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4a21      	ldr	r2, [pc, #132]	; (8003770 <USB_SetTurnaroundTime+0x138>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d306      	bcc.n	80036fc <USB_SetTurnaroundTime+0xc4>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4a20      	ldr	r2, [pc, #128]	; (8003774 <USB_SetTurnaroundTime+0x13c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d802      	bhi.n	80036fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036f6:	2308      	movs	r3, #8
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e015      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <USB_SetTurnaroundTime+0x13c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d906      	bls.n	8003712 <USB_SetTurnaroundTime+0xda>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <USB_SetTurnaroundTime+0x140>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d202      	bcs.n	8003712 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800370c:	2307      	movs	r3, #7
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e00a      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003712:	2306      	movs	r3, #6
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e007      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800371e:	2309      	movs	r3, #9
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e001      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003724:	2309      	movs	r3, #9
 8003726:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	00d8acbf 	.word	0x00d8acbf
 8003758:	00e4e1c0 	.word	0x00e4e1c0
 800375c:	00f42400 	.word	0x00f42400
 8003760:	01067380 	.word	0x01067380
 8003764:	011a499f 	.word	0x011a499f
 8003768:	01312cff 	.word	0x01312cff
 800376c:	014ca43f 	.word	0x014ca43f
 8003770:	016e3600 	.word	0x016e3600
 8003774:	01a6ab1f 	.word	0x01a6ab1f
 8003778:	01e84800 	.word	0x01e84800

0800377c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f043 0201 	orr.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 0201 	bic.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d115      	bne.n	800380e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037ee:	200a      	movs	r0, #10
 80037f0:	f7fd f91a 	bl	8000a28 <HAL_Delay>
      ms += 10U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	330a      	adds	r3, #10
 80037f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f001 f93f 	bl	8004a7e <USB_GetMode>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d01e      	beq.n	8003844 <USB_SetCurrentMode+0x84>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2bc7      	cmp	r3, #199	; 0xc7
 800380a:	d9f0      	bls.n	80037ee <USB_SetCurrentMode+0x2e>
 800380c:	e01a      	b.n	8003844 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d115      	bne.n	8003840 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003820:	200a      	movs	r0, #10
 8003822:	f7fd f901 	bl	8000a28 <HAL_Delay>
      ms += 10U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	330a      	adds	r3, #10
 800382a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 f926 	bl	8004a7e <USB_GetMode>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <USB_SetCurrentMode+0x84>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2bc7      	cmp	r3, #199	; 0xc7
 800383c:	d9f0      	bls.n	8003820 <USB_SetCurrentMode+0x60>
 800383e:	e001      	b.n	8003844 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e005      	b.n	8003850 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2bc8      	cmp	r3, #200	; 0xc8
 8003848:	d101      	bne.n	800384e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003858:	b084      	sub	sp, #16
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e009      	b.n	800388c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3340      	adds	r3, #64	; 0x40
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	2200      	movs	r2, #0
 8003884:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3301      	adds	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0e      	cmp	r3, #14
 8003890:	d9f2      	bls.n	8003878 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003892:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11c      	bne.n	80038d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
 80038d2:	e00b      	b.n	80038ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2300      	movs	r3, #0
 80038f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d10d      	bne.n	800391c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003904:	2b00      	cmp	r3, #0
 8003906:	d104      	bne.n	8003912 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003908:	2100      	movs	r1, #0
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f968 	bl	8003be0 <USB_SetDevSpeed>
 8003910:	e008      	b.n	8003924 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003912:	2101      	movs	r1, #1
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f963 	bl	8003be0 <USB_SetDevSpeed>
 800391a:	e003      	b.n	8003924 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800391c:	2103      	movs	r1, #3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f95e 	bl	8003be0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003924:	2110      	movs	r1, #16
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8fa 	bl	8003b20 <USB_FlushTxFifo>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f924 	bl	8003b84 <USB_FlushRxFifo>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	461a      	mov	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	461a      	mov	r2, r3
 800395a:	2300      	movs	r3, #0
 800395c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003964:	461a      	mov	r2, r3
 8003966:	2300      	movs	r3, #0
 8003968:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e043      	b.n	80039f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003986:	d118      	bne.n	80039ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399a:	461a      	mov	r2, r3
 800399c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e013      	b.n	80039cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	461a      	mov	r2, r3
 80039b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e008      	b.n	80039cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	461a      	mov	r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	461a      	mov	r2, r3
 80039da:	2300      	movs	r3, #0
 80039dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ea:	461a      	mov	r2, r3
 80039ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	3301      	adds	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039fc:	461a      	mov	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d3b5      	bcc.n	8003970 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	e043      	b.n	8003a92 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a20:	d118      	bne.n	8003a54 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	461a      	mov	r2, r3
 8003a36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e013      	b.n	8003a66 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e008      	b.n	8003a66 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a60:	461a      	mov	r2, r3
 8003a62:	2300      	movs	r3, #0
 8003a64:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a72:	461a      	mov	r2, r3
 8003a74:	2300      	movs	r3, #0
 8003a76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	461a      	mov	r2, r3
 8003a86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a96:	461a      	mov	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d3b5      	bcc.n	8003a0a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003abe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f043 0210 	orr.w	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <USB_DevInit+0x2c4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ae0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f043 0208 	orr.w	r2, r3, #8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003af4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b18:	b004      	add	sp, #16
 8003b1a:	4770      	bx	lr
 8003b1c:	803c3800 	.word	0x803c3800

08003b20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3301      	adds	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003b3a:	d901      	bls.n	8003b40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e01b      	b.n	8003b78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	daf2      	bge.n	8003b2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	019b      	lsls	r3, r3, #6
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003b64:	d901      	bls.n	8003b6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e006      	b.n	8003b78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d0f0      	beq.n	8003b58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003b9c:	d901      	bls.n	8003ba2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e018      	b.n	8003bd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	daf2      	bge.n	8003b90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003bc0:	d901      	bls.n	8003bc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e006      	b.n	8003bd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d0f0      	beq.n	8003bb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	68f9      	ldr	r1, [r7, #12]
 8003bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0306 	and.w	r3, r3, #6
 8003c2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
 8003c36:	e00a      	b.n	8003c4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d002      	beq.n	8003c44 <USB_GetDevSpeed+0x32>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d102      	bne.n	8003c4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c44:	2302      	movs	r3, #2
 8003c46:	75fb      	strb	r3, [r7, #23]
 8003c48:	e001      	b.n	8003c4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c4a:	230f      	movs	r3, #15
 8003c4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d13a      	bne.n	8003cee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d155      	bne.n	8003d5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	791b      	ldrb	r3, [r3, #4]
 8003cca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ccc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	059b      	lsls	r3, r3, #22
 8003cd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e036      	b.n	8003d5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11a      	bne.n	8003d5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	791b      	ldrb	r3, [r3, #4]
 8003d40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d42:	430b      	orrs	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d161      	bne.n	8003e4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d9e:	d11f      	bne.n	8003de0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	0151      	lsls	r1, r2, #5
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	440a      	add	r2, r1
 8003db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	0151      	lsls	r1, r2, #5
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	440a      	add	r2, r1
 8003dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e00:	4013      	ands	r3, r2
 8003e02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	2101      	movs	r1, #1
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e24:	4013      	ands	r3, r2
 8003e26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	0159      	lsls	r1, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	4619      	mov	r1, r3
 8003e44:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <USB_DeactivateEndpoint+0x1b0>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
 8003e4a:	e060      	b.n	8003f0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e62:	d11f      	bne.n	8003ea4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	0159      	lsls	r1, r3, #5
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	440b      	add	r3, r1
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	4619      	mov	r1, r3
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <USB_DeactivateEndpoint+0x1b4>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	ec337800 	.word	0xec337800
 8003f20:	eff37800 	.word	0xeff37800

08003f24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f040 817f 	bne.w	8004244 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d132      	bne.n	8003fb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fac:	0cdb      	lsrs	r3, r3, #19
 8003fae:	04db      	lsls	r3, r3, #19
 8003fb0:	6113      	str	r3, [r2, #16]
 8003fb2:	e097      	b.n	80040e4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fce:	0cdb      	lsrs	r3, r3, #19
 8003fd0:	04db      	lsls	r3, r3, #19
 8003fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ff2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ff6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11a      	bne.n	8004034 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d903      	bls.n	8004012 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004030:	6113      	str	r3, [r2, #16]
 8004032:	e044      	b.n	80040be <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4413      	add	r3, r2
 800403e:	1e5a      	subs	r2, r3, #1
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	8afb      	ldrh	r3, [r7, #22]
 800405a:	04d9      	lsls	r1, r3, #19
 800405c:	4ba4      	ldr	r3, [pc, #656]	; (80042f0 <USB_EPStartXfer+0x3cc>)
 800405e:	400b      	ands	r3, r1
 8004060:	69b9      	ldr	r1, [r7, #24]
 8004062:	0148      	lsls	r0, r1, #5
 8004064:	69f9      	ldr	r1, [r7, #28]
 8004066:	4401      	add	r1, r0
 8004068:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800406c:	4313      	orrs	r3, r2
 800406e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	791b      	ldrb	r3, [r3, #4]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d122      	bne.n	80040be <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004092:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004096:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	8afb      	ldrh	r3, [r7, #22]
 80040a8:	075b      	lsls	r3, r3, #29
 80040aa:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80040ae:	69b9      	ldr	r1, [r7, #24]
 80040b0:	0148      	lsls	r0, r1, #5
 80040b2:	69f9      	ldr	r1, [r7, #28]
 80040b4:	4401      	add	r1, r0
 80040b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040ba:	4313      	orrs	r3, r2
 80040bc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	0148      	lsls	r0, r1, #5
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	4401      	add	r1, r0
 80040dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040e0:	4313      	orrs	r3, r2
 80040e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d14b      	bne.n	8004182 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	461a      	mov	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	791b      	ldrb	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d128      	bne.n	8004160 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d110      	bne.n	8004140 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e00f      	b.n	8004160 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	440a      	add	r2, r1
 8004156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e166      	b.n	8004450 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041a0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	791b      	ldrb	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d015      	beq.n	80041d6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 814e 	beq.w	8004450 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	69f9      	ldr	r1, [r7, #28]
 80041cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d0:	4313      	orrs	r3, r2
 80041d2:	634b      	str	r3, [r1, #52]	; 0x34
 80041d4:	e13c      	b.n	8004450 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d110      	bne.n	8004208 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e00f      	b.n	8004228 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	68d9      	ldr	r1, [r3, #12]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781a      	ldrb	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	b298      	uxth	r0, r3
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	4603      	mov	r3, r0
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f9b9 	bl	80045b4 <USB_WritePacket>
 8004242:	e105      	b.n	8004450 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800425e:	0cdb      	lsrs	r3, r3, #19
 8004260:	04db      	lsls	r3, r3, #19
 8004262:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	440a      	add	r2, r1
 800427a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800427e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004282:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004286:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d132      	bne.n	80042f4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	0148      	lsls	r0, r1, #5
 80042c0:	69f9      	ldr	r1, [r7, #28]
 80042c2:	4401      	add	r1, r0
 80042c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042c8:	4313      	orrs	r3, r2
 80042ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ea:	6113      	str	r3, [r2, #16]
 80042ec:	e062      	b.n	80043b4 <USB_EPStartXfer+0x490>
 80042ee:	bf00      	nop
 80042f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d123      	bne.n	8004344 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004312:	69b9      	ldr	r1, [r7, #24]
 8004314:	0148      	lsls	r0, r1, #5
 8004316:	69f9      	ldr	r1, [r7, #28]
 8004318:	4401      	add	r1, r0
 800431a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800431e:	4313      	orrs	r3, r2
 8004320:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004340:	6113      	str	r3, [r2, #16]
 8004342:	e037      	b.n	80043b4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4413      	add	r3, r2
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	8afa      	ldrh	r2, [r7, #22]
 8004360:	fb03 f202 	mul.w	r2, r3, r2
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	8afb      	ldrh	r3, [r7, #22]
 8004378:	04d9      	lsls	r1, r3, #19
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <USB_EPStartXfer+0x538>)
 800437c:	400b      	ands	r3, r1
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	0148      	lsls	r0, r1, #5
 8004382:	69f9      	ldr	r1, [r7, #28]
 8004384:	4401      	add	r1, r0
 8004386:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	0148      	lsls	r0, r1, #5
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	4401      	add	r1, r0
 80043ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043b0:	4313      	orrs	r3, r2
 80043b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10d      	bne.n	80043d6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	68d9      	ldr	r1, [r3, #12]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	460a      	mov	r2, r1
 80043d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	791b      	ldrb	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d128      	bne.n	8004430 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d110      	bne.n	8004410 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	0151      	lsls	r1, r2, #5
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	440a      	add	r2, r1
 8004404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00f      	b.n	8004430 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800444e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	1ff80000 	.word	0x1ff80000

08004460 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	785b      	ldrb	r3, [r3, #1]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d14a      	bne.n	8004514 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004496:	f040 8086 	bne.w	80045a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	7812      	ldrb	r2, [r2, #0]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	7812      	ldrb	r2, [r2, #0]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d902      	bls.n	80044f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
          break;
 80044f6:	e056      	b.n	80045a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800450c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004510:	d0e7      	beq.n	80044e2 <USB_EPStopXfer+0x82>
 8004512:	e048      	b.n	80045a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800452c:	d13b      	bne.n	80045a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800454c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004550:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004570:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004574:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3301      	adds	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004582:	4293      	cmp	r3, r2
 8004584:	d902      	bls.n	800458c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	75fb      	strb	r3, [r7, #23]
          break;
 800458a:	e00c      	b.n	80045a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a4:	d0e7      	beq.n	8004576 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b089      	sub	sp, #36	; 0x24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	4611      	mov	r1, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	460b      	mov	r3, r1
 80045c4:	71fb      	strb	r3, [r7, #7]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80045d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d123      	bne.n	8004622 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045da:	88bb      	ldrh	r3, [r7, #4]
 80045dc:	3303      	adds	r3, #3
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e018      	b.n	800461a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	031a      	lsls	r2, r3, #12
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	461a      	mov	r2, r3
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3301      	adds	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3301      	adds	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3301      	adds	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	3301      	adds	r3, #1
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	429a      	cmp	r2, r3
 8004620:	d3e2      	bcc.n	80045e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3724      	adds	r7, #36	; 0x24
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004630:	b480      	push	{r7}
 8004632:	b08b      	sub	sp, #44	; 0x2c
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	b29b      	uxth	r3, r3
 800464c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	e014      	b.n	8004686 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	601a      	str	r2, [r3, #0]
    pDest++;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	3301      	adds	r3, #1
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	3301      	adds	r3, #1
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	3301      	adds	r3, #1
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	3301      	adds	r3, #1
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	3301      	adds	r3, #1
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	6a3a      	ldr	r2, [r7, #32]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	429a      	cmp	r2, r3
 800468c:	d3e6      	bcc.n	800465c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800468e:	8bfb      	ldrh	r3, [r7, #30]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01e      	beq.n	80046d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	461a      	mov	r2, r3
 80046a0:	f107 0310 	add.w	r3, r7, #16
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	701a      	strb	r2, [r3, #0]
      i++;
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	3301      	adds	r3, #1
 80046be:	623b      	str	r3, [r7, #32]
      pDest++;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	3301      	adds	r3, #1
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80046c6:	8bfb      	ldrh	r3, [r7, #30]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80046cc:	8bfb      	ldrh	r3, [r7, #30]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ea      	bne.n	80046a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	372c      	adds	r7, #44	; 0x2c
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d12c      	bne.n	8004756 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	db12      	blt.n	8004734 <USB_EPSetStall+0x54>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00f      	beq.n	8004734 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004732:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e02b      	b.n	80047ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	db12      	blt.n	800478e <USB_EPSetStall+0xae>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00f      	beq.n	800478e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	0151      	lsls	r1, r2, #5
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	440a      	add	r2, r1
 8004784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004788:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800478c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d128      	bne.n	800482a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	791b      	ldrb	r3, [r3, #4]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d003      	beq.n	8004808 <USB_EPClearStall+0x4c>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	791b      	ldrb	r3, [r3, #4]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d138      	bne.n	800487a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e027      	b.n	800487a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004844:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004848:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	791b      	ldrb	r3, [r3, #4]
 800484e:	2b03      	cmp	r3, #3
 8004850:	d003      	beq.n	800485a <USB_EPClearStall+0x9e>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	791b      	ldrb	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d10f      	bne.n	800487a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	0151      	lsls	r1, r2, #5
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	440a      	add	r2, r1
 8004870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004878:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80048bc:	68f9      	ldr	r1, [r7, #12]
 80048be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048ee:	f023 0303 	bic.w	r3, r3, #3
 80048f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004902:	f023 0302 	bic.w	r3, r3, #2
 8004906:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004930:	f023 0303 	bic.w	r3, r3, #3
 8004934:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004944:	f043 0302 	orr.w	r3, r3, #2
 8004948:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4013      	ands	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004970:	68fb      	ldr	r3, [r7, #12]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	4013      	ands	r3, r2
 80049a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	0c1b      	lsrs	r3, r3, #16
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	b29b      	uxth	r3, r3
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a14:	68bb      	ldr	r3, [r7, #8]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b087      	sub	sp, #28
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	01db      	lsls	r3, r3, #7
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a70:	68bb      	ldr	r3, [r7, #8]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ab8:	f023 0307 	bic.w	r3, r3, #7
 8004abc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	333c      	adds	r3, #60	; 0x3c
 8004af6:	3304      	adds	r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4a26      	ldr	r2, [pc, #152]	; (8004b98 <USB_EP0_OutStart+0xb8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d90a      	bls.n	8004b1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b14:	d101      	bne.n	8004b1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e037      	b.n	8004b8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	461a      	mov	r2, r3
 8004b22:	2300      	movs	r3, #0
 8004b24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b48:	f043 0318 	orr.w	r3, r3, #24
 8004b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b62:	7afb      	ldrb	r3, [r7, #11]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10f      	bne.n	8004b88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6e:	461a      	mov	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	4f54300a 	.word	0x4f54300a

08004b9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004bb4:	d901      	bls.n	8004bba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e022      	b.n	8004c00 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	daf2      	bge.n	8004ba8 <USB_CoreReset+0xc>

  count = 10U;
 8004bc2:	230a      	movs	r3, #10
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004bc6:	e002      	b.n	8004bce <USB_CoreReset+0x32>
  {
    count--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f9      	bne.n	8004bc8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f043 0201 	orr.w	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3301      	adds	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004bec:	d901      	bls.n	8004bf2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e006      	b.n	8004c00 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d0f0      	beq.n	8004be0 <USB_CoreReset+0x44>

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c1c:	f002 fcac 	bl	8007578 <USBD_static_malloc>
 8004c20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d109      	bne.n	8004c3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	32b0      	adds	r2, #176	; 0xb0
 8004c32:	2100      	movs	r1, #0
 8004c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e0d4      	b.n	8004de6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004c3c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004c40:	2100      	movs	r1, #0
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f002 fcdc 	bl	8007600 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	32b0      	adds	r2, #176	; 0xb0
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	32b0      	adds	r2, #176	; 0xb0
 8004c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	7c1b      	ldrb	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d138      	bne.n	8004ce6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c74:	4b5e      	ldr	r3, [pc, #376]	; (8004df0 <USBD_CDC_Init+0x1e4>)
 8004c76:	7819      	ldrb	r1, [r3, #0]
 8004c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f002 fb57 	bl	8007332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c84:	4b5a      	ldr	r3, [pc, #360]	; (8004df0 <USBD_CDC_Init+0x1e4>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3323      	adds	r3, #35	; 0x23
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c9e:	4b55      	ldr	r3, [pc, #340]	; (8004df4 <USBD_CDC_Init+0x1e8>)
 8004ca0:	7819      	ldrb	r1, [r3, #0]
 8004ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f002 fb42 	bl	8007332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004cae:	4b51      	ldr	r3, [pc, #324]	; (8004df4 <USBD_CDC_Init+0x1e8>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	f003 020f 	and.w	r2, r3, #15
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f203 1363 	addw	r3, r3, #355	; 0x163
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004cca:	4b4b      	ldr	r3, [pc, #300]	; (8004df8 <USBD_CDC_Init+0x1ec>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	331c      	adds	r3, #28
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e035      	b.n	8004d52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ce6:	4b42      	ldr	r3, [pc, #264]	; (8004df0 <USBD_CDC_Init+0x1e4>)
 8004ce8:	7819      	ldrb	r1, [r3, #0]
 8004cea:	2340      	movs	r3, #64	; 0x40
 8004cec:	2202      	movs	r2, #2
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f002 fb1f 	bl	8007332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004cf4:	4b3e      	ldr	r3, [pc, #248]	; (8004df0 <USBD_CDC_Init+0x1e4>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	f003 020f 	and.w	r2, r3, #15
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	3323      	adds	r3, #35	; 0x23
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <USBD_CDC_Init+0x1e8>)
 8004d10:	7819      	ldrb	r1, [r3, #0]
 8004d12:	2340      	movs	r3, #64	; 0x40
 8004d14:	2202      	movs	r2, #2
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f002 fb0b 	bl	8007332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d1c:	4b35      	ldr	r3, [pc, #212]	; (8004df4 <USBD_CDC_Init+0x1e8>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	f003 020f 	and.w	r2, r3, #15
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	f203 1363 	addw	r3, r3, #355	; 0x163
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d38:	4b2f      	ldr	r3, [pc, #188]	; (8004df8 <USBD_CDC_Init+0x1ec>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	f003 020f 	and.w	r2, r3, #15
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	331c      	adds	r3, #28
 8004d4e:	2210      	movs	r2, #16
 8004d50:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d52:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <USBD_CDC_Init+0x1ec>)
 8004d54:	7819      	ldrb	r1, [r3, #0]
 8004d56:	2308      	movs	r3, #8
 8004d58:	2203      	movs	r2, #3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f002 fae9 	bl	8007332 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <USBD_CDC_Init+0x1ec>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3323      	adds	r3, #35	; 0x23
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	33b0      	adds	r3, #176	; 0xb0
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004db0:	2302      	movs	r3, #2
 8004db2:	e018      	b.n	8004de6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7c1b      	ldrb	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <USBD_CDC_Init+0x1e8>)
 8004dbe:	7819      	ldrb	r1, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f002 fba0 	bl	8007510 <USBD_LL_PrepareReceive>
 8004dd0:	e008      	b.n	8004de4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <USBD_CDC_Init+0x1e8>)
 8004dd4:	7819      	ldrb	r1, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f002 fb96 	bl	8007510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000093 	.word	0x20000093
 8004df4:	20000094 	.word	0x20000094
 8004df8:	20000095 	.word	0x20000095

08004dfc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004e08:	4b3a      	ldr	r3, [pc, #232]	; (8004ef4 <USBD_CDC_DeInit+0xf8>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f002 fab5 	bl	800737e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004e14:	4b37      	ldr	r3, [pc, #220]	; (8004ef4 <USBD_CDC_DeInit+0xf8>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	f003 020f 	and.w	r2, r3, #15
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3323      	adds	r3, #35	; 0x23
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004e2e:	4b32      	ldr	r3, [pc, #200]	; (8004ef8 <USBD_CDC_DeInit+0xfc>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f002 faa2 	bl	800737e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004e3a:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <USBD_CDC_DeInit+0xfc>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	f003 020f 	and.w	r2, r3, #15
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f203 1363 	addw	r3, r3, #355	; 0x163
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004e56:	4b29      	ldr	r3, [pc, #164]	; (8004efc <USBD_CDC_DeInit+0x100>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f002 fa8e 	bl	800737e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <USBD_CDC_DeInit+0x100>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	f003 020f 	and.w	r2, r3, #15
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3323      	adds	r3, #35	; 0x23
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004e7c:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <USBD_CDC_DeInit+0x100>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	331c      	adds	r3, #28
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	32b0      	adds	r2, #176	; 0xb0
 8004ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01f      	beq.n	8004ee8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	33b0      	adds	r3, #176	; 0xb0
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	32b0      	adds	r2, #176	; 0xb0
 8004ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f002 fb62 	bl	8007594 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	32b0      	adds	r2, #176	; 0xb0
 8004eda:	2100      	movs	r1, #0
 8004edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000093 	.word	0x20000093
 8004ef8:	20000094 	.word	0x20000094
 8004efc:	20000095 	.word	0x20000095

08004f00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	32b0      	adds	r2, #176	; 0xb0
 8004f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e0bf      	b.n	80050b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d050      	beq.n	8004fde <USBD_CDC_Setup+0xde>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	f040 80af 	bne.w	80050a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	88db      	ldrh	r3, [r3, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d03a      	beq.n	8004fc0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da1b      	bge.n	8004f8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	33b0      	adds	r3, #176	; 0xb0
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004f6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	88d2      	ldrh	r2, [r2, #6]
 8004f70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	88db      	ldrh	r3, [r3, #6]
 8004f76:	2b07      	cmp	r3, #7
 8004f78:	bf28      	it	cs
 8004f7a:	2307      	movcs	r3, #7
 8004f7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	89fa      	ldrh	r2, [r7, #14]
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 fd6b 	bl	8006a60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004f8a:	e090      	b.n	80050ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	785a      	ldrb	r2, [r3, #1]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	88db      	ldrh	r3, [r3, #6]
 8004f9a:	2b3f      	cmp	r3, #63	; 0x3f
 8004f9c:	d803      	bhi.n	8004fa6 <USBD_CDC_Setup+0xa6>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	88db      	ldrh	r3, [r3, #6]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	e000      	b.n	8004fa8 <USBD_CDC_Setup+0xa8>
 8004fa6:	2240      	movs	r2, #64	; 0x40
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004fae:	6939      	ldr	r1, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 fd80 	bl	8006abe <USBD_CtlPrepareRx>
      break;
 8004fbe:	e076      	b.n	80050ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	33b0      	adds	r3, #176	; 0xb0
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	7850      	ldrb	r0, [r2, #1]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	4798      	blx	r3
      break;
 8004fdc:	e067      	b.n	80050ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b0b      	cmp	r3, #11
 8004fe4:	d851      	bhi.n	800508a <USBD_CDC_Setup+0x18a>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <USBD_CDC_Setup+0xec>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	0800501d 	.word	0x0800501d
 8004ff0:	08005099 	.word	0x08005099
 8004ff4:	0800508b 	.word	0x0800508b
 8004ff8:	0800508b 	.word	0x0800508b
 8004ffc:	0800508b 	.word	0x0800508b
 8005000:	0800508b 	.word	0x0800508b
 8005004:	0800508b 	.word	0x0800508b
 8005008:	0800508b 	.word	0x0800508b
 800500c:	0800508b 	.word	0x0800508b
 8005010:	0800508b 	.word	0x0800508b
 8005014:	08005047 	.word	0x08005047
 8005018:	08005071 	.word	0x08005071
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b03      	cmp	r3, #3
 8005026:	d107      	bne.n	8005038 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005028:	f107 030a 	add.w	r3, r7, #10
 800502c:	2202      	movs	r2, #2
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 fd15 	bl	8006a60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005036:	e032      	b.n	800509e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f001 fc93 	bl	8006966 <USBD_CtlError>
            ret = USBD_FAIL;
 8005040:	2303      	movs	r3, #3
 8005042:	75fb      	strb	r3, [r7, #23]
          break;
 8005044:	e02b      	b.n	800509e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b03      	cmp	r3, #3
 8005050:	d107      	bne.n	8005062 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005052:	f107 030d 	add.w	r3, r7, #13
 8005056:	2201      	movs	r2, #1
 8005058:	4619      	mov	r1, r3
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 fd00 	bl	8006a60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005060:	e01d      	b.n	800509e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 fc7e 	bl	8006966 <USBD_CtlError>
            ret = USBD_FAIL;
 800506a:	2303      	movs	r3, #3
 800506c:	75fb      	strb	r3, [r7, #23]
          break;
 800506e:	e016      	b.n	800509e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d00f      	beq.n	800509c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 fc71 	bl	8006966 <USBD_CtlError>
            ret = USBD_FAIL;
 8005084:	2303      	movs	r3, #3
 8005086:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005088:	e008      	b.n	800509c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f001 fc6a 	bl	8006966 <USBD_CtlError>
          ret = USBD_FAIL;
 8005092:	2303      	movs	r3, #3
 8005094:	75fb      	strb	r3, [r7, #23]
          break;
 8005096:	e002      	b.n	800509e <USBD_CDC_Setup+0x19e>
          break;
 8005098:	bf00      	nop
 800509a:	e008      	b.n	80050ae <USBD_CDC_Setup+0x1ae>
          break;
 800509c:	bf00      	nop
      }
      break;
 800509e:	e006      	b.n	80050ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 fc5f 	bl	8006966 <USBD_CtlError>
      ret = USBD_FAIL;
 80050a8:	2303      	movs	r3, #3
 80050aa:	75fb      	strb	r3, [r7, #23]
      break;
 80050ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80050ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	32b0      	adds	r2, #176	; 0xb0
 80050d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80050de:	2303      	movs	r3, #3
 80050e0:	e065      	b.n	80051ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	32b0      	adds	r2, #176	; 0xb0
 80050ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	f003 020f 	and.w	r2, r3, #15
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	3314      	adds	r3, #20
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02f      	beq.n	800516c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	f003 020f 	and.w	r2, r3, #15
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3314      	adds	r3, #20
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	f003 010f 	and.w	r1, r3, #15
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	460b      	mov	r3, r1
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	440b      	add	r3, r1
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4403      	add	r3, r0
 8005134:	331c      	adds	r3, #28
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	fbb2 f1f3 	udiv	r1, r2, r3
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005142:	2b00      	cmp	r3, #0
 8005144:	d112      	bne.n	800516c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	f003 020f 	and.w	r2, r3, #15
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	3314      	adds	r3, #20
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800515e:	78f9      	ldrb	r1, [r7, #3]
 8005160:	2300      	movs	r3, #0
 8005162:	2200      	movs	r2, #0
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f002 f9b2 	bl	80074ce <USBD_LL_Transmit>
 800516a:	e01f      	b.n	80051ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	33b0      	adds	r3, #176	; 0xb0
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d010      	beq.n	80051ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	33b0      	adds	r3, #176	; 0xb0
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	32b0      	adds	r2, #176	; 0xb0
 80051cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	32b0      	adds	r2, #176	; 0xb0
 80051dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e01a      	b.n	800521e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f002 f9b0 	bl	8007552 <USBD_LL_GetRxDataSize>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	33b0      	adds	r3, #176	; 0xb0
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005218:	4611      	mov	r1, r2
 800521a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	32b0      	adds	r2, #176	; 0xb0
 8005238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005244:	2303      	movs	r3, #3
 8005246:	e025      	b.n	8005294 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	33b0      	adds	r3, #176	; 0xb0
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01a      	beq.n	8005292 <USBD_CDC_EP0_RxReady+0x6c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005262:	2bff      	cmp	r3, #255	; 0xff
 8005264:	d015      	beq.n	8005292 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	33b0      	adds	r3, #176	; 0xb0
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800527e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005286:	b292      	uxth	r2, r2
 8005288:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	22ff      	movs	r2, #255	; 0xff
 800528e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052a4:	2182      	movs	r1, #130	; 0x82
 80052a6:	4818      	ldr	r0, [pc, #96]	; (8005308 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052a8:	f000 fd22 	bl	8005cf0 <USBD_GetEpDesc>
 80052ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052ae:	2101      	movs	r1, #1
 80052b0:	4815      	ldr	r0, [pc, #84]	; (8005308 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052b2:	f000 fd1d 	bl	8005cf0 <USBD_GetEpDesc>
 80052b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052b8:	2181      	movs	r1, #129	; 0x81
 80052ba:	4813      	ldr	r0, [pc, #76]	; (8005308 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052bc:	f000 fd18 	bl	8005cf0 <USBD_GetEpDesc>
 80052c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2210      	movs	r2, #16
 80052cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052dc:	711a      	strb	r2, [r3, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	711a      	strb	r2, [r3, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2243      	movs	r2, #67	; 0x43
 80052fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052fc:	4b02      	ldr	r3, [pc, #8]	; (8005308 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000050 	.word	0x20000050

0800530c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005314:	2182      	movs	r1, #130	; 0x82
 8005316:	4818      	ldr	r0, [pc, #96]	; (8005378 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005318:	f000 fcea 	bl	8005cf0 <USBD_GetEpDesc>
 800531c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800531e:	2101      	movs	r1, #1
 8005320:	4815      	ldr	r0, [pc, #84]	; (8005378 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005322:	f000 fce5 	bl	8005cf0 <USBD_GetEpDesc>
 8005326:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005328:	2181      	movs	r1, #129	; 0x81
 800532a:	4813      	ldr	r0, [pc, #76]	; (8005378 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800532c:	f000 fce0 	bl	8005cf0 <USBD_GetEpDesc>
 8005330:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2210      	movs	r2, #16
 800533c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d006      	beq.n	8005352 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2200      	movs	r2, #0
 8005348:	711a      	strb	r2, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f042 0202 	orr.w	r2, r2, #2
 8005350:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	711a      	strb	r2, [r3, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f042 0202 	orr.w	r2, r2, #2
 8005364:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2243      	movs	r2, #67	; 0x43
 800536a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000050 	.word	0x20000050

0800537c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005384:	2182      	movs	r1, #130	; 0x82
 8005386:	4818      	ldr	r0, [pc, #96]	; (80053e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005388:	f000 fcb2 	bl	8005cf0 <USBD_GetEpDesc>
 800538c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800538e:	2101      	movs	r1, #1
 8005390:	4815      	ldr	r0, [pc, #84]	; (80053e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005392:	f000 fcad 	bl	8005cf0 <USBD_GetEpDesc>
 8005396:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005398:	2181      	movs	r1, #129	; 0x81
 800539a:	4813      	ldr	r0, [pc, #76]	; (80053e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800539c:	f000 fca8 	bl	8005cf0 <USBD_GetEpDesc>
 80053a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2210      	movs	r2, #16
 80053ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d006      	beq.n	80053c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053bc:	711a      	strb	r2, [r3, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d0:	711a      	strb	r2, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2243      	movs	r2, #67	; 0x43
 80053da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053dc:	4b02      	ldr	r3, [pc, #8]	; (80053e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000050 	.word	0x20000050

080053ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	220a      	movs	r2, #10
 80053f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053fa:	4b03      	ldr	r3, [pc, #12]	; (8005408 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	2000000c 	.word	0x2000000c

0800540c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800541c:	2303      	movs	r3, #3
 800541e:	e009      	b.n	8005434 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	33b0      	adds	r3, #176	; 0xb0
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	32b0      	adds	r2, #176	; 0xb0
 8005456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005462:	2303      	movs	r3, #3
 8005464:	e008      	b.n	8005478 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	32b0      	adds	r2, #176	; 0xb0
 8005498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e004      	b.n	80054b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	32b0      	adds	r2, #176	; 0xb0
 80054d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	32b0      	adds	r2, #176	; 0xb0
 80054e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e018      	b.n	8005520 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7c1b      	ldrb	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <USBD_CDC_ReceivePacket+0x68>)
 80054f8:	7819      	ldrb	r1, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f002 f803 	bl	8007510 <USBD_LL_PrepareReceive>
 800550a:	e008      	b.n	800551e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <USBD_CDC_ReceivePacket+0x68>)
 800550e:	7819      	ldrb	r1, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f001 fff9 	bl	8007510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000094 	.word	0x20000094

0800552c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005540:	2303      	movs	r3, #3
 8005542:	e01f      	b.n	8005584 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	79fa      	ldrb	r2, [r7, #7]
 8005576:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f001 fe73 	bl	8007264 <USBD_LL_Init>
 800557e:	4603      	mov	r3, r0
 8005580:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005582:	7dfb      	ldrb	r3, [r7, #23]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e025      	b.n	80055f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	32ae      	adds	r2, #174	; 0xae
 80055b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00f      	beq.n	80055e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	32ae      	adds	r2, #174	; 0xae
 80055ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	f107 020e 	add.w	r2, r7, #14
 80055d4:	4610      	mov	r0, r2
 80055d6:	4798      	blx	r3
 80055d8:	4602      	mov	r2, r0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 fe7b 	bl	80072fc <USBD_LL_Start>
 8005606:	4603      	mov	r3, r0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005618:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	460b      	mov	r3, r1
 8005630:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	4611      	mov	r1, r2
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	4611      	mov	r1, r2
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005684:	2303      	movs	r3, #3
 8005686:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f924 	bl	80068f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056b8:	461a      	mov	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d01a      	beq.n	8005704 <USBD_LL_SetupStage+0x72>
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d822      	bhi.n	8005718 <USBD_LL_SetupStage+0x86>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <USBD_LL_SetupStage+0x4a>
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d00a      	beq.n	80056f0 <USBD_LL_SetupStage+0x5e>
 80056da:	e01d      	b.n	8005718 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fb79 	bl	8005ddc <USBD_StdDevReq>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
      break;
 80056ee:	e020      	b.n	8005732 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fbe1 	bl	8005ec0 <USBD_StdItfReq>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e016      	b.n	8005732 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fc43 	bl	8005f98 <USBD_StdEPReq>
 8005712:	4603      	mov	r3, r0
 8005714:	73fb      	strb	r3, [r7, #15]
      break;
 8005716:	e00c      	b.n	8005732 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800571e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005722:	b2db      	uxtb	r3, r3
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 fe48 	bl	80073bc <USBD_LL_StallEP>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]
      break;
 8005730:	bf00      	nop
  }

  return ret;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	460b      	mov	r3, r1
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800574e:	7afb      	ldrb	r3, [r7, #11]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d177      	bne.n	8005844 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800575a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005762:	2b03      	cmp	r3, #3
 8005764:	f040 80a1 	bne.w	80058aa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	8992      	ldrh	r2, [r2, #12]
 8005770:	4293      	cmp	r3, r2
 8005772:	d91c      	bls.n	80057ae <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	8992      	ldrh	r2, [r2, #12]
 800577c:	1a9a      	subs	r2, r3, r2
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	8992      	ldrh	r2, [r2, #12]
 800578a:	441a      	add	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6919      	ldr	r1, [r3, #16]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	899b      	ldrh	r3, [r3, #12]
 8005798:	461a      	mov	r2, r3
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4293      	cmp	r3, r2
 80057a0:	bf38      	it	cc
 80057a2:	4613      	movcc	r3, r2
 80057a4:	461a      	mov	r2, r3
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f001 f9aa 	bl	8006b00 <USBD_CtlContinueRx>
 80057ac:	e07d      	b.n	80058aa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d014      	beq.n	80057e6 <USBD_LL_DataOutStage+0xaa>
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d81d      	bhi.n	80057fc <USBD_LL_DataOutStage+0xc0>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <USBD_LL_DataOutStage+0x8e>
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d003      	beq.n	80057d0 <USBD_LL_DataOutStage+0x94>
 80057c8:	e018      	b.n	80057fc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	75bb      	strb	r3, [r7, #22]
            break;
 80057ce:	e018      	b.n	8005802 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4619      	mov	r1, r3
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 fa6e 	bl	8005cbc <USBD_CoreFindIF>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75bb      	strb	r3, [r7, #22]
            break;
 80057e4:	e00d      	b.n	8005802 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	4619      	mov	r1, r3
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fa70 	bl	8005cd6 <USBD_CoreFindEP>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75bb      	strb	r3, [r7, #22]
            break;
 80057fa:	e002      	b.n	8005802 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	75bb      	strb	r3, [r7, #22]
            break;
 8005800:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005802:	7dbb      	ldrb	r3, [r7, #22]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d119      	bne.n	800583c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b03      	cmp	r3, #3
 8005812:	d113      	bne.n	800583c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005814:	7dba      	ldrb	r2, [r7, #22]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	32ae      	adds	r2, #174	; 0xae
 800581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005824:	7dba      	ldrb	r2, [r7, #22]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800582c:	7dba      	ldrb	r2, [r7, #22]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	32ae      	adds	r2, #174	; 0xae
 8005832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f001 f970 	bl	8006b22 <USBD_CtlSendStatus>
 8005842:	e032      	b.n	80058aa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005844:	7afb      	ldrb	r3, [r7, #11]
 8005846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800584a:	b2db      	uxtb	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fa41 	bl	8005cd6 <USBD_CoreFindEP>
 8005854:	4603      	mov	r3, r0
 8005856:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005858:	7dbb      	ldrb	r3, [r7, #22]
 800585a:	2bff      	cmp	r3, #255	; 0xff
 800585c:	d025      	beq.n	80058aa <USBD_LL_DataOutStage+0x16e>
 800585e:	7dbb      	ldrb	r3, [r7, #22]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d122      	bne.n	80058aa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b03      	cmp	r3, #3
 800586e:	d117      	bne.n	80058a0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005870:	7dba      	ldrb	r2, [r7, #22]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	32ae      	adds	r2, #174	; 0xae
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005880:	7dba      	ldrb	r2, [r7, #22]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005888:	7dba      	ldrb	r2, [r7, #22]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	32ae      	adds	r2, #174	; 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	7afa      	ldrb	r2, [r7, #11]
 8005896:	4611      	mov	r1, r2
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	4798      	blx	r3
 800589c:	4603      	mov	r3, r0
 800589e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	e000      	b.n	80058ac <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	460b      	mov	r3, r1
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d178      	bne.n	80059ba <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3314      	adds	r3, #20
 80058cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d163      	bne.n	80059a0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	8992      	ldrh	r2, [r2, #12]
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d91c      	bls.n	800591e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	8992      	ldrh	r2, [r2, #12]
 80058ec:	1a9a      	subs	r2, r3, r2
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	8992      	ldrh	r2, [r2, #12]
 80058fa:	441a      	add	r2, r3
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	6919      	ldr	r1, [r3, #16]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	461a      	mov	r2, r3
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f001 f8c6 	bl	8006a9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005910:	2300      	movs	r3, #0
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 fdfa 	bl	8007510 <USBD_LL_PrepareReceive>
 800591c:	e040      	b.n	80059a0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	899b      	ldrh	r3, [r3, #12]
 8005922:	461a      	mov	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d11c      	bne.n	8005966 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005934:	4293      	cmp	r3, r2
 8005936:	d316      	bcc.n	8005966 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005942:	429a      	cmp	r2, r3
 8005944:	d20f      	bcs.n	8005966 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005946:	2200      	movs	r2, #0
 8005948:	2100      	movs	r1, #0
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f001 f8a6 	bl	8006a9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005958:	2300      	movs	r3, #0
 800595a:	2200      	movs	r2, #0
 800595c:	2100      	movs	r1, #0
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f001 fdd6 	bl	8007510 <USBD_LL_PrepareReceive>
 8005964:	e01c      	b.n	80059a0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b03      	cmp	r3, #3
 8005970:	d10f      	bne.n	8005992 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005992:	2180      	movs	r1, #128	; 0x80
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f001 fd11 	bl	80073bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f001 f8d4 	bl	8006b48 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d03a      	beq.n	8005a20 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff fe30 	bl	8005610 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80059b8:	e032      	b.n	8005a20 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	4619      	mov	r1, r3
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f986 	bl	8005cd6 <USBD_CoreFindEP>
 80059ca:	4603      	mov	r3, r0
 80059cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	2bff      	cmp	r3, #255	; 0xff
 80059d2:	d025      	beq.n	8005a20 <USBD_LL_DataInStage+0x16c>
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d122      	bne.n	8005a20 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d11c      	bne.n	8005a20 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059e6:	7dfa      	ldrb	r2, [r7, #23]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	32ae      	adds	r2, #174	; 0xae
 80059ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d014      	beq.n	8005a20 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80059f6:	7dfa      	ldrb	r2, [r7, #23]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059fe:	7dfa      	ldrb	r2, [r7, #23]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	32ae      	adds	r2, #174	; 0xae
 8005a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	7afa      	ldrb	r2, [r7, #11]
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	4798      	blx	r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a16:	7dbb      	ldrb	r3, [r7, #22]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005a1c:	7dbb      	ldrb	r3, [r7, #22]
 8005a1e:	e000      	b.n	8005a22 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d014      	beq.n	8005a90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00e      	beq.n	8005a90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6852      	ldr	r2, [r2, #4]
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	4611      	mov	r1, r2
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a90:	2340      	movs	r3, #64	; 0x40
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fc4b 	bl	8007332 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2240      	movs	r2, #64	; 0x40
 8005aa8:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005aac:	2340      	movs	r3, #64	; 0x40
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2180      	movs	r1, #128	; 0x80
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 fc3d 	bl	8007332 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2240      	movs	r2, #64	; 0x40
 8005ac4:	841a      	strh	r2, [r3, #32]

  return ret;
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d006      	beq.n	8005b12 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2204      	movs	r2, #4
 8005b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d106      	bne.n	8005b4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d110      	bne.n	8005b8e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	32ae      	adds	r2, #174	; 0xae
 8005bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e01c      	b.n	8005bf4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d115      	bne.n	8005bf2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	32ae      	adds	r2, #174	; 0xae
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	32ae      	adds	r2, #174	; 0xae
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	4611      	mov	r1, r2
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	32ae      	adds	r2, #174	; 0xae
 8005c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e01c      	b.n	8005c58 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d115      	bne.n	8005c56 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	32ae      	adds	r2, #174	; 0xae
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	32ae      	adds	r2, #174	; 0xae
 8005c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	4611      	mov	r1, r2
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00e      	beq.n	8005cb2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6852      	ldr	r2, [r2, #4]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	4798      	blx	r3
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ce2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	885b      	ldrh	r3, [r3, #2]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d920      	bls.n	8005d5a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d20:	e013      	b.n	8005d4a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d22:	f107 030a 	add.w	r3, r7, #10
 8005d26:	4619      	mov	r1, r3
 8005d28:	6978      	ldr	r0, [r7, #20]
 8005d2a:	f000 f81b 	bl	8005d64 <USBD_GetNextDesc>
 8005d2e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b05      	cmp	r3, #5
 8005d36:	d108      	bne.n	8005d4a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	789b      	ldrb	r3, [r3, #2]
 8005d40:	78fa      	ldrb	r2, [r7, #3]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d008      	beq.n	8005d58 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	885b      	ldrh	r3, [r3, #2]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	897b      	ldrh	r3, [r7, #10]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d8e5      	bhi.n	8005d22 <USBD_GetEpDesc+0x32>
 8005d56:	e000      	b.n	8005d5a <USBD_GetEpDesc+0x6a>
          break;
 8005d58:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d5a:	693b      	ldr	r3, [r7, #16]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	881a      	ldrh	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	3301      	adds	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005dbc:	8a3b      	ldrh	r3, [r7, #16]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	b21a      	sxth	r2, r3
 8005dc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b21b      	sxth	r3, r3
 8005dca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005dcc:	89fb      	ldrh	r3, [r7, #14]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	d005      	beq.n	8005e02 <USBD_StdDevReq+0x26>
 8005df6:	2b40      	cmp	r3, #64	; 0x40
 8005df8:	d857      	bhi.n	8005eaa <USBD_StdDevReq+0xce>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00f      	beq.n	8005e1e <USBD_StdDevReq+0x42>
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d153      	bne.n	8005eaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	32ae      	adds	r2, #174	; 0xae
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e04a      	b.n	8005eb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b09      	cmp	r3, #9
 8005e24:	d83b      	bhi.n	8005e9e <USBD_StdDevReq+0xc2>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <USBD_StdDevReq+0x50>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e81 	.word	0x08005e81
 8005e30:	08005e95 	.word	0x08005e95
 8005e34:	08005e9f 	.word	0x08005e9f
 8005e38:	08005e8b 	.word	0x08005e8b
 8005e3c:	08005e9f 	.word	0x08005e9f
 8005e40:	08005e5f 	.word	0x08005e5f
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e9f 	.word	0x08005e9f
 8005e4c:	08005e77 	.word	0x08005e77
 8005e50:	08005e69 	.word	0x08005e69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa3e 	bl	80062d8 <USBD_GetDescriptor>
          break;
 8005e5c:	e024      	b.n	8005ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fba3 	bl	80065ac <USBD_SetAddress>
          break;
 8005e66:	e01f      	b.n	8005ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fbe2 	bl	8006634 <USBD_SetConfig>
 8005e70:	4603      	mov	r3, r0
 8005e72:	73fb      	strb	r3, [r7, #15]
          break;
 8005e74:	e018      	b.n	8005ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fc85 	bl	8006788 <USBD_GetConfig>
          break;
 8005e7e:	e013      	b.n	8005ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fcb6 	bl	80067f4 <USBD_GetStatus>
          break;
 8005e88:	e00e      	b.n	8005ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fce5 	bl	800685c <USBD_SetFeature>
          break;
 8005e92:	e009      	b.n	8005ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fd09 	bl	80068ae <USBD_ClrFeature>
          break;
 8005e9c:	e004      	b.n	8005ea8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fd60 	bl	8006966 <USBD_CtlError>
          break;
 8005ea6:	bf00      	nop
      }
      break;
 8005ea8:	e004      	b.n	8005eb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fd5a 	bl	8006966 <USBD_CtlError>
      break;
 8005eb2:	bf00      	nop
  }

  return ret;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop

08005ec0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d005      	beq.n	8005ee6 <USBD_StdItfReq+0x26>
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d852      	bhi.n	8005f84 <USBD_StdItfReq+0xc4>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <USBD_StdItfReq+0x26>
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d14e      	bne.n	8005f84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d840      	bhi.n	8005f76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	889b      	ldrh	r3, [r3, #4]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d836      	bhi.n	8005f6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	889b      	ldrh	r3, [r3, #4]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff fed8 	bl	8005cbc <USBD_CoreFindIF>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2bff      	cmp	r3, #255	; 0xff
 8005f14:	d01d      	beq.n	8005f52 <USBD_StdItfReq+0x92>
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d11a      	bne.n	8005f52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f1c:	7bba      	ldrb	r2, [r7, #14]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	32ae      	adds	r2, #174	; 0xae
 8005f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00f      	beq.n	8005f4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f2c:	7bba      	ldrb	r2, [r7, #14]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f34:	7bba      	ldrb	r2, [r7, #14]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	32ae      	adds	r2, #174	; 0xae
 8005f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f4a:	e004      	b.n	8005f56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f50:	e001      	b.n	8005f56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f52:	2303      	movs	r3, #3
 8005f54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	88db      	ldrh	r3, [r3, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d110      	bne.n	8005f80 <USBD_StdItfReq+0xc0>
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10d      	bne.n	8005f80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fddc 	bl	8006b22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f6a:	e009      	b.n	8005f80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fcf9 	bl	8006966 <USBD_CtlError>
          break;
 8005f74:	e004      	b.n	8005f80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fcf4 	bl	8006966 <USBD_CtlError>
          break;
 8005f7e:	e000      	b.n	8005f82 <USBD_StdItfReq+0xc2>
          break;
 8005f80:	bf00      	nop
      }
      break;
 8005f82:	e004      	b.n	8005f8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fced 	bl	8006966 <USBD_CtlError>
      break;
 8005f8c:	bf00      	nop
  }

  return ret;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	889b      	ldrh	r3, [r3, #4]
 8005faa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d007      	beq.n	8005fc8 <USBD_StdEPReq+0x30>
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	f200 8181 	bhi.w	80062c0 <USBD_StdEPReq+0x328>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d02a      	beq.n	8006018 <USBD_StdEPReq+0x80>
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	f040 817c 	bne.w	80062c0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fc8:	7bbb      	ldrb	r3, [r7, #14]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fe82 	bl	8005cd6 <USBD_CoreFindEP>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fd6:	7b7b      	ldrb	r3, [r7, #13]
 8005fd8:	2bff      	cmp	r3, #255	; 0xff
 8005fda:	f000 8176 	beq.w	80062ca <USBD_StdEPReq+0x332>
 8005fde:	7b7b      	ldrb	r3, [r7, #13]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 8172 	bne.w	80062ca <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005fe6:	7b7a      	ldrb	r2, [r7, #13]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005fee:	7b7a      	ldrb	r2, [r7, #13]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	32ae      	adds	r2, #174	; 0xae
 8005ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8165 	beq.w	80062ca <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006000:	7b7a      	ldrb	r2, [r7, #13]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	32ae      	adds	r2, #174	; 0xae
 8006006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
 8006012:	4603      	mov	r3, r0
 8006014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006016:	e158      	b.n	80062ca <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b03      	cmp	r3, #3
 800601e:	d008      	beq.n	8006032 <USBD_StdEPReq+0x9a>
 8006020:	2b03      	cmp	r3, #3
 8006022:	f300 8147 	bgt.w	80062b4 <USBD_StdEPReq+0x31c>
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 809b 	beq.w	8006162 <USBD_StdEPReq+0x1ca>
 800602c:	2b01      	cmp	r3, #1
 800602e:	d03c      	beq.n	80060aa <USBD_StdEPReq+0x112>
 8006030:	e140      	b.n	80062b4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d002      	beq.n	8006044 <USBD_StdEPReq+0xac>
 800603e:	2b03      	cmp	r3, #3
 8006040:	d016      	beq.n	8006070 <USBD_StdEPReq+0xd8>
 8006042:	e02c      	b.n	800609e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <USBD_StdEPReq+0xce>
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d00a      	beq.n	8006066 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 f9b1 	bl	80073bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800605a:	2180      	movs	r1, #128	; 0x80
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 f9ad 	bl	80073bc <USBD_LL_StallEP>
 8006062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006064:	e020      	b.n	80060a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fc7c 	bl	8006966 <USBD_CtlError>
              break;
 800606e:	e01b      	b.n	80060a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	885b      	ldrh	r3, [r3, #2]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10e      	bne.n	8006096 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <USBD_StdEPReq+0xfe>
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d008      	beq.n	8006096 <USBD_StdEPReq+0xfe>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	88db      	ldrh	r3, [r3, #6]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 f993 	bl	80073bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fd43 	bl	8006b22 <USBD_CtlSendStatus>

              break;
 800609c:	e004      	b.n	80060a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fc60 	bl	8006966 <USBD_CtlError>
              break;
 80060a6:	bf00      	nop
          }
          break;
 80060a8:	e109      	b.n	80062be <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d002      	beq.n	80060bc <USBD_StdEPReq+0x124>
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d016      	beq.n	80060e8 <USBD_StdEPReq+0x150>
 80060ba:	e04b      	b.n	8006154 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <USBD_StdEPReq+0x146>
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	2b80      	cmp	r3, #128	; 0x80
 80060c6:	d00a      	beq.n	80060de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 f975 	bl	80073bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 f971 	bl	80073bc <USBD_LL_StallEP>
 80060da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060dc:	e040      	b.n	8006160 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fc40 	bl	8006966 <USBD_CtlError>
              break;
 80060e6:	e03b      	b.n	8006160 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	885b      	ldrh	r3, [r3, #2]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d136      	bne.n	800615e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 f97b 	bl	80073fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fd0c 	bl	8006b22 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800610a:	7bbb      	ldrb	r3, [r7, #14]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fde1 	bl	8005cd6 <USBD_CoreFindEP>
 8006114:	4603      	mov	r3, r0
 8006116:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006118:	7b7b      	ldrb	r3, [r7, #13]
 800611a:	2bff      	cmp	r3, #255	; 0xff
 800611c:	d01f      	beq.n	800615e <USBD_StdEPReq+0x1c6>
 800611e:	7b7b      	ldrb	r3, [r7, #13]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11c      	bne.n	800615e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006124:	7b7a      	ldrb	r2, [r7, #13]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800612c:	7b7a      	ldrb	r2, [r7, #13]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	32ae      	adds	r2, #174	; 0xae
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d010      	beq.n	800615e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800613c:	7b7a      	ldrb	r2, [r7, #13]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	32ae      	adds	r2, #174	; 0xae
 8006142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	4798      	blx	r3
 800614e:	4603      	mov	r3, r0
 8006150:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006152:	e004      	b.n	800615e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fc05 	bl	8006966 <USBD_CtlError>
              break;
 800615c:	e000      	b.n	8006160 <USBD_StdEPReq+0x1c8>
              break;
 800615e:	bf00      	nop
          }
          break;
 8006160:	e0ad      	b.n	80062be <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d002      	beq.n	8006174 <USBD_StdEPReq+0x1dc>
 800616e:	2b03      	cmp	r3, #3
 8006170:	d033      	beq.n	80061da <USBD_StdEPReq+0x242>
 8006172:	e099      	b.n	80062a8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <USBD_StdEPReq+0x1f2>
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	2b80      	cmp	r3, #128	; 0x80
 800617e:	d004      	beq.n	800618a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fbef 	bl	8006966 <USBD_CtlError>
                break;
 8006188:	e093      	b.n	80062b2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800618a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800618e:	2b00      	cmp	r3, #0
 8006190:	da0b      	bge.n	80061aa <USBD_StdEPReq+0x212>
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	3310      	adds	r3, #16
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	4413      	add	r3, r2
 80061a6:	3304      	adds	r3, #4
 80061a8:	e00b      	b.n	80061c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4413      	add	r3, r2
 80061c0:	3304      	adds	r3, #4
 80061c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2200      	movs	r2, #0
 80061c8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	330e      	adds	r3, #14
 80061ce:	2202      	movs	r2, #2
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fc44 	bl	8006a60 <USBD_CtlSendData>
              break;
 80061d8:	e06b      	b.n	80062b2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da11      	bge.n	8006206 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	f003 020f 	and.w	r2, r3, #15
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	3323      	adds	r3, #35	; 0x23
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d117      	bne.n	800622c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fbb1 	bl	8006966 <USBD_CtlError>
                  break;
 8006204:	e055      	b.n	80062b2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	f203 1363 	addw	r3, r3, #355	; 0x163
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fb9e 	bl	8006966 <USBD_CtlError>
                  break;
 800622a:	e042      	b.n	80062b2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800622c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006230:	2b00      	cmp	r3, #0
 8006232:	da0b      	bge.n	800624c <USBD_StdEPReq+0x2b4>
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	3310      	adds	r3, #16
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4413      	add	r3, r2
 8006248:	3304      	adds	r3, #4
 800624a:	e00b      	b.n	8006264 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	3304      	adds	r3, #4
 8006264:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <USBD_StdEPReq+0x2da>
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	d103      	bne.n	800627a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	739a      	strb	r2, [r3, #14]
 8006278:	e00e      	b.n	8006298 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800627a:	7bbb      	ldrb	r3, [r7, #14]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 f8da 	bl	8007438 <USBD_LL_IsStallEP>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2201      	movs	r2, #1
 800628e:	739a      	strb	r2, [r3, #14]
 8006290:	e002      	b.n	8006298 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2200      	movs	r2, #0
 8006296:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	330e      	adds	r3, #14
 800629c:	2202      	movs	r2, #2
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fbdd 	bl	8006a60 <USBD_CtlSendData>
              break;
 80062a6:	e004      	b.n	80062b2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fb5b 	bl	8006966 <USBD_CtlError>
              break;
 80062b0:	bf00      	nop
          }
          break;
 80062b2:	e004      	b.n	80062be <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fb55 	bl	8006966 <USBD_CtlError>
          break;
 80062bc:	bf00      	nop
      }
      break;
 80062be:	e005      	b.n	80062cc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fb4f 	bl	8006966 <USBD_CtlError>
      break;
 80062c8:	e000      	b.n	80062cc <USBD_StdEPReq+0x334>
      break;
 80062ca:	bf00      	nop
  }

  return ret;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	885b      	ldrh	r3, [r3, #2]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	2b06      	cmp	r3, #6
 80062fa:	f200 8128 	bhi.w	800654e <USBD_GetDescriptor+0x276>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <USBD_GetDescriptor+0x2c>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006321 	.word	0x08006321
 8006308:	08006339 	.word	0x08006339
 800630c:	08006379 	.word	0x08006379
 8006310:	0800654f 	.word	0x0800654f
 8006314:	0800654f 	.word	0x0800654f
 8006318:	080064ef 	.word	0x080064ef
 800631c:	0800651b 	.word	0x0800651b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7c12      	ldrb	r2, [r2, #16]
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
      break;
 8006336:	e112      	b.n	800655e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	7c1b      	ldrb	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f107 0208 	add.w	r2, r7, #8
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	2202      	movs	r2, #2
 8006358:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800635a:	e100      	b.n	800655e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	f107 0208 	add.w	r2, r7, #8
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
 800636c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	2202      	movs	r2, #2
 8006374:	701a      	strb	r2, [r3, #0]
      break;
 8006376:	e0f2      	b.n	800655e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	885b      	ldrh	r3, [r3, #2]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b05      	cmp	r3, #5
 8006380:	f200 80ac 	bhi.w	80064dc <USBD_GetDescriptor+0x204>
 8006384:	a201      	add	r2, pc, #4	; (adr r2, 800638c <USBD_GetDescriptor+0xb4>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	080063a5 	.word	0x080063a5
 8006390:	080063d9 	.word	0x080063d9
 8006394:	0800640d 	.word	0x0800640d
 8006398:	08006441 	.word	0x08006441
 800639c:	08006475 	.word	0x08006475
 80063a0:	080064a9 	.word	0x080064a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	7c12      	ldrb	r2, [r2, #16]
 80063bc:	f107 0108 	add.w	r1, r7, #8
 80063c0:	4610      	mov	r0, r2
 80063c2:	4798      	blx	r3
 80063c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063c6:	e091      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 facb 	bl	8006966 <USBD_CtlError>
            err++;
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	3301      	adds	r3, #1
 80063d4:	72fb      	strb	r3, [r7, #11]
          break;
 80063d6:	e089      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	7c12      	ldrb	r2, [r2, #16]
 80063f0:	f107 0108 	add.w	r1, r7, #8
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063fa:	e077      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fab1 	bl	8006966 <USBD_CtlError>
            err++;
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	3301      	adds	r3, #1
 8006408:	72fb      	strb	r3, [r7, #11]
          break;
 800640a:	e06f      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	7c12      	ldrb	r2, [r2, #16]
 8006424:	f107 0108 	add.w	r1, r7, #8
 8006428:	4610      	mov	r0, r2
 800642a:	4798      	blx	r3
 800642c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800642e:	e05d      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fa97 	bl	8006966 <USBD_CtlError>
            err++;
 8006438:	7afb      	ldrb	r3, [r7, #11]
 800643a:	3301      	adds	r3, #1
 800643c:	72fb      	strb	r3, [r7, #11]
          break;
 800643e:	e055      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	7c12      	ldrb	r2, [r2, #16]
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006462:	e043      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa7d 	bl	8006966 <USBD_CtlError>
            err++;
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	3301      	adds	r3, #1
 8006470:	72fb      	strb	r3, [r7, #11]
          break;
 8006472:	e03b      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	7c12      	ldrb	r2, [r2, #16]
 800648c:	f107 0108 	add.w	r1, r7, #8
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006496:	e029      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa63 	bl	8006966 <USBD_CtlError>
            err++;
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	3301      	adds	r3, #1
 80064a4:	72fb      	strb	r3, [r7, #11]
          break;
 80064a6:	e021      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	7c12      	ldrb	r2, [r2, #16]
 80064c0:	f107 0108 	add.w	r1, r7, #8
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
 80064c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ca:	e00f      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa49 	bl	8006966 <USBD_CtlError>
            err++;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	3301      	adds	r3, #1
 80064d8:	72fb      	strb	r3, [r7, #11]
          break;
 80064da:	e007      	b.n	80064ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa41 	bl	8006966 <USBD_CtlError>
          err++;
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	3301      	adds	r3, #1
 80064e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80064ea:	bf00      	nop
      }
      break;
 80064ec:	e037      	b.n	800655e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7c1b      	ldrb	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	f107 0208 	add.w	r2, r7, #8
 8006502:	4610      	mov	r0, r2
 8006504:	4798      	blx	r3
 8006506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006508:	e029      	b.n	800655e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa2a 	bl	8006966 <USBD_CtlError>
        err++;
 8006512:	7afb      	ldrb	r3, [r7, #11]
 8006514:	3301      	adds	r3, #1
 8006516:	72fb      	strb	r3, [r7, #11]
      break;
 8006518:	e021      	b.n	800655e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	7c1b      	ldrb	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10d      	bne.n	800653e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	f107 0208 	add.w	r2, r7, #8
 800652e:	4610      	mov	r0, r2
 8006530:	4798      	blx	r3
 8006532:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	2207      	movs	r2, #7
 800653a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800653c:	e00f      	b.n	800655e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa10 	bl	8006966 <USBD_CtlError>
        err++;
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	3301      	adds	r3, #1
 800654a:	72fb      	strb	r3, [r7, #11]
      break;
 800654c:	e007      	b.n	800655e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa08 	bl	8006966 <USBD_CtlError>
      err++;
 8006556:	7afb      	ldrb	r3, [r7, #11]
 8006558:	3301      	adds	r3, #1
 800655a:	72fb      	strb	r3, [r7, #11]
      break;
 800655c:	bf00      	nop
  }

  if (err != 0U)
 800655e:	7afb      	ldrb	r3, [r7, #11]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11e      	bne.n	80065a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	88db      	ldrh	r3, [r3, #6]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d016      	beq.n	800659a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800656c:	893b      	ldrh	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	88da      	ldrh	r2, [r3, #6]
 8006576:	893b      	ldrh	r3, [r7, #8]
 8006578:	4293      	cmp	r3, r2
 800657a:	bf28      	it	cs
 800657c:	4613      	movcs	r3, r2
 800657e:	b29b      	uxth	r3, r3
 8006580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006582:	893b      	ldrh	r3, [r7, #8]
 8006584:	461a      	mov	r2, r3
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fa69 	bl	8006a60 <USBD_CtlSendData>
 800658e:	e009      	b.n	80065a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9e7 	bl	8006966 <USBD_CtlError>
 8006598:	e004      	b.n	80065a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fac1 	bl	8006b22 <USBD_CtlSendStatus>
 80065a0:	e000      	b.n	80065a4 <USBD_GetDescriptor+0x2cc>
    return;
 80065a2:	bf00      	nop
  }
}
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop

080065ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	889b      	ldrh	r3, [r3, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d131      	bne.n	8006622 <USBD_SetAddress+0x76>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	88db      	ldrh	r3, [r3, #6]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d12d      	bne.n	8006622 <USBD_SetAddress+0x76>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	885b      	ldrh	r3, [r3, #2]
 80065ca:	2b7f      	cmp	r3, #127	; 0x7f
 80065cc:	d829      	bhi.n	8006622 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	885b      	ldrh	r3, [r3, #2]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d104      	bne.n	80065f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f9bc 	bl	8006966 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ee:	e01d      	b.n	800662c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7bfa      	ldrb	r2, [r7, #15]
 80065f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 ff47 	bl	8007490 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa8d 	bl	8006b22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006616:	e009      	b.n	800662c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006620:	e004      	b.n	800662c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f99e 	bl	8006966 <USBD_CtlError>
  }
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	885b      	ldrh	r3, [r3, #2]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	4b4e      	ldr	r3, [pc, #312]	; (8006784 <USBD_SetConfig+0x150>)
 800664a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800664c:	4b4d      	ldr	r3, [pc, #308]	; (8006784 <USBD_SetConfig+0x150>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d905      	bls.n	8006660 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f985 	bl	8006966 <USBD_CtlError>
    return USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	e08c      	b.n	800677a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d002      	beq.n	8006672 <USBD_SetConfig+0x3e>
 800666c:	2b03      	cmp	r3, #3
 800666e:	d029      	beq.n	80066c4 <USBD_SetConfig+0x90>
 8006670:	e075      	b.n	800675e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006672:	4b44      	ldr	r3, [pc, #272]	; (8006784 <USBD_SetConfig+0x150>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d020      	beq.n	80066bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800667a:	4b42      	ldr	r3, [pc, #264]	; (8006784 <USBD_SetConfig+0x150>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006684:	4b3f      	ldr	r3, [pc, #252]	; (8006784 <USBD_SetConfig+0x150>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fe ffcb 	bl	8005626 <USBD_SetClassConfig>
 8006690:	4603      	mov	r3, r0
 8006692:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f962 	bl	8006966 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066aa:	e065      	b.n	8006778 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fa38 	bl	8006b22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2203      	movs	r2, #3
 80066b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066ba:	e05d      	b.n	8006778 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa30 	bl	8006b22 <USBD_CtlSendStatus>
      break;
 80066c2:	e059      	b.n	8006778 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066c4:	4b2f      	ldr	r3, [pc, #188]	; (8006784 <USBD_SetConfig+0x150>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d112      	bne.n	80066f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80066d4:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <USBD_SetConfig+0x150>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066de:	4b29      	ldr	r3, [pc, #164]	; (8006784 <USBD_SetConfig+0x150>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7fe ffba 	bl	800565e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa19 	bl	8006b22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066f0:	e042      	b.n	8006778 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066f2:	4b24      	ldr	r3, [pc, #144]	; (8006784 <USBD_SetConfig+0x150>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d02a      	beq.n	8006756 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fe ffa8 	bl	800565e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800670e:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <USBD_SetConfig+0x150>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006718:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <USBD_SetConfig+0x150>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fe ff81 	bl	8005626 <USBD_SetClassConfig>
 8006724:	4603      	mov	r3, r0
 8006726:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00f      	beq.n	800674e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f918 	bl	8006966 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fe ff8d 	bl	800565e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800674c:	e014      	b.n	8006778 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9e7 	bl	8006b22 <USBD_CtlSendStatus>
      break;
 8006754:	e010      	b.n	8006778 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9e3 	bl	8006b22 <USBD_CtlSendStatus>
      break;
 800675c:	e00c      	b.n	8006778 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f900 	bl	8006966 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006766:	4b07      	ldr	r3, [pc, #28]	; (8006784 <USBD_SetConfig+0x150>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fe ff76 	bl	800565e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006772:	2303      	movs	r3, #3
 8006774:	73fb      	strb	r3, [r7, #15]
      break;
 8006776:	bf00      	nop
  }

  return ret;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000170 	.word	0x20000170

08006788 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	88db      	ldrh	r3, [r3, #6]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d004      	beq.n	80067a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f8e2 	bl	8006966 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067a2:	e023      	b.n	80067ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	dc02      	bgt.n	80067b6 <USBD_GetConfig+0x2e>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dc03      	bgt.n	80067bc <USBD_GetConfig+0x34>
 80067b4:	e015      	b.n	80067e2 <USBD_GetConfig+0x5a>
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d00b      	beq.n	80067d2 <USBD_GetConfig+0x4a>
 80067ba:	e012      	b.n	80067e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3308      	adds	r3, #8
 80067c6:	2201      	movs	r2, #1
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f948 	bl	8006a60 <USBD_CtlSendData>
        break;
 80067d0:	e00c      	b.n	80067ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	2201      	movs	r2, #1
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f940 	bl	8006a60 <USBD_CtlSendData>
        break;
 80067e0:	e004      	b.n	80067ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f8be 	bl	8006966 <USBD_CtlError>
        break;
 80067ea:	bf00      	nop
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	2b02      	cmp	r3, #2
 800680a:	d81e      	bhi.n	800684a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	88db      	ldrh	r3, [r3, #6]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d004      	beq.n	800681e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8a5 	bl	8006966 <USBD_CtlError>
        break;
 800681c:	e01a      	b.n	8006854 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f043 0202 	orr.w	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	330c      	adds	r3, #12
 800683e:	2202      	movs	r2, #2
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f90c 	bl	8006a60 <USBD_CtlSendData>
      break;
 8006848:	e004      	b.n	8006854 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f88a 	bl	8006966 <USBD_CtlError>
      break;
 8006852:	bf00      	nop
  }
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d107      	bne.n	800687e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f953 	bl	8006b22 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800687c:	e013      	b.n	80068a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	885b      	ldrh	r3, [r3, #2]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d10b      	bne.n	800689e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	b29b      	uxth	r3, r3
 800688e:	b2da      	uxtb	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f943 	bl	8006b22 <USBD_CtlSendStatus>
}
 800689c:	e003      	b.n	80068a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f860 	bl	8006966 <USBD_CtlError>
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d80b      	bhi.n	80068de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	885b      	ldrh	r3, [r3, #2]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d10c      	bne.n	80068e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f923 	bl	8006b22 <USBD_CtlSendStatus>
      }
      break;
 80068dc:	e004      	b.n	80068e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f840 	bl	8006966 <USBD_CtlError>
      break;
 80068e6:	e000      	b.n	80068ea <USBD_ClrFeature+0x3c>
      break;
 80068e8:	bf00      	nop
  }
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	781a      	ldrb	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7ff fa3e 	bl	8005d9e <SWAPBYTE>
 8006922:	4603      	mov	r3, r0
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fa31 	bl	8005d9e <SWAPBYTE>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff fa24 	bl	8005d9e <SWAPBYTE>
 8006956:	4603      	mov	r3, r0
 8006958:	461a      	mov	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	80da      	strh	r2, [r3, #6]
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006970:	2180      	movs	r1, #128	; 0x80
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fd22 	bl	80073bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006978:	2100      	movs	r1, #0
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fd1e 	bl	80073bc <USBD_LL_StallEP>
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d042      	beq.n	8006a24 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80069a2:	6938      	ldr	r0, [r7, #16]
 80069a4:	f000 f842 	bl	8006a2c <USBD_GetLen>
 80069a8:	4603      	mov	r3, r0
 80069aa:	3301      	adds	r3, #1
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069b2:	d808      	bhi.n	80069c6 <USBD_GetString+0x3e>
 80069b4:	6938      	ldr	r0, [r7, #16]
 80069b6:	f000 f839 	bl	8006a2c <USBD_GetLen>
 80069ba:	4603      	mov	r3, r0
 80069bc:	3301      	adds	r3, #1
 80069be:	b29b      	uxth	r3, r3
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	e001      	b.n	80069ca <USBD_GetString+0x42>
 80069c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	4413      	add	r3, r2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	3301      	adds	r3, #1
 80069de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	4413      	add	r3, r2
 80069e6:	2203      	movs	r2, #3
 80069e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	3301      	adds	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80069f0:	e013      	b.n	8006a1a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	4413      	add	r3, r2
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	3301      	adds	r3, #1
 8006a02:	613b      	str	r3, [r7, #16]
    idx++;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	3301      	adds	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	4413      	add	r3, r2
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
 8006a16:	3301      	adds	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e7      	bne.n	80069f2 <USBD_GetString+0x6a>
 8006a22:	e000      	b.n	8006a26 <USBD_GetString+0x9e>
    return;
 8006a24:	bf00      	nop
  }
}
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a3c:	e005      	b.n	8006a4a <USBD_GetLen+0x1e>
  {
    len++;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	3301      	adds	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f5      	bne.n	8006a3e <USBD_GetLen+0x12>
  }

  return len;
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fd1e 	bl	80074ce <USBD_LL_Transmit>

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	2100      	movs	r1, #0
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fd0d 	bl	80074ce <USBD_LL_Transmit>

  return USBD_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2203      	movs	r2, #3
 8006ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	2100      	movs	r1, #0
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fd0d 	bl	8007510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	2100      	movs	r1, #0
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fcfc 	bl	8007510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b32:	2300      	movs	r3, #0
 8006b34:	2200      	movs	r2, #0
 8006b36:	2100      	movs	r1, #0
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fcc8 	bl	80074ce <USBD_LL_Transmit>

  return USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2205      	movs	r2, #5
 8006b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fcd6 	bl	8007510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b74:	2200      	movs	r2, #0
 8006b76:	4912      	ldr	r1, [pc, #72]	; (8006bc0 <MX_USB_DEVICE_Init+0x50>)
 8006b78:	4812      	ldr	r0, [pc, #72]	; (8006bc4 <MX_USB_DEVICE_Init+0x54>)
 8006b7a:	f7fe fcd7 	bl	800552c <USBD_Init>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b84:	f7f9 fe0e 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b88:	490f      	ldr	r1, [pc, #60]	; (8006bc8 <MX_USB_DEVICE_Init+0x58>)
 8006b8a:	480e      	ldr	r0, [pc, #56]	; (8006bc4 <MX_USB_DEVICE_Init+0x54>)
 8006b8c:	f7fe fcfe 	bl	800558c <USBD_RegisterClass>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b96:	f7f9 fe05 	bl	80007a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b9a:	490c      	ldr	r1, [pc, #48]	; (8006bcc <MX_USB_DEVICE_Init+0x5c>)
 8006b9c:	4809      	ldr	r0, [pc, #36]	; (8006bc4 <MX_USB_DEVICE_Init+0x54>)
 8006b9e:	f7fe fc35 	bl	800540c <USBD_CDC_RegisterInterface>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ba8:	f7f9 fdfc 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006bac:	4805      	ldr	r0, [pc, #20]	; (8006bc4 <MX_USB_DEVICE_Init+0x54>)
 8006bae:	f7fe fd23 	bl	80055f8 <USBD_Start>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006bb8:	f7f9 fdf4 	bl	80007a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bbc:	bf00      	nop
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	200000b4 	.word	0x200000b4
 8006bc4:	20000174 	.word	0x20000174
 8006bc8:	20000018 	.word	0x20000018
 8006bcc:	200000a0 	.word	0x200000a0

08006bd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4905      	ldr	r1, [pc, #20]	; (8006bec <CDC_Init_FS+0x1c>)
 8006bd8:	4805      	ldr	r0, [pc, #20]	; (8006bf0 <CDC_Init_FS+0x20>)
 8006bda:	f7fe fc31 	bl	8005440 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bde:	4905      	ldr	r1, [pc, #20]	; (8006bf4 <CDC_Init_FS+0x24>)
 8006be0:	4803      	ldr	r0, [pc, #12]	; (8006bf0 <CDC_Init_FS+0x20>)
 8006be2:	f7fe fc4f 	bl	8005484 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006be6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000650 	.word	0x20000650
 8006bf0:	20000174 	.word	0x20000174
 8006bf4:	20000450 	.word	0x20000450

08006bf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	71fb      	strb	r3, [r7, #7]
 8006c14:	4613      	mov	r3, r2
 8006c16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	2b23      	cmp	r3, #35	; 0x23
 8006c1c:	f200 8098 	bhi.w	8006d50 <CDC_Control_FS+0x148>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <CDC_Control_FS+0x20>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006d51 	.word	0x08006d51
 8006c2c:	08006d51 	.word	0x08006d51
 8006c30:	08006d51 	.word	0x08006d51
 8006c34:	08006d51 	.word	0x08006d51
 8006c38:	08006d51 	.word	0x08006d51
 8006c3c:	08006d51 	.word	0x08006d51
 8006c40:	08006d51 	.word	0x08006d51
 8006c44:	08006d51 	.word	0x08006d51
 8006c48:	08006d51 	.word	0x08006d51
 8006c4c:	08006d51 	.word	0x08006d51
 8006c50:	08006d51 	.word	0x08006d51
 8006c54:	08006d51 	.word	0x08006d51
 8006c58:	08006d51 	.word	0x08006d51
 8006c5c:	08006d51 	.word	0x08006d51
 8006c60:	08006d51 	.word	0x08006d51
 8006c64:	08006d51 	.word	0x08006d51
 8006c68:	08006d51 	.word	0x08006d51
 8006c6c:	08006d51 	.word	0x08006d51
 8006c70:	08006d51 	.word	0x08006d51
 8006c74:	08006d51 	.word	0x08006d51
 8006c78:	08006d51 	.word	0x08006d51
 8006c7c:	08006d51 	.word	0x08006d51
 8006c80:	08006d51 	.word	0x08006d51
 8006c84:	08006d51 	.word	0x08006d51
 8006c88:	08006d51 	.word	0x08006d51
 8006c8c:	08006d51 	.word	0x08006d51
 8006c90:	08006d51 	.word	0x08006d51
 8006c94:	08006d51 	.word	0x08006d51
 8006c98:	08006d51 	.word	0x08006d51
 8006c9c:	08006d51 	.word	0x08006d51
 8006ca0:	08006d51 	.word	0x08006d51
 8006ca4:	08006d51 	.word	0x08006d51
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006cfd 	.word	0x08006cfd
 8006cb0:	08006d51 	.word	0x08006d51
 8006cb4:	08006d51 	.word	0x08006d51
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	3302      	adds	r3, #2
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	041b      	lsls	r3, r3, #16
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	3303      	adds	r3, #3
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	061b      	lsls	r3, r3, #24
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <CDC_Control_FS+0x158>)
 8006ce0:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	791a      	ldrb	r2, [r3, #4]
 8006ce6:	4b1e      	ldr	r3, [pc, #120]	; (8006d60 <CDC_Control_FS+0x158>)
 8006ce8:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	795a      	ldrb	r2, [r3, #5]
 8006cee:	4b1c      	ldr	r3, [pc, #112]	; (8006d60 <CDC_Control_FS+0x158>)
 8006cf0:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	799a      	ldrb	r2, [r3, #6]
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <CDC_Control_FS+0x158>)
 8006cf8:	719a      	strb	r2, [r3, #6]
    break;
 8006cfa:	e02a      	b.n	8006d52 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8006cfc:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <CDC_Control_FS+0x158>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8006d06:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <CDC_Control_FS+0x158>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	0a1a      	lsrs	r2, r3, #8
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8006d14:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <CDC_Control_FS+0x158>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	0c1a      	lsrs	r2, r3, #16
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8006d22:	4b0f      	ldr	r3, [pc, #60]	; (8006d60 <CDC_Control_FS+0x158>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	0e1a      	lsrs	r2, r3, #24
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	3303      	adds	r3, #3
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4a0a      	ldr	r2, [pc, #40]	; (8006d60 <CDC_Control_FS+0x158>)
 8006d36:	7912      	ldrb	r2, [r2, #4]
 8006d38:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	3305      	adds	r3, #5
 8006d3e:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <CDC_Control_FS+0x158>)
 8006d40:	7952      	ldrb	r2, [r2, #5]
 8006d42:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	3306      	adds	r3, #6
 8006d48:	4a05      	ldr	r2, [pc, #20]	; (8006d60 <CDC_Control_FS+0x158>)
 8006d4a:	7992      	ldrb	r2, [r2, #6]
 8006d4c:	701a      	strb	r2, [r3, #0]
    break;
 8006d4e:	e000      	b.n	8006d52 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d50:	bf00      	nop
  }

  return (USBD_OK);
 8006d52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	20000098 	.word	0x20000098

08006d64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <CDC_Receive_FS+0x3c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 8006d76:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <CDC_Receive_FS+0x3c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	b292      	uxth	r2, r2
 8006d80:	4611      	mov	r1, r2
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4806      	ldr	r0, [pc, #24]	; (8006da4 <CDC_Receive_FS+0x40>)
 8006d8a:	f7fe fb7b 	bl	8005484 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d8e:	4805      	ldr	r0, [pc, #20]	; (8006da4 <CDC_Receive_FS+0x40>)
 8006d90:	f7fe fb96 	bl	80054c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000850 	.word	0x20000850
 8006da4:	20000174 	.word	0x20000174

08006da8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	4613      	mov	r3, r2
 8006db4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
	...

08006dcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2212      	movs	r2, #18
 8006ddc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dde:	4b03      	ldr	r3, [pc, #12]	; (8006dec <USBD_FS_DeviceDescriptor+0x20>)
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	200000d0 	.word	0x200000d0

08006df0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	6039      	str	r1, [r7, #0]
 8006dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e02:	4b03      	ldr	r3, [pc, #12]	; (8006e10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	200000e4 	.word	0x200000e4

08006e14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	6039      	str	r1, [r7, #0]
 8006e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d105      	bne.n	8006e32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	4907      	ldr	r1, [pc, #28]	; (8006e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e2a:	4808      	ldr	r0, [pc, #32]	; (8006e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e2c:	f7ff fdac 	bl	8006988 <USBD_GetString>
 8006e30:	e004      	b.n	8006e3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4904      	ldr	r1, [pc, #16]	; (8006e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e36:	4805      	ldr	r0, [pc, #20]	; (8006e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e38:	f7ff fda6 	bl	8006988 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e3c:	4b02      	ldr	r3, [pc, #8]	; (8006e48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000854 	.word	0x20000854
 8006e4c:	08007670 	.word	0x08007670

08006e50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	4904      	ldr	r1, [pc, #16]	; (8006e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e60:	4804      	ldr	r0, [pc, #16]	; (8006e74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e62:	f7ff fd91 	bl	8006988 <USBD_GetString>
  return USBD_StrDesc;
 8006e66:	4b02      	ldr	r3, [pc, #8]	; (8006e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000854 	.word	0x20000854
 8006e74:	08007688 	.word	0x08007688

08006e78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6039      	str	r1, [r7, #0]
 8006e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	221a      	movs	r2, #26
 8006e88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e8a:	f000 f843 	bl	8006f14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e8e:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	200000e8 	.word	0x200000e8

08006e9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	6039      	str	r1, [r7, #0]
 8006ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4907      	ldr	r1, [pc, #28]	; (8006ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eb2:	4808      	ldr	r0, [pc, #32]	; (8006ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eb4:	f7ff fd68 	bl	8006988 <USBD_GetString>
 8006eb8:	e004      	b.n	8006ec4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	4904      	ldr	r1, [pc, #16]	; (8006ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ebe:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ec0:	f7ff fd62 	bl	8006988 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ec4:	4b02      	ldr	r3, [pc, #8]	; (8006ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000854 	.word	0x20000854
 8006ed4:	0800769c 	.word	0x0800769c

08006ed8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6039      	str	r1, [r7, #0]
 8006ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4907      	ldr	r1, [pc, #28]	; (8006f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eee:	4808      	ldr	r0, [pc, #32]	; (8006f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ef0:	f7ff fd4a 	bl	8006988 <USBD_GetString>
 8006ef4:	e004      	b.n	8006f00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	4904      	ldr	r1, [pc, #16]	; (8006f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006efa:	4805      	ldr	r0, [pc, #20]	; (8006f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006efc:	f7ff fd44 	bl	8006988 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000854 	.word	0x20000854
 8006f10:	080076a8 	.word	0x080076a8

08006f14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <Get_SerialNum+0x44>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <Get_SerialNum+0x48>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f26:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <Get_SerialNum+0x4c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f3a:	2208      	movs	r2, #8
 8006f3c:	4909      	ldr	r1, [pc, #36]	; (8006f64 <Get_SerialNum+0x50>)
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f814 	bl	8006f6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f44:	2204      	movs	r2, #4
 8006f46:	4908      	ldr	r1, [pc, #32]	; (8006f68 <Get_SerialNum+0x54>)
 8006f48:	68b8      	ldr	r0, [r7, #8]
 8006f4a:	f000 f80f 	bl	8006f6c <IntToUnicode>
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	1fff7a10 	.word	0x1fff7a10
 8006f5c:	1fff7a14 	.word	0x1fff7a14
 8006f60:	1fff7a18 	.word	0x1fff7a18
 8006f64:	200000ea 	.word	0x200000ea
 8006f68:	200000fa 	.word	0x200000fa

08006f6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
 8006f82:	e027      	b.n	8006fd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	0f1b      	lsrs	r3, r3, #28
 8006f88:	2b09      	cmp	r3, #9
 8006f8a:	d80b      	bhi.n	8006fa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	0f1b      	lsrs	r3, r3, #28
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	4619      	mov	r1, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3230      	adds	r2, #48	; 0x30
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	e00a      	b.n	8006fba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	0f1b      	lsrs	r3, r3, #28
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	440b      	add	r3, r1
 8006fb4:	3237      	adds	r2, #55	; 0x37
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	4413      	add	r3, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
 8006fd4:	7dfa      	ldrb	r2, [r7, #23]
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d3d3      	bcc.n	8006f84 <IntToUnicode+0x18>
  }
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ff4:	f107 0314 	add.w	r3, r7, #20
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	60da      	str	r2, [r3, #12]
 8007002:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800700c:	d13a      	bne.n	8007084 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	4b1e      	ldr	r3, [pc, #120]	; (800708c <HAL_PCD_MspInit+0xa0>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	4a1d      	ldr	r2, [pc, #116]	; (800708c <HAL_PCD_MspInit+0xa0>)
 8007018:	f043 0301 	orr.w	r3, r3, #1
 800701c:	6313      	str	r3, [r2, #48]	; 0x30
 800701e:	4b1b      	ldr	r3, [pc, #108]	; (800708c <HAL_PCD_MspInit+0xa0>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800702a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800702e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007030:	2302      	movs	r3, #2
 8007032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007034:	2300      	movs	r3, #0
 8007036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007038:	2303      	movs	r3, #3
 800703a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800703c:	230a      	movs	r3, #10
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007040:	f107 0314 	add.w	r3, r7, #20
 8007044:	4619      	mov	r1, r3
 8007046:	4812      	ldr	r0, [pc, #72]	; (8007090 <HAL_PCD_MspInit+0xa4>)
 8007048:	f7f9 fe24 	bl	8000c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <HAL_PCD_MspInit+0xa0>)
 800704e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007050:	4a0e      	ldr	r2, [pc, #56]	; (800708c <HAL_PCD_MspInit+0xa0>)
 8007052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007056:	6353      	str	r3, [r2, #52]	; 0x34
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <HAL_PCD_MspInit+0xa0>)
 800705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007060:	4a0a      	ldr	r2, [pc, #40]	; (800708c <HAL_PCD_MspInit+0xa0>)
 8007062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007066:	6453      	str	r3, [r2, #68]	; 0x44
 8007068:	4b08      	ldr	r3, [pc, #32]	; (800708c <HAL_PCD_MspInit+0xa0>)
 800706a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007074:	2200      	movs	r2, #0
 8007076:	2100      	movs	r1, #0
 8007078:	2043      	movs	r0, #67	; 0x43
 800707a:	f7f9 fdd4 	bl	8000c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800707e:	2043      	movs	r0, #67	; 0x43
 8007080:	f7f9 fded 	bl	8000c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007084:	bf00      	nop
 8007086:	3728      	adds	r7, #40	; 0x28
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40023800 	.word	0x40023800
 8007090:	40020000 	.word	0x40020000

08007094 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f7fe faf1 	bl	8005692 <USBD_LL_SetupStage>
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	4619      	mov	r1, r3
 80070e2:	f7fe fb2b 	bl	800573c <USBD_LL_DataOutStage>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007100:	78fa      	ldrb	r2, [r7, #3]
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3320      	adds	r3, #32
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	4619      	mov	r1, r3
 8007116:	f7fe fbcd 	bl	80058b4 <USBD_LL_DataInStage>
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fd11 	bl	8005b58 <USBD_LL_SOF>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007146:	2301      	movs	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	79db      	ldrb	r3, [r3, #7]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d001      	beq.n	8007156 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007152:	f7f9 fb27 	bl	80007a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800715c:	7bfa      	ldrb	r2, [r7, #15]
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fcb5 	bl	8005ad0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe fc5c 	bl	8005a2a <USBD_LL_Reset>
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fcb0 	bl	8005af0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	7adb      	ldrb	r3, [r3, #11]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <HAL_PCD_SuspendCallback+0x48>)
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	4a03      	ldr	r2, [pc, #12]	; (80071c4 <HAL_PCD_SuspendCallback+0x48>)
 80071b6:	f043 0306 	orr.w	r3, r3, #6
 80071ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000ed00 	.word	0xe000ed00

080071c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fca6 	bl	8005b28 <USBD_LL_Resume>
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80071f6:	78fa      	ldrb	r2, [r7, #3]
 80071f8:	4611      	mov	r1, r2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fcfe 	bl	8005bfc <USBD_LL_IsoOUTIncomplete>
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800721a:	78fa      	ldrb	r2, [r7, #3]
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fcba 	bl	8005b98 <USBD_LL_IsoINIncomplete>
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fd10 	bl	8005c60 <USBD_LL_DevConnected>
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fd0d 	bl	8005c76 <USBD_LL_DevDisconnected>
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d13c      	bne.n	80072ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007274:	4a20      	ldr	r2, [pc, #128]	; (80072f8 <USBD_LL_Init+0x94>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1e      	ldr	r2, [pc, #120]	; (80072f8 <USBD_LL_Init+0x94>)
 8007280:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007284:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <USBD_LL_Init+0x94>)
 8007286:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800728a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800728c:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <USBD_LL_Init+0x94>)
 800728e:	2204      	movs	r2, #4
 8007290:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007292:	4b19      	ldr	r3, [pc, #100]	; (80072f8 <USBD_LL_Init+0x94>)
 8007294:	2202      	movs	r2, #2
 8007296:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007298:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <USBD_LL_Init+0x94>)
 800729a:	2200      	movs	r2, #0
 800729c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800729e:	4b16      	ldr	r3, [pc, #88]	; (80072f8 <USBD_LL_Init+0x94>)
 80072a0:	2202      	movs	r2, #2
 80072a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072a4:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <USBD_LL_Init+0x94>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072aa:	4b13      	ldr	r3, [pc, #76]	; (80072f8 <USBD_LL_Init+0x94>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <USBD_LL_Init+0x94>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072b6:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <USBD_LL_Init+0x94>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <USBD_LL_Init+0x94>)
 80072be:	2200      	movs	r2, #0
 80072c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072c2:	480d      	ldr	r0, [pc, #52]	; (80072f8 <USBD_LL_Init+0x94>)
 80072c4:	f7f9 fe9d 	bl	8001002 <HAL_PCD_Init>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072ce:	f7f9 fa69 	bl	80007a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072d2:	2180      	movs	r1, #128	; 0x80
 80072d4:	4808      	ldr	r0, [pc, #32]	; (80072f8 <USBD_LL_Init+0x94>)
 80072d6:	f7fb f8ca 	bl	800246e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072da:	2240      	movs	r2, #64	; 0x40
 80072dc:	2100      	movs	r1, #0
 80072de:	4806      	ldr	r0, [pc, #24]	; (80072f8 <USBD_LL_Init+0x94>)
 80072e0:	f7fb f87e 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80072e4:	2280      	movs	r2, #128	; 0x80
 80072e6:	2101      	movs	r1, #1
 80072e8:	4803      	ldr	r0, [pc, #12]	; (80072f8 <USBD_LL_Init+0x94>)
 80072ea:	f7fb f879 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000a54 	.word	0x20000a54

080072fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007312:	4618      	mov	r0, r3
 8007314:	f7f9 ff84 	bl	8001220 <HAL_PCD_Start>
 8007318:	4603      	mov	r3, r0
 800731a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 f942 	bl	80075a8 <USBD_Get_USB_Status>
 8007324:	4603      	mov	r3, r0
 8007326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007328:	7bbb      	ldrb	r3, [r7, #14]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	4608      	mov	r0, r1
 800733c:	4611      	mov	r1, r2
 800733e:	461a      	mov	r2, r3
 8007340:	4603      	mov	r3, r0
 8007342:	70fb      	strb	r3, [r7, #3]
 8007344:	460b      	mov	r3, r1
 8007346:	70bb      	strb	r3, [r7, #2]
 8007348:	4613      	mov	r3, r2
 800734a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800735a:	78bb      	ldrb	r3, [r7, #2]
 800735c:	883a      	ldrh	r2, [r7, #0]
 800735e:	78f9      	ldrb	r1, [r7, #3]
 8007360:	f7fa fc58 	bl	8001c14 <HAL_PCD_EP_Open>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f91c 	bl	80075a8 <USBD_Get_USB_Status>
 8007370:	4603      	mov	r3, r0
 8007372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007374:	7bbb      	ldrb	r3, [r7, #14]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007398:	78fa      	ldrb	r2, [r7, #3]
 800739a:	4611      	mov	r1, r2
 800739c:	4618      	mov	r0, r3
 800739e:	f7fa fca3 	bl	8001ce8 <HAL_PCD_EP_Close>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 f8fd 	bl	80075a8 <USBD_Get_USB_Status>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	4611      	mov	r1, r2
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fa fd5b 	bl	8001e96 <HAL_PCD_EP_SetStall>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f8de 	bl	80075a8 <USBD_Get_USB_Status>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007414:	78fa      	ldrb	r2, [r7, #3]
 8007416:	4611      	mov	r1, r2
 8007418:	4618      	mov	r0, r3
 800741a:	f7fa fd9f 	bl	8001f5c <HAL_PCD_EP_ClrStall>
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f8bf 	bl	80075a8 <USBD_Get_USB_Status>
 800742a:	4603      	mov	r3, r0
 800742c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800742e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800744a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800744c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007450:	2b00      	cmp	r3, #0
 8007452:	da0b      	bge.n	800746c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800745a:	68f9      	ldr	r1, [r7, #12]
 800745c:	4613      	mov	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	3316      	adds	r3, #22
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	e00b      	b.n	8007484 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	4613      	mov	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007482:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074aa:	78fa      	ldrb	r2, [r7, #3]
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fa fb8c 	bl	8001bcc <HAL_PCD_SetAddress>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f874 	bl	80075a8 <USBD_Get_USB_Status>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b086      	sub	sp, #24
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	460b      	mov	r3, r1
 80074dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80074ec:	7af9      	ldrb	r1, [r7, #11]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	f7fa fc96 	bl	8001e22 <HAL_PCD_EP_Transmit>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f853 	bl	80075a8 <USBD_Get_USB_Status>
 8007502:	4603      	mov	r3, r0
 8007504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007506:	7dbb      	ldrb	r3, [r7, #22]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	460b      	mov	r3, r1
 800751e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800752e:	7af9      	ldrb	r1, [r7, #11]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	f7fa fc22 	bl	8001d7c <HAL_PCD_EP_Receive>
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 f832 	bl	80075a8 <USBD_Get_USB_Status>
 8007544:	4603      	mov	r3, r0
 8007546:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007548:	7dbb      	ldrb	r3, [r7, #22]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7fa fc42 	bl	8001df2 <HAL_PCD_EP_GetRxCount>
 800756e:	4603      	mov	r3, r0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007580:	4b03      	ldr	r3, [pc, #12]	; (8007590 <USBD_static_malloc+0x18>)
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	20000f38 	.word	0x20000f38

08007594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]

}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d817      	bhi.n	80075ec <USBD_Get_USB_Status+0x44>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBD_Get_USB_Status+0x1c>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075db 	.word	0x080075db
 80075cc:	080075e1 	.word	0x080075e1
 80075d0:	080075e7 	.word	0x080075e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
    break;
 80075d8:	e00b      	b.n	80075f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075da:	2303      	movs	r3, #3
 80075dc:	73fb      	strb	r3, [r7, #15]
    break;
 80075de:	e008      	b.n	80075f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075e0:	2301      	movs	r3, #1
 80075e2:	73fb      	strb	r3, [r7, #15]
    break;
 80075e4:	e005      	b.n	80075f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075e6:	2303      	movs	r3, #3
 80075e8:	73fb      	strb	r3, [r7, #15]
    break;
 80075ea:	e002      	b.n	80075f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075ec:	2303      	movs	r3, #3
 80075ee:	73fb      	strb	r3, [r7, #15]
    break;
 80075f0:	bf00      	nop
  }
  return usb_status;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <memset>:
 8007600:	4402      	add	r2, r0
 8007602:	4603      	mov	r3, r0
 8007604:	4293      	cmp	r3, r2
 8007606:	d100      	bne.n	800760a <memset+0xa>
 8007608:	4770      	bx	lr
 800760a:	f803 1b01 	strb.w	r1, [r3], #1
 800760e:	e7f9      	b.n	8007604 <memset+0x4>

08007610 <__libc_init_array>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	4d0d      	ldr	r5, [pc, #52]	; (8007648 <__libc_init_array+0x38>)
 8007614:	4c0d      	ldr	r4, [pc, #52]	; (800764c <__libc_init_array+0x3c>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	2600      	movs	r6, #0
 800761c:	42a6      	cmp	r6, r4
 800761e:	d109      	bne.n	8007634 <__libc_init_array+0x24>
 8007620:	4d0b      	ldr	r5, [pc, #44]	; (8007650 <__libc_init_array+0x40>)
 8007622:	4c0c      	ldr	r4, [pc, #48]	; (8007654 <__libc_init_array+0x44>)
 8007624:	f000 f818 	bl	8007658 <_init>
 8007628:	1b64      	subs	r4, r4, r5
 800762a:	10a4      	asrs	r4, r4, #2
 800762c:	2600      	movs	r6, #0
 800762e:	42a6      	cmp	r6, r4
 8007630:	d105      	bne.n	800763e <__libc_init_array+0x2e>
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	f855 3b04 	ldr.w	r3, [r5], #4
 8007638:	4798      	blx	r3
 800763a:	3601      	adds	r6, #1
 800763c:	e7ee      	b.n	800761c <__libc_init_array+0xc>
 800763e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007642:	4798      	blx	r3
 8007644:	3601      	adds	r6, #1
 8007646:	e7f2      	b.n	800762e <__libc_init_array+0x1e>
 8007648:	080076d0 	.word	0x080076d0
 800764c:	080076d0 	.word	0x080076d0
 8007650:	080076d0 	.word	0x080076d0
 8007654:	080076d4 	.word	0x080076d4

08007658 <_init>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr

08007664 <_fini>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr
