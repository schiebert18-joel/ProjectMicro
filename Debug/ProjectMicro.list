
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a16c  0800a16c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d4  0800a1d4  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1d4  0800a1d4  0001a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1dc  0800a1dc  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  0800a1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001408  20000154  0800a338  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000155c  0800a338  0002155c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001818e  00000000  00000000  000201c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c78  00000000  00000000  00038355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ef  00000000  00000000  0003d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b593  00000000  00000000  0003e6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce47  00000000  00000000  00059c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eb05  00000000  00000000  00076a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f80  00000000  00000000  00115598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0011b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000154 	.word	0x20000154
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a154 	.word	0x0800a154

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000158 	.word	0x20000158
 80001d4:	0800a154 	.word	0x0800a154

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <en_InitENG>:

#include "Engines.h"
#include "stdlib.h"


void en_InitENG(_sEng *engines,void (*PWM_set)(uint16_t dCycle), void(*PIN_set)(_eEngState state), uint16_t max_Speed){
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	807b      	strh	r3, [r7, #2]

	engines->estado  = FREE;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2202      	movs	r2, #2
 80004e6:	701a      	strb	r2, [r3, #0]
	engines->setPins = PIN_set; /*!< seteo en setPins (de la estructura) en el motor correspondiente, la direccion de la funcion del main.c (MotorL_SetPIN) */
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	60da      	str	r2, [r3, #12]
	engines->setPWM  = PWM_set;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	611a      	str	r2, [r3, #16]
	engines->speed	 = 0;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
	engines->maxSpeed= max_Speed;
 80004fa:	887a      	ldrh	r2, [r7, #2]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	609a      	str	r2, [r3, #8]

}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <en_HandlerENG>:

void en_HandlerENG(_sEng *engines, int32_t newspeed, uint8_t freno){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	4613      	mov	r3, r2
 8000518:	71fb      	strb	r3, [r7, #7]

	if(engines->setPins == NULL || engines->setPWM == NULL)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d059      	beq.n	80005d6 <en_HandlerENG+0xca>
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d055      	beq.n	80005d6 <en_HandlerENG+0xca>
		return;

	if(newspeed == engines->speed)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	429a      	cmp	r2, r3
 8000532:	d052      	beq.n	80005da <en_HandlerENG+0xce>
		return;

	if(freno == 1){
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d103      	bne.n	8000542 <en_HandlerENG+0x36>
		engines->estado = BRAKE;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2203      	movs	r2, #3
 800053e:	701a      	strb	r2, [r3, #0]
		return;
 8000540:	e04c      	b.n	80005dc <en_HandlerENG+0xd0>
	}

	if(newspeed > engines->maxSpeed)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	689a      	ldr	r2, [r3, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	429a      	cmp	r2, r3
 800054a:	d202      	bcs.n	8000552 <en_HandlerENG+0x46>
		newspeed = engines->maxSpeed;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	60bb      	str	r3, [r7, #8]

	if(newspeed < engines->maxSpeed*-1)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	425a      	negs	r2, r3
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	429a      	cmp	r2, r3
 800055c:	d903      	bls.n	8000566 <en_HandlerENG+0x5a>
		newspeed = engines->maxSpeed*-1;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	425b      	negs	r3, r3
 8000564:	60bb      	str	r3, [r7, #8]

	engines->speed = newspeed;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	605a      	str	r2, [r3, #4]

	if(newspeed < 0){
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	2b00      	cmp	r3, #0
 8000570:	da10      	bge.n	8000594 <en_HandlerENG+0x88>
		engines->estado = BACK;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		engines->setPins(BACK);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	2001      	movs	r0, #1
 800057e:	4798      	blx	r3
		engines->setPWM((uint16_t)(engines->speed*-1));
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	6852      	ldr	r2, [r2, #4]
 8000588:	b292      	uxth	r2, r2
 800058a:	4252      	negs	r2, r2
 800058c:	b292      	uxth	r2, r2
 800058e:	4610      	mov	r0, r2
 8000590:	4798      	blx	r3
 8000592:	e023      	b.n	80005dc <en_HandlerENG+0xd0>
	}else if(newspeed > 0){
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	2b00      	cmp	r3, #0
 8000598:	dd0e      	ble.n	80005b8 <en_HandlerENG+0xac>
		engines->estado = FRONT;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
		engines->setPins(FRONT);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	2000      	movs	r0, #0
 80005a6:	4798      	blx	r3
		engines->setPWM((uint16_t)engines->speed);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	6852      	ldr	r2, [r2, #4]
 80005b0:	b292      	uxth	r2, r2
 80005b2:	4610      	mov	r0, r2
 80005b4:	4798      	blx	r3
 80005b6:	e011      	b.n	80005dc <en_HandlerENG+0xd0>
	}else if(newspeed==0){
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10e      	bne.n	80005dc <en_HandlerENG+0xd0>
		engines->estado = FREE;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2202      	movs	r2, #2
 80005c2:	701a      	strb	r2, [r3, #0]
		engines->setPins(FREE);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	2002      	movs	r0, #2
 80005ca:	4798      	blx	r3
		engines->setPWM(0);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	691b      	ldr	r3, [r3, #16]
 80005d0:	2000      	movs	r0, #0
 80005d2:	4798      	blx	r3
 80005d4:	e002      	b.n	80005dc <en_HandlerENG+0xd0>
		return;
 80005d6:	bf00      	nop
 80005d8:	e000      	b.n	80005dc <en_HandlerENG+0xd0>
		return;
 80005da:	bf00      	nop
	}

}
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <CommInitProtocol>:

_work w;
_sDato *datosComLib;
_eProtocolo estadoProtocolo;

void CommInitProtocol(_sDato *datosCom,uint8_t ringbuff){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
		datosCom->Rx.buffercomm = malloc(ringbuff);
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 fcb6 	bl	8009f64 <malloc>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	611a      	str	r2, [r3, #16]
	    datosCom->Tx.buffercomm = malloc(ringbuff);
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4618      	mov	r0, r3
 8000604:	f009 fcae 	bl	8009f64 <malloc>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	609a      	str	r2, [r3, #8]
	    datosComLib=datosCom;
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <CommInitProtocol+0x3c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000174 	.word	0x20000174

08000624 <CommDatafromUSB>:
 *
 * @param: *buf, el buffer que posee la informacion para recibirla en el buffer de recepcion
 * @param: length, largo del buffer
 */

void CommDatafromUSB(uint8_t *buf, uint16_t length){
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000630:	2300      	movs	r3, #0
 8000632:	81fb      	strh	r3, [r7, #14]
 8000634:	e014      	b.n	8000660 <CommDatafromUSB+0x3c>
	  datosComLib->Rx.buffercomm[datosComLib->Rx.indexWrite] = buf[i];
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	441a      	add	r2, r3
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <CommDatafromUSB+0x54>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	691b      	ldr	r3, [r3, #16]
 8000642:	490d      	ldr	r1, [pc, #52]	; (8000678 <CommDatafromUSB+0x54>)
 8000644:	6809      	ldr	r1, [r1, #0]
 8000646:	7b09      	ldrb	r1, [r1, #12]
 8000648:	440b      	add	r3, r1
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	701a      	strb	r2, [r3, #0]
	  datosComLib->Rx.indexWrite++;
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <CommDatafromUSB+0x54>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	7b1a      	ldrb	r2, [r3, #12]
 8000654:	3201      	adds	r2, #1
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	731a      	strb	r2, [r3, #12]
  for (i = 0; i < length; i++) {
 800065a:	89fb      	ldrh	r3, [r7, #14]
 800065c:	3301      	adds	r3, #1
 800065e:	81fb      	strh	r3, [r7, #14]
 8000660:	89fa      	ldrh	r2, [r7, #14]
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	429a      	cmp	r2, r3
 8000666:	d3e6      	bcc.n	8000636 <CommDatafromUSB+0x12>
  }

}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000174 	.word	0x20000174

0800067c <CommDecodeHeader>:
 * @brief: 	Máquina de estados que busca: 'U', 'N', 'E', 'R', nBytes, ':', Payload, Checksum. Si todo es válido,
 * 		  	llama a: decodeData(datosCom);
 *
 *  @param: _sDato *datosComLib, estructura donde tengo toda la informacion
 */
void CommDecodeHeader(_sDato *datosComLib){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;		/*!< Variable estática para recordar cuántos bytes de payload quedan por procesar */

    uint8_t indexWriteRxCopy = datosComLib->Rx.indexWrite; /*!< Guardo una copia del índice de escritura para no interferir con interrupciones */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b1b      	ldrb	r3, [r3, #12]
 8000688:	73fb      	strb	r3, [r7, #15]

    while (datosComLib->Rx.indexRead!=indexWriteRxCopy)
 800068a:	e0df      	b.n	800084c <CommDecodeHeader+0x1d0>
    {
        switch (estadoProtocolo) {	/*!< Mientras haya nuevos datos no leídos en el buffer de recepción... */
 800068c:	4b75      	ldr	r3, [pc, #468]	; (8000864 <CommDecodeHeader+0x1e8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b06      	cmp	r3, #6
 8000692:	f200 80d7 	bhi.w	8000844 <CommDecodeHeader+0x1c8>
 8000696:	a201      	add	r2, pc, #4	; (adr r2, 800069c <CommDecodeHeader+0x20>)
 8000698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069c:	080006b9 	.word	0x080006b9
 80006a0:	080006e1 	.word	0x080006e1
 80006a4:	08000715 	.word	0x08000715
 80006a8:	08000749 	.word	0x08000749
 80006ac:	0800077d 	.word	0x0800077d
 80006b0:	080007a5 	.word	0x080007a5
 80006b4:	080007e7 	.word	0x080007e7
            case START:
                if (datosComLib->Rx.buffercomm[datosComLib->Rx.indexRead++]=='U'){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	691a      	ldr	r2, [r3, #16]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7b5b      	ldrb	r3, [r3, #13]
 80006c0:	1c59      	adds	r1, r3, #1
 80006c2:	b2c8      	uxtb	r0, r1
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	7348      	strb	r0, [r1, #13]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b55      	cmp	r3, #85	; 0x55
 80006ce:	f040 80bd 	bne.w	800084c <CommDecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 80006d2:	4b64      	ldr	r3, [pc, #400]	; (8000864 <CommDecodeHeader+0x1e8>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
                    datosComLib->cheksumRx=0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	709a      	strb	r2, [r3, #2]
                }
                break;
 80006de:	e0b5      	b.n	800084c <CommDecodeHeader+0x1d0>
            case HEADER_1:
                if (datosComLib->Rx.buffercomm[datosComLib->Rx.indexRead++]=='N')
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	691a      	ldr	r2, [r3, #16]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7b5b      	ldrb	r3, [r3, #13]
 80006e8:	1c59      	adds	r1, r3, #1
 80006ea:	b2c8      	uxtb	r0, r1
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	7348      	strb	r0, [r1, #13]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b4e      	cmp	r3, #78	; 0x4e
 80006f6:	d103      	bne.n	8000700 <CommDecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 80006f8:	4b5a      	ldr	r3, [pc, #360]	; (8000864 <CommDecodeHeader+0x1e8>)
 80006fa:	2202      	movs	r2, #2
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e0a5      	b.n	800084c <CommDecodeHeader+0x1d0>
                else{
                	datosComLib->Rx.indexRead--;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7b5b      	ldrb	r3, [r3, #13]
 8000704:	3b01      	subs	r3, #1
 8000706:	b2da      	uxtb	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	735a      	strb	r2, [r3, #13]
                    estadoProtocolo=START;
 800070c:	4b55      	ldr	r3, [pc, #340]	; (8000864 <CommDecodeHeader+0x1e8>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000712:	e09b      	b.n	800084c <CommDecodeHeader+0x1d0>
            case HEADER_2:
                if (datosComLib->Rx.buffercomm[datosComLib->Rx.indexRead++]=='E')
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7b5b      	ldrb	r3, [r3, #13]
 800071c:	1c59      	adds	r1, r3, #1
 800071e:	b2c8      	uxtb	r0, r1
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	7348      	strb	r0, [r1, #13]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b45      	cmp	r3, #69	; 0x45
 800072a:	d103      	bne.n	8000734 <CommDecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 800072c:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <CommDecodeHeader+0x1e8>)
 800072e:	2203      	movs	r2, #3
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e08b      	b.n	800084c <CommDecodeHeader+0x1d0>
                else{
                	datosComLib->Rx.indexRead--;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7b5b      	ldrb	r3, [r3, #13]
 8000738:	3b01      	subs	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	735a      	strb	r2, [r3, #13]
                   estadoProtocolo=START;
 8000740:	4b48      	ldr	r3, [pc, #288]	; (8000864 <CommDecodeHeader+0x1e8>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000746:	e081      	b.n	800084c <CommDecodeHeader+0x1d0>
			case HEADER_3:
				if (datosComLib->Rx.buffercomm[datosComLib->Rx.indexRead++]=='R')
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7b5b      	ldrb	r3, [r3, #13]
 8000750:	1c59      	adds	r1, r3, #1
 8000752:	b2c8      	uxtb	r0, r1
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	7348      	strb	r0, [r1, #13]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b52      	cmp	r3, #82	; 0x52
 800075e:	d103      	bne.n	8000768 <CommDecodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <CommDecodeHeader+0x1e8>)
 8000762:	2204      	movs	r2, #4
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e071      	b.n	800084c <CommDecodeHeader+0x1d0>
				else{
					datosComLib->Rx.indexRead--;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7b5b      	ldrb	r3, [r3, #13]
 800076c:	3b01      	subs	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	735a      	strb	r2, [r3, #13]
				    estadoProtocolo=START;
 8000774:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <CommDecodeHeader+0x1e8>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
				}
            break;
 800077a:	e067      	b.n	800084c <CommDecodeHeader+0x1d0>
            case NBYTES: /*!< Leer byte de cantidad de datos (nBytes) y avanzar */
            	datosComLib->indexStart=datosComLib->Rx.indexRead;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7b5a      	ldrb	r2, [r3, #13]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	705a      	strb	r2, [r3, #1]
                nBytes=datosComLib->Rx.buffercomm[datosComLib->Rx.indexRead++];
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	691a      	ldr	r2, [r3, #16]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7b5b      	ldrb	r3, [r3, #13]
 800078c:	1c59      	adds	r1, r3, #1
 800078e:	b2c8      	uxtb	r0, r1
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	7348      	strb	r0, [r1, #13]
 8000794:	4413      	add	r3, r2
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	4b33      	ldr	r3, [pc, #204]	; (8000868 <CommDecodeHeader+0x1ec>)
 800079a:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <CommDecodeHeader+0x1e8>)
 800079e:	2205      	movs	r2, #5
 80007a0:	701a      	strb	r2, [r3, #0]
                break;
 80007a2:	e053      	b.n	800084c <CommDecodeHeader+0x1d0>
            case TOKEN:
                if (datosComLib->Rx.buffercomm[datosComLib->Rx.indexRead++]==':'){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	691a      	ldr	r2, [r3, #16]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7b5b      	ldrb	r3, [r3, #13]
 80007ac:	1c59      	adds	r1, r3, #1
 80007ae:	b2c8      	uxtb	r0, r1
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	7348      	strb	r0, [r1, #13]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b3a      	cmp	r3, #58	; 0x3a
 80007ba:	d10a      	bne.n	80007d2 <CommDecodeHeader+0x156>

                   estadoProtocolo=PAYLOAD;
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <CommDecodeHeader+0x1e8>)
 80007be:	2206      	movs	r2, #6
 80007c0:	701a      	strb	r2, [r3, #0]
                   datosComLib->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <CommDecodeHeader+0x1ec>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	709a      	strb	r2, [r3, #2]
 80007d0:	e03c      	b.n	800084c <CommDecodeHeader+0x1d0>
                }
                else{
                	datosComLib->Rx.indexRead--;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7b5b      	ldrb	r3, [r3, #13]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	735a      	strb	r2, [r3, #13]
                    estadoProtocolo=START;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <CommDecodeHeader+0x1e8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
                }
                break;
 80007e4:	e032      	b.n	800084c <CommDecodeHeader+0x1d0>
            case PAYLOAD:

                if (nBytes>1){
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <CommDecodeHeader+0x1ec>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d90f      	bls.n	800080e <CommDecodeHeader+0x192>
                	datosComLib->cheksumRx ^= datosComLib->Rx.buffercomm[datosComLib->Rx.indexRead++];
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691a      	ldr	r2, [r3, #16]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7b5b      	ldrb	r3, [r3, #13]
 80007f6:	1c59      	adds	r1, r3, #1
 80007f8:	b2c8      	uxtb	r0, r1
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	7348      	strb	r0, [r1, #13]
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	4053      	eors	r3, r2
 8000808:	b2da      	uxtb	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <CommDecodeHeader+0x1ec>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3b01      	subs	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <CommDecodeHeader+0x1ec>)
 8000818:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){ /*!< Cuando ya se leyeron todos los datos, compara el checksum. Si es correcto, llama a decodeData() para procesar el mensaje. */
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <CommDecodeHeader+0x1ec>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d114      	bne.n	800084c <CommDecodeHeader+0x1d0>
                    estadoProtocolo=START;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <CommDecodeHeader+0x1e8>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
                    if(datosComLib->cheksumRx == datosComLib->Rx.buffercomm[datosComLib->Rx.indexRead]){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	789a      	ldrb	r2, [r3, #2]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	7b49      	ldrb	r1, [r1, #13]
 8000834:	440b      	add	r3, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	d107      	bne.n	800084c <CommDecodeHeader+0x1d0>
                        CommDecodeData(datosComLib);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f815 	bl	800086c <CommDecodeData>
                    }
                }

                break;
 8000842:	e003      	b.n	800084c <CommDecodeHeader+0x1d0>
            default:
                estadoProtocolo=START;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <CommDecodeHeader+0x1e8>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
                break;
 800084a:	bf00      	nop
    while (datosComLib->Rx.indexRead!=indexWriteRxCopy)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7b5b      	ldrb	r3, [r3, #13]
 8000850:	7bfa      	ldrb	r2, [r7, #15]
 8000852:	429a      	cmp	r2, r3
 8000854:	f47f af1a 	bne.w	800068c <CommDecodeHeader+0x10>
        }
    }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000178 	.word	0x20000178
 8000868:	20000179 	.word	0x20000179

0800086c <CommDecodeData>:

/**
 * @brief responde segun el ID recibido.
 *
 */
void CommDecodeData(_sDato *datosComLib){
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    uint8_t bufAux[20], indiceAux=0,bytes=0;
 8000874:	2300      	movs	r3, #0
 8000876:	77bb      	strb	r3, [r7, #30]
 8000878:	2300      	movs	r3, #0
 800087a:	77fb      	strb	r3, [r7, #31]

    switch (datosComLib->Rx.buffercomm[datosComLib->indexStart+2])/*!< CMD EN LA POSICION 2, /ID EN LA POSICION 2, porque es donde se adjunta el byte que te dice "ALIVE, FIRMWARE, ETC" */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	3302      	adds	r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2bf1      	cmp	r3, #241	; 0xf1
 800088c:	d018      	beq.n	80008c0 <CommDecodeData+0x54>
 800088e:	2bf1      	cmp	r3, #241	; 0xf1
 8000890:	dc42      	bgt.n	8000918 <CommDecodeData+0xac>
 8000892:	2ba0      	cmp	r3, #160	; 0xa0
 8000894:	d01f      	beq.n	80008d6 <CommDecodeData+0x6a>
 8000896:	2bf0      	cmp	r3, #240	; 0xf0
 8000898:	d13e      	bne.n	8000918 <CommDecodeData+0xac>
    {

	case ALIVE:
		bufAux[indiceAux++] = ALIVE;   	/*!< ID de respuesta */
 800089a:	7fbb      	ldrb	r3, [r7, #30]
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	77ba      	strb	r2, [r7, #30]
 80008a0:	3320      	adds	r3, #32
 80008a2:	443b      	add	r3, r7
 80008a4:	22f0      	movs	r2, #240	; 0xf0
 80008a6:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = 0x0D;    	/*!< Respuesta: ACK */
 80008aa:	7fbb      	ldrb	r3, [r7, #30]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	77ba      	strb	r2, [r7, #30]
 80008b0:	3320      	adds	r3, #32
 80008b2:	443b      	add	r3, r7
 80008b4:	220d      	movs	r2, #13
 80008b6:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 0x03;        			/*!< NBYTES = 3 (ID + Dato + Checksum) */
 80008ba:	2303      	movs	r3, #3
 80008bc:	77fb      	strb	r3, [r7, #31]
	break;
 80008be:	e036      	b.n	800092e <CommDecodeData+0xc2>

    case FIRMWARE:
		bufAux[indiceAux++]=FIRMWARE;
 80008c0:	7fbb      	ldrb	r3, [r7, #30]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	77ba      	strb	r2, [r7, #30]
 80008c6:	3320      	adds	r3, #32
 80008c8:	443b      	add	r3, r7
 80008ca:	22f1      	movs	r2, #241	; 0xf1
 80008cc:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80008d0:	2302      	movs	r3, #2
 80008d2:	77fb      	strb	r3, [r7, #31]
    break;
 80008d4:	e02b      	b.n	800092e <CommDecodeData+0xc2>

    break;

    case IR:
		bufAux[indiceAux++] = IR;
 80008d6:	7fbb      	ldrb	r3, [r7, #30]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	77ba      	strb	r2, [r7, #30]
 80008dc:	3320      	adds	r3, #32
 80008de:	443b      	add	r3, r7
 80008e0:	22a0      	movs	r2, #160	; 0xa0
 80008e2:	f803 2c18 	strb.w	r2, [r3, #-24]
		//w.u16[0] = IRsensor.bufferADCvalue[0];
		bufAux[indiceAux++] = w.u8[0];
 80008e6:	7fbb      	ldrb	r3, [r7, #30]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	77ba      	strb	r2, [r7, #30]
 80008ec:	4619      	mov	r1, r3
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <CommDecodeData+0xd8>)
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	f101 0320 	add.w	r3, r1, #32
 80008f6:	443b      	add	r3, r7
 80008f8:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++] = w.u8[1];
 80008fc:	7fbb      	ldrb	r3, [r7, #30]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	77ba      	strb	r2, [r7, #30]
 8000902:	4619      	mov	r1, r3
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <CommDecodeData+0xd8>)
 8000906:	785a      	ldrb	r2, [r3, #1]
 8000908:	f101 0320 	add.w	r3, r1, #32
 800090c:	443b      	add	r3, r7
 800090e:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes = 3;
 8000912:	2303      	movs	r3, #3
 8000914:	77fb      	strb	r3, [r7, #31]
	break;
 8000916:	e00a      	b.n	800092e <CommDecodeData+0xc2>

    default:
        bufAux[indiceAux++]=0xFF;
 8000918:	7fbb      	ldrb	r3, [r7, #30]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	77ba      	strb	r2, [r7, #30]
 800091e:	3320      	adds	r3, #32
 8000920:	443b      	add	r3, r7
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000928:	2302      	movs	r3, #2
 800092a:	77fb      	strb	r3, [r7, #31]
    break;
 800092c:	bf00      	nop
    }

    CommSendInfo(bufAux,bytes);
 800092e:	7ffa      	ldrb	r2, [r7, #31]
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f806 	bl	8000948 <CommSendInfo>
}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000170 	.word	0x20000170

08000948 <CommSendInfo>:

//calculo y envio el checksum
void CommSendInfo(uint8_t bufferAux[], uint8_t bytes){
 8000948:	b490      	push	{r4, r7}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[20], indiceAux=0,cks=0,i=0;
 8000954:	2300      	movs	r3, #0
 8000956:	77fb      	strb	r3, [r7, #31]
 8000958:	2300      	movs	r3, #0
 800095a:	77bb      	strb	r3, [r7, #30]
 800095c:	2300      	movs	r3, #0
 800095e:	777b      	strb	r3, [r7, #29]

    bufAux[indiceAux++]='U';
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	77fa      	strb	r2, [r7, #31]
 8000966:	3320      	adds	r3, #32
 8000968:	443b      	add	r3, r7
 800096a:	2255      	movs	r2, #85	; 0x55
 800096c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000970:	7ffb      	ldrb	r3, [r7, #31]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	77fa      	strb	r2, [r7, #31]
 8000976:	3320      	adds	r3, #32
 8000978:	443b      	add	r3, r7
 800097a:	224e      	movs	r2, #78	; 0x4e
 800097c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	77fa      	strb	r2, [r7, #31]
 8000986:	3320      	adds	r3, #32
 8000988:	443b      	add	r3, r7
 800098a:	2245      	movs	r2, #69	; 0x45
 800098c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000990:	7ffb      	ldrb	r3, [r7, #31]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	77fa      	strb	r2, [r7, #31]
 8000996:	3320      	adds	r3, #32
 8000998:	443b      	add	r3, r7
 800099a:	2252      	movs	r2, #82	; 0x52
 800099c:	f803 2c18 	strb.w	r2, [r3, #-24]

    bufAux[indiceAux++]=bytes;
 80009a0:	7ffb      	ldrb	r3, [r7, #31]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	77fa      	strb	r2, [r7, #31]
 80009a6:	3320      	adds	r3, #32
 80009a8:	443b      	add	r3, r7
 80009aa:	78fa      	ldrb	r2, [r7, #3]
 80009ac:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	77fa      	strb	r2, [r7, #31]
 80009b6:	3320      	adds	r3, #32
 80009b8:	443b      	add	r3, r7
 80009ba:	223a      	movs	r2, #58	; 0x3a
 80009bc:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(i=0; i<bytes-1; i++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	777b      	strb	r3, [r7, #29]
 80009c4:	e00d      	b.n	80009e2 <CommSendInfo+0x9a>
        bufAux[indiceAux++] = bufferAux[i];
 80009c6:	7f7b      	ldrb	r3, [r7, #29]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	441a      	add	r2, r3
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	1c59      	adds	r1, r3, #1
 80009d0:	77f9      	strb	r1, [r7, #31]
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	3320      	adds	r3, #32
 80009d6:	443b      	add	r3, r7
 80009d8:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(i=0; i<bytes-1; i++)
 80009dc:	7f7b      	ldrb	r3, [r7, #29]
 80009de:	3301      	adds	r3, #1
 80009e0:	777b      	strb	r3, [r7, #29]
 80009e2:	7f7a      	ldrb	r2, [r7, #29]
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbec      	blt.n	80009c6 <CommSendInfo+0x7e>


    cks	= 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	77bb      	strb	r3, [r7, #30]

    /*!< Cargar en Tx.buffercomm con checksum: */
    for(i=0 ;i<indiceAux;i++){
 80009f0:	2300      	movs	r3, #0
 80009f2:	777b      	strb	r3, [r7, #29]
 80009f4:	e01c      	b.n	8000a30 <CommSendInfo+0xe8>
        cks^= bufAux[i];
 80009f6:	7f7b      	ldrb	r3, [r7, #29]
 80009f8:	3320      	adds	r3, #32
 80009fa:	443b      	add	r3, r7
 80009fc:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000a00:	7fbb      	ldrb	r3, [r7, #30]
 8000a02:	4053      	eors	r3, r2
 8000a04:	77bb      	strb	r3, [r7, #30]
        datosComLib->Tx.buffercomm[datosComLib->Tx.indexWrite++]=bufAux[i];
 8000a06:	7f79      	ldrb	r1, [r7, #29]
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <CommSendInfo+0x11c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6898      	ldr	r0, [r3, #8]
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <CommSendInfo+0x11c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	791a      	ldrb	r2, [r3, #4]
 8000a14:	1c54      	adds	r4, r2, #1
 8000a16:	b2e4      	uxtb	r4, r4
 8000a18:	711c      	strb	r4, [r3, #4]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	4403      	add	r3, r0
 8000a1e:	f101 0220 	add.w	r2, r1, #32
 8000a22:	443a      	add	r2, r7
 8000a24:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000a28:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000a2a:	7f7b      	ldrb	r3, [r7, #29]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	777b      	strb	r3, [r7, #29]
 8000a30:	7f7a      	ldrb	r2, [r7, #29]
 8000a32:	7ffb      	ldrb	r3, [r7, #31]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d3de      	bcc.n	80009f6 <CommSendInfo+0xae>
    }

     datosComLib->Tx.buffercomm[datosComLib->Tx.indexWrite++]=cks; /*!< Agregar el checksum al final */
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <CommSendInfo+0x11c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6899      	ldr	r1, [r3, #8]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <CommSendInfo+0x11c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	791a      	ldrb	r2, [r3, #4]
 8000a44:	1c50      	adds	r0, r2, #1
 8000a46:	b2c0      	uxtb	r0, r0
 8000a48:	7118      	strb	r0, [r3, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	7fba      	ldrb	r2, [r7, #30]
 8000a50:	701a      	strb	r2, [r3, #0]
     datosComLib->bytesTosend=indiceAux; /*!< Cantidad total de bytes a transmitir (incluyendo checksum)*/
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <CommSendInfo+0x11c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	7ffa      	ldrb	r2, [r7, #31]
 8000a58:	751a      	strb	r2, [r3, #20]


//    CDC_Transmit_FS(&datosComSerie.Tx.buffercomm[datosComSerie.Tx.indexRead], datosComSerie.bytesTosend); //transmision por USB hacia QT
//    datosComSerie.Tx.indexWrite = 0;

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc90      	pop	{r4, r7}
 8000a62:	4770      	bx	lr
 8000a64:	20000174 	.word	0x20000174

08000a68 <HAL_TIM_PeriodElapsedCallback>:
void MotorR_SetPIN(_eEngState estado);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d104      	bne.n	8000a84 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000a7a:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a7c:	7813      	ldrb	r3, [r2, #0]
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a82:	7013      	strb	r3, [r2, #0]
	}

}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	40010000 	.word	0x40010000
 8000a94:	200003c8 	.word	0x200003c8

08000a98 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	//			adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3],
	//			adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
	//
	//
	//	CDC_Transmit_FS((uint8_t*)usbMsg, strlen(usbMsg));
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aba:	f000 ff3d 	bl	8001938 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_Attach_Rx(&CommDatafromUSB);
 8000abe:	4841      	ldr	r0, [pc, #260]	; (8000bc4 <main+0x118>)
 8000ac0:	f008 fe26 	bl	8009710 <CDC_Attach_Rx>
  CommInitProtocol(&datosComSerie,(uint8_t) RINGBUFFER);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4840      	ldr	r0, [pc, #256]	; (8000bc8 <main+0x11c>)
 8000ac8:	f7ff fd8c 	bl	80005e4 <CommInitProtocol>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f898 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f000 faf0 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad4:	f000 fab0 	bl	8001038 <MX_DMA_Init>
  MX_TIM1_Init();
 8000ad8:	f000 f9dc 	bl	8000e94 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000adc:	f008 fcc4 	bl	8009468 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000ae0:	f000 f8f6 	bl	8000cd0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ae4:	f000 fa26 	bl	8000f34 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000ae8:	f000 f9a6 	bl	8000e38 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000aec:	4837      	ldr	r0, [pc, #220]	; (8000bcc <main+0x120>)
 8000aee:	f004 fa19 	bl	8004f24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000af2:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <main+0x124>)
 8000af4:	f004 fa16 	bl	8004f24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000af8:	2104      	movs	r1, #4
 8000afa:	4835      	ldr	r0, [pc, #212]	; (8000bd0 <main+0x124>)
 8000afc:	f004 face 	bl	800509c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b00:	2100      	movs	r1, #0
 8000b02:	4833      	ldr	r0, [pc, #204]	; (8000bd0 <main+0x124>)
 8000b04:	f004 faca 	bl	800509c <HAL_TIM_PWM_Start>
  en_InitENG(&motorL, &MotorL_SetPWM, &MotorL_SetPIN, htim3.Instance->ARR); /*!< asigno a cada motor una direccio de memoria para manejarlo desde la lib */
 8000b08:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <main+0x124>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <main+0x128>)
 8000b12:	4931      	ldr	r1, [pc, #196]	; (8000bd8 <main+0x12c>)
 8000b14:	4831      	ldr	r0, [pc, #196]	; (8000bdc <main+0x130>)
 8000b16:	f7ff fcdd 	bl	80004d4 <en_InitENG>
  en_InitENG(&motorR, &MotorR_SetPWM, &MotorR_SetPIN, htim3.Instance->ARR); /*!< En donde, (htim3.Instance->ARR) es el valor maximo de PWM */
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <main+0x124>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <main+0x134>)
 8000b24:	492f      	ldr	r1, [pc, #188]	; (8000be4 <main+0x138>)
 8000b26:	4830      	ldr	r0, [pc, #192]	; (8000be8 <main+0x13c>)
 8000b28:	f7ff fcd4 	bl	80004d4 <en_InitENG>

  IS10MS = FALSE;
 8000b2c:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <main+0x140>)
 8000b2e:	7813      	ldrb	r3, [r2, #0]
 8000b30:	f36f 1386 	bfc	r3, #6, #1
 8000b34:	7013      	strb	r3, [r2, #0]
  datosComSerie.Rx.indexRead = 0;
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <main+0x11c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	735a      	strb	r2, [r3, #13]
  datosComSerie.Rx.indexWrite =0;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <main+0x11c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	731a      	strb	r2, [r3, #12]
  myFlags.allFlags = 0;
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <main+0x140>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CommComunicationsTask(&datosComSerie);
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <main+0x11c>)
 8000b4a:	f000 fb3f 	bl	80011cc <CommComunicationsTask>

	  if(IS10MS){
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <main+0x140>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f5      	beq.n	8000b48 <main+0x9c>
		  time250us++;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	71fb      	strb	r3, [r7, #7]
		  IS10MS =! IS10MS;
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <main+0x140>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf0c      	ite	eq
 8000b70:	2301      	moveq	r3, #1
 8000b72:	2300      	movne	r3, #0
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <main+0x140>)
 8000b78:	7813      	ldrb	r3, [r2, #0]
 8000b7a:	f361 1386 	bfi	r3, r1, #6, #1
 8000b7e:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b27      	cmp	r3, #39	; 0x27
 8000b84:	d9e0      	bls.n	8000b48 <main+0x9c>
			  time10ms++;
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	71bb      	strb	r3, [r7, #6]
			  time250us = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71fb      	strb	r3, [r7, #7]
			  if(time10ms == 10){
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	2b0a      	cmp	r3, #10
 8000b94:	d1d8      	bne.n	8000b48 <main+0x9c>
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9a:	4815      	ldr	r0, [pc, #84]	; (8000bf0 <main+0x144>)
 8000b9c:	f002 f97d 	bl	8002e9a <HAL_GPIO_TogglePin>
				  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&sensorIR.bufferADCvalue, NUM_CHANNELS_ADC);
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	4914      	ldr	r1, [pc, #80]	; (8000bf4 <main+0x148>)
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <main+0x14c>)
 8000ba6:	f000 ffa1 	bl	8001aec <HAL_ADC_Start_DMA>
				  en_HandlerENG(&motorR, -30000, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	4913      	ldr	r1, [pc, #76]	; (8000bfc <main+0x150>)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <main+0x13c>)
 8000bb0:	f7ff fcac 	bl	800050c <en_HandlerENG>
				  en_HandlerENG(&motorL, -30000, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4911      	ldr	r1, [pc, #68]	; (8000bfc <main+0x150>)
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <main+0x130>)
 8000bba:	f7ff fca7 	bl	800050c <en_HandlerENG>
				  time10ms = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71bb      	strb	r3, [r7, #6]
	  CommComunicationsTask(&datosComSerie);
 8000bc2:	e7c1      	b.n	8000b48 <main+0x9c>
 8000bc4:	08000625 	.word	0x08000625
 8000bc8:	200003cc 	.word	0x200003cc
 8000bcc:	20000338 	.word	0x20000338
 8000bd0:	20000380 	.word	0x20000380
 8000bd4:	0800125d 	.word	0x0800125d
 8000bd8:	080013a1 	.word	0x080013a1
 8000bdc:	200003fc 	.word	0x200003fc
 8000be0:	080012fd 	.word	0x080012fd
 8000be4:	080013c5 	.word	0x080013c5
 8000be8:	20000410 	.word	0x20000410
 8000bec:	200003c8 	.word	0x200003c8
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	200003e4 	.word	0x200003e4
 8000bf8:	2000017c 	.word	0x2000017c
 8000bfc:	ffff8ad0 	.word	0xffff8ad0

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	2230      	movs	r2, #48	; 0x30
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f009 fa5c 	bl	800a0cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <SystemClock_Config+0xc8>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <SystemClock_Config+0xc8>)
 8000c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c32:	6413      	str	r3, [r2, #64]	; 0x40
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <SystemClock_Config+0xc8>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <SystemClock_Config+0xcc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <SystemClock_Config+0xcc>)
 8000c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <SystemClock_Config+0xcc>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	2302      	movs	r3, #2
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c70:	2319      	movs	r3, #25
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c74:	23c0      	movs	r3, #192	; 0xc0
 8000c76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 fcb9 	bl	80045fc <HAL_RCC_OscConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c90:	f000 fbaa 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c94:	230f      	movs	r3, #15
 8000c96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2103      	movs	r1, #3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 ff1b 	bl	8004aec <HAL_RCC_ClockConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cbc:	f000 fb94 	bl	80013e8 <Error_Handler>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3750      	adds	r7, #80	; 0x50
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ce2:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000ce4:	4a52      	ldr	r2, [pc, #328]	; (8000e30 <MX_ADC1_Init+0x160>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ce8:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000cea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf0:	4b4e      	ldr	r3, [pc, #312]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cfc:	4b4b      	ldr	r3, [pc, #300]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d02:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0a:	4b48      	ldr	r3, [pc, #288]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d10:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d12:	4a48      	ldr	r2, [pc, #288]	; (8000e34 <MX_ADC1_Init+0x164>)
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d16:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000d1c:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d1e:	2208      	movs	r2, #8
 8000d20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d22:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d30:	483e      	ldr	r0, [pc, #248]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d32:	f000 fe97 	bl	8001a64 <HAL_ADC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f000 fb54 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4836      	ldr	r0, [pc, #216]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d52:	f000 ffd3 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d5c:	f000 fb44 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	482f      	ldr	r0, [pc, #188]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d6e:	f000 ffc5 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d78:	f000 fb36 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d80:	2303      	movs	r3, #3
 8000d82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000d8a:	f000 ffb7 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d94:	f000 fb28 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	4821      	ldr	r0, [pc, #132]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000da6:	f000 ffa9 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000db0:	f000 fb1a 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000db4:	2304      	movs	r3, #4
 8000db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000db8:	2305      	movs	r3, #5
 8000dba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481a      	ldr	r0, [pc, #104]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000dc2:	f000 ff9b 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000dcc:	f000 fb0c 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000dde:	f000 ff8d 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000de8:	f000 fafe 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dec:	2306      	movs	r3, #6
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000df0:	2307      	movs	r3, #7
 8000df2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000dfa:	f000 ff7f 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e04:	f000 faf0 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_ADC1_Init+0x15c>)
 8000e16:	f000 ff71 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000e20:	f000 fae2 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000017c 	.word	0x2000017c
 8000e30:	40012000 	.word	0x40012000
 8000e34:	0f000001 	.word	0x0f000001

08000e38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e3e:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x58>)
 8000e46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e76:	f002 f82b 	bl	8002ed0 <HAL_I2C_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e80:	f000 fab2 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000224 	.word	0x20000224
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	00061a80 	.word	0x00061a80

08000e94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <MX_TIM1_Init+0x9c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000ec4:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000ede:	f003 ffd1 	bl	8004e84 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ee8:	f000 fa7e 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000efa:	f004 fb31 	bl	8005560 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f04:	f000 fa70 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM1_Init+0x98>)
 8000f16:	f004 fee5 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f20:	f000 fa62 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000338 	.word	0x20000338
 8000f30:	40010000 	.word	0x40010000

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	; 0x38
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000f66:	4a33      	ldr	r2, [pc, #204]	; (8001034 <MX_TIM3_Init+0x100>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000f78:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8a:	4829      	ldr	r0, [pc, #164]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000f8c:	f003 ff7a 	bl	8004e84 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f96:	f000 fa27 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4822      	ldr	r0, [pc, #136]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000fa8:	f004 fada 	bl	8005560 <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fb2:	f000 fa19 	bl	80013e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fb6:	481e      	ldr	r0, [pc, #120]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000fb8:	f004 f816 	bl	8004fe8 <HAL_TIM_PWM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fc2:	f000 fa11 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000fd6:	f004 fe85 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fe0:	f000 fa02 	bl	80013e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe4:	2360      	movs	r3, #96	; 0x60
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_TIM3_Init+0xfc>)
 8000ffc:	f004 f9ee 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001006:	f000 f9ef 	bl	80013e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2204      	movs	r2, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_TIM3_Init+0xfc>)
 8001012:	f004 f9e3 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800101c:	f000 f9e4 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <MX_TIM3_Init+0xfc>)
 8001022:	f000 fb77 	bl	8001714 <HAL_TIM_MspPostInit>

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	; 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000380 	.word	0x20000380
 8001034:	40000400 	.word	0x40000400

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_DMA_Init+0x78>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <MX_DMA_Init+0x78>)
 8001048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_DMA_Init+0x78>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_DMA_Init+0x78>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MX_DMA_Init+0x78>)
 8001064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_DMA_Init+0x78>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200b      	movs	r0, #11
 800107c:	f001 f9c9 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001080:	200b      	movs	r0, #11
 8001082:	f001 f9e2 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200c      	movs	r0, #12
 800108c:	f001 f9c1 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001090:	200c      	movs	r0, #12
 8001092:	f001 f9da 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2038      	movs	r0, #56	; 0x38
 800109c:	f001 f9b9 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010a0:	2038      	movs	r0, #56	; 0x38
 80010a2:	f001 f9d2 	bl	800244a <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <MX_GPIO_Init+0x108>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <MX_GPIO_Init+0x108>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <MX_GPIO_Init+0x108>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b34      	ldr	r3, [pc, #208]	; (80011bc <MX_GPIO_Init+0x108>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a33      	ldr	r2, [pc, #204]	; (80011bc <MX_GPIO_Init+0x108>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <MX_GPIO_Init+0x108>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <MX_GPIO_Init+0x108>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <MX_GPIO_Init+0x108>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_GPIO_Init+0x108>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_GPIO_Init+0x108>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <MX_GPIO_Init+0x108>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <MX_GPIO_Init+0x108>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001140:	481f      	ldr	r0, [pc, #124]	; (80011c0 <MX_GPIO_Init+0x10c>)
 8001142:	f001 fe91 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OutEngB_1_Pin|OutEngB_2_Pin|OutEngA_2_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 800114c:	481d      	ldr	r0, [pc, #116]	; (80011c4 <MX_GPIO_Init+0x110>)
 800114e:	f001 fe8b 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2108      	movs	r1, #8
 8001156:	481c      	ldr	r0, [pc, #112]	; (80011c8 <MX_GPIO_Init+0x114>)
 8001158:	f001 fe86 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800115c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4812      	ldr	r0, [pc, #72]	; (80011c0 <MX_GPIO_Init+0x10c>)
 8001176:	f001 fcf3 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : OutEngB_1_Pin OutEngB_2_Pin OutEngA_2_Pin */
  GPIO_InitStruct.Pin = OutEngB_1_Pin|OutEngB_2_Pin|OutEngA_2_Pin;
 800117a:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_GPIO_Init+0x110>)
 8001194:	f001 fce4 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OutEngA_1_Pin */
  GPIO_InitStruct.Pin = OutEngA_1_Pin;
 8001198:	2308      	movs	r3, #8
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OutEngA_1_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_GPIO_Init+0x114>)
 80011b0:	f001 fcd6 	bl	8002b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400

080011cc <CommComunicationsTask>:

/* USER CODE BEGIN 4 */
void CommComunicationsTask(_sDato *datosCom){ 			/*!< si llegó informacion entonces llamo a decodeheader para el analisis del protocolo "UNER" */
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if(datosCom->Rx.indexRead!=datosCom->Rx.indexWrite ){	/*!< si Recepcion write =! Recepcion read => buffer lleno */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7b5a      	ldrb	r2, [r3, #13]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7b1b      	ldrb	r3, [r3, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d006      	beq.n	80011ee <CommComunicationsTask+0x22>
		CommDecodeHeader(datosCom);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fa4b 	bl	800067c <CommDecodeHeader>
		datosCom->Rx.indexRead=datosCom->Rx.indexWrite;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7b1a      	ldrb	r2, [r3, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	735a      	strb	r2, [r3, #13]
	}

	if(datosCom->Tx.indexRead!=datosCom->Tx.indexWrite ){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	795a      	ldrb	r2, [r3, #5]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d02c      	beq.n	8001254 <CommComunicationsTask+0x88>
		if(datosCom->Tx.indexWrite > datosCom->Tx.indexRead){
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	791a      	ldrb	r2, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	429a      	cmp	r2, r3
 8001204:	d908      	bls.n	8001218 <CommComunicationsTask+0x4c>
				datosCom->bytesTosend = datosCom->Tx.indexWrite - datosCom->Tx.indexRead;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791a      	ldrb	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	795b      	ldrb	r3, [r3, #5]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	751a      	strb	r2, [r3, #20]
 8001216:	e006      	b.n	8001226 <CommComunicationsTask+0x5a>
		}else{
			datosCom->bytesTosend =  sizeof(datosCom->Rx.buffercomm) - datosCom->Tx.indexRead;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	795b      	ldrb	r3, [r3, #5]
 800121c:	f1c3 0304 	rsb	r3, r3, #4
 8001220:	b2da      	uxtb	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	751a      	strb	r2, [r3, #20]
		}
		if(CDC_Transmit_FS(&datosCom->Tx.buffercomm[datosCom->Tx.indexRead], datosCom->bytesTosend) == USBD_OK){ /*!< Paquete enviado hacia QT: 55 4E 45 52   01 	 3A     F0         0D          C8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	7952      	ldrb	r2, [r2, #5]
 800122e:	441a      	add	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7d1b      	ldrb	r3, [r3, #20]
 8001234:	b29b      	uxth	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	4610      	mov	r0, r2
 800123a:	f008 fa31 	bl	80096a0 <CDC_Transmit_FS>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <CommComunicationsTask+0x88>
							 																												    'U''N''E''R''Nbytes'':''ID:Alive''Payload: ACK''Cheksum'*/
			datosCom->Tx.indexRead += datosCom->bytesTosend;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	795a      	ldrb	r2, [r3, #5]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7d1b      	ldrb	r3, [r3, #20]
 800124c:	4413      	add	r3, r2
 800124e:	b2da      	uxtb	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	715a      	strb	r2, [r3, #5]
		}
	}
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <MotorL_SetPIN>:

void MotorL_SetPIN(_eEngState estado){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	switch(motorL.estado){
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MotorL_SetPIN+0x94>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b03      	cmp	r3, #3
 800126c:	d83a      	bhi.n	80012e4 <MotorL_SetPIN+0x88>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <MotorL_SetPIN+0x18>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	0800129d 	.word	0x0800129d
 8001278:	080012b5 	.word	0x080012b5
 800127c:	080012cd 	.word	0x080012cd
 8001280:	08001285 	.word	0x08001285
		case BRAKE:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	2108      	movs	r1, #8
 8001288:	481a      	ldr	r0, [pc, #104]	; (80012f4 <MotorL_SetPIN+0x98>)
 800128a:	f001 fded 	bl	8002e68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001294:	4818      	ldr	r0, [pc, #96]	; (80012f8 <MotorL_SetPIN+0x9c>)
 8001296:	f001 fde7 	bl	8002e68 <HAL_GPIO_WritePin>
			break;
 800129a:	e024      	b.n	80012e6 <MotorL_SetPIN+0x8a>

		case FRONT:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	2108      	movs	r1, #8
 80012a0:	4814      	ldr	r0, [pc, #80]	; (80012f4 <MotorL_SetPIN+0x98>)
 80012a2:	f001 fde1 	bl	8002e68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <MotorL_SetPIN+0x9c>)
 80012ae:	f001 fddb 	bl	8002e68 <HAL_GPIO_WritePin>
			break;
 80012b2:	e018      	b.n	80012e6 <MotorL_SetPIN+0x8a>

		case BACK:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2108      	movs	r1, #8
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <MotorL_SetPIN+0x98>)
 80012ba:	f001 fdd5 	bl	8002e68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 1);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MotorL_SetPIN+0x9c>)
 80012c6:	f001 fdcf 	bl	8002e68 <HAL_GPIO_WritePin>
			break;
 80012ca:	e00c      	b.n	80012e6 <MotorL_SetPIN+0x8a>

		case FREE:
			HAL_GPIO_WritePin(OutEngA_1_GPIO_Port, OutEngA_1_Pin, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2108      	movs	r1, #8
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <MotorL_SetPIN+0x98>)
 80012d2:	f001 fdc9 	bl	8002e68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngA_2_GPIO_Port, OutEngA_2_Pin, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MotorL_SetPIN+0x9c>)
 80012de:	f001 fdc3 	bl	8002e68 <HAL_GPIO_WritePin>
			break;
 80012e2:	e000      	b.n	80012e6 <MotorL_SetPIN+0x8a>
		default:
			break;
 80012e4:	bf00      	nop
	}
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200003fc 	.word	0x200003fc
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020000 	.word	0x40020000

080012fc <MotorR_SetPIN>:
void MotorR_SetPIN(_eEngState estado){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	switch(motorR.estado){
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MotorR_SetPIN+0x9c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d83e      	bhi.n	800138c <MotorR_SetPIN+0x90>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <MotorR_SetPIN+0x18>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	0800133f 	.word	0x0800133f
 8001318:	08001359 	.word	0x08001359
 800131c:	08001373 	.word	0x08001373
 8001320:	08001325 	.word	0x08001325
		case BRAKE:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 1);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132a:	481c      	ldr	r0, [pc, #112]	; (800139c <MotorR_SetPIN+0xa0>)
 800132c:	f001 fd9c 	bl	8002e68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 1);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <MotorR_SetPIN+0xa0>)
 8001338:	f001 fd96 	bl	8002e68 <HAL_GPIO_WritePin>
			break;
 800133c:	e027      	b.n	800138e <MotorR_SetPIN+0x92>

		case FRONT:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <MotorR_SetPIN+0xa0>)
 8001346:	f001 fd8f 	bl	8002e68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001350:	4812      	ldr	r0, [pc, #72]	; (800139c <MotorR_SetPIN+0xa0>)
 8001352:	f001 fd89 	bl	8002e68 <HAL_GPIO_WritePin>
			break;
 8001356:	e01a      	b.n	800138e <MotorR_SetPIN+0x92>

		case BACK:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135e:	480f      	ldr	r0, [pc, #60]	; (800139c <MotorR_SetPIN+0xa0>)
 8001360:	f001 fd82 	bl	8002e68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <MotorR_SetPIN+0xa0>)
 800136c:	f001 fd7c 	bl	8002e68 <HAL_GPIO_WritePin>
			break;
 8001370:	e00d      	b.n	800138e <MotorR_SetPIN+0x92>

		case FREE:
			HAL_GPIO_WritePin(OutEngB_1_GPIO_Port, OutEngB_1_Pin, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <MotorR_SetPIN+0xa0>)
 800137a:	f001 fd75 	bl	8002e68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OutEngB_2_GPIO_Port, OutEngB_2_Pin, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MotorR_SetPIN+0xa0>)
 8001386:	f001 fd6f 	bl	8002e68 <HAL_GPIO_WritePin>
			break;
 800138a:	e000      	b.n	800138e <MotorR_SetPIN+0x92>
		default:
			break;
 800138c:	bf00      	nop
	}
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000410 	.word	0x20000410
 800139c:	40020000 	.word	0x40020000

080013a0 <MotorL_SetPWM>:

void MotorL_SetPWM(uint16_t dCycle){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <MotorL_SetPWM+0x20>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	88fa      	ldrh	r2, [r7, #6]
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000380 	.word	0x20000380

080013c4 <MotorR_SetPWM>:

void MotorR_SetPWM(uint16_t dCycle){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <MotorR_SetPWM+0x20>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	88fa      	ldrh	r2, [r7, #6]
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000380 	.word	0x20000380

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <Error_Handler+0x8>
	...

080013f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_MspInit+0x4c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x4c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2e      	ldr	r2, [pc, #184]	; (800151c <HAL_ADC_MspInit+0xd8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d156      	bne.n	8001514 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_ADC_MspInit+0xdc>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a2c      	ldr	r2, [pc, #176]	; (8001520 <HAL_ADC_MspInit+0xdc>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_ADC_MspInit+0xdc>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_ADC_MspInit+0xdc>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a25      	ldr	r2, [pc, #148]	; (8001520 <HAL_ADC_MspInit+0xdc>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_ADC_MspInit+0xdc>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800149e:	23ff      	movs	r3, #255	; 0xff
 80014a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a2:	2303      	movs	r3, #3
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <HAL_ADC_MspInit+0xe0>)
 80014b2:	f001 fb55 	bl	8002b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014b8:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_ADC_MspInit+0xe8>)
 80014ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 80014fa:	f000 ffc1 	bl	8002480 <HAL_DMA_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001504:	f7ff ff70 	bl	80013e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a07      	ldr	r2, [pc, #28]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
 800150e:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_ADC_MspInit+0xe4>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40012000 	.word	0x40012000
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	200001c4 	.word	0x200001c4
 800152c:	40026410 	.word	0x40026410

08001530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a47      	ldr	r2, [pc, #284]	; (800166c <HAL_I2C_MspInit+0x13c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	f040 8087 	bne.w	8001662 <HAL_I2C_MspInit+0x132>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <HAL_I2C_MspInit+0x140>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	4a44      	ldr	r2, [pc, #272]	; (8001670 <HAL_I2C_MspInit+0x140>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	6313      	str	r3, [r2, #48]	; 0x30
 8001564:	4b42      	ldr	r3, [pc, #264]	; (8001670 <HAL_I2C_MspInit+0x140>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001570:	23c0      	movs	r3, #192	; 0xc0
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001574:	2312      	movs	r3, #18
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001580:	2304      	movs	r3, #4
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	483a      	ldr	r0, [pc, #232]	; (8001674 <HAL_I2C_MspInit+0x144>)
 800158c:	f001 fae8 	bl	8002b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_I2C_MspInit+0x140>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a35      	ldr	r2, [pc, #212]	; (8001670 <HAL_I2C_MspInit+0x140>)
 800159a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_I2C_MspInit+0x140>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015ae:	4a33      	ldr	r2, [pc, #204]	; (800167c <HAL_I2C_MspInit+0x14c>)
 80015b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015ec:	4822      	ldr	r0, [pc, #136]	; (8001678 <HAL_I2C_MspInit+0x148>)
 80015ee:	f000 ff47 	bl	8002480 <HAL_DMA_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80015f8:	f7ff fef6 	bl	80013e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_I2C_MspInit+0x148>)
 8001600:	639a      	str	r2, [r3, #56]	; 0x38
 8001602:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_I2C_MspInit+0x148>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_I2C_MspInit+0x150>)
 800160a:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <HAL_I2C_MspInit+0x154>)
 800160c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_I2C_MspInit+0x150>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_I2C_MspInit+0x150>)
 8001616:	2240      	movs	r2, #64	; 0x40
 8001618:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_I2C_MspInit+0x150>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_I2C_MspInit+0x150>)
 8001622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001626:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_I2C_MspInit+0x150>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_I2C_MspInit+0x150>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_I2C_MspInit+0x150>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_I2C_MspInit+0x150>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_I2C_MspInit+0x150>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <HAL_I2C_MspInit+0x150>)
 8001648:	f000 ff1a 	bl	8002480 <HAL_DMA_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001652:	f7ff fec9 	bl	80013e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_I2C_MspInit+0x150>)
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
 800165c:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_I2C_MspInit+0x150>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40005400 	.word	0x40005400
 8001670:	40023800 	.word	0x40023800
 8001674:	40020400 	.word	0x40020400
 8001678:	20000278 	.word	0x20000278
 800167c:	40026010 	.word	0x40026010
 8001680:	200002d8 	.word	0x200002d8
 8001684:	40026028 	.word	0x40026028

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_TIM_Base_MspInit+0x80>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d116      	bne.n	80016c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_TIM_Base_MspInit+0x84>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_TIM_Base_MspInit+0x84>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_TIM_Base_MspInit+0x84>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2019      	movs	r0, #25
 80016bc:	f000 fea9 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016c0:	2019      	movs	r0, #25
 80016c2:	f000 fec2 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016c6:	e01a      	b.n	80016fe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_TIM_Base_MspInit+0x88>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d115      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_TIM_Base_MspInit+0x84>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <HAL_TIM_Base_MspInit+0x84>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_TIM_Base_MspInit+0x84>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	201d      	movs	r0, #29
 80016f4:	f000 fe8d 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016f8:	201d      	movs	r0, #29
 80016fa:	f000 fea6 	bl	800244a <HAL_NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40010000 	.word	0x40010000
 800170c:	40023800 	.word	0x40023800
 8001710:	40000400 	.word	0x40000400

08001714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <HAL_TIM_MspPostInit+0x68>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d11d      	bne.n	8001772 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_TIM_MspPostInit+0x6c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <HAL_TIM_MspPostInit+0x6c>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_TIM_MspPostInit+0x6c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EngBPWM_Pin|EngAPWM_Pin;
 8001752:	2330      	movs	r3, #48	; 0x30
 8001754:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001762:	2302      	movs	r3, #2
 8001764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_TIM_MspPostInit+0x70>)
 800176e:	f001 f9f7 	bl	8002b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40000400 	.word	0x40000400
 8001780:	40023800 	.word	0x40023800
 8001784:	40020400 	.word	0x40020400

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d4:	f000 f902 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream0_IRQHandler+0x10>)
 80017e2:	f000 ff53 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000278 	.word	0x20000278

080017f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA1_Stream1_IRQHandler+0x10>)
 80017f6:	f000 ff49 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002d8 	.word	0x200002d8

08001804 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800180a:	f003 fcf7 	bl	80051fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000338 	.word	0x20000338

08001818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <TIM3_IRQHandler+0x10>)
 800181e:	f003 fced 	bl	80051fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000380 	.word	0x20000380

0800182c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA2_Stream0_IRQHandler+0x10>)
 8001832:	f000 ff2b 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200001c4 	.word	0x200001c4

08001840 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <OTG_FS_IRQHandler+0x10>)
 8001846:	f001 fdcb 	bl	80033e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000d10 	.word	0x20000d10

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f008 fc3a 	bl	800a0fc <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20020000 	.word	0x20020000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	20000424 	.word	0x20000424
 80018bc:	20001560 	.word	0x20001560

080018c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800191c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e8:	f7ff ffea 	bl	80018c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	; (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f008 fbf9 	bl	800a108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff f8c9 	bl	8000aac <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800191c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8001928:	0800a1e4 	.word	0x0800a1e4
  ldr r2, =_sbss
 800192c:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8001930:	2000155c 	.word	0x2000155c

08001934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <HAL_Init+0x40>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_Init+0x40>)
 800194e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_Init+0x40>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 fd4b 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f000 f808 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fd42 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_InitTick+0x54>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x58>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fd63 	bl	8002466 <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 fd2b 	bl	8002412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <HAL_InitTick+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000428 	.word	0x20000428

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000428 	.word	0x20000428

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff ffee 	bl	8001a04 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d005      	beq.n	8001a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_Delay+0x44>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a42:	bf00      	nop
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d8f7      	bhi.n	8001a44 <HAL_Delay+0x28>
  {
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008

08001a64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e033      	b.n	8001ae2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fcde 	bl	8001444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	f043 0202 	orr.w	r2, r3, #2
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fa52 	bl	8001f60 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad2:	e001      	b.n	8001ad8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Start_DMA+0x22>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e0d0      	b.n	8001cb0 <HAL_ADC_Start_DMA+0x1c4>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d018      	beq.n	8001b56 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b34:	4b60      	ldr	r3, [pc, #384]	; (8001cb8 <HAL_ADC_Start_DMA+0x1cc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a60      	ldr	r2, [pc, #384]	; (8001cbc <HAL_ADC_Start_DMA+0x1d0>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0c9a      	lsrs	r2, r3, #18
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001b48:	e002      	b.n	8001b50 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b64:	d107      	bne.n	8001b76 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b74:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	f040 8088 	bne.w	8001c96 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc4:	d106      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f023 0206 	bic.w	r2, r3, #6
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
 8001bd2:	e002      	b.n	8001bda <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_ADC_Start_DMA+0x1d4>)
 8001be4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <HAL_ADC_Start_DMA+0x1d8>)
 8001bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	4a35      	ldr	r2, [pc, #212]	; (8001cc8 <HAL_ADC_Start_DMA+0x1dc>)
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfa:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <HAL_ADC_Start_DMA+0x1e0>)
 8001bfc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c06:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c16:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c26:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	334c      	adds	r3, #76	; 0x4c
 8001c32:	4619      	mov	r1, r3
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f000 fcd0 	bl	80025dc <HAL_DMA_Start_IT>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10f      	bne.n	8001c6c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d129      	bne.n	8001cae <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	e020      	b.n	8001cae <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_ADC_Start_DMA+0x1e4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d11b      	bne.n	8001cae <HAL_ADC_Start_DMA+0x1c2>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d114      	bne.n	8001cae <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	e00b      	b.n	8001cae <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f043 0210 	orr.w	r2, r3, #16
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	431bde83 	.word	0x431bde83
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	08002159 	.word	0x08002159
 8001cc8:	08002213 	.word	0x08002213
 8001ccc:	0800222f 	.word	0x0800222f
 8001cd0:	40012000 	.word	0x40012000

08001cd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1c>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e113      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x244>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	d925      	bls.n	8001d74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68d9      	ldr	r1, [r3, #12]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b1e      	subs	r3, #30
 8001d3e:	2207      	movs	r2, #7
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43da      	mvns	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68d9      	ldr	r1, [r3, #12]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	4603      	mov	r3, r0
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4403      	add	r3, r0
 8001d66:	3b1e      	subs	r3, #30
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	e022      	b.n	8001dba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6919      	ldr	r1, [r3, #16]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	2207      	movs	r2, #7
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	400a      	ands	r2, r1
 8001d96:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4403      	add	r3, r0
 8001db0:	409a      	lsls	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d824      	bhi.n	8001e0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b05      	subs	r3, #5
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	400a      	ands	r2, r1
 8001de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b05      	subs	r3, #5
 8001dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34
 8001e0a:	e04c      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	d824      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b23      	subs	r3, #35	; 0x23
 8001e26:	221f      	movs	r2, #31
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	400a      	ands	r2, r1
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b23      	subs	r3, #35	; 0x23
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e5c:	e023      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b41      	subs	r3, #65	; 0x41
 8001e70:	221f      	movs	r2, #31
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b41      	subs	r3, #65	; 0x41
 8001e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_ADC_ConfigChannel+0x250>)
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <HAL_ADC_ConfigChannel+0x254>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d10f      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1d8>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b12      	cmp	r3, #18
 8001eba:	d10b      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_ADC_ConfigChannel+0x254>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d12b      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x23a>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_ADC_ConfigChannel+0x258>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d003      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x1f4>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b11      	cmp	r3, #17
 8001eee:	d122      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_ADC_ConfigChannel+0x258>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d111      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_ADC_ConfigChannel+0x25c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_ADC_ConfigChannel+0x260>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	0c9a      	lsrs	r2, r3, #18
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40012300 	.word	0x40012300
 8001f50:	40012000 	.word	0x40012000
 8001f54:	10000012 	.word	0x10000012
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	431bde83 	.word	0x431bde83

08001f60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f68:	4b79      	ldr	r3, [pc, #484]	; (8002150 <ADC_Init+0x1f0>)
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	021a      	lsls	r2, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6899      	ldr	r1, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	4a58      	ldr	r2, [pc, #352]	; (8002154 <ADC_Init+0x1f4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d022      	beq.n	800203e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002006:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	e00f      	b.n	800205e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800204c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800205c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0202 	bic.w	r2, r2, #2
 800206c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6899      	ldr	r1, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7e1b      	ldrb	r3, [r3, #24]
 8002078:	005a      	lsls	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	3b01      	subs	r3, #1
 80020b8:	035a      	lsls	r2, r3, #13
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	e007      	b.n	80020d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	051a      	lsls	r2, r3, #20
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002116:	025a      	lsls	r2, r3, #9
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6899      	ldr	r1, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	029a      	lsls	r2, r3, #10
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40012300 	.word	0x40012300
 8002154:	0f000001 	.word	0x0f000001

08002158 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800216e:	2b00      	cmp	r3, #0
 8002170:	d13c      	bne.n	80021ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d12b      	bne.n	80021e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	d127      	bne.n	80021e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d119      	bne.n	80021e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0220 	bic.w	r2, r2, #32
 80021be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7fe fc57 	bl	8000a98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021ea:	e00e      	b.n	800220a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7ff fd75 	bl	8001ce8 <HAL_ADC_ErrorCallback>
}
 80021fe:	e004      	b.n	800220a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7ff fd57 	bl	8001cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff fd4a 	bl	8001ce8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <__NVIC_EnableIRQ+0x38>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f7ff ff8e 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff29 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff3e 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff8e 	bl	8002350 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5d 	bl	80022fc <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff31 	bl	80022c0 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffa2 	bl	80023b8 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff faba 	bl	8001a04 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e099      	b.n	80025d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024bc:	e00f      	b.n	80024de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024be:	f7ff faa1 	bl	8001a04 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d908      	bls.n	80024de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2203      	movs	r2, #3
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e078      	b.n	80025d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e8      	bne.n	80024be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_DMA_Init+0x158>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2b04      	cmp	r3, #4
 8002536:	d107      	bne.n	8002548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4313      	orrs	r3, r2
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f023 0307 	bic.w	r3, r3, #7
 800255e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b04      	cmp	r3, #4
 8002570:	d117      	bne.n	80025a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00e      	beq.n	80025a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fa6f 	bl	8002a68 <DMA_CheckFifoParam>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800259e:	2301      	movs	r3, #1
 80025a0:	e016      	b.n	80025d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fa26 	bl	80029fc <DMA_CalcBaseAndBitshift>
 80025b0:	4603      	mov	r3, r0
 80025b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	223f      	movs	r2, #63	; 0x3f
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	f010803f 	.word	0xf010803f

080025dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_DMA_Start_IT+0x26>
 80025fe:	2302      	movs	r3, #2
 8002600:	e040      	b.n	8002684 <HAL_DMA_Start_IT+0xa8>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d12f      	bne.n	8002676 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f9b8 	bl	80029a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	223f      	movs	r2, #63	; 0x3f
 8002636:	409a      	lsls	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0216 	orr.w	r2, r2, #22
 800264a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e005      	b.n	8002682 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800267e:	2302      	movs	r3, #2
 8002680:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002682:	7dfb      	ldrb	r3, [r7, #23]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002698:	4b8e      	ldr	r3, [pc, #568]	; (80028d4 <HAL_DMA_IRQHandler+0x248>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a8e      	ldr	r2, [pc, #568]	; (80028d8 <HAL_DMA_IRQHandler+0x24c>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2208      	movs	r2, #8
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2208      	movs	r2, #8
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0202 	orr.w	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2204      	movs	r2, #4
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2204      	movs	r2, #4
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2210      	movs	r2, #16
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d043      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d03c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2210      	movs	r2, #16
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d024      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e01f      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e016      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0208 	bic.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2220      	movs	r2, #32
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 808f 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8087 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2220      	movs	r2, #32
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b05      	cmp	r3, #5
 8002834:	d136      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0216 	bic.w	r2, r2, #22
 8002844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_DMA_IRQHandler+0x1da>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	223f      	movs	r2, #63	; 0x3f
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d07e      	beq.n	8002998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
        }
        return;
 80028a2:	e079      	b.n	8002998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d031      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
 80028d0:	e02c      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000
 80028d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e01e      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0210 	bic.w	r2, r2, #16
 800290a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	2b00      	cmp	r3, #0
 8002932:	d032      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d022      	beq.n	8002986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2205      	movs	r2, #5
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3301      	adds	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	d307      	bcc.n	8002974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f2      	bne.n	8002958 <HAL_DMA_IRQHandler+0x2cc>
 8002972:	e000      	b.n	8002976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002998:	bf00      	nop
    }
  }
}
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d108      	bne.n	80029e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029de:	e007      	b.n	80029f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3b10      	subs	r3, #16
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <DMA_CalcBaseAndBitshift+0x64>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a16:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <DMA_CalcBaseAndBitshift+0x68>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d909      	bls.n	8002a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	1d1a      	adds	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a3c:	e007      	b.n	8002a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	aaaaaaab 	.word	0xaaaaaaab
 8002a64:	0800a1cc 	.word	0x0800a1cc

08002a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11f      	bne.n	8002ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d856      	bhi.n	8002b36 <DMA_CheckFifoParam+0xce>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <DMA_CheckFifoParam+0x28>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002ab3 	.word	0x08002ab3
 8002a98:	08002aa1 	.word	0x08002aa1
 8002a9c:	08002b37 	.word	0x08002b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d046      	beq.n	8002b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e043      	b.n	8002b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aba:	d140      	bne.n	8002b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e03d      	b.n	8002b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aca:	d121      	bne.n	8002b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d837      	bhi.n	8002b42 <DMA_CheckFifoParam+0xda>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <DMA_CheckFifoParam+0x70>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002aef 	.word	0x08002aef
 8002ae0:	08002ae9 	.word	0x08002ae9
 8002ae4:	08002b01 	.word	0x08002b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      break;
 8002aec:	e030      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d025      	beq.n	8002b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afe:	e022      	b.n	8002b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b08:	d11f      	bne.n	8002b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b0e:	e01c      	b.n	8002b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d903      	bls.n	8002b1e <DMA_CheckFifoParam+0xb6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d003      	beq.n	8002b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b1c:	e018      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      break;
 8002b22:	e015      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00e      	beq.n	8002b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e00b      	b.n	8002b4e <DMA_CheckFifoParam+0xe6>
      break;
 8002b36:	bf00      	nop
 8002b38:	e00a      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e008      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e006      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e004      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e002      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e159      	b.n	8002e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f040 8148 	bne.w	8002e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d005      	beq.n	8002bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d130      	bne.n	8002c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d017      	beq.n	8002c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d123      	bne.n	8002ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80a2 	beq.w	8002e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <HAL_GPIO_Init+0x2e8>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a56      	ldr	r2, [pc, #344]	; (8002e48 <HAL_GPIO_Init+0x2e8>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <HAL_GPIO_Init+0x2e8>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d02:	4a52      	ldr	r2, [pc, #328]	; (8002e4c <HAL_GPIO_Init+0x2ec>)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a49      	ldr	r2, [pc, #292]	; (8002e50 <HAL_GPIO_Init+0x2f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d019      	beq.n	8002d62 <HAL_GPIO_Init+0x202>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a48      	ldr	r2, [pc, #288]	; (8002e54 <HAL_GPIO_Init+0x2f4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0x1fe>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a47      	ldr	r2, [pc, #284]	; (8002e58 <HAL_GPIO_Init+0x2f8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00d      	beq.n	8002d5a <HAL_GPIO_Init+0x1fa>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a46      	ldr	r2, [pc, #280]	; (8002e5c <HAL_GPIO_Init+0x2fc>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <HAL_GPIO_Init+0x1f6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a45      	ldr	r2, [pc, #276]	; (8002e60 <HAL_GPIO_Init+0x300>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_GPIO_Init+0x1f2>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e008      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d52:	2307      	movs	r3, #7
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d56:	2303      	movs	r3, #3
 8002d58:	e004      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e002      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d62:	2300      	movs	r3, #0
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f002 0203 	and.w	r2, r2, #3
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	4093      	lsls	r3, r2
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d74:	4935      	ldr	r1, [pc, #212]	; (8002e4c <HAL_GPIO_Init+0x2ec>)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d82:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da6:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dac:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd0:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e00:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e24:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	f67f aea2 	bls.w	8002b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40013800 	.word	0x40013800
 8002e50:	40020000 	.word	0x40020000
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020c00 	.word	0x40020c00
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40013c00 	.word	0x40013c00

08002e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
 8002e74:	4613      	mov	r3, r2
 8002e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e78:	787b      	ldrb	r3, [r7, #1]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e84:	e003      	b.n	8002e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	041a      	lsls	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	619a      	str	r2, [r3, #24]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eac:	887a      	ldrh	r2, [r7, #2]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	041a      	lsls	r2, r3, #16
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43d9      	mvns	r1, r3
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	400b      	ands	r3, r1
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	619a      	str	r2, [r3, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e12b      	b.n	800313a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe fb1a 	bl	8001530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	; 0x24
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f34:	f001 ff92 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a81      	ldr	r2, [pc, #516]	; (8003144 <HAL_I2C_Init+0x274>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d807      	bhi.n	8002f54 <HAL_I2C_Init+0x84>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a80      	ldr	r2, [pc, #512]	; (8003148 <HAL_I2C_Init+0x278>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bf94      	ite	ls
 8002f4c:	2301      	movls	r3, #1
 8002f4e:	2300      	movhi	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e006      	b.n	8002f62 <HAL_I2C_Init+0x92>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a7d      	ldr	r2, [pc, #500]	; (800314c <HAL_I2C_Init+0x27c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0e7      	b.n	800313a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a78      	ldr	r2, [pc, #480]	; (8003150 <HAL_I2C_Init+0x280>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0c9b      	lsrs	r3, r3, #18
 8002f74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a6a      	ldr	r2, [pc, #424]	; (8003144 <HAL_I2C_Init+0x274>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d802      	bhi.n	8002fa4 <HAL_I2C_Init+0xd4>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	e009      	b.n	8002fb8 <HAL_I2C_Init+0xe8>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4a69      	ldr	r2, [pc, #420]	; (8003154 <HAL_I2C_Init+0x284>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	495c      	ldr	r1, [pc, #368]	; (8003144 <HAL_I2C_Init+0x274>)
 8002fd4:	428b      	cmp	r3, r1
 8002fd6:	d819      	bhi.n	800300c <HAL_I2C_Init+0x13c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e59      	subs	r1, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe6:	1c59      	adds	r1, r3, #1
 8002fe8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fec:	400b      	ands	r3, r1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_I2C_Init+0x138>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e59      	subs	r1, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003006:	e051      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 8003008:	2304      	movs	r3, #4
 800300a:	e04f      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <HAL_I2C_Init+0x168>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e012      	b.n	800305e <HAL_I2C_Init+0x18e>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	0099      	lsls	r1, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Init+0x196>
 8003062:	2301      	movs	r3, #1
 8003064:	e022      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <HAL_I2C_Init+0x1bc>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e58      	subs	r0, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	440b      	add	r3, r1
 800307c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003080:	3301      	adds	r3, #1
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	0099      	lsls	r1, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6809      	ldr	r1, [r1, #0]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6911      	ldr	r1, [r2, #16]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	000186a0 	.word	0x000186a0
 8003148:	001e847f 	.word	0x001e847f
 800314c:	003d08ff 	.word	0x003d08ff
 8003150:	431bde83 	.word	0x431bde83
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af02      	add	r7, sp, #8
 800315e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e101      	b.n	800336e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f006 fbe3 	bl	8009950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2203      	movs	r2, #3
 800318e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003198:	d102      	bne.n	80031a0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 ff36 	bl	8006016 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7c1a      	ldrb	r2, [r3, #16]
 80031b2:	f88d 2000 	strb.w	r2, [sp]
 80031b6:	3304      	adds	r3, #4
 80031b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ba:	f002 fe15 	bl	8005de8 <USB_CoreInit>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0ce      	b.n	800336e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f002 ff2e 	bl	8006038 <USB_SetCurrentMode>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0bf      	b.n	800336e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	e04a      	b.n	800328a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3315      	adds	r3, #21
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3314      	adds	r3, #20
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	b298      	uxth	r0, r3
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	332e      	adds	r3, #46	; 0x2e
 8003230:	4602      	mov	r2, r0
 8003232:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3318      	adds	r3, #24
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	331c      	adds	r3, #28
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3320      	adds	r3, #32
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	3301      	adds	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	791b      	ldrb	r3, [r3, #4]
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	429a      	cmp	r2, r3
 8003292:	d3af      	bcc.n	80031f4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	e044      	b.n	8003324 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f203 2355 	addw	r3, r3, #597	; 0x255
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	3301      	adds	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	791b      	ldrb	r3, [r3, #4]
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	429a      	cmp	r2, r3
 800332c:	d3b5      	bcc.n	800329a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7c1a      	ldrb	r2, [r3, #16]
 8003336:	f88d 2000 	strb.w	r2, [sp]
 800333a:	3304      	adds	r3, #4
 800333c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333e:	f002 fec7 	bl	80060d0 <USB_DevInit>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00c      	b.n	800336e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f003 ff11 	bl	800718e <USB_DevDisconnect>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_PCD_Start+0x1c>
 800338e:	2302      	movs	r3, #2
 8003390:	e022      	b.n	80033d8 <HAL_PCD_Start+0x62>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d105      	bne.n	80033ba <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f002 fe18 	bl	8005ff4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f003 febf 	bl	800714c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b08d      	sub	sp, #52	; 0x34
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 ff7d 	bl	80072f6 <USB_GetMode>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 848c 	bne.w	8003d1c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f003 fee1 	bl	80071d0 <USB_ReadInterrupts>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8482 	beq.w	8003d1a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f003 fece 	bl	80071d0 <USB_ReadInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d107      	bne.n	800344e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f002 0202 	and.w	r2, r2, #2
 800344c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 febc 	bl	80071d0 <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b10      	cmp	r3, #16
 8003460:	d161      	bne.n	8003526 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0210 	bic.w	r2, r2, #16
 8003470:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	3304      	adds	r3, #4
 8003490:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	0c5b      	lsrs	r3, r3, #17
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	2b02      	cmp	r3, #2
 800349c:	d124      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d035      	beq.n	8003516 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	6a38      	ldr	r0, [r7, #32]
 80034be:	f003 fcf3 	bl	8006ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ce:	441a      	add	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e0:	441a      	add	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	615a      	str	r2, [r3, #20]
 80034e6:	e016      	b.n	8003516 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	0c5b      	lsrs	r3, r3, #17
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	2b06      	cmp	r3, #6
 80034f2:	d110      	bne.n	8003516 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80034fa:	2208      	movs	r2, #8
 80034fc:	4619      	mov	r1, r3
 80034fe:	6a38      	ldr	r0, [r7, #32]
 8003500:	f003 fcd2 	bl	8006ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003510:	441a      	add	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0210 	orr.w	r2, r2, #16
 8003524:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f003 fe50 	bl	80071d0 <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003536:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800353a:	f040 80a7 	bne.w	800368c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fe55 	bl	80071f6 <USB_ReadDevAllOutEpInterrupt>
 800354c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800354e:	e099      	b.n	8003684 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 808e 	beq.w	8003678 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f003 fe79 	bl	800725e <USB_ReadDevOutEPInterrupt>
 800356c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003584:	461a      	mov	r2, r3
 8003586:	2301      	movs	r3, #1
 8003588:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800358a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fea3 	bl	80042d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	461a      	mov	r2, r3
 80035aa:	2308      	movs	r3, #8
 80035ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 ff79 	bl	80044a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035cc:	461a      	mov	r2, r3
 80035ce:	2310      	movs	r3, #16
 80035d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d030      	beq.n	800363e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d109      	bne.n	80035fc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035fa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	78db      	ldrb	r3, [r3, #3]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d108      	bne.n	800362c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f006 fa8e 	bl	8009b48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	2302      	movs	r3, #2
 800363c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003654:	461a      	mov	r2, r3
 8003656:	2320      	movs	r3, #32
 8003658:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003676:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	3301      	adds	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	f47f af62 	bne.w	8003550 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f003 fd9d 	bl	80071d0 <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036a0:	f040 80db 	bne.w	800385a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 fdbe 	bl	800722a <USB_ReadDevAllInEpInterrupt>
 80036ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036b4:	e0cd      	b.n	8003852 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80c2 	beq.w	8003846 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 fde4 	bl	800729a <USB_ReadDevInEPInterrupt>
 80036d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d057      	beq.n	800378e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	2201      	movs	r2, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69f9      	ldr	r1, [r7, #28]
 80036fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036fe:	4013      	ands	r3, r2
 8003700:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	461a      	mov	r2, r3
 8003710:	2301      	movs	r3, #1
 8003712:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	799b      	ldrb	r3, [r3, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d132      	bne.n	8003782 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3320      	adds	r3, #32
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4403      	add	r3, r0
 800373c:	331c      	adds	r3, #28
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4419      	add	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4403      	add	r3, r0
 8003750:	3320      	adds	r3, #32
 8003752:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d113      	bne.n	8003782 <HAL_PCD_IRQHandler+0x3a2>
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	3324      	adds	r3, #36	; 0x24
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d108      	bne.n	8003782 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800377a:	461a      	mov	r2, r3
 800377c:	2101      	movs	r1, #1
 800377e:	f003 fdeb 	bl	8007358 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f006 f962 	bl	8009a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a4:	461a      	mov	r2, r3
 80037a6:	2308      	movs	r3, #8
 80037a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c0:	461a      	mov	r2, r3
 80037c2:	2310      	movs	r3, #16
 80037c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	2340      	movs	r3, #64	; 0x40
 80037e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d023      	beq.n	8003834 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ee:	6a38      	ldr	r0, [r7, #32]
 80037f0:	f002 fdd2 	bl	8006398 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	3310      	adds	r3, #16
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	3304      	adds	r3, #4
 8003806:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	78db      	ldrb	r3, [r3, #3]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d108      	bne.n	8003822 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2200      	movs	r2, #0
 8003814:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	b2db      	uxtb	r3, r3
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f006 f9a5 	bl	8009b6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382e:	461a      	mov	r2, r3
 8003830:	2302      	movs	r3, #2
 8003832:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800383e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fcbd 	bl	80041c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	3301      	adds	r3, #1
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	f47f af2e 	bne.w	80036b6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f003 fcb6 	bl	80071d0 <USB_ReadInterrupts>
 8003864:	4603      	mov	r3, r0
 8003866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800386a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800386e:	d122      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800388a:	2b01      	cmp	r3, #1
 800388c:	d108      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003896:	2100      	movs	r1, #0
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fea3 	bl	80045e4 <HAL_PCDEx_LPM_Callback>
 800389e:	e002      	b.n	80038a6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f006 f943 	bl	8009b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 fc88 	bl	80071d0 <USB_ReadInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ca:	d112      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d102      	bne.n	80038e2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f006 f8ff 	bl	8009ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038f0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 fc6a 	bl	80071d0 <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003906:	f040 80b7 	bne.w	8003a78 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2110      	movs	r1, #16
 8003924:	4618      	mov	r0, r3
 8003926:	f002 fd37 	bl	8006398 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800392a:	2300      	movs	r3, #0
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392e:	e046      	b.n	80039be <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	461a      	mov	r2, r3
 800393e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003942:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003954:	0151      	lsls	r1, r2, #5
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	440a      	add	r2, r1
 800395a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800395e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003962:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	461a      	mov	r2, r3
 8003972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003976:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003996:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	3301      	adds	r3, #1
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	791b      	ldrb	r3, [r3, #4]
 80039c2:	461a      	mov	r2, r3
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d3b2      	bcc.n	8003930 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7bdb      	ldrb	r3, [r3, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d016      	beq.n	8003a14 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f6:	f043 030b 	orr.w	r3, r3, #11
 80039fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0c:	f043 030b 	orr.w	r3, r3, #11
 8003a10:	6453      	str	r3, [r2, #68]	; 0x44
 8003a12:	e015      	b.n	8003a40 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a26:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a2a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3a:	f043 030b 	orr.w	r3, r3, #11
 8003a3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a62:	461a      	mov	r2, r3
 8003a64:	f003 fc78 	bl	8007358 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 fba7 	bl	80071d0 <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8c:	d123      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fc3d 	bl	8007312 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 fcf4 	bl	800648a <USB_GetDevSpeed>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681c      	ldr	r4, [r3, #0]
 8003aae:	f001 f9c9 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8003ab2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4620      	mov	r0, r4
 8003abc:	f002 f9f8 	bl	8005eb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f005 ffee 	bl	8009aa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 fb78 	bl	80071d0 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d10a      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f005 ffcb 	bl	8009a86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f002 0208 	and.w	r2, r2, #8
 8003afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f003 fb63 	bl	80071d0 <USB_ReadInterrupts>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b80      	cmp	r3, #128	; 0x80
 8003b12:	d123      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b20:	2301      	movs	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	e014      	b.n	8003b50 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fb0a 	bl	800415e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	791b      	ldrb	r3, [r3, #4]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d3e4      	bcc.n	8003b26 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f003 fb35 	bl	80071d0 <USB_ReadInterrupts>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b70:	d13c      	bne.n	8003bec <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b72:	2301      	movs	r3, #1
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	e02b      	b.n	8003bd0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3318      	adds	r3, #24
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d115      	bne.n	8003bca <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da12      	bge.n	8003bca <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3317      	adds	r3, #23
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 faca 	bl	800415e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	3301      	adds	r3, #1
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	791b      	ldrb	r3, [r3, #4]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d3cd      	bcc.n	8003b78 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 faed 	bl	80071d0 <USB_ReadInterrupts>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c00:	d156      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c02:	2301      	movs	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	e045      	b.n	8003c94 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d12e      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da2b      	bge.n	8003c8e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	0c1a      	lsrs	r2, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003c40:	4053      	eors	r3, r2
 8003c42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d121      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c8a:	6053      	str	r3, [r2, #4]
            break;
 8003c8c:	e008      	b.n	8003ca0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	791b      	ldrb	r3, [r3, #4]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d3b3      	bcc.n	8003c08 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f003 fa8b 	bl	80071d0 <USB_ReadInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d10a      	bne.n	8003cdc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f005 ff62 	bl	8009b90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fa75 	bl	80071d0 <USB_ReadInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d115      	bne.n	8003d1c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f005 ff52 	bl	8009bac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	e000      	b.n	8003d1c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003d1a:	bf00      	nop
    }
  }
}
 8003d1c:	3734      	adds	r7, #52	; 0x34
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd90      	pop	{r4, r7, pc}

08003d22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_PCD_SetAddress+0x1a>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e012      	b.n	8003d62 <HAL_PCD_SetAddress+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f003 f9d4 	bl	8007100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	4608      	mov	r0, r1
 8003d74:	4611      	mov	r1, r2
 8003d76:	461a      	mov	r2, r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	70fb      	strb	r3, [r7, #3]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	803b      	strh	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	da0f      	bge.n	8003db0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 020f 	and.w	r2, r3, #15
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	3310      	adds	r3, #16
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	3304      	adds	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	705a      	strb	r2, [r3, #1]
 8003dae:	e00f      	b.n	8003dd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 020f 	and.w	r2, r3, #15
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003ddc:	883b      	ldrh	r3, [r7, #0]
 8003dde:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	78ba      	ldrb	r2, [r7, #2]
 8003dea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dfe:	78bb      	ldrb	r3, [r7, #2]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d102      	bne.n	8003e0a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_PCD_EP_Open+0xae>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e00e      	b.n	8003e36 <HAL_PCD_EP_Open+0xcc>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fb54 	bl	80064d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003e34:	7afb      	ldrb	r3, [r7, #11]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da0f      	bge.n	8003e72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	f003 020f 	and.w	r2, r3, #15
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	3310      	adds	r3, #16
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	705a      	strb	r2, [r3, #1]
 8003e70:	e00f      	b.n	8003e92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	3304      	adds	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_PCD_EP_Close+0x6e>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e00e      	b.n	8003eca <HAL_PCD_EP_Close+0x8c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f002 fb92 	bl	80065e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	7afb      	ldrb	r3, [r7, #11]
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	799b      	ldrb	r3, [r3, #6]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d102      	bne.n	8003f2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	799b      	ldrb	r3, [r3, #6]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6979      	ldr	r1, [r7, #20]
 8003f3a:	f002 fc2f 	bl	800679c <USB_EPStartXfer>

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	f003 020f 	and.w	r2, r3, #15
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	607a      	str	r2, [r7, #4]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	460b      	mov	r3, r1
 8003f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f88:	7afb      	ldrb	r3, [r7, #11]
 8003f8a:	f003 020f 	and.w	r2, r3, #15
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	3310      	adds	r3, #16
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	799b      	ldrb	r3, [r3, #6]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d102      	bne.n	8003fd2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	799b      	ldrb	r3, [r3, #6]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6979      	ldr	r1, [r7, #20]
 8003fde:	f002 fbdd 	bl	800679c <USB_EPStartXfer>

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	7912      	ldrb	r2, [r2, #4]
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e04f      	b.n	80040aa <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800400a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800400e:	2b00      	cmp	r3, #0
 8004010:	da0f      	bge.n	8004032 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	3310      	adds	r3, #16
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	3304      	adds	r3, #4
 8004028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	705a      	strb	r2, [r3, #1]
 8004030:	e00d      	b.n	800404e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4413      	add	r3, r2
 8004044:	3304      	adds	r3, #4
 8004046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_PCD_EP_SetStall+0x82>
 800406a:	2302      	movs	r3, #2
 800406c:	e01d      	b.n	80040aa <HAL_PCD_EP_SetStall+0xbe>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	4618      	mov	r0, r3
 800407e:	f002 ff6b 	bl	8006f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7999      	ldrb	r1, [r3, #6]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800409a:	461a      	mov	r2, r3
 800409c:	f003 f95c 	bl	8007358 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	7912      	ldrb	r2, [r2, #4]
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e042      	b.n	8004156 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da0f      	bge.n	80040f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3310      	adds	r3, #16
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	3304      	adds	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	705a      	strb	r2, [r3, #1]
 80040f6:	e00f      	b.n	8004118 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 020f 	and.w	r2, r3, #15
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	3304      	adds	r3, #4
 8004110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	b2da      	uxtb	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_PCD_EP_ClrStall+0x86>
 8004134:	2302      	movs	r3, #2
 8004136:	e00e      	b.n	8004156 <HAL_PCD_EP_ClrStall+0xa4>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68f9      	ldr	r1, [r7, #12]
 8004146:	4618      	mov	r0, r3
 8004148:	f002 ff74 	bl	8007034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800416a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800416e:	2b00      	cmp	r3, #0
 8004170:	da0c      	bge.n	800418c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3310      	adds	r3, #16
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	3304      	adds	r3, #4
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e00c      	b.n	80041a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4413      	add	r3, r2
 80041a2:	3304      	adds	r3, #4
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f002 fd93 	bl	8006cd8 <USB_EPStopXfer>
 80041b2:	4603      	mov	r3, r0
 80041b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041b6:	7afb      	ldrb	r3, [r7, #11]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	3310      	adds	r3, #16
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4413      	add	r3, r2
 80041e4:	3304      	adds	r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d901      	bls.n	80041f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e06b      	b.n	80042d0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	429a      	cmp	r2, r3
 800420c:	d902      	bls.n	8004214 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3303      	adds	r3, #3
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800421c:	e02a      	b.n	8004274 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	429a      	cmp	r2, r3
 8004232:	d902      	bls.n	800423a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3303      	adds	r3, #3
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68d9      	ldr	r1, [r3, #12]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4603      	mov	r3, r0
 8004256:	6978      	ldr	r0, [r7, #20]
 8004258:	f002 fde8 	bl	8006e2c <USB_WritePacket>

    ep->xfer_buff  += len;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	441a      	add	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	441a      	add	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	429a      	cmp	r2, r3
 8004288:	d809      	bhi.n	800429e <PCD_WriteEmptyTxFifo+0xde>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004292:	429a      	cmp	r2, r3
 8004294:	d203      	bcs.n	800429e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1bf      	bne.n	800421e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d811      	bhi.n	80042ce <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	2201      	movs	r2, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	6939      	ldr	r1, [r7, #16]
 80042c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ca:	4013      	ands	r3, r2
 80042cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	333c      	adds	r3, #60	; 0x3c
 80042f0:	3304      	adds	r3, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	799b      	ldrb	r3, [r3, #6]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d17b      	bne.n	8004406 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4a61      	ldr	r2, [pc, #388]	; (80044a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	f240 80b9 	bls.w	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80b3 	beq.w	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433a:	461a      	mov	r2, r3
 800433c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004340:	6093      	str	r3, [r2, #8]
 8004342:	e0a7      	b.n	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	461a      	mov	r2, r3
 800435c:	2320      	movs	r3, #32
 800435e:	6093      	str	r3, [r2, #8]
 8004360:	e098      	b.n	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	f040 8093 	bne.w	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4a4b      	ldr	r2, [pc, #300]	; (80044a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d90f      	bls.n	8004396 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	461a      	mov	r2, r3
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	6093      	str	r3, [r2, #8]
 8004394:	e07e      	b.n	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	3304      	adds	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	0159      	lsls	r1, r3, #5
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	440b      	add	r3, r1
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	1ad2      	subs	r2, r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d114      	bne.n	80043f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80043e0:	461a      	mov	r2, r3
 80043e2:	2101      	movs	r1, #1
 80043e4:	f002 ffb8 	bl	8007358 <USB_EP0_OutStart>
 80043e8:	e006      	b.n	80043f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	441a      	add	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f005 fb0c 	bl	8009a1c <HAL_PCD_DataOutStageCallback>
 8004404:	e046      	b.n	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d124      	bne.n	8004458 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004424:	461a      	mov	r2, r3
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	6093      	str	r3, [r2, #8]
 800442c:	e032      	b.n	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	2320      	movs	r3, #32
 8004448:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f005 fae3 	bl	8009a1c <HAL_PCD_DataOutStageCallback>
 8004456:	e01d      	b.n	8004494 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d114      	bne.n	8004488 <PCD_EP_OutXfrComplete_int+0x1b0>
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004480:	461a      	mov	r2, r3
 8004482:	2100      	movs	r1, #0
 8004484:	f002 ff68 	bl	8007358 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f005 fac4 	bl	8009a1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	4f54300a 	.word	0x4f54300a
 80044a4:	4f54310a 	.word	0x4f54310a

080044a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	333c      	adds	r3, #60	; 0x3c
 80044c0:	3304      	adds	r3, #4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a15      	ldr	r2, [pc, #84]	; (8004530 <PCD_EP_OutSetupPacket_int+0x88>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d90e      	bls.n	80044fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	461a      	mov	r2, r3
 80044f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f005 fa7b 	bl	80099f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <PCD_EP_OutSetupPacket_int+0x88>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d90c      	bls.n	8004524 <PCD_EP_OutSetupPacket_int+0x7c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	799b      	ldrb	r3, [r3, #6]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d108      	bne.n	8004524 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800451c:	461a      	mov	r2, r3
 800451e:	2101      	movs	r1, #1
 8004520:	f002 ff1a 	bl	8007358 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	4f54300a 	.word	0x4f54300a

08004534 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
 8004540:	4613      	mov	r3, r2
 8004542:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d107      	bne.n	8004562 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004552:	883b      	ldrh	r3, [r7, #0]
 8004554:	0419      	lsls	r1, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	430a      	orrs	r2, r1
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
 8004560:	e028      	b.n	80045b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	4413      	add	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e00d      	b.n	8004592 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	3340      	adds	r3, #64	; 0x40
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4413      	add	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	3301      	adds	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
 8004592:	7bfa      	ldrb	r2, [r7, #15]
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	3b01      	subs	r3, #1
 8004598:	429a      	cmp	r2, r3
 800459a:	d3ec      	bcc.n	8004576 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800459c:	883b      	ldrh	r3, [r7, #0]
 800459e:	0418      	lsls	r0, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	4302      	orrs	r2, r0
 80045ac:	3340      	adds	r3, #64	; 0x40
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	887a      	ldrh	r2, [r7, #2]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e267      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d075      	beq.n	8004706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800461a:	4b88      	ldr	r3, [pc, #544]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b04      	cmp	r3, #4
 8004624:	d00c      	beq.n	8004640 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b85      	ldr	r3, [pc, #532]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800462e:	2b08      	cmp	r3, #8
 8004630:	d112      	bne.n	8004658 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004632:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463e:	d10b      	bne.n	8004658 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	4b7e      	ldr	r3, [pc, #504]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d05b      	beq.n	8004704 <HAL_RCC_OscConfig+0x108>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d157      	bne.n	8004704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e242      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004660:	d106      	bne.n	8004670 <HAL_RCC_OscConfig+0x74>
 8004662:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a75      	ldr	r2, [pc, #468]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e01d      	b.n	80046ac <HAL_RCC_OscConfig+0xb0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0x98>
 800467a:	4b70      	ldr	r3, [pc, #448]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6f      	ldr	r2, [pc, #444]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	4b6d      	ldr	r3, [pc, #436]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a6c      	ldr	r2, [pc, #432]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e00b      	b.n	80046ac <HAL_RCC_OscConfig+0xb0>
 8004694:	4b69      	ldr	r3, [pc, #420]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a68      	ldr	r2, [pc, #416]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800469a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	4b66      	ldr	r3, [pc, #408]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a65      	ldr	r2, [pc, #404]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80046a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d013      	beq.n	80046dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fd f9a6 	bl	8001a04 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fd f9a2 	bl	8001a04 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e207      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	4b5b      	ldr	r3, [pc, #364]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0xc0>
 80046da:	e014      	b.n	8004706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fd f992 	bl	8001a04 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fd f98e 	bl	8001a04 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e1f3      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	4b51      	ldr	r3, [pc, #324]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0xe8>
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d063      	beq.n	80047da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004712:	4b4a      	ldr	r3, [pc, #296]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004726:	2b08      	cmp	r3, #8
 8004728:	d11c      	bne.n	8004764 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472a:	4b44      	ldr	r3, [pc, #272]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d116      	bne.n	8004764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_RCC_OscConfig+0x152>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e1c7      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4937      	ldr	r1, [pc, #220]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	e03a      	b.n	80047da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800476c:	4b34      	ldr	r3, [pc, #208]	; (8004840 <HAL_RCC_OscConfig+0x244>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd f947 	bl	8001a04 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477a:	f7fd f943 	bl	8001a04 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e1a8      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004798:	4b28      	ldr	r3, [pc, #160]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4925      	ldr	r1, [pc, #148]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]
 80047ac:	e015      	b.n	80047da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ae:	4b24      	ldr	r3, [pc, #144]	; (8004840 <HAL_RCC_OscConfig+0x244>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fd f926 	bl	8001a04 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047bc:	f7fd f922 	bl	8001a04 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e187      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d036      	beq.n	8004854 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <HAL_RCC_OscConfig+0x248>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fd f906 	bl	8001a04 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fc:	f7fd f902 	bl	8001a04 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e167      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x200>
 800481a:	e01b      	b.n	8004854 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <HAL_RCC_OscConfig+0x248>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004822:	f7fd f8ef 	bl	8001a04 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004828:	e00e      	b.n	8004848 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482a:	f7fd f8eb 	bl	8001a04 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d907      	bls.n	8004848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e150      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
 800483c:	40023800 	.word	0x40023800
 8004840:	42470000 	.word	0x42470000
 8004844:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004848:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800484a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ea      	bne.n	800482a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8097 	beq.w	8004990 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004866:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	4b7d      	ldr	r3, [pc, #500]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	4a7c      	ldr	r2, [pc, #496]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800487c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004880:	6413      	str	r3, [r2, #64]	; 0x40
 8004882:	4b7a      	ldr	r3, [pc, #488]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004892:	4b77      	ldr	r3, [pc, #476]	; (8004a70 <HAL_RCC_OscConfig+0x474>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d118      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489e:	4b74      	ldr	r3, [pc, #464]	; (8004a70 <HAL_RCC_OscConfig+0x474>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a73      	ldr	r2, [pc, #460]	; (8004a70 <HAL_RCC_OscConfig+0x474>)
 80048a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048aa:	f7fd f8ab 	bl	8001a04 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b2:	f7fd f8a7 	bl	8001a04 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e10c      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <HAL_RCC_OscConfig+0x474>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x2ea>
 80048d8:	4b64      	ldr	r3, [pc, #400]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4a63      	ldr	r2, [pc, #396]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6713      	str	r3, [r2, #112]	; 0x70
 80048e4:	e01c      	b.n	8004920 <HAL_RCC_OscConfig+0x324>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x30c>
 80048ee:	4b5f      	ldr	r3, [pc, #380]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a5e      	ldr	r2, [pc, #376]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048f4:	f043 0304 	orr.w	r3, r3, #4
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	4b5c      	ldr	r3, [pc, #368]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	4a5b      	ldr	r2, [pc, #364]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6713      	str	r3, [r2, #112]	; 0x70
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0x324>
 8004908:	4b58      	ldr	r3, [pc, #352]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a57      	ldr	r2, [pc, #348]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	6713      	str	r3, [r2, #112]	; 0x70
 8004914:	4b55      	ldr	r3, [pc, #340]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	4a54      	ldr	r2, [pc, #336]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800491a:	f023 0304 	bic.w	r3, r3, #4
 800491e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d015      	beq.n	8004954 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fd f86c 	bl	8001a04 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	e00a      	b.n	8004946 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fd f868 	bl	8001a04 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e0cb      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004946:	4b49      	ldr	r3, [pc, #292]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ee      	beq.n	8004930 <HAL_RCC_OscConfig+0x334>
 8004952:	e014      	b.n	800497e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004954:	f7fd f856 	bl	8001a04 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495a:	e00a      	b.n	8004972 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fd f852 	bl	8001a04 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e0b5      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004972:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1ee      	bne.n	800495c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800497e:	7dfb      	ldrb	r3, [r7, #23]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d105      	bne.n	8004990 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004984:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80a1 	beq.w	8004adc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800499a:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d05c      	beq.n	8004a60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d141      	bne.n	8004a32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <HAL_RCC_OscConfig+0x478>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd f826 	bl	8001a04 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd f822 	bl	8001a04 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e087      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	019b      	lsls	r3, r3, #6
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	3b01      	subs	r3, #1
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	061b      	lsls	r3, r3, #24
 80049fe:	491b      	ldr	r1, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <HAL_RCC_OscConfig+0x478>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fc fffb 	bl	8001a04 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fc fff7 	bl	8001a04 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e05c      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x416>
 8004a30:	e054      	b.n	8004adc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <HAL_RCC_OscConfig+0x478>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a38:	f7fc ffe4 	bl	8001a04 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fc ffe0 	bl	8001a04 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e045      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x444>
 8004a5e:	e03d      	b.n	8004adc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d107      	bne.n	8004a78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e038      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40007000 	.word	0x40007000
 8004a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x4ec>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d028      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d121      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d11a      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d111      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800

08004aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0cc      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b00:	4b68      	ldr	r3, [pc, #416]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d90c      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0b8      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b40:	4b59      	ldr	r3, [pc, #356]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a58      	ldr	r2, [pc, #352]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b58:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a52      	ldr	r2, [pc, #328]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b64:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	494d      	ldr	r1, [pc, #308]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d044      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	4b47      	ldr	r3, [pc, #284]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d119      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e07f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004baa:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e06f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bba:	4b3b      	ldr	r3, [pc, #236]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e067      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bca:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f023 0203 	bic.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4934      	ldr	r1, [pc, #208]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bdc:	f7fc ff12 	bl	8001a04 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be4:	f7fc ff0e 	bl	8001a04 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e04f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 020c 	and.w	r2, r3, #12
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d1eb      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d20c      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e032      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4916      	ldr	r1, [pc, #88]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	490e      	ldr	r1, [pc, #56]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c72:	f000 f821 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c76:	4602      	mov	r2, r0
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	490a      	ldr	r1, [pc, #40]	; (8004cac <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	5ccb      	ldrb	r3, [r1, r3]
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fc fe72 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023c00 	.word	0x40023c00
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	0800a1b4 	.word	0x0800a1b4
 8004cb0:	20000000 	.word	0x20000000
 8004cb4:	20000004 	.word	0x20000004

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	b090      	sub	sp, #64	; 0x40
 8004cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd0:	4b59      	ldr	r3, [pc, #356]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d00d      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	f200 80a1 	bhi.w	8004e24 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x34>
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cea:	e09b      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b53      	ldr	r3, [pc, #332]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x184>)
 8004cee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cf0:	e09b      	b.n	8004e2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf2:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cf6:	e098      	b.n	8004e2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf8:	4b4f      	ldr	r3, [pc, #316]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d02:	4b4d      	ldr	r3, [pc, #308]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d028      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0e:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	2200      	movs	r2, #0
 8004d16:	623b      	str	r3, [r7, #32]
 8004d18:	627a      	str	r2, [r7, #36]	; 0x24
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d20:	2100      	movs	r1, #0
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d24:	fb03 f201 	mul.w	r2, r3, r1
 8004d28:	2300      	movs	r3, #0
 8004d2a:	fb00 f303 	mul.w	r3, r0, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	4a43      	ldr	r2, [pc, #268]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d32:	fba0 1202 	umull	r1, r2, r0, r2
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d38:	460a      	mov	r2, r1
 8004d3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3e:	4413      	add	r3, r2
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	2200      	movs	r2, #0
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	61fa      	str	r2, [r7, #28]
 8004d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d52:	f7fb fa41 	bl	80001d8 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5e:	e053      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d60:	4b35      	ldr	r3, [pc, #212]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	099b      	lsrs	r3, r3, #6
 8004d66:	2200      	movs	r2, #0
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	617a      	str	r2, [r7, #20]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d72:	f04f 0b00 	mov.w	fp, #0
 8004d76:	4652      	mov	r2, sl
 8004d78:	465b      	mov	r3, fp
 8004d7a:	f04f 0000 	mov.w	r0, #0
 8004d7e:	f04f 0100 	mov.w	r1, #0
 8004d82:	0159      	lsls	r1, r3, #5
 8004d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d88:	0150      	lsls	r0, r2, #5
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	ebb2 080a 	subs.w	r8, r2, sl
 8004d92:	eb63 090b 	sbc.w	r9, r3, fp
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004da2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004da6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004daa:	ebb2 0408 	subs.w	r4, r2, r8
 8004dae:	eb63 0509 	sbc.w	r5, r3, r9
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	00eb      	lsls	r3, r5, #3
 8004dbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dc0:	00e2      	lsls	r2, r4, #3
 8004dc2:	4614      	mov	r4, r2
 8004dc4:	461d      	mov	r5, r3
 8004dc6:	eb14 030a 	adds.w	r3, r4, sl
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	eb45 030b 	adc.w	r3, r5, fp
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dde:	4629      	mov	r1, r5
 8004de0:	028b      	lsls	r3, r1, #10
 8004de2:	4621      	mov	r1, r4
 8004de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004de8:	4621      	mov	r1, r4
 8004dea:	028a      	lsls	r2, r1, #10
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df2:	2200      	movs	r2, #0
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	60fa      	str	r2, [r7, #12]
 8004df8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dfc:	f7fb f9ec 	bl	80001d8 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4613      	mov	r3, r2
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	3301      	adds	r3, #1
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e22:	e002      	b.n	8004e2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x184>)
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3740      	adds	r7, #64	; 0x40
 8004e30:	46bd      	mov	sp, r7
 8004e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e36:	bf00      	nop
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	00f42400 	.word	0x00f42400
 8004e40:	017d7840 	.word	0x017d7840

08004e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000000 	.word	0x20000000

08004e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e60:	f7ff fff0 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0a9b      	lsrs	r3, r3, #10
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4903      	ldr	r1, [pc, #12]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	0800a1c4 	.word	0x0800a1c4

08004e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e041      	b.n	8004f1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fc fbec 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f000 fc3c 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d001      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e044      	b.n	8004fc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d013      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	; (8004fd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <HAL_TIM_Base_Start_IT+0xb8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d111      	bne.n	8004fb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d010      	beq.n	8004fc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb2:	e007      	b.n	8004fc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40000c00 	.word	0x40000c00
 8004fe4:	40014000 	.word	0x40014000

08004fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e041      	b.n	800507e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f839 	bl	8005086 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 fb8a 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <HAL_TIM_PWM_Start+0x24>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e022      	b.n	8005106 <HAL_TIM_PWM_Start+0x6a>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d109      	bne.n	80050da <HAL_TIM_PWM_Start+0x3e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	bf14      	ite	ne
 80050d2:	2301      	movne	r3, #1
 80050d4:	2300      	moveq	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	e015      	b.n	8005106 <HAL_TIM_PWM_Start+0x6a>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d109      	bne.n	80050f4 <HAL_TIM_PWM_Start+0x58>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e008      	b.n	8005106 <HAL_TIM_PWM_Start+0x6a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e068      	b.n	80051e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start+0x82>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800511c:	e013      	b.n	8005146 <HAL_TIM_PWM_Start+0xaa>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d104      	bne.n	800512e <HAL_TIM_PWM_Start+0x92>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512c:	e00b      	b.n	8005146 <HAL_TIM_PWM_Start+0xaa>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d104      	bne.n	800513e <HAL_TIM_PWM_Start+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800513c:	e003      	b.n	8005146 <HAL_TIM_PWM_Start+0xaa>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2201      	movs	r2, #1
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fda2 	bl	8005c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a23      	ldr	r2, [pc, #140]	; (80051e8 <HAL_TIM_PWM_Start+0x14c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d107      	bne.n	800516e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <HAL_TIM_PWM_Start+0x14c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d018      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005180:	d013      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_TIM_PWM_Start+0x150>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <HAL_TIM_PWM_Start+0x154>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_TIM_PWM_Start+0x158>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_TIM_PWM_Start+0x15c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d111      	bne.n	80051ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b06      	cmp	r3, #6
 80051ba:	d010      	beq.n	80051de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051cc:	e007      	b.n	80051de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40014000 	.word	0x40014000

080051fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d020      	beq.n	8005260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0202 	mvn.w	r2, #2
 8005230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa5b 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa4d 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa5e 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d020      	beq.n	80052ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0204 	mvn.w	r2, #4
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa35 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa27 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa38 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d020      	beq.n	80052f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01b      	beq.n	80052f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0208 	mvn.w	r2, #8
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa0f 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa01 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa12 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0210 	mvn.w	r2, #16
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2208      	movs	r2, #8
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9e9 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9db 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f9ec 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0201 	mvn.w	r2, #1
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fb fb80 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fd24 	bl	8005dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9bd 	bl	800572a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0220 	mvn.w	r2, #32
 80053cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fcf6 	bl	8005dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e0ae      	b.n	8005558 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b0c      	cmp	r3, #12
 8005406:	f200 809f 	bhi.w	8005548 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800540a:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	08005445 	.word	0x08005445
 8005414:	08005549 	.word	0x08005549
 8005418:	08005549 	.word	0x08005549
 800541c:	08005549 	.word	0x08005549
 8005420:	08005485 	.word	0x08005485
 8005424:	08005549 	.word	0x08005549
 8005428:	08005549 	.word	0x08005549
 800542c:	08005549 	.word	0x08005549
 8005430:	080054c7 	.word	0x080054c7
 8005434:	08005549 	.word	0x08005549
 8005438:	08005549 	.word	0x08005549
 800543c:	08005549 	.word	0x08005549
 8005440:	08005507 	.word	0x08005507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f9fe 	bl	800584c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0208 	orr.w	r2, r2, #8
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0204 	bic.w	r2, r2, #4
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	619a      	str	r2, [r3, #24]
      break;
 8005482:	e064      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fa44 	bl	8005918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800549e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6999      	ldr	r1, [r3, #24]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	619a      	str	r2, [r3, #24]
      break;
 80054c4:	e043      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa8f 	bl	80059f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0208 	orr.w	r2, r2, #8
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0204 	bic.w	r2, r2, #4
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	61da      	str	r2, [r3, #28]
      break;
 8005504:	e023      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fad9 	bl	8005ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	021a      	lsls	r2, r3, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	61da      	str	r2, [r3, #28]
      break;
 8005546:	e002      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
      break;
 800554c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIM_ConfigClockSource+0x1c>
 8005578:	2302      	movs	r3, #2
 800557a:	e0b4      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x186>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800559a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b4:	d03e      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0xd4>
 80055b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ba:	f200 8087 	bhi.w	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	f000 8086 	beq.w	80056d2 <HAL_TIM_ConfigClockSource+0x172>
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d87f      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b70      	cmp	r3, #112	; 0x70
 80055ce:	d01a      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0xa6>
 80055d0:	2b70      	cmp	r3, #112	; 0x70
 80055d2:	d87b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055d4:	2b60      	cmp	r3, #96	; 0x60
 80055d6:	d050      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x11a>
 80055d8:	2b60      	cmp	r3, #96	; 0x60
 80055da:	d877      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b50      	cmp	r3, #80	; 0x50
 80055de:	d03c      	beq.n	800565a <HAL_TIM_ConfigClockSource+0xfa>
 80055e0:	2b50      	cmp	r3, #80	; 0x50
 80055e2:	d873      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d058      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x13a>
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d86f      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b30      	cmp	r3, #48	; 0x30
 80055ee:	d064      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 80055f0:	2b30      	cmp	r3, #48	; 0x30
 80055f2:	d86b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d060      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d867      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d05c      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 8005600:	2b10      	cmp	r3, #16
 8005602:	d05a      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 8005604:	e062      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005616:	f000 fb1f 	bl	8005c58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	609a      	str	r2, [r3, #8]
      break;
 8005632:	e04f      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005644:	f000 fb08 	bl	8005c58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005656:	609a      	str	r2, [r3, #8]
      break;
 8005658:	e03c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005666:	461a      	mov	r2, r3
 8005668:	f000 fa7c 	bl	8005b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2150      	movs	r1, #80	; 0x50
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fad5 	bl	8005c22 <TIM_ITRx_SetConfig>
      break;
 8005678:	e02c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005686:	461a      	mov	r2, r3
 8005688:	f000 fa9b 	bl	8005bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2160      	movs	r1, #96	; 0x60
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fac5 	bl	8005c22 <TIM_ITRx_SetConfig>
      break;
 8005698:	e01c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fa5c 	bl	8005b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2140      	movs	r1, #64	; 0x40
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fab5 	bl	8005c22 <TIM_ITRx_SetConfig>
      break;
 80056b8:	e00c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f000 faac 	bl	8005c22 <TIM_ITRx_SetConfig>
      break;
 80056ca:	e003      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	e000      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a37      	ldr	r2, [pc, #220]	; (8005830 <TIM_Base_SetConfig+0xf0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a34      	ldr	r2, [pc, #208]	; (8005834 <TIM_Base_SetConfig+0xf4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a33      	ldr	r2, [pc, #204]	; (8005838 <TIM_Base_SetConfig+0xf8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a32      	ldr	r2, [pc, #200]	; (800583c <TIM_Base_SetConfig+0xfc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a28      	ldr	r2, [pc, #160]	; (8005830 <TIM_Base_SetConfig+0xf0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d017      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a25      	ldr	r2, [pc, #148]	; (8005834 <TIM_Base_SetConfig+0xf4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a24      	ldr	r2, [pc, #144]	; (8005838 <TIM_Base_SetConfig+0xf8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a23      	ldr	r2, [pc, #140]	; (800583c <TIM_Base_SetConfig+0xfc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a22      	ldr	r2, [pc, #136]	; (8005840 <TIM_Base_SetConfig+0x100>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a21      	ldr	r2, [pc, #132]	; (8005844 <TIM_Base_SetConfig+0x104>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a20      	ldr	r2, [pc, #128]	; (8005848 <TIM_Base_SetConfig+0x108>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d108      	bne.n	80057dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <TIM_Base_SetConfig+0xf0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d103      	bne.n	800580a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f043 0204 	orr.w	r2, r3, #4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40014000 	.word	0x40014000
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800

0800584c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f023 0201 	bic.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f023 0302 	bic.w	r3, r3, #2
 8005894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <TIM_OC1_SetConfig+0xc8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d10c      	bne.n	80058c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0308 	bic.w	r3, r3, #8
 80058ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 0304 	bic.w	r3, r3, #4
 80058c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a13      	ldr	r2, [pc, #76]	; (8005914 <TIM_OC1_SetConfig+0xc8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d111      	bne.n	80058ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40010000 	.word	0x40010000

08005918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f023 0210 	bic.w	r2, r3, #16
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0320 	bic.w	r3, r3, #32
 8005962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <TIM_OC2_SetConfig+0xd4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10d      	bne.n	8005994 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a15      	ldr	r2, [pc, #84]	; (80059ec <TIM_OC2_SetConfig+0xd4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d113      	bne.n	80059c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40010000 	.word	0x40010000

080059f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <TIM_OC3_SetConfig+0xd0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d10d      	bne.n	8005a6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a14      	ldr	r2, [pc, #80]	; (8005ac0 <TIM_OC3_SetConfig+0xd0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d113      	bne.n	8005a9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40010000 	.word	0x40010000

08005ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a10      	ldr	r2, [pc, #64]	; (8005b60 <TIM_OC4_SetConfig+0x9c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d109      	bne.n	8005b38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40010000 	.word	0x40010000

08005b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0201 	bic.w	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f023 030a 	bic.w	r3, r3, #10
 8005ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f023 0210 	bic.w	r2, r3, #16
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	031b      	lsls	r3, r3, #12
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f043 0307 	orr.w	r3, r3, #7
 8005c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	609a      	str	r2, [r3, #8]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	609a      	str	r2, [r3, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2201      	movs	r2, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e050      	b.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1c      	ldr	r2, [pc, #112]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d018      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d013      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a16      	ldr	r2, [pc, #88]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d009      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10c      	bne.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40014000 	.word	0x40014000

08005dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005de8:	b084      	sub	sp, #16
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	f107 001c 	add.w	r0, r7, #28
 8005df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dfa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d123      	bne.n	8005e4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d105      	bne.n	8005e3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 fae8 	bl	8007414 <USB_CoreReset>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
 8005e48:	e01b      	b.n	8005e82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 fadc 	bl	8007414 <USB_CoreReset>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38
 8005e74:	e005      	b.n	8005e82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e82:	7fbb      	ldrb	r3, [r7, #30]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10b      	bne.n	8005ea0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f043 0206 	orr.w	r2, r3, #6
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eac:	b004      	add	sp, #16
 8005eae:	4770      	bx	lr

08005eb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d165      	bne.n	8005f90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4a41      	ldr	r2, [pc, #260]	; (8005fcc <USB_SetTurnaroundTime+0x11c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d906      	bls.n	8005eda <USB_SetTurnaroundTime+0x2a>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <USB_SetTurnaroundTime+0x120>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d202      	bcs.n	8005eda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ed4:	230f      	movs	r3, #15
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e062      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4a3c      	ldr	r2, [pc, #240]	; (8005fd0 <USB_SetTurnaroundTime+0x120>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d306      	bcc.n	8005ef0 <USB_SetTurnaroundTime+0x40>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a3b      	ldr	r2, [pc, #236]	; (8005fd4 <USB_SetTurnaroundTime+0x124>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d202      	bcs.n	8005ef0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005eea:	230e      	movs	r3, #14
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e057      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a38      	ldr	r2, [pc, #224]	; (8005fd4 <USB_SetTurnaroundTime+0x124>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d306      	bcc.n	8005f06 <USB_SetTurnaroundTime+0x56>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <USB_SetTurnaroundTime+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d202      	bcs.n	8005f06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f00:	230d      	movs	r3, #13
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e04c      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4a33      	ldr	r2, [pc, #204]	; (8005fd8 <USB_SetTurnaroundTime+0x128>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d306      	bcc.n	8005f1c <USB_SetTurnaroundTime+0x6c>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a32      	ldr	r2, [pc, #200]	; (8005fdc <USB_SetTurnaroundTime+0x12c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d802      	bhi.n	8005f1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f16:	230c      	movs	r3, #12
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e041      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <USB_SetTurnaroundTime+0x12c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d906      	bls.n	8005f32 <USB_SetTurnaroundTime+0x82>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <USB_SetTurnaroundTime+0x130>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d802      	bhi.n	8005f32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f2c:	230b      	movs	r3, #11
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e036      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4a2a      	ldr	r2, [pc, #168]	; (8005fe0 <USB_SetTurnaroundTime+0x130>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d906      	bls.n	8005f48 <USB_SetTurnaroundTime+0x98>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4a29      	ldr	r2, [pc, #164]	; (8005fe4 <USB_SetTurnaroundTime+0x134>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d802      	bhi.n	8005f48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f42:	230a      	movs	r3, #10
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e02b      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4a26      	ldr	r2, [pc, #152]	; (8005fe4 <USB_SetTurnaroundTime+0x134>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d906      	bls.n	8005f5e <USB_SetTurnaroundTime+0xae>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4a25      	ldr	r2, [pc, #148]	; (8005fe8 <USB_SetTurnaroundTime+0x138>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d202      	bcs.n	8005f5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f58:	2309      	movs	r3, #9
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e020      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <USB_SetTurnaroundTime+0x138>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d306      	bcc.n	8005f74 <USB_SetTurnaroundTime+0xc4>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4a20      	ldr	r2, [pc, #128]	; (8005fec <USB_SetTurnaroundTime+0x13c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d802      	bhi.n	8005f74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e015      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <USB_SetTurnaroundTime+0x13c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d906      	bls.n	8005f8a <USB_SetTurnaroundTime+0xda>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <USB_SetTurnaroundTime+0x140>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d202      	bcs.n	8005f8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f84:	2307      	movs	r3, #7
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e00a      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f8a:	2306      	movs	r3, #6
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e007      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f96:	2309      	movs	r3, #9
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e001      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f9c:	2309      	movs	r3, #9
 8005f9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	00d8acbf 	.word	0x00d8acbf
 8005fd0:	00e4e1c0 	.word	0x00e4e1c0
 8005fd4:	00f42400 	.word	0x00f42400
 8005fd8:	01067380 	.word	0x01067380
 8005fdc:	011a499f 	.word	0x011a499f
 8005fe0:	01312cff 	.word	0x01312cff
 8005fe4:	014ca43f 	.word	0x014ca43f
 8005fe8:	016e3600 	.word	0x016e3600
 8005fec:	01a6ab1f 	.word	0x01a6ab1f
 8005ff0:	01e84800 	.word	0x01e84800

08005ff4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 0201 	bic.w	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d115      	bne.n	8006086 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006066:	200a      	movs	r0, #10
 8006068:	f7fb fcd8 	bl	8001a1c <HAL_Delay>
      ms += 10U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	330a      	adds	r3, #10
 8006070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 f93f 	bl	80072f6 <USB_GetMode>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d01e      	beq.n	80060bc <USB_SetCurrentMode+0x84>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2bc7      	cmp	r3, #199	; 0xc7
 8006082:	d9f0      	bls.n	8006066 <USB_SetCurrentMode+0x2e>
 8006084:	e01a      	b.n	80060bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d115      	bne.n	80060b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006098:	200a      	movs	r0, #10
 800609a:	f7fb fcbf 	bl	8001a1c <HAL_Delay>
      ms += 10U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	330a      	adds	r3, #10
 80060a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f926 	bl	80072f6 <USB_GetMode>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <USB_SetCurrentMode+0x84>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2bc7      	cmp	r3, #199	; 0xc7
 80060b4:	d9f0      	bls.n	8006098 <USB_SetCurrentMode+0x60>
 80060b6:	e001      	b.n	80060bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e005      	b.n	80060c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2bc8      	cmp	r3, #200	; 0xc8
 80060c0:	d101      	bne.n	80060c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060d0:	b084      	sub	sp, #16
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	e009      	b.n	8006104 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3340      	adds	r3, #64	; 0x40
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	3301      	adds	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b0e      	cmp	r3, #14
 8006108:	d9f2      	bls.n	80060f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800610a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800610e:	2b00      	cmp	r3, #0
 8006110:	d11c      	bne.n	800614c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006120:	f043 0302 	orr.w	r3, r3, #2
 8006124:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
 800614a:	e00b      	b.n	8006164 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800616a:	461a      	mov	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006170:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10d      	bne.n	8006194 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006180:	2100      	movs	r1, #0
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f968 	bl	8006458 <USB_SetDevSpeed>
 8006188:	e008      	b.n	800619c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800618a:	2101      	movs	r1, #1
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f963 	bl	8006458 <USB_SetDevSpeed>
 8006192:	e003      	b.n	800619c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006194:	2103      	movs	r1, #3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f95e 	bl	8006458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800619c:	2110      	movs	r1, #16
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8fa 	bl	8006398 <USB_FlushTxFifo>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f924 	bl	80063fc <USB_FlushRxFifo>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	461a      	mov	r2, r3
 80061d2:	2300      	movs	r3, #0
 80061d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061dc:	461a      	mov	r2, r3
 80061de:	2300      	movs	r3, #0
 80061e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	e043      	b.n	8006270 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061fe:	d118      	bne.n	8006232 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e013      	b.n	8006244 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e008      	b.n	8006244 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	461a      	mov	r2, r3
 8006240:	2300      	movs	r3, #0
 8006242:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006250:	461a      	mov	r2, r3
 8006252:	2300      	movs	r3, #0
 8006254:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	461a      	mov	r2, r3
 8006264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	3301      	adds	r3, #1
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006274:	461a      	mov	r2, r3
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4293      	cmp	r3, r2
 800627a:	d3b5      	bcc.n	80061e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	e043      	b.n	800630a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006298:	d118      	bne.n	80062cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	461a      	mov	r2, r3
 80062ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	e013      	b.n	80062de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	461a      	mov	r2, r3
 80062c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e008      	b.n	80062de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	461a      	mov	r2, r3
 80062da:	2300      	movs	r3, #0
 80062dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fc:	461a      	mov	r2, r3
 80062fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	3301      	adds	r3, #1
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800630e:	461a      	mov	r2, r3
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4293      	cmp	r3, r2
 8006314:	d3b5      	bcc.n	8006282 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006328:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006336:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800633c:	2b00      	cmp	r3, #0
 800633e:	d105      	bne.n	800634c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f043 0210 	orr.w	r2, r3, #16
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	4b10      	ldr	r3, [pc, #64]	; (8006394 <USB_DevInit+0x2c4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006358:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f043 0208 	orr.w	r2, r3, #8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800636c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006390:	b004      	add	sp, #16
 8006392:	4770      	bx	lr
 8006394:	803c3800 	.word	0x803c3800

08006398 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80063b2:	d901      	bls.n	80063b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e01b      	b.n	80063f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	daf2      	bge.n	80063a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	019b      	lsls	r3, r3, #6
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80063dc:	d901      	bls.n	80063e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e006      	b.n	80063f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d0f0      	beq.n	80063d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006414:	d901      	bls.n	800641a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e018      	b.n	800644c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	daf2      	bge.n	8006408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2210      	movs	r2, #16
 800642a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006438:	d901      	bls.n	800643e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e006      	b.n	800644c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	2b10      	cmp	r3, #16
 8006448:	d0f0      	beq.n	800642c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	68f9      	ldr	r1, [r7, #12]
 8006474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006478:	4313      	orrs	r3, r2
 800647a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800648a:	b480      	push	{r7}
 800648c:	b087      	sub	sp, #28
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0306 	and.w	r3, r3, #6
 80064a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064aa:	2300      	movs	r3, #0
 80064ac:	75fb      	strb	r3, [r7, #23]
 80064ae:	e00a      	b.n	80064c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d002      	beq.n	80064bc <USB_GetDevSpeed+0x32>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b06      	cmp	r3, #6
 80064ba:	d102      	bne.n	80064c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064bc:	2302      	movs	r3, #2
 80064be:	75fb      	strb	r3, [r7, #23]
 80064c0:	e001      	b.n	80064c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064c2:	230f      	movs	r3, #15
 80064c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d13a      	bne.n	8006566 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	2101      	movs	r1, #1
 8006502:	fa01 f303 	lsl.w	r3, r1, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	68f9      	ldr	r1, [r7, #12]
 800650a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800650e:	4313      	orrs	r3, r2
 8006510:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d155      	bne.n	80065d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	791b      	ldrb	r3, [r3, #4]
 8006542:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006544:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	059b      	lsls	r3, r3, #22
 800654a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800654c:	4313      	orrs	r3, r2
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	e036      	b.n	80065d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656c:	69da      	ldr	r2, [r3, #28]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	2101      	movs	r1, #1
 8006578:	fa01 f303 	lsl.w	r3, r1, r3
 800657c:	041b      	lsls	r3, r3, #16
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006584:	4313      	orrs	r3, r2
 8006586:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d11a      	bne.n	80065d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	791b      	ldrb	r3, [r3, #4]
 80065b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065ba:	430b      	orrs	r3, r1
 80065bc:	4313      	orrs	r3, r2
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d161      	bne.n	80066c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006616:	d11f      	bne.n	8006658 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006636:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	2101      	movs	r1, #1
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	b29b      	uxth	r3, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006678:	4013      	ands	r3, r2
 800667a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	b29b      	uxth	r3, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800669c:	4013      	ands	r3, r2
 800669e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	0159      	lsls	r1, r3, #5
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	4619      	mov	r1, r3
 80066bc:	4b35      	ldr	r3, [pc, #212]	; (8006794 <USB_DeactivateEndpoint+0x1b0>)
 80066be:	4013      	ands	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]
 80066c2:	e060      	b.n	8006786 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066da:	d11f      	bne.n	800671c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006716:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	43db      	mvns	r3, r3
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800673c:	4013      	ands	r3, r2
 800673e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	2101      	movs	r1, #1
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	43db      	mvns	r3, r3
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006760:	4013      	ands	r3, r2
 8006762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	0159      	lsls	r1, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	440b      	add	r3, r1
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	4619      	mov	r1, r3
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <USB_DeactivateEndpoint+0x1b4>)
 8006782:	4013      	ands	r3, r2
 8006784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	ec337800 	.word	0xec337800
 8006798:	eff37800 	.word	0xeff37800

0800679c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	; 0x28
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f040 817f 	bne.w	8006abc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d132      	bne.n	800682c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006824:	0cdb      	lsrs	r3, r3, #19
 8006826:	04db      	lsls	r3, r3, #19
 8006828:	6113      	str	r3, [r2, #16]
 800682a:	e097      	b.n	800695c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006846:	0cdb      	lsrs	r3, r3, #19
 8006848:	04db      	lsls	r3, r3, #19
 800684a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006866:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800686a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800686e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11a      	bne.n	80068ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d903      	bls.n	800688a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a8:	6113      	str	r3, [r2, #16]
 80068aa:	e044      	b.n	8006936 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	4413      	add	r3, r2
 80068b6:	1e5a      	subs	r2, r3, #1
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	8afb      	ldrh	r3, [r7, #22]
 80068d2:	04d9      	lsls	r1, r3, #19
 80068d4:	4ba4      	ldr	r3, [pc, #656]	; (8006b68 <USB_EPStartXfer+0x3cc>)
 80068d6:	400b      	ands	r3, r1
 80068d8:	69b9      	ldr	r1, [r7, #24]
 80068da:	0148      	lsls	r0, r1, #5
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	4401      	add	r1, r0
 80068e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068e4:	4313      	orrs	r3, r2
 80068e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	791b      	ldrb	r3, [r3, #4]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d122      	bne.n	8006936 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800690e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	8afb      	ldrh	r3, [r7, #22]
 8006920:	075b      	lsls	r3, r3, #29
 8006922:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006926:	69b9      	ldr	r1, [r7, #24]
 8006928:	0148      	lsls	r0, r1, #5
 800692a:	69f9      	ldr	r1, [r7, #28]
 800692c:	4401      	add	r1, r0
 800692e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006932:	4313      	orrs	r3, r2
 8006934:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	0148      	lsls	r0, r1, #5
 8006950:	69f9      	ldr	r1, [r7, #28]
 8006952:	4401      	add	r1, r0
 8006954:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006958:	4313      	orrs	r3, r2
 800695a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d14b      	bne.n	80069fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006976:	461a      	mov	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	791b      	ldrb	r3, [r3, #4]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d128      	bne.n	80069d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006992:	2b00      	cmp	r3, #0
 8006994:	d110      	bne.n	80069b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e00f      	b.n	80069d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e166      	b.n	8006cc8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a18:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	791b      	ldrb	r3, [r3, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d015      	beq.n	8006a4e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 814e 	beq.w	8006cc8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	69f9      	ldr	r1, [r7, #28]
 8006a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	634b      	str	r3, [r1, #52]	; 0x34
 8006a4c:	e13c      	b.n	8006cc8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d110      	bne.n	8006a80 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e00f      	b.n	8006aa0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68d9      	ldr	r1, [r3, #12]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	781a      	ldrb	r2, [r3, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	b298      	uxth	r0, r3
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f9b9 	bl	8006e2c <USB_WritePacket>
 8006aba:	e105      	b.n	8006cc8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad6:	0cdb      	lsrs	r3, r3, #19
 8006ad8:	04db      	lsls	r3, r3, #19
 8006ada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006afa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006afe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d132      	bne.n	8006b6c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b34:	69b9      	ldr	r1, [r7, #24]
 8006b36:	0148      	lsls	r0, r1, #5
 8006b38:	69f9      	ldr	r1, [r7, #28]
 8006b3a:	4401      	add	r1, r0
 8006b3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b40:	4313      	orrs	r3, r2
 8006b42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b62:	6113      	str	r3, [r2, #16]
 8006b64:	e062      	b.n	8006c2c <USB_EPStartXfer+0x490>
 8006b66:	bf00      	nop
 8006b68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d123      	bne.n	8006bbc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b8a:	69b9      	ldr	r1, [r7, #24]
 8006b8c:	0148      	lsls	r0, r1, #5
 8006b8e:	69f9      	ldr	r1, [r7, #28]
 8006b90:	4401      	add	r1, r0
 8006b92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b96:	4313      	orrs	r3, r2
 8006b98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb8:	6113      	str	r3, [r2, #16]
 8006bba:	e037      	b.n	8006c2c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	1e5a      	subs	r2, r3, #1
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	8afa      	ldrh	r2, [r7, #22]
 8006bd8:	fb03 f202 	mul.w	r2, r3, r2
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	8afb      	ldrh	r3, [r7, #22]
 8006bf0:	04d9      	lsls	r1, r3, #19
 8006bf2:	4b38      	ldr	r3, [pc, #224]	; (8006cd4 <USB_EPStartXfer+0x538>)
 8006bf4:	400b      	ands	r3, r1
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	0148      	lsls	r0, r1, #5
 8006bfa:	69f9      	ldr	r1, [r7, #28]
 8006bfc:	4401      	add	r1, r0
 8006bfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c02:	4313      	orrs	r3, r2
 8006c04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1c:	69b9      	ldr	r1, [r7, #24]
 8006c1e:	0148      	lsls	r0, r1, #5
 8006c20:	69f9      	ldr	r1, [r7, #28]
 8006c22:	4401      	add	r1, r0
 8006c24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d10d      	bne.n	8006c4e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	68d9      	ldr	r1, [r3, #12]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	460a      	mov	r2, r1
 8006c4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	791b      	ldrb	r3, [r3, #4]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d128      	bne.n	8006ca8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d110      	bne.n	8006c88 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e00f      	b.n	8006ca8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	1ff80000 	.word	0x1ff80000

08006cd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d14a      	bne.n	8006d8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0e:	f040 8086 	bne.w	8006e1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	7812      	ldrb	r2, [r2, #0]
 8006d26:	0151      	lsls	r1, r2, #5
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	440a      	add	r2, r1
 8006d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d902      	bls.n	8006d70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d6e:	e056      	b.n	8006e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d88:	d0e7      	beq.n	8006d5a <USB_EPStopXfer+0x82>
 8006d8a:	e048      	b.n	8006e1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da4:	d13b      	bne.n	8006e1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	7812      	ldrb	r2, [r2, #0]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	7812      	ldrb	r2, [r2, #0]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d902      	bls.n	8006e04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	75fb      	strb	r3, [r7, #23]
          break;
 8006e02:	e00c      	b.n	8006e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e1c:	d0e7      	beq.n	8006dee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	; 0x24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4611      	mov	r1, r2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	71fb      	strb	r3, [r7, #7]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d123      	bne.n	8006e9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e52:	88bb      	ldrh	r3, [r7, #4]
 8006e54:	3303      	adds	r3, #3
 8006e56:	089b      	lsrs	r3, r3, #2
 8006e58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	e018      	b.n	8006e92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	031a      	lsls	r2, r3, #12
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	3301      	adds	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	3301      	adds	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d3e2      	bcc.n	8006e60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3724      	adds	r7, #36	; 0x24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b08b      	sub	sp, #44	; 0x2c
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	089b      	lsrs	r3, r3, #2
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	623b      	str	r3, [r7, #32]
 8006ed2:	e014      	b.n	8006efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	3301      	adds	r3, #1
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	3301      	adds	r3, #1
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	3301      	adds	r3, #1
 8006efc:	623b      	str	r3, [r7, #32]
 8006efe:	6a3a      	ldr	r2, [r7, #32]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d3e6      	bcc.n	8006ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f06:	8bfb      	ldrh	r3, [r7, #30]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01e      	beq.n	8006f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f16:	461a      	mov	r2, r3
 8006f18:	f107 0310 	add.w	r3, r7, #16
 8006f1c:	6812      	ldr	r2, [r2, #0]
 8006f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	701a      	strb	r2, [r3, #0]
      i++;
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	3301      	adds	r3, #1
 8006f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006f3e:	8bfb      	ldrh	r3, [r7, #30]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f44:	8bfb      	ldrh	r3, [r7, #30]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1ea      	bne.n	8006f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	372c      	adds	r7, #44	; 0x2c
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d12c      	bne.n	8006fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	db12      	blt.n	8006fac <USB_EPSetStall+0x54>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00f      	beq.n	8006fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	e02b      	b.n	8007026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	db12      	blt.n	8007006 <USB_EPSetStall+0xae>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007000:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d128      	bne.n	80070a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800706e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	791b      	ldrb	r3, [r3, #4]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d003      	beq.n	8007080 <USB_EPClearStall+0x4c>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	791b      	ldrb	r3, [r3, #4]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d138      	bne.n	80070f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e027      	b.n	80070f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	791b      	ldrb	r3, [r3, #4]
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d003      	beq.n	80070d2 <USB_EPClearStall+0x9e>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	791b      	ldrb	r3, [r3, #4]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d10f      	bne.n	80070f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800711e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007134:	68f9      	ldr	r1, [r7, #12]
 8007136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800713a:	4313      	orrs	r3, r2
 800713c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007166:	f023 0303 	bic.w	r3, r3, #3
 800716a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717a:	f023 0302 	bic.w	r3, r3, #2
 800717e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071a8:	f023 0303 	bic.w	r3, r3, #3
 80071ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4013      	ands	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	4013      	ands	r3, r2
 8007218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	0c1b      	lsrs	r3, r3, #16
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	4013      	ands	r3, r2
 800724c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	b29b      	uxth	r3, r3
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4013      	ands	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800728c:	68bb      	ldr	r3, [r7, #8]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800729a:	b480      	push	{r7}
 800729c:	b087      	sub	sp, #28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ca:	01db      	lsls	r3, r3, #7
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4013      	ands	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072e8:	68bb      	ldr	r3, [r7, #8]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f003 0301 	and.w	r3, r3, #1
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007330:	f023 0307 	bic.w	r3, r3, #7
 8007334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	460b      	mov	r3, r1
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	333c      	adds	r3, #60	; 0x3c
 800736e:	3304      	adds	r3, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4a26      	ldr	r2, [pc, #152]	; (8007410 <USB_EP0_OutStart+0xb8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d90a      	bls.n	8007392 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800738c:	d101      	bne.n	8007392 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	e037      	b.n	8007402 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	461a      	mov	r2, r3
 800739a:	2300      	movs	r3, #0
 800739c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c0:	f043 0318 	orr.w	r3, r3, #24
 80073c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80073d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80073da:	7afb      	ldrb	r3, [r7, #11]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d10f      	bne.n	8007400 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80073fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	4f54300a 	.word	0x4f54300a

08007414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3301      	adds	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800742c:	d901      	bls.n	8007432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e022      	b.n	8007478 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	daf2      	bge.n	8007420 <USB_CoreReset+0xc>

  count = 10U;
 800743a:	230a      	movs	r3, #10
 800743c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800743e:	e002      	b.n	8007446 <USB_CoreReset+0x32>
  {
    count--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3b01      	subs	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f9      	bne.n	8007440 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f043 0201 	orr.w	r2, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007464:	d901      	bls.n	800746a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e006      	b.n	8007478 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b01      	cmp	r3, #1
 8007474:	d0f0      	beq.n	8007458 <USB_CoreReset+0x44>

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007490:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007494:	f002 fd22 	bl	8009edc <USBD_static_malloc>
 8007498:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32b0      	adds	r2, #176	; 0xb0
 80074aa:	2100      	movs	r1, #0
 80074ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80074b0:	2302      	movs	r3, #2
 80074b2:	e0d4      	b.n	800765e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80074b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80074b8:	2100      	movs	r1, #0
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f002 fe06 	bl	800a0cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32b0      	adds	r2, #176	; 0xb0
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32b0      	adds	r2, #176	; 0xb0
 80074da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	7c1b      	ldrb	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d138      	bne.n	800755e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074ec:	4b5e      	ldr	r3, [pc, #376]	; (8007668 <USBD_CDC_Init+0x1e4>)
 80074ee:	7819      	ldrb	r1, [r3, #0]
 80074f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074f4:	2202      	movs	r2, #2
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f002 fbcd 	bl	8009c96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074fc:	4b5a      	ldr	r3, [pc, #360]	; (8007668 <USBD_CDC_Init+0x1e4>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	f003 020f 	and.w	r2, r3, #15
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	3323      	adds	r3, #35	; 0x23
 8007512:	2201      	movs	r2, #1
 8007514:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007516:	4b55      	ldr	r3, [pc, #340]	; (800766c <USBD_CDC_Init+0x1e8>)
 8007518:	7819      	ldrb	r1, [r3, #0]
 800751a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800751e:	2202      	movs	r2, #2
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f002 fbb8 	bl	8009c96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007526:	4b51      	ldr	r3, [pc, #324]	; (800766c <USBD_CDC_Init+0x1e8>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f003 020f 	and.w	r2, r3, #15
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	f203 1363 	addw	r3, r3, #355	; 0x163
 800753e:	2201      	movs	r2, #1
 8007540:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007542:	4b4b      	ldr	r3, [pc, #300]	; (8007670 <USBD_CDC_Init+0x1ec>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	f003 020f 	and.w	r2, r3, #15
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	331c      	adds	r3, #28
 8007558:	2210      	movs	r2, #16
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e035      	b.n	80075ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800755e:	4b42      	ldr	r3, [pc, #264]	; (8007668 <USBD_CDC_Init+0x1e4>)
 8007560:	7819      	ldrb	r1, [r3, #0]
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	2202      	movs	r2, #2
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f002 fb95 	bl	8009c96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800756c:	4b3e      	ldr	r3, [pc, #248]	; (8007668 <USBD_CDC_Init+0x1e4>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	f003 020f 	and.w	r2, r3, #15
 8007574:	6879      	ldr	r1, [r7, #4]
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	3323      	adds	r3, #35	; 0x23
 8007582:	2201      	movs	r2, #1
 8007584:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007586:	4b39      	ldr	r3, [pc, #228]	; (800766c <USBD_CDC_Init+0x1e8>)
 8007588:	7819      	ldrb	r1, [r3, #0]
 800758a:	2340      	movs	r3, #64	; 0x40
 800758c:	2202      	movs	r2, #2
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f002 fb81 	bl	8009c96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007594:	4b35      	ldr	r3, [pc, #212]	; (800766c <USBD_CDC_Init+0x1e8>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	f003 020f 	and.w	r2, r3, #15
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	f203 1363 	addw	r3, r3, #355	; 0x163
 80075ac:	2201      	movs	r2, #1
 80075ae:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80075b0:	4b2f      	ldr	r3, [pc, #188]	; (8007670 <USBD_CDC_Init+0x1ec>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 020f 	and.w	r2, r3, #15
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	440b      	add	r3, r1
 80075c4:	331c      	adds	r3, #28
 80075c6:	2210      	movs	r2, #16
 80075c8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075ca:	4b29      	ldr	r3, [pc, #164]	; (8007670 <USBD_CDC_Init+0x1ec>)
 80075cc:	7819      	ldrb	r1, [r3, #0]
 80075ce:	2308      	movs	r3, #8
 80075d0:	2203      	movs	r2, #3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f002 fb5f 	bl	8009c96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80075d8:	4b25      	ldr	r3, [pc, #148]	; (8007670 <USBD_CDC_Init+0x1ec>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	f003 020f 	and.w	r2, r3, #15
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	440b      	add	r3, r1
 80075ec:	3323      	adds	r3, #35	; 0x23
 80075ee:	2201      	movs	r2, #1
 80075f0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	33b0      	adds	r3, #176	; 0xb0
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007628:	2302      	movs	r3, #2
 800762a:	e018      	b.n	800765e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	7c1b      	ldrb	r3, [r3, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <USBD_CDC_Init+0x1e8>)
 8007636:	7819      	ldrb	r1, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800763e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f002 fc16 	bl	8009e74 <USBD_LL_PrepareReceive>
 8007648:	e008      	b.n	800765c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800764a:	4b08      	ldr	r3, [pc, #32]	; (800766c <USBD_CDC_Init+0x1e8>)
 800764c:	7819      	ldrb	r1, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007654:	2340      	movs	r3, #64	; 0x40
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f002 fc0c 	bl	8009e74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000093 	.word	0x20000093
 800766c:	20000094 	.word	0x20000094
 8007670:	20000095 	.word	0x20000095

08007674 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007680:	4b3a      	ldr	r3, [pc, #232]	; (800776c <USBD_CDC_DeInit+0xf8>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f002 fb2b 	bl	8009ce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800768c:	4b37      	ldr	r3, [pc, #220]	; (800776c <USBD_CDC_DeInit+0xf8>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	f003 020f 	and.w	r2, r3, #15
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	3323      	adds	r3, #35	; 0x23
 80076a2:	2200      	movs	r2, #0
 80076a4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80076a6:	4b32      	ldr	r3, [pc, #200]	; (8007770 <USBD_CDC_DeInit+0xfc>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f002 fb18 	bl	8009ce2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80076b2:	4b2f      	ldr	r3, [pc, #188]	; (8007770 <USBD_CDC_DeInit+0xfc>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	f003 020f 	and.w	r2, r3, #15
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	f203 1363 	addw	r3, r3, #355	; 0x163
 80076ca:	2200      	movs	r2, #0
 80076cc:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80076ce:	4b29      	ldr	r3, [pc, #164]	; (8007774 <USBD_CDC_DeInit+0x100>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f002 fb04 	bl	8009ce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80076da:	4b26      	ldr	r3, [pc, #152]	; (8007774 <USBD_CDC_DeInit+0x100>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	3323      	adds	r3, #35	; 0x23
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80076f4:	4b1f      	ldr	r3, [pc, #124]	; (8007774 <USBD_CDC_DeInit+0x100>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	f003 020f 	and.w	r2, r3, #15
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	440b      	add	r3, r1
 8007708:	331c      	adds	r3, #28
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	32b0      	adds	r2, #176	; 0xb0
 8007718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d01f      	beq.n	8007760 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	33b0      	adds	r3, #176	; 0xb0
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32b0      	adds	r2, #176	; 0xb0
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	4618      	mov	r0, r3
 8007744:	f002 fbd8 	bl	8009ef8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	32b0      	adds	r2, #176	; 0xb0
 8007752:	2100      	movs	r1, #0
 8007754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000093 	.word	0x20000093
 8007770:	20000094 	.word	0x20000094
 8007774:	20000095 	.word	0x20000095

08007778 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	32b0      	adds	r2, #176	; 0xb0
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e0bf      	b.n	8007928 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d050      	beq.n	8007856 <USBD_CDC_Setup+0xde>
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	f040 80af 	bne.w	8007918 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	88db      	ldrh	r3, [r3, #6]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d03a      	beq.n	8007838 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b25b      	sxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da1b      	bge.n	8007804 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	33b0      	adds	r3, #176	; 0xb0
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80077e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	88d2      	ldrh	r2, [r2, #6]
 80077e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	88db      	ldrh	r3, [r3, #6]
 80077ee:	2b07      	cmp	r3, #7
 80077f0:	bf28      	it	cs
 80077f2:	2307      	movcs	r3, #7
 80077f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	89fa      	ldrh	r2, [r7, #14]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fdab 	bl	8009358 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007802:	e090      	b.n	8007926 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	785a      	ldrb	r2, [r3, #1]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	88db      	ldrh	r3, [r3, #6]
 8007812:	2b3f      	cmp	r3, #63	; 0x3f
 8007814:	d803      	bhi.n	800781e <USBD_CDC_Setup+0xa6>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	b2da      	uxtb	r2, r3
 800781c:	e000      	b.n	8007820 <USBD_CDC_Setup+0xa8>
 800781e:	2240      	movs	r2, #64	; 0x40
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007826:	6939      	ldr	r1, [r7, #16]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800782e:	461a      	mov	r2, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fdc0 	bl	80093b6 <USBD_CtlPrepareRx>
      break;
 8007836:	e076      	b.n	8007926 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	33b0      	adds	r3, #176	; 0xb0
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	7850      	ldrb	r0, [r2, #1]
 800784e:	2200      	movs	r2, #0
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	4798      	blx	r3
      break;
 8007854:	e067      	b.n	8007926 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b0b      	cmp	r3, #11
 800785c:	d851      	bhi.n	8007902 <USBD_CDC_Setup+0x18a>
 800785e:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <USBD_CDC_Setup+0xec>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007895 	.word	0x08007895
 8007868:	08007911 	.word	0x08007911
 800786c:	08007903 	.word	0x08007903
 8007870:	08007903 	.word	0x08007903
 8007874:	08007903 	.word	0x08007903
 8007878:	08007903 	.word	0x08007903
 800787c:	08007903 	.word	0x08007903
 8007880:	08007903 	.word	0x08007903
 8007884:	08007903 	.word	0x08007903
 8007888:	08007903 	.word	0x08007903
 800788c:	080078bf 	.word	0x080078bf
 8007890:	080078e9 	.word	0x080078e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b03      	cmp	r3, #3
 800789e:	d107      	bne.n	80078b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078a0:	f107 030a 	add.w	r3, r7, #10
 80078a4:	2202      	movs	r2, #2
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fd55 	bl	8009358 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ae:	e032      	b.n	8007916 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 fcd3 	bl	800925e <USBD_CtlError>
            ret = USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	75fb      	strb	r3, [r7, #23]
          break;
 80078bc:	e02b      	b.n	8007916 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d107      	bne.n	80078da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078ca:	f107 030d 	add.w	r3, r7, #13
 80078ce:	2201      	movs	r2, #1
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fd40 	bl	8009358 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078d8:	e01d      	b.n	8007916 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fcbe 	bl	800925e <USBD_CtlError>
            ret = USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	75fb      	strb	r3, [r7, #23]
          break;
 80078e6:	e016      	b.n	8007916 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d00f      	beq.n	8007914 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fcb1 	bl	800925e <USBD_CtlError>
            ret = USBD_FAIL;
 80078fc:	2303      	movs	r3, #3
 80078fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007900:	e008      	b.n	8007914 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fcaa 	bl	800925e <USBD_CtlError>
          ret = USBD_FAIL;
 800790a:	2303      	movs	r3, #3
 800790c:	75fb      	strb	r3, [r7, #23]
          break;
 800790e:	e002      	b.n	8007916 <USBD_CDC_Setup+0x19e>
          break;
 8007910:	bf00      	nop
 8007912:	e008      	b.n	8007926 <USBD_CDC_Setup+0x1ae>
          break;
 8007914:	bf00      	nop
      }
      break;
 8007916:	e006      	b.n	8007926 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 fc9f 	bl	800925e <USBD_CtlError>
      ret = USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	75fb      	strb	r3, [r7, #23]
      break;
 8007924:	bf00      	nop
  }

  return (uint8_t)ret;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007942:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	32b0      	adds	r2, #176	; 0xb0
 800794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007956:	2303      	movs	r3, #3
 8007958:	e065      	b.n	8007a26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32b0      	adds	r2, #176	; 0xb0
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	f003 020f 	and.w	r2, r3, #15
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	440b      	add	r3, r1
 800797c:	3314      	adds	r3, #20
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d02f      	beq.n	80079e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	f003 020f 	and.w	r2, r3, #15
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	440b      	add	r3, r1
 8007996:	3314      	adds	r3, #20
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	f003 010f 	and.w	r1, r3, #15
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	460b      	mov	r3, r1
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	440b      	add	r3, r1
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4403      	add	r3, r0
 80079ac:	331c      	adds	r3, #28
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80079b4:	fb01 f303 	mul.w	r3, r1, r3
 80079b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d112      	bne.n	80079e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	f003 020f 	and.w	r2, r3, #15
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	3314      	adds	r3, #20
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80079d6:	78f9      	ldrb	r1, [r7, #3]
 80079d8:	2300      	movs	r3, #0
 80079da:	2200      	movs	r2, #0
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f002 fa28 	bl	8009e32 <USBD_LL_Transmit>
 80079e2:	e01f      	b.n	8007a24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	33b0      	adds	r3, #176	; 0xb0
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d010      	beq.n	8007a24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	33b0      	adds	r3, #176	; 0xb0
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007a20:	78fa      	ldrb	r2, [r7, #3]
 8007a22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	460b      	mov	r3, r1
 8007a38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	32b0      	adds	r2, #176	; 0xb0
 8007a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	32b0      	adds	r2, #176	; 0xb0
 8007a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e01a      	b.n	8007a96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f002 fa26 	bl	8009eb6 <USBD_LL_GetRxDataSize>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	33b0      	adds	r3, #176	; 0xb0
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a90:	4611      	mov	r1, r2
 8007a92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	32b0      	adds	r2, #176	; 0xb0
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e025      	b.n	8007b0c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	33b0      	adds	r3, #176	; 0xb0
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01a      	beq.n	8007b0a <USBD_CDC_EP0_RxReady+0x6c>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ada:	2bff      	cmp	r3, #255	; 0xff
 8007adc:	d015      	beq.n	8007b0a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	33b0      	adds	r3, #176	; 0xb0
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007af6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007afe:	b292      	uxth	r2, r2
 8007b00:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	22ff      	movs	r2, #255	; 0xff
 8007b06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b1c:	2182      	movs	r1, #130	; 0x82
 8007b1e:	4818      	ldr	r0, [pc, #96]	; (8007b80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b20:	f000 fd62 	bl	80085e8 <USBD_GetEpDesc>
 8007b24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b26:	2101      	movs	r1, #1
 8007b28:	4815      	ldr	r0, [pc, #84]	; (8007b80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b2a:	f000 fd5d 	bl	80085e8 <USBD_GetEpDesc>
 8007b2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b30:	2181      	movs	r1, #129	; 0x81
 8007b32:	4813      	ldr	r0, [pc, #76]	; (8007b80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b34:	f000 fd58 	bl	80085e8 <USBD_GetEpDesc>
 8007b38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2210      	movs	r2, #16
 8007b44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d006      	beq.n	8007b5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b54:	711a      	strb	r2, [r3, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d006      	beq.n	8007b6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b68:	711a      	strb	r2, [r3, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2243      	movs	r2, #67	; 0x43
 8007b72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b74:	4b02      	ldr	r3, [pc, #8]	; (8007b80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000050 	.word	0x20000050

08007b84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b8c:	2182      	movs	r1, #130	; 0x82
 8007b8e:	4818      	ldr	r0, [pc, #96]	; (8007bf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b90:	f000 fd2a 	bl	80085e8 <USBD_GetEpDesc>
 8007b94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b96:	2101      	movs	r1, #1
 8007b98:	4815      	ldr	r0, [pc, #84]	; (8007bf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b9a:	f000 fd25 	bl	80085e8 <USBD_GetEpDesc>
 8007b9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ba0:	2181      	movs	r1, #129	; 0x81
 8007ba2:	4813      	ldr	r0, [pc, #76]	; (8007bf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ba4:	f000 fd20 	bl	80085e8 <USBD_GetEpDesc>
 8007ba8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2210      	movs	r2, #16
 8007bb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	711a      	strb	r2, [r3, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f042 0202 	orr.w	r2, r2, #2
 8007bc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d006      	beq.n	8007bde <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	711a      	strb	r2, [r3, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f042 0202 	orr.w	r2, r2, #2
 8007bdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2243      	movs	r2, #67	; 0x43
 8007be2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000050 	.word	0x20000050

08007bf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bfc:	2182      	movs	r1, #130	; 0x82
 8007bfe:	4818      	ldr	r0, [pc, #96]	; (8007c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c00:	f000 fcf2 	bl	80085e8 <USBD_GetEpDesc>
 8007c04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c06:	2101      	movs	r1, #1
 8007c08:	4815      	ldr	r0, [pc, #84]	; (8007c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c0a:	f000 fced 	bl	80085e8 <USBD_GetEpDesc>
 8007c0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c10:	2181      	movs	r1, #129	; 0x81
 8007c12:	4813      	ldr	r0, [pc, #76]	; (8007c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c14:	f000 fce8 	bl	80085e8 <USBD_GetEpDesc>
 8007c18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2210      	movs	r2, #16
 8007c24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d006      	beq.n	8007c3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c34:	711a      	strb	r2, [r3, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d006      	beq.n	8007c4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c48:	711a      	strb	r2, [r3, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2243      	movs	r2, #67	; 0x43
 8007c52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000050 	.word	0x20000050

08007c64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	220a      	movs	r2, #10
 8007c70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c72:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	2000000c 	.word	0x2000000c

08007c84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e009      	b.n	8007cac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	33b0      	adds	r3, #176	; 0xb0
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	32b0      	adds	r2, #176	; 0xb0
 8007cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e008      	b.n	8007cf0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	32b0      	adds	r2, #176	; 0xb0
 8007d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e004      	b.n	8007d2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
	...

08007d38 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	32b0      	adds	r2, #176	; 0xb0
 8007d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e025      	b.n	8007daa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11f      	bne.n	8007da8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007d70:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <USBD_CDC_TransmitPacket+0x7c>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 020f 	and.w	r2, r3, #15
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4403      	add	r3, r0
 8007d8a:	3314      	adds	r3, #20
 8007d8c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007d8e:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <USBD_CDC_TransmitPacket+0x7c>)
 8007d90:	7819      	ldrb	r1, [r3, #0]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f002 f847 	bl	8009e32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000093 	.word	0x20000093

08007db8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	32b0      	adds	r2, #176	; 0xb0
 8007dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32b0      	adds	r2, #176	; 0xb0
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e018      	b.n	8007e18 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7c1b      	ldrb	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007dee:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <USBD_CDC_ReceivePacket+0x68>)
 8007df0:	7819      	ldrb	r1, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f002 f839 	bl	8009e74 <USBD_LL_PrepareReceive>
 8007e02:	e008      	b.n	8007e16 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <USBD_CDC_ReceivePacket+0x68>)
 8007e06:	7819      	ldrb	r1, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e0e:	2340      	movs	r3, #64	; 0x40
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f002 f82f 	bl	8009e74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000094 	.word	0x20000094

08007e24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e01f      	b.n	8007e7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	79fa      	ldrb	r2, [r7, #7]
 8007e6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f001 fea9 	bl	8009bc8 <USBD_LL_Init>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e025      	b.n	8007ee8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	32ae      	adds	r2, #174	; 0xae
 8007eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00f      	beq.n	8007ed8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32ae      	adds	r2, #174	; 0xae
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	f107 020e 	add.w	r2, r7, #14
 8007ecc:	4610      	mov	r0, r2
 8007ece:	4798      	blx	r3
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 feb1 	bl	8009c60 <USBD_LL_Start>
 8007efe:	4603      	mov	r3, r0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d009      	beq.n	8007f4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	4611      	mov	r1, r2
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	4611      	mov	r1, r2
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 f924 	bl	80091ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d01a      	beq.n	8007ffc <USBD_LL_SetupStage+0x72>
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d822      	bhi.n	8008010 <USBD_LL_SetupStage+0x86>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <USBD_LL_SetupStage+0x4a>
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d00a      	beq.n	8007fe8 <USBD_LL_SetupStage+0x5e>
 8007fd2:	e01d      	b.n	8008010 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fb79 	bl	80086d4 <USBD_StdDevReq>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe6:	e020      	b.n	800802a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fbe1 	bl	80087b8 <USBD_StdItfReq>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8007ffa:	e016      	b.n	800802a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fc43 	bl	8008890 <USBD_StdEPReq>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]
      break;
 800800e:	e00c      	b.n	800802a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800801a:	b2db      	uxtb	r3, r3
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 fe7e 	bl	8009d20 <USBD_LL_StallEP>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]
      break;
 8008028:	bf00      	nop
  }

  return ret;
 800802a:	7bfb      	ldrb	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	460b      	mov	r3, r1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008046:	7afb      	ldrb	r3, [r7, #11]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d177      	bne.n	800813c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008052:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800805a:	2b03      	cmp	r3, #3
 800805c:	f040 80a1 	bne.w	80081a2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	8992      	ldrh	r2, [r2, #12]
 8008068:	4293      	cmp	r3, r2
 800806a:	d91c      	bls.n	80080a6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	8992      	ldrh	r2, [r2, #12]
 8008074:	1a9a      	subs	r2, r3, r2
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	8992      	ldrh	r2, [r2, #12]
 8008082:	441a      	add	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6919      	ldr	r1, [r3, #16]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	899b      	ldrh	r3, [r3, #12]
 8008090:	461a      	mov	r2, r3
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	4293      	cmp	r3, r2
 8008098:	bf38      	it	cc
 800809a:	4613      	movcc	r3, r2
 800809c:	461a      	mov	r2, r3
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f001 f9aa 	bl	80093f8 <USBD_CtlContinueRx>
 80080a4:	e07d      	b.n	80081a2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d014      	beq.n	80080de <USBD_LL_DataOutStage+0xaa>
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d81d      	bhi.n	80080f4 <USBD_LL_DataOutStage+0xc0>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <USBD_LL_DataOutStage+0x8e>
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d003      	beq.n	80080c8 <USBD_LL_DataOutStage+0x94>
 80080c0:	e018      	b.n	80080f4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75bb      	strb	r3, [r7, #22]
            break;
 80080c6:	e018      	b.n	80080fa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	4619      	mov	r1, r3
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 fa6e 	bl	80085b4 <USBD_CoreFindIF>
 80080d8:	4603      	mov	r3, r0
 80080da:	75bb      	strb	r3, [r7, #22]
            break;
 80080dc:	e00d      	b.n	80080fa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	4619      	mov	r1, r3
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fa70 	bl	80085ce <USBD_CoreFindEP>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75bb      	strb	r3, [r7, #22]
            break;
 80080f2:	e002      	b.n	80080fa <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75bb      	strb	r3, [r7, #22]
            break;
 80080f8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80080fa:	7dbb      	ldrb	r3, [r7, #22]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d119      	bne.n	8008134 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b03      	cmp	r3, #3
 800810a:	d113      	bne.n	8008134 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800810c:	7dba      	ldrb	r2, [r7, #22]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	32ae      	adds	r2, #174	; 0xae
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00b      	beq.n	8008134 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800811c:	7dba      	ldrb	r2, [r7, #22]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008124:	7dba      	ldrb	r2, [r7, #22]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	32ae      	adds	r2, #174	; 0xae
 800812a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f001 f970 	bl	800941a <USBD_CtlSendStatus>
 800813a:	e032      	b.n	80081a2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008142:	b2db      	uxtb	r3, r3
 8008144:	4619      	mov	r1, r3
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fa41 	bl	80085ce <USBD_CoreFindEP>
 800814c:	4603      	mov	r3, r0
 800814e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008150:	7dbb      	ldrb	r3, [r7, #22]
 8008152:	2bff      	cmp	r3, #255	; 0xff
 8008154:	d025      	beq.n	80081a2 <USBD_LL_DataOutStage+0x16e>
 8008156:	7dbb      	ldrb	r3, [r7, #22]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d122      	bne.n	80081a2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b03      	cmp	r3, #3
 8008166:	d117      	bne.n	8008198 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008168:	7dba      	ldrb	r2, [r7, #22]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	32ae      	adds	r2, #174	; 0xae
 800816e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00f      	beq.n	8008198 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008178:	7dba      	ldrb	r2, [r7, #22]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008180:	7dba      	ldrb	r2, [r7, #22]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	32ae      	adds	r2, #174	; 0xae
 8008186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	7afa      	ldrb	r2, [r7, #11]
 800818e:	4611      	mov	r1, r2
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	e000      	b.n	80081a4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	460b      	mov	r3, r1
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80081ba:	7afb      	ldrb	r3, [r7, #11]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d178      	bne.n	80082b2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3314      	adds	r3, #20
 80081c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d163      	bne.n	8008298 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	8992      	ldrh	r2, [r2, #12]
 80081d8:	4293      	cmp	r3, r2
 80081da:	d91c      	bls.n	8008216 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	8992      	ldrh	r2, [r2, #12]
 80081e4:	1a9a      	subs	r2, r3, r2
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	8992      	ldrh	r2, [r2, #12]
 80081f2:	441a      	add	r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6919      	ldr	r1, [r3, #16]
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	461a      	mov	r2, r3
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f001 f8c6 	bl	8009394 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008208:	2300      	movs	r3, #0
 800820a:	2200      	movs	r2, #0
 800820c:	2100      	movs	r1, #0
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f001 fe30 	bl	8009e74 <USBD_LL_PrepareReceive>
 8008214:	e040      	b.n	8008298 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	899b      	ldrh	r3, [r3, #12]
 800821a:	461a      	mov	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	d11c      	bne.n	800825e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800822c:	4293      	cmp	r3, r2
 800822e:	d316      	bcc.n	800825e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800823a:	429a      	cmp	r2, r3
 800823c:	d20f      	bcs.n	800825e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f001 f8a6 	bl	8009394 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008250:	2300      	movs	r3, #0
 8008252:	2200      	movs	r2, #0
 8008254:	2100      	movs	r1, #0
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f001 fe0c 	bl	8009e74 <USBD_LL_PrepareReceive>
 800825c:	e01c      	b.n	8008298 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b03      	cmp	r3, #3
 8008268:	d10f      	bne.n	800828a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d009      	beq.n	800828a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800828a:	2180      	movs	r1, #128	; 0x80
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f001 fd47 	bl	8009d20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f001 f8d4 	bl	8009440 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d03a      	beq.n	8008318 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f7ff fe30 	bl	8007f08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082b0:	e032      	b.n	8008318 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	4619      	mov	r1, r3
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f986 	bl	80085ce <USBD_CoreFindEP>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	2bff      	cmp	r3, #255	; 0xff
 80082ca:	d025      	beq.n	8008318 <USBD_LL_DataInStage+0x16c>
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d122      	bne.n	8008318 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d11c      	bne.n	8008318 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80082de:	7dfa      	ldrb	r2, [r7, #23]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	32ae      	adds	r2, #174	; 0xae
 80082e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d014      	beq.n	8008318 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80082ee:	7dfa      	ldrb	r2, [r7, #23]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80082f6:	7dfa      	ldrb	r2, [r7, #23]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	32ae      	adds	r2, #174	; 0xae
 80082fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	7afa      	ldrb	r2, [r7, #11]
 8008304:	4611      	mov	r1, r2
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	4798      	blx	r3
 800830a:	4603      	mov	r3, r0
 800830c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800830e:	7dbb      	ldrb	r3, [r7, #22]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008314:	7dbb      	ldrb	r3, [r7, #22]
 8008316:	e000      	b.n	800831a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835a:	2b00      	cmp	r3, #0
 800835c:	d014      	beq.n	8008388 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00e      	beq.n	8008388 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	6852      	ldr	r2, [r2, #4]
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	4611      	mov	r1, r2
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008388:	2340      	movs	r3, #64	; 0x40
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fc81 	bl	8009c96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2240      	movs	r2, #64	; 0x40
 80083a0:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	2200      	movs	r2, #0
 80083a8:	2180      	movs	r1, #128	; 0x80
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 fc73 	bl	8009c96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2240      	movs	r2, #64	; 0x40
 80083bc:	841a      	strh	r2, [r3, #32]

  return ret;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d006      	beq.n	800840a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008402:	b2da      	uxtb	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2204      	movs	r2, #4
 800840e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b04      	cmp	r3, #4
 8008432:	d106      	bne.n	8008442 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800843a:	b2da      	uxtb	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b03      	cmp	r3, #3
 8008462:	d110      	bne.n	8008486 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00b      	beq.n	8008486 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d005      	beq.n	8008486 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	32ae      	adds	r2, #174	; 0xae
 80084a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e01c      	b.n	80084ec <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d115      	bne.n	80084ea <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	32ae      	adds	r2, #174	; 0xae
 80084c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	32ae      	adds	r2, #174	; 0xae
 80084dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	4611      	mov	r1, r2
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	32ae      	adds	r2, #174	; 0xae
 800850a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008512:	2303      	movs	r3, #3
 8008514:	e01c      	b.n	8008550 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b03      	cmp	r3, #3
 8008520:	d115      	bne.n	800854e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	32ae      	adds	r2, #174	; 0xae
 800852c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	32ae      	adds	r2, #174	; 0xae
 8008540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	4611      	mov	r1, r2
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00e      	beq.n	80085aa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6852      	ldr	r2, [r2, #4]
 8008598:	b2d2      	uxtb	r2, r2
 800859a:	4611      	mov	r1, r2
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	885b      	ldrh	r3, [r3, #2]
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	429a      	cmp	r2, r3
 800860e:	d920      	bls.n	8008652 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008618:	e013      	b.n	8008642 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800861a:	f107 030a 	add.w	r3, r7, #10
 800861e:	4619      	mov	r1, r3
 8008620:	6978      	ldr	r0, [r7, #20]
 8008622:	f000 f81b 	bl	800865c <USBD_GetNextDesc>
 8008626:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	2b05      	cmp	r3, #5
 800862e:	d108      	bne.n	8008642 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	789b      	ldrb	r3, [r3, #2]
 8008638:	78fa      	ldrb	r2, [r7, #3]
 800863a:	429a      	cmp	r2, r3
 800863c:	d008      	beq.n	8008650 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	885b      	ldrh	r3, [r3, #2]
 8008646:	b29a      	uxth	r2, r3
 8008648:	897b      	ldrh	r3, [r7, #10]
 800864a:	429a      	cmp	r2, r3
 800864c:	d8e5      	bhi.n	800861a <USBD_GetEpDesc+0x32>
 800864e:	e000      	b.n	8008652 <USBD_GetEpDesc+0x6a>
          break;
 8008650:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008652:	693b      	ldr	r3, [r7, #16]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	881a      	ldrh	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	4413      	add	r3, r2
 8008676:	b29a      	uxth	r2, r3
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008688:	68fb      	ldr	r3, [r7, #12]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008696:	b480      	push	{r7}
 8008698:	b087      	sub	sp, #28
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	3301      	adds	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086b4:	8a3b      	ldrh	r3, [r7, #16]
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	b21a      	sxth	r2, r3
 80086ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086be:	4313      	orrs	r3, r2
 80086c0:	b21b      	sxth	r3, r3
 80086c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086c4:	89fb      	ldrh	r3, [r7, #14]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
	...

080086d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086ea:	2b40      	cmp	r3, #64	; 0x40
 80086ec:	d005      	beq.n	80086fa <USBD_StdDevReq+0x26>
 80086ee:	2b40      	cmp	r3, #64	; 0x40
 80086f0:	d857      	bhi.n	80087a2 <USBD_StdDevReq+0xce>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00f      	beq.n	8008716 <USBD_StdDevReq+0x42>
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d153      	bne.n	80087a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	32ae      	adds	r2, #174	; 0xae
 8008704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e04a      	b.n	80087ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	2b09      	cmp	r3, #9
 800871c:	d83b      	bhi.n	8008796 <USBD_StdDevReq+0xc2>
 800871e:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <USBD_StdDevReq+0x50>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008779 	.word	0x08008779
 8008728:	0800878d 	.word	0x0800878d
 800872c:	08008797 	.word	0x08008797
 8008730:	08008783 	.word	0x08008783
 8008734:	08008797 	.word	0x08008797
 8008738:	08008757 	.word	0x08008757
 800873c:	0800874d 	.word	0x0800874d
 8008740:	08008797 	.word	0x08008797
 8008744:	0800876f 	.word	0x0800876f
 8008748:	08008761 	.word	0x08008761
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa3e 	bl	8008bd0 <USBD_GetDescriptor>
          break;
 8008754:	e024      	b.n	80087a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fba3 	bl	8008ea4 <USBD_SetAddress>
          break;
 800875e:	e01f      	b.n	80087a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fbe2 	bl	8008f2c <USBD_SetConfig>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
          break;
 800876c:	e018      	b.n	80087a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fc85 	bl	8009080 <USBD_GetConfig>
          break;
 8008776:	e013      	b.n	80087a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fcb6 	bl	80090ec <USBD_GetStatus>
          break;
 8008780:	e00e      	b.n	80087a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fce5 	bl	8009154 <USBD_SetFeature>
          break;
 800878a:	e009      	b.n	80087a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fd09 	bl	80091a6 <USBD_ClrFeature>
          break;
 8008794:	e004      	b.n	80087a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fd60 	bl	800925e <USBD_CtlError>
          break;
 800879e:	bf00      	nop
      }
      break;
 80087a0:	e004      	b.n	80087ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fd5a 	bl	800925e <USBD_CtlError>
      break;
 80087aa:	bf00      	nop
  }

  return ret;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop

080087b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ce:	2b40      	cmp	r3, #64	; 0x40
 80087d0:	d005      	beq.n	80087de <USBD_StdItfReq+0x26>
 80087d2:	2b40      	cmp	r3, #64	; 0x40
 80087d4:	d852      	bhi.n	800887c <USBD_StdItfReq+0xc4>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <USBD_StdItfReq+0x26>
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d14e      	bne.n	800887c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d840      	bhi.n	800886e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	889b      	ldrh	r3, [r3, #4]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d836      	bhi.n	8008864 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	889b      	ldrh	r3, [r3, #4]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff fed8 	bl	80085b4 <USBD_CoreFindIF>
 8008804:	4603      	mov	r3, r0
 8008806:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	2bff      	cmp	r3, #255	; 0xff
 800880c:	d01d      	beq.n	800884a <USBD_StdItfReq+0x92>
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d11a      	bne.n	800884a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008814:	7bba      	ldrb	r2, [r7, #14]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32ae      	adds	r2, #174	; 0xae
 800881a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00f      	beq.n	8008844 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008824:	7bba      	ldrb	r2, [r7, #14]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800882c:	7bba      	ldrb	r2, [r7, #14]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	32ae      	adds	r2, #174	; 0xae
 8008832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
 800883e:	4603      	mov	r3, r0
 8008840:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008842:	e004      	b.n	800884e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008848:	e001      	b.n	800884e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800884a:	2303      	movs	r3, #3
 800884c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	88db      	ldrh	r3, [r3, #6]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d110      	bne.n	8008878 <USBD_StdItfReq+0xc0>
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10d      	bne.n	8008878 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fddc 	bl	800941a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008862:	e009      	b.n	8008878 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fcf9 	bl	800925e <USBD_CtlError>
          break;
 800886c:	e004      	b.n	8008878 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fcf4 	bl	800925e <USBD_CtlError>
          break;
 8008876:	e000      	b.n	800887a <USBD_StdItfReq+0xc2>
          break;
 8008878:	bf00      	nop
      }
      break;
 800887a:	e004      	b.n	8008886 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fced 	bl	800925e <USBD_CtlError>
      break;
 8008884:	bf00      	nop
  }

  return ret;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	889b      	ldrh	r3, [r3, #4]
 80088a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ac:	2b40      	cmp	r3, #64	; 0x40
 80088ae:	d007      	beq.n	80088c0 <USBD_StdEPReq+0x30>
 80088b0:	2b40      	cmp	r3, #64	; 0x40
 80088b2:	f200 8181 	bhi.w	8008bb8 <USBD_StdEPReq+0x328>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d02a      	beq.n	8008910 <USBD_StdEPReq+0x80>
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	f040 817c 	bne.w	8008bb8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff fe82 	bl	80085ce <USBD_CoreFindEP>
 80088ca:	4603      	mov	r3, r0
 80088cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088ce:	7b7b      	ldrb	r3, [r7, #13]
 80088d0:	2bff      	cmp	r3, #255	; 0xff
 80088d2:	f000 8176 	beq.w	8008bc2 <USBD_StdEPReq+0x332>
 80088d6:	7b7b      	ldrb	r3, [r7, #13]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f040 8172 	bne.w	8008bc2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80088de:	7b7a      	ldrb	r2, [r7, #13]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80088e6:	7b7a      	ldrb	r2, [r7, #13]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	32ae      	adds	r2, #174	; 0xae
 80088ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 8165 	beq.w	8008bc2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80088f8:	7b7a      	ldrb	r2, [r7, #13]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	32ae      	adds	r2, #174	; 0xae
 80088fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
 800890a:	4603      	mov	r3, r0
 800890c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800890e:	e158      	b.n	8008bc2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	2b03      	cmp	r3, #3
 8008916:	d008      	beq.n	800892a <USBD_StdEPReq+0x9a>
 8008918:	2b03      	cmp	r3, #3
 800891a:	f300 8147 	bgt.w	8008bac <USBD_StdEPReq+0x31c>
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 809b 	beq.w	8008a5a <USBD_StdEPReq+0x1ca>
 8008924:	2b01      	cmp	r3, #1
 8008926:	d03c      	beq.n	80089a2 <USBD_StdEPReq+0x112>
 8008928:	e140      	b.n	8008bac <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b02      	cmp	r3, #2
 8008934:	d002      	beq.n	800893c <USBD_StdEPReq+0xac>
 8008936:	2b03      	cmp	r3, #3
 8008938:	d016      	beq.n	8008968 <USBD_StdEPReq+0xd8>
 800893a:	e02c      	b.n	8008996 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00d      	beq.n	800895e <USBD_StdEPReq+0xce>
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b80      	cmp	r3, #128	; 0x80
 8008946:	d00a      	beq.n	800895e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 f9e7 	bl	8009d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008952:	2180      	movs	r1, #128	; 0x80
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f9e3 	bl	8009d20 <USBD_LL_StallEP>
 800895a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800895c:	e020      	b.n	80089a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fc7c 	bl	800925e <USBD_CtlError>
              break;
 8008966:	e01b      	b.n	80089a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	885b      	ldrh	r3, [r3, #2]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10e      	bne.n	800898e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00b      	beq.n	800898e <USBD_StdEPReq+0xfe>
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	2b80      	cmp	r3, #128	; 0x80
 800897a:	d008      	beq.n	800898e <USBD_StdEPReq+0xfe>
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	88db      	ldrh	r3, [r3, #6]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d104      	bne.n	800898e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 f9c9 	bl	8009d20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fd43 	bl	800941a <USBD_CtlSendStatus>

              break;
 8008994:	e004      	b.n	80089a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fc60 	bl	800925e <USBD_CtlError>
              break;
 800899e:	bf00      	nop
          }
          break;
 80089a0:	e109      	b.n	8008bb6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d002      	beq.n	80089b4 <USBD_StdEPReq+0x124>
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d016      	beq.n	80089e0 <USBD_StdEPReq+0x150>
 80089b2:	e04b      	b.n	8008a4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00d      	beq.n	80089d6 <USBD_StdEPReq+0x146>
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b80      	cmp	r3, #128	; 0x80
 80089be:	d00a      	beq.n	80089d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f9ab 	bl	8009d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ca:	2180      	movs	r1, #128	; 0x80
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 f9a7 	bl	8009d20 <USBD_LL_StallEP>
 80089d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089d4:	e040      	b.n	8008a58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fc40 	bl	800925e <USBD_CtlError>
              break;
 80089de:	e03b      	b.n	8008a58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	885b      	ldrh	r3, [r3, #2]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d136      	bne.n	8008a56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d004      	beq.n	80089fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 f9b1 	bl	8009d5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fd0c 	bl	800941a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fde1 	bl	80085ce <USBD_CoreFindEP>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a10:	7b7b      	ldrb	r3, [r7, #13]
 8008a12:	2bff      	cmp	r3, #255	; 0xff
 8008a14:	d01f      	beq.n	8008a56 <USBD_StdEPReq+0x1c6>
 8008a16:	7b7b      	ldrb	r3, [r7, #13]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11c      	bne.n	8008a56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a1c:	7b7a      	ldrb	r2, [r7, #13]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a24:	7b7a      	ldrb	r2, [r7, #13]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	32ae      	adds	r2, #174	; 0xae
 8008a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d010      	beq.n	8008a56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a34:	7b7a      	ldrb	r2, [r7, #13]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	32ae      	adds	r2, #174	; 0xae
 8008a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008a4a:	e004      	b.n	8008a56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fc05 	bl	800925e <USBD_CtlError>
              break;
 8008a54:	e000      	b.n	8008a58 <USBD_StdEPReq+0x1c8>
              break;
 8008a56:	bf00      	nop
          }
          break;
 8008a58:	e0ad      	b.n	8008bb6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d002      	beq.n	8008a6c <USBD_StdEPReq+0x1dc>
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d033      	beq.n	8008ad2 <USBD_StdEPReq+0x242>
 8008a6a:	e099      	b.n	8008ba0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d007      	beq.n	8008a82 <USBD_StdEPReq+0x1f2>
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b80      	cmp	r3, #128	; 0x80
 8008a76:	d004      	beq.n	8008a82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fbef 	bl	800925e <USBD_CtlError>
                break;
 8008a80:	e093      	b.n	8008baa <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da0b      	bge.n	8008aa2 <USBD_StdEPReq+0x212>
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	3310      	adds	r3, #16
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	e00b      	b.n	8008aba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3304      	adds	r3, #4
 8008aba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	330e      	adds	r3, #14
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fc44 	bl	8009358 <USBD_CtlSendData>
              break;
 8008ad0:	e06b      	b.n	8008baa <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ad2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da11      	bge.n	8008afe <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	f003 020f 	and.w	r2, r3, #15
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	440b      	add	r3, r1
 8008aec:	3323      	adds	r3, #35	; 0x23
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d117      	bne.n	8008b24 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fbb1 	bl	800925e <USBD_CtlError>
                  break;
 8008afc:	e055      	b.n	8008baa <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	f003 020f 	and.w	r2, r3, #15
 8008b04:	6879      	ldr	r1, [r7, #4]
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	440b      	add	r3, r1
 8008b10:	f203 1363 	addw	r3, r3, #355	; 0x163
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d104      	bne.n	8008b24 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb9e 	bl	800925e <USBD_CtlError>
                  break;
 8008b22:	e042      	b.n	8008baa <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	da0b      	bge.n	8008b44 <USBD_StdEPReq+0x2b4>
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	3310      	adds	r3, #16
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	4413      	add	r3, r2
 8008b40:	3304      	adds	r3, #4
 8008b42:	e00b      	b.n	8008b5c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	4413      	add	r3, r2
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <USBD_StdEPReq+0x2da>
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	2b80      	cmp	r3, #128	; 0x80
 8008b68:	d103      	bne.n	8008b72 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	739a      	strb	r2, [r3, #14]
 8008b70:	e00e      	b.n	8008b90 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 f910 	bl	8009d9c <USBD_LL_IsStallEP>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2201      	movs	r2, #1
 8008b86:	739a      	strb	r2, [r3, #14]
 8008b88:	e002      	b.n	8008b90 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	330e      	adds	r3, #14
 8008b94:	2202      	movs	r2, #2
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fbdd 	bl	8009358 <USBD_CtlSendData>
              break;
 8008b9e:	e004      	b.n	8008baa <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fb5b 	bl	800925e <USBD_CtlError>
              break;
 8008ba8:	bf00      	nop
          }
          break;
 8008baa:	e004      	b.n	8008bb6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fb55 	bl	800925e <USBD_CtlError>
          break;
 8008bb4:	bf00      	nop
      }
      break;
 8008bb6:	e005      	b.n	8008bc4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fb4f 	bl	800925e <USBD_CtlError>
      break;
 8008bc0:	e000      	b.n	8008bc4 <USBD_StdEPReq+0x334>
      break;
 8008bc2:	bf00      	nop
  }

  return ret;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	2b06      	cmp	r3, #6
 8008bf2:	f200 8128 	bhi.w	8008e46 <USBD_GetDescriptor+0x276>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <USBD_GetDescriptor+0x2c>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c19 	.word	0x08008c19
 8008c00:	08008c31 	.word	0x08008c31
 8008c04:	08008c71 	.word	0x08008c71
 8008c08:	08008e47 	.word	0x08008e47
 8008c0c:	08008e47 	.word	0x08008e47
 8008c10:	08008de7 	.word	0x08008de7
 8008c14:	08008e13 	.word	0x08008e13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	7c12      	ldrb	r2, [r2, #16]
 8008c24:	f107 0108 	add.w	r1, r7, #8
 8008c28:	4610      	mov	r0, r2
 8008c2a:	4798      	blx	r3
 8008c2c:	60f8      	str	r0, [r7, #12]
      break;
 8008c2e:	e112      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7c1b      	ldrb	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10d      	bne.n	8008c54 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	f107 0208 	add.w	r2, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	2202      	movs	r2, #2
 8008c50:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c52:	e100      	b.n	8008e56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	f107 0208 	add.w	r2, r7, #8
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	701a      	strb	r2, [r3, #0]
      break;
 8008c6e:	e0f2      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	885b      	ldrh	r3, [r3, #2]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	f200 80ac 	bhi.w	8008dd4 <USBD_GetDescriptor+0x204>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <USBD_GetDescriptor+0xb4>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008c9d 	.word	0x08008c9d
 8008c88:	08008cd1 	.word	0x08008cd1
 8008c8c:	08008d05 	.word	0x08008d05
 8008c90:	08008d39 	.word	0x08008d39
 8008c94:	08008d6d 	.word	0x08008d6d
 8008c98:	08008da1 	.word	0x08008da1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7c12      	ldrb	r2, [r2, #16]
 8008cb4:	f107 0108 	add.w	r1, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cbe:	e091      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 facb 	bl	800925e <USBD_CtlError>
            err++;
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cce:	e089      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7c12      	ldrb	r2, [r2, #16]
 8008ce8:	f107 0108 	add.w	r1, r7, #8
 8008cec:	4610      	mov	r0, r2
 8008cee:	4798      	blx	r3
 8008cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cf2:	e077      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fab1 	bl	800925e <USBD_CtlError>
            err++;
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	72fb      	strb	r3, [r7, #11]
          break;
 8008d02:	e06f      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7c12      	ldrb	r2, [r2, #16]
 8008d1c:	f107 0108 	add.w	r1, r7, #8
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d26:	e05d      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa97 	bl	800925e <USBD_CtlError>
            err++;
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	3301      	adds	r3, #1
 8008d34:	72fb      	strb	r3, [r7, #11]
          break;
 8008d36:	e055      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7c12      	ldrb	r2, [r2, #16]
 8008d50:	f107 0108 	add.w	r1, r7, #8
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d5a:	e043      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa7d 	bl	800925e <USBD_CtlError>
            err++;
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	3301      	adds	r3, #1
 8008d68:	72fb      	strb	r3, [r7, #11]
          break;
 8008d6a:	e03b      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	7c12      	ldrb	r2, [r2, #16]
 8008d84:	f107 0108 	add.w	r1, r7, #8
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
 8008d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8e:	e029      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa63 	bl	800925e <USBD_CtlError>
            err++;
 8008d98:	7afb      	ldrb	r3, [r7, #11]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9e:	e021      	b.n	8008de4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7c12      	ldrb	r2, [r2, #16]
 8008db8:	f107 0108 	add.w	r1, r7, #8
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
 8008dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dc2:	e00f      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa49 	bl	800925e <USBD_CtlError>
            err++;
 8008dcc:	7afb      	ldrb	r3, [r7, #11]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008dd2:	e007      	b.n	8008de4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa41 	bl	800925e <USBD_CtlError>
          err++;
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	3301      	adds	r3, #1
 8008de0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008de2:	bf00      	nop
      }
      break;
 8008de4:	e037      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7c1b      	ldrb	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d109      	bne.n	8008e02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df6:	f107 0208 	add.w	r2, r7, #8
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4798      	blx	r3
 8008dfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e00:	e029      	b.n	8008e56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fa2a 	bl	800925e <USBD_CtlError>
        err++;
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e10:	e021      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7c1b      	ldrb	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10d      	bne.n	8008e36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	f107 0208 	add.w	r2, r7, #8
 8008e26:	4610      	mov	r0, r2
 8008e28:	4798      	blx	r3
 8008e2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	2207      	movs	r2, #7
 8008e32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e34:	e00f      	b.n	8008e56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fa10 	bl	800925e <USBD_CtlError>
        err++;
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	3301      	adds	r3, #1
 8008e42:	72fb      	strb	r3, [r7, #11]
      break;
 8008e44:	e007      	b.n	8008e56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fa08 	bl	800925e <USBD_CtlError>
      err++;
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	3301      	adds	r3, #1
 8008e52:	72fb      	strb	r3, [r7, #11]
      break;
 8008e54:	bf00      	nop
  }

  if (err != 0U)
 8008e56:	7afb      	ldrb	r3, [r7, #11]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d11e      	bne.n	8008e9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	88db      	ldrh	r3, [r3, #6]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d016      	beq.n	8008e92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008e64:	893b      	ldrh	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00e      	beq.n	8008e88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88da      	ldrh	r2, [r3, #6]
 8008e6e:	893b      	ldrh	r3, [r7, #8]
 8008e70:	4293      	cmp	r3, r2
 8008e72:	bf28      	it	cs
 8008e74:	4613      	movcs	r3, r2
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e7a:	893b      	ldrh	r3, [r7, #8]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	68f9      	ldr	r1, [r7, #12]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fa69 	bl	8009358 <USBD_CtlSendData>
 8008e86:	e009      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9e7 	bl	800925e <USBD_CtlError>
 8008e90:	e004      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fac1 	bl	800941a <USBD_CtlSendStatus>
 8008e98:	e000      	b.n	8008e9c <USBD_GetDescriptor+0x2cc>
    return;
 8008e9a:	bf00      	nop
  }
}
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop

08008ea4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	889b      	ldrh	r3, [r3, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d131      	bne.n	8008f1a <USBD_SetAddress+0x76>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	88db      	ldrh	r3, [r3, #6]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d12d      	bne.n	8008f1a <USBD_SetAddress+0x76>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ec4:	d829      	bhi.n	8008f1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	885b      	ldrh	r3, [r3, #2]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d104      	bne.n	8008ee8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f9bc 	bl	800925e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee6:	e01d      	b.n	8008f24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	7bfa      	ldrb	r2, [r7, #15]
 8008eec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 ff7d 	bl	8009df4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa8d 	bl	800941a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f0e:	e009      	b.n	8008f24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f18:	e004      	b.n	8008f24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f99e 	bl	800925e <USBD_CtlError>
  }
}
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	885b      	ldrh	r3, [r3, #2]
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	4b4e      	ldr	r3, [pc, #312]	; (800907c <USBD_SetConfig+0x150>)
 8008f42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f44:	4b4d      	ldr	r3, [pc, #308]	; (800907c <USBD_SetConfig+0x150>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d905      	bls.n	8008f58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f985 	bl	800925e <USBD_CtlError>
    return USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e08c      	b.n	8009072 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d002      	beq.n	8008f6a <USBD_SetConfig+0x3e>
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d029      	beq.n	8008fbc <USBD_SetConfig+0x90>
 8008f68:	e075      	b.n	8009056 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f6a:	4b44      	ldr	r3, [pc, #272]	; (800907c <USBD_SetConfig+0x150>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d020      	beq.n	8008fb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008f72:	4b42      	ldr	r3, [pc, #264]	; (800907c <USBD_SetConfig+0x150>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f7c:	4b3f      	ldr	r3, [pc, #252]	; (800907c <USBD_SetConfig+0x150>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fe ffcb 	bl	8007f1e <USBD_SetClassConfig>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d008      	beq.n	8008fa4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f962 	bl	800925e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fa2:	e065      	b.n	8009070 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa38 	bl	800941a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2203      	movs	r2, #3
 8008fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fb2:	e05d      	b.n	8009070 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fa30 	bl	800941a <USBD_CtlSendStatus>
      break;
 8008fba:	e059      	b.n	8009070 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008fbc:	4b2f      	ldr	r3, [pc, #188]	; (800907c <USBD_SetConfig+0x150>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d112      	bne.n	8008fea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008fcc:	4b2b      	ldr	r3, [pc, #172]	; (800907c <USBD_SetConfig+0x150>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fd6:	4b29      	ldr	r3, [pc, #164]	; (800907c <USBD_SetConfig+0x150>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7fe ffba 	bl	8007f56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa19 	bl	800941a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fe8:	e042      	b.n	8009070 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008fea:	4b24      	ldr	r3, [pc, #144]	; (800907c <USBD_SetConfig+0x150>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d02a      	beq.n	800904e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7fe ffa8 	bl	8007f56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009006:	4b1d      	ldr	r3, [pc, #116]	; (800907c <USBD_SetConfig+0x150>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009010:	4b1a      	ldr	r3, [pc, #104]	; (800907c <USBD_SetConfig+0x150>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fe ff81 	bl	8007f1e <USBD_SetClassConfig>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00f      	beq.n	8009046 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f918 	bl	800925e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7fe ff8d 	bl	8007f56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009044:	e014      	b.n	8009070 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f9e7 	bl	800941a <USBD_CtlSendStatus>
      break;
 800904c:	e010      	b.n	8009070 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f9e3 	bl	800941a <USBD_CtlSendStatus>
      break;
 8009054:	e00c      	b.n	8009070 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f900 	bl	800925e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800905e:	4b07      	ldr	r3, [pc, #28]	; (800907c <USBD_SetConfig+0x150>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fe ff76 	bl	8007f56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800906a:	2303      	movs	r3, #3
 800906c:	73fb      	strb	r3, [r7, #15]
      break;
 800906e:	bf00      	nop
  }

  return ret;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	2000042c 	.word	0x2000042c

08009080 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	88db      	ldrh	r3, [r3, #6]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d004      	beq.n	800909c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f8e2 	bl	800925e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800909a:	e023      	b.n	80090e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	dc02      	bgt.n	80090ae <USBD_GetConfig+0x2e>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dc03      	bgt.n	80090b4 <USBD_GetConfig+0x34>
 80090ac:	e015      	b.n	80090da <USBD_GetConfig+0x5a>
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d00b      	beq.n	80090ca <USBD_GetConfig+0x4a>
 80090b2:	e012      	b.n	80090da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3308      	adds	r3, #8
 80090be:	2201      	movs	r2, #1
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f948 	bl	8009358 <USBD_CtlSendData>
        break;
 80090c8:	e00c      	b.n	80090e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3304      	adds	r3, #4
 80090ce:	2201      	movs	r2, #1
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f940 	bl	8009358 <USBD_CtlSendData>
        break;
 80090d8:	e004      	b.n	80090e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f8be 	bl	800925e <USBD_CtlError>
        break;
 80090e2:	bf00      	nop
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	2b02      	cmp	r3, #2
 8009102:	d81e      	bhi.n	8009142 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	88db      	ldrh	r3, [r3, #6]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d004      	beq.n	8009116 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f8a5 	bl	800925e <USBD_CtlError>
        break;
 8009114:	e01a      	b.n	800914c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009122:	2b00      	cmp	r3, #0
 8009124:	d005      	beq.n	8009132 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	f043 0202 	orr.w	r2, r3, #2
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	330c      	adds	r3, #12
 8009136:	2202      	movs	r2, #2
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f90c 	bl	8009358 <USBD_CtlSendData>
      break;
 8009140:	e004      	b.n	800914c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f88a 	bl	800925e <USBD_CtlError>
      break;
 800914a:	bf00      	nop
  }
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	885b      	ldrh	r3, [r3, #2]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d107      	bne.n	8009176 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f953 	bl	800941a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009174:	e013      	b.n	800919e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d10b      	bne.n	8009196 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	889b      	ldrh	r3, [r3, #4]
 8009182:	0a1b      	lsrs	r3, r3, #8
 8009184:	b29b      	uxth	r3, r3
 8009186:	b2da      	uxtb	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f943 	bl	800941a <USBD_CtlSendStatus>
}
 8009194:	e003      	b.n	800919e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f860 	bl	800925e <USBD_CtlError>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	3b01      	subs	r3, #1
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d80b      	bhi.n	80091d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d10c      	bne.n	80091e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f923 	bl	800941a <USBD_CtlSendStatus>
      }
      break;
 80091d4:	e004      	b.n	80091e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f840 	bl	800925e <USBD_CtlError>
      break;
 80091de:	e000      	b.n	80091e2 <USBD_ClrFeature+0x3c>
      break;
 80091e0:	bf00      	nop
  }
}
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	781a      	ldrb	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fa3e 	bl	8008696 <SWAPBYTE>
 800921a:	4603      	mov	r3, r0
 800921c:	461a      	mov	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff fa31 	bl	8008696 <SWAPBYTE>
 8009234:	4603      	mov	r3, r0
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3301      	adds	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7ff fa24 	bl	8008696 <SWAPBYTE>
 800924e:	4603      	mov	r3, r0
 8009250:	461a      	mov	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	80da      	strh	r2, [r3, #6]
}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009268:	2180      	movs	r1, #128	; 0x80
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fd58 	bl	8009d20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fd54 	bl	8009d20 <USBD_LL_StallEP>
}
 8009278:	bf00      	nop
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d042      	beq.n	800931c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800929a:	6938      	ldr	r0, [r7, #16]
 800929c:	f000 f842 	bl	8009324 <USBD_GetLen>
 80092a0:	4603      	mov	r3, r0
 80092a2:	3301      	adds	r3, #1
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092aa:	d808      	bhi.n	80092be <USBD_GetString+0x3e>
 80092ac:	6938      	ldr	r0, [r7, #16]
 80092ae:	f000 f839 	bl	8009324 <USBD_GetLen>
 80092b2:	4603      	mov	r3, r0
 80092b4:	3301      	adds	r3, #1
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	e001      	b.n	80092c2 <USBD_GetString+0x42>
 80092be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092c6:	7dfb      	ldrb	r3, [r7, #23]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	4413      	add	r3, r2
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	3301      	adds	r3, #1
 80092d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	4413      	add	r3, r2
 80092de:	2203      	movs	r2, #3
 80092e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	3301      	adds	r3, #1
 80092e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80092e8:	e013      	b.n	8009312 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	4413      	add	r3, r2
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	7812      	ldrb	r2, [r2, #0]
 80092f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3301      	adds	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]
    idx++;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	3301      	adds	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	4413      	add	r3, r2
 8009308:	2200      	movs	r2, #0
 800930a:	701a      	strb	r2, [r3, #0]
    idx++;
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	3301      	adds	r3, #1
 8009310:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e7      	bne.n	80092ea <USBD_GetString+0x6a>
 800931a:	e000      	b.n	800931e <USBD_GetString+0x9e>
    return;
 800931c:	bf00      	nop
  }
}
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009334:	e005      	b.n	8009342 <USBD_GetLen+0x1e>
  {
    len++;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	3301      	adds	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	3301      	adds	r3, #1
 8009340:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1f5      	bne.n	8009336 <USBD_GetLen+0x12>
  }

  return len;
 800934a:	7bfb      	ldrb	r3, [r7, #15]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2202      	movs	r2, #2
 8009368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	2100      	movs	r1, #0
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 fd54 	bl	8009e32 <USBD_LL_Transmit>

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	2100      	movs	r1, #0
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fd43 	bl	8009e32 <USBD_LL_Transmit>

  return USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2203      	movs	r2, #3
 80093c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	2100      	movs	r1, #0
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 fd43 	bl	8009e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	2100      	movs	r1, #0
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f000 fd32 	bl	8009e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2204      	movs	r2, #4
 8009426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800942a:	2300      	movs	r3, #0
 800942c:	2200      	movs	r2, #0
 800942e:	2100      	movs	r1, #0
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fcfe 	bl	8009e32 <USBD_LL_Transmit>

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2205      	movs	r2, #5
 800944c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009450:	2300      	movs	r3, #0
 8009452:	2200      	movs	r2, #0
 8009454:	2100      	movs	r1, #0
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fd0c 	bl	8009e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800946c:	2200      	movs	r2, #0
 800946e:	4912      	ldr	r1, [pc, #72]	; (80094b8 <MX_USB_DEVICE_Init+0x50>)
 8009470:	4812      	ldr	r0, [pc, #72]	; (80094bc <MX_USB_DEVICE_Init+0x54>)
 8009472:	f7fe fcd7 	bl	8007e24 <USBD_Init>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800947c:	f7f7 ffb4 	bl	80013e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009480:	490f      	ldr	r1, [pc, #60]	; (80094c0 <MX_USB_DEVICE_Init+0x58>)
 8009482:	480e      	ldr	r0, [pc, #56]	; (80094bc <MX_USB_DEVICE_Init+0x54>)
 8009484:	f7fe fcfe 	bl	8007e84 <USBD_RegisterClass>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800948e:	f7f7 ffab 	bl	80013e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009492:	490c      	ldr	r1, [pc, #48]	; (80094c4 <MX_USB_DEVICE_Init+0x5c>)
 8009494:	4809      	ldr	r0, [pc, #36]	; (80094bc <MX_USB_DEVICE_Init+0x54>)
 8009496:	f7fe fbf5 	bl	8007c84 <USBD_CDC_RegisterInterface>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094a0:	f7f7 ffa2 	bl	80013e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094a4:	4805      	ldr	r0, [pc, #20]	; (80094bc <MX_USB_DEVICE_Init+0x54>)
 80094a6:	f7fe fd23 	bl	8007ef0 <USBD_Start>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094b0:	f7f7 ff9a 	bl	80013e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094b4:	bf00      	nop
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	200000b4 	.word	0x200000b4
 80094bc:	20000430 	.word	0x20000430
 80094c0:	20000018 	.word	0x20000018
 80094c4:	200000a0 	.word	0x200000a0

080094c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094cc:	2200      	movs	r2, #0
 80094ce:	4905      	ldr	r1, [pc, #20]	; (80094e4 <CDC_Init_FS+0x1c>)
 80094d0:	4805      	ldr	r0, [pc, #20]	; (80094e8 <CDC_Init_FS+0x20>)
 80094d2:	f7fe fbf1 	bl	8007cb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094d6:	4905      	ldr	r1, [pc, #20]	; (80094ec <CDC_Init_FS+0x24>)
 80094d8:	4803      	ldr	r0, [pc, #12]	; (80094e8 <CDC_Init_FS+0x20>)
 80094da:	f7fe fc0f 	bl	8007cfc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80094de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	2000090c 	.word	0x2000090c
 80094e8:	20000430 	.word	0x20000430
 80094ec:	2000070c 	.word	0x2000070c

080094f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
 800950c:	4613      	mov	r3, r2
 800950e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	2b23      	cmp	r3, #35	; 0x23
 8009514:	f200 8098 	bhi.w	8009648 <CDC_Control_FS+0x148>
 8009518:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <CDC_Control_FS+0x20>)
 800951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951e:	bf00      	nop
 8009520:	08009649 	.word	0x08009649
 8009524:	08009649 	.word	0x08009649
 8009528:	08009649 	.word	0x08009649
 800952c:	08009649 	.word	0x08009649
 8009530:	08009649 	.word	0x08009649
 8009534:	08009649 	.word	0x08009649
 8009538:	08009649 	.word	0x08009649
 800953c:	08009649 	.word	0x08009649
 8009540:	08009649 	.word	0x08009649
 8009544:	08009649 	.word	0x08009649
 8009548:	08009649 	.word	0x08009649
 800954c:	08009649 	.word	0x08009649
 8009550:	08009649 	.word	0x08009649
 8009554:	08009649 	.word	0x08009649
 8009558:	08009649 	.word	0x08009649
 800955c:	08009649 	.word	0x08009649
 8009560:	08009649 	.word	0x08009649
 8009564:	08009649 	.word	0x08009649
 8009568:	08009649 	.word	0x08009649
 800956c:	08009649 	.word	0x08009649
 8009570:	08009649 	.word	0x08009649
 8009574:	08009649 	.word	0x08009649
 8009578:	08009649 	.word	0x08009649
 800957c:	08009649 	.word	0x08009649
 8009580:	08009649 	.word	0x08009649
 8009584:	08009649 	.word	0x08009649
 8009588:	08009649 	.word	0x08009649
 800958c:	08009649 	.word	0x08009649
 8009590:	08009649 	.word	0x08009649
 8009594:	08009649 	.word	0x08009649
 8009598:	08009649 	.word	0x08009649
 800959c:	08009649 	.word	0x08009649
 80095a0:	080095b1 	.word	0x080095b1
 80095a4:	080095f5 	.word	0x080095f5
 80095a8:	08009649 	.word	0x08009649
 80095ac:	08009649 	.word	0x08009649
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	3301      	adds	r3, #1
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	431a      	orrs	r2, r3
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	3302      	adds	r3, #2
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	041b      	lsls	r3, r3, #16
 80095c8:	431a      	orrs	r2, r3
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	3303      	adds	r3, #3
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	061b      	lsls	r3, r3, #24
 80095d2:	4313      	orrs	r3, r2
 80095d4:	461a      	mov	r2, r3
 80095d6:	4b20      	ldr	r3, [pc, #128]	; (8009658 <CDC_Control_FS+0x158>)
 80095d8:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	791a      	ldrb	r2, [r3, #4]
 80095de:	4b1e      	ldr	r3, [pc, #120]	; (8009658 <CDC_Control_FS+0x158>)
 80095e0:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	795a      	ldrb	r2, [r3, #5]
 80095e6:	4b1c      	ldr	r3, [pc, #112]	; (8009658 <CDC_Control_FS+0x158>)
 80095e8:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	799a      	ldrb	r2, [r3, #6]
 80095ee:	4b1a      	ldr	r3, [pc, #104]	; (8009658 <CDC_Control_FS+0x158>)
 80095f0:	719a      	strb	r2, [r3, #6]
    break;
 80095f2:	e02a      	b.n	800964a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80095f4:	4b18      	ldr	r3, [pc, #96]	; (8009658 <CDC_Control_FS+0x158>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80095fe:	4b16      	ldr	r3, [pc, #88]	; (8009658 <CDC_Control_FS+0x158>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	0a1a      	lsrs	r2, r3, #8
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800960c:	4b12      	ldr	r3, [pc, #72]	; (8009658 <CDC_Control_FS+0x158>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	0c1a      	lsrs	r2, r3, #16
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	3302      	adds	r3, #2
 8009616:	b2d2      	uxtb	r2, r2
 8009618:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800961a:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <CDC_Control_FS+0x158>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	0e1a      	lsrs	r2, r3, #24
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	3303      	adds	r3, #3
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	3304      	adds	r3, #4
 800962c:	4a0a      	ldr	r2, [pc, #40]	; (8009658 <CDC_Control_FS+0x158>)
 800962e:	7912      	ldrb	r2, [r2, #4]
 8009630:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	3305      	adds	r3, #5
 8009636:	4a08      	ldr	r2, [pc, #32]	; (8009658 <CDC_Control_FS+0x158>)
 8009638:	7952      	ldrb	r2, [r2, #5]
 800963a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	3306      	adds	r3, #6
 8009640:	4a05      	ldr	r2, [pc, #20]	; (8009658 <CDC_Control_FS+0x158>)
 8009642:	7992      	ldrb	r2, [r2, #6]
 8009644:	701a      	strb	r2, [r3, #0]
    break;
 8009646:	e000      	b.n	800964a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009648:	bf00      	nop
  }

  return (USBD_OK);
 800964a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	20000098 	.word	0x20000098

0800965c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 8009666:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <CDC_Receive_FS+0x3c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d007      	beq.n	800967e <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 800966e:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <CDC_Receive_FS+0x3c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	6812      	ldr	r2, [r2, #0]
 8009676:	b292      	uxth	r2, r2
 8009678:	4611      	mov	r1, r2
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4806      	ldr	r0, [pc, #24]	; (800969c <CDC_Receive_FS+0x40>)
 8009682:	f7fe fb3b 	bl	8007cfc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009686:	4805      	ldr	r0, [pc, #20]	; (800969c <CDC_Receive_FS+0x40>)
 8009688:	f7fe fb96 	bl	8007db8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800968c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20000b0c 	.word	0x20000b0c
 800969c:	20000430 	.word	0x20000430

080096a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096b0:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <CDC_Transmit_FS+0x48>)
 80096b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e00b      	b.n	80096de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096c6:	887b      	ldrh	r3, [r7, #2]
 80096c8:	461a      	mov	r2, r3
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4806      	ldr	r0, [pc, #24]	; (80096e8 <CDC_Transmit_FS+0x48>)
 80096ce:	f7fe faf3 	bl	8007cb8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096d2:	4805      	ldr	r0, [pc, #20]	; (80096e8 <CDC_Transmit_FS+0x48>)
 80096d4:	f7fe fb30 	bl	8007d38 <USBD_CDC_TransmitPacket>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000430 	.word	0x20000430

080096ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4613      	mov	r3, r2
 80096f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80096fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009702:	4618      	mov	r0, r3
 8009704:	371c      	adds	r7, #28
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
	...

08009710 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*PtrRx)(uint8_t *buf, uint16_t Len)) //la interfaZ va a llamar cada vez que se envian datos desde el USB hacia la PC
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8009718:	4a04      	ldr	r2, [pc, #16]	; (800972c <CDC_Attach_Rx+0x1c>)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6013      	str	r3, [r2, #0]
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20000b0c 	.word	0x20000b0c

08009730 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2212      	movs	r2, #18
 8009740:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009742:	4b03      	ldr	r3, [pc, #12]	; (8009750 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	200000d0 	.word	0x200000d0

08009754 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2204      	movs	r2, #4
 8009764:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009766:	4b03      	ldr	r3, [pc, #12]	; (8009774 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	200000e4 	.word	0x200000e4

08009778 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d105      	bne.n	8009796 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	4907      	ldr	r1, [pc, #28]	; (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
 800978e:	4808      	ldr	r0, [pc, #32]	; (80097b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009790:	f7ff fd76 	bl	8009280 <USBD_GetString>
 8009794:	e004      	b.n	80097a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	4904      	ldr	r1, [pc, #16]	; (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
 800979a:	4805      	ldr	r0, [pc, #20]	; (80097b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800979c:	f7ff fd70 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a0:	4b02      	ldr	r3, [pc, #8]	; (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000b10 	.word	0x20000b10
 80097b0:	0800a16c 	.word	0x0800a16c

080097b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	6039      	str	r1, [r7, #0]
 80097be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	4904      	ldr	r1, [pc, #16]	; (80097d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097c4:	4804      	ldr	r0, [pc, #16]	; (80097d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097c6:	f7ff fd5b 	bl	8009280 <USBD_GetString>
  return USBD_StrDesc;
 80097ca:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20000b10 	.word	0x20000b10
 80097d8:	0800a184 	.word	0x0800a184

080097dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	221a      	movs	r2, #26
 80097ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097ee:	f000 f843 	bl	8009878 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097f2:	4b02      	ldr	r3, [pc, #8]	; (80097fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200000e8 	.word	0x200000e8

08009800 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d105      	bne.n	800981e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4907      	ldr	r1, [pc, #28]	; (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009816:	4808      	ldr	r0, [pc, #32]	; (8009838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009818:	f7ff fd32 	bl	8009280 <USBD_GetString>
 800981c:	e004      	b.n	8009828 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	4904      	ldr	r1, [pc, #16]	; (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009822:	4805      	ldr	r0, [pc, #20]	; (8009838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009824:	f7ff fd2c 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009828:	4b02      	ldr	r3, [pc, #8]	; (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000b10 	.word	0x20000b10
 8009838:	0800a198 	.word	0x0800a198

0800983c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	6039      	str	r1, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4907      	ldr	r1, [pc, #28]	; (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009852:	4808      	ldr	r0, [pc, #32]	; (8009874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009854:	f7ff fd14 	bl	8009280 <USBD_GetString>
 8009858:	e004      	b.n	8009864 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	4904      	ldr	r1, [pc, #16]	; (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800985e:	4805      	ldr	r0, [pc, #20]	; (8009874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009860:	f7ff fd0e 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009864:	4b02      	ldr	r3, [pc, #8]	; (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000b10 	.word	0x20000b10
 8009874:	0800a1a4 	.word	0x0800a1a4

08009878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800987e:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <Get_SerialNum+0x44>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009884:	4b0e      	ldr	r3, [pc, #56]	; (80098c0 <Get_SerialNum+0x48>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800988a:	4b0e      	ldr	r3, [pc, #56]	; (80098c4 <Get_SerialNum+0x4c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4413      	add	r3, r2
 8009896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d009      	beq.n	80098b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800989e:	2208      	movs	r2, #8
 80098a0:	4909      	ldr	r1, [pc, #36]	; (80098c8 <Get_SerialNum+0x50>)
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f814 	bl	80098d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098a8:	2204      	movs	r2, #4
 80098aa:	4908      	ldr	r1, [pc, #32]	; (80098cc <Get_SerialNum+0x54>)
 80098ac:	68b8      	ldr	r0, [r7, #8]
 80098ae:	f000 f80f 	bl	80098d0 <IntToUnicode>
  }
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	1fff7a10 	.word	0x1fff7a10
 80098c0:	1fff7a14 	.word	0x1fff7a14
 80098c4:	1fff7a18 	.word	0x1fff7a18
 80098c8:	200000ea 	.word	0x200000ea
 80098cc:	200000fa 	.word	0x200000fa

080098d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098e2:	2300      	movs	r3, #0
 80098e4:	75fb      	strb	r3, [r7, #23]
 80098e6:	e027      	b.n	8009938 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	d80b      	bhi.n	8009908 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	0f1b      	lsrs	r3, r3, #28
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	4619      	mov	r1, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	440b      	add	r3, r1
 8009900:	3230      	adds	r2, #48	; 0x30
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	e00a      	b.n	800991e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	0f1b      	lsrs	r3, r3, #28
 800990c:	b2da      	uxtb	r2, r3
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4619      	mov	r1, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	440b      	add	r3, r1
 8009918:	3237      	adds	r2, #55	; 0x37
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	3301      	adds	r3, #1
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	4413      	add	r3, r2
 800992e:	2200      	movs	r2, #0
 8009930:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	3301      	adds	r3, #1
 8009936:	75fb      	strb	r3, [r7, #23]
 8009938:	7dfa      	ldrb	r2, [r7, #23]
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	429a      	cmp	r2, r3
 800993e:	d3d3      	bcc.n	80098e8 <IntToUnicode+0x18>
  }
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
	...

08009950 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08a      	sub	sp, #40	; 0x28
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009958:	f107 0314 	add.w	r3, r7, #20
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	605a      	str	r2, [r3, #4]
 8009962:	609a      	str	r2, [r3, #8]
 8009964:	60da      	str	r2, [r3, #12]
 8009966:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009970:	d13a      	bne.n	80099e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009972:	2300      	movs	r3, #0
 8009974:	613b      	str	r3, [r7, #16]
 8009976:	4b1e      	ldr	r3, [pc, #120]	; (80099f0 <HAL_PCD_MspInit+0xa0>)
 8009978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997a:	4a1d      	ldr	r2, [pc, #116]	; (80099f0 <HAL_PCD_MspInit+0xa0>)
 800997c:	f043 0301 	orr.w	r3, r3, #1
 8009980:	6313      	str	r3, [r2, #48]	; 0x30
 8009982:	4b1b      	ldr	r3, [pc, #108]	; (80099f0 <HAL_PCD_MspInit+0xa0>)
 8009984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	613b      	str	r3, [r7, #16]
 800998c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800998e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009994:	2302      	movs	r3, #2
 8009996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009998:	2300      	movs	r3, #0
 800999a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800999c:	2303      	movs	r3, #3
 800999e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099a0:	230a      	movs	r3, #10
 80099a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099a4:	f107 0314 	add.w	r3, r7, #20
 80099a8:	4619      	mov	r1, r3
 80099aa:	4812      	ldr	r0, [pc, #72]	; (80099f4 <HAL_PCD_MspInit+0xa4>)
 80099ac:	f7f9 f8d8 	bl	8002b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b4:	4a0e      	ldr	r2, [pc, #56]	; (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ba:	6353      	str	r3, [r2, #52]	; 0x34
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c4:	4a0a      	ldr	r2, [pc, #40]	; (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099ca:	6453      	str	r3, [r2, #68]	; 0x44
 80099cc:	4b08      	ldr	r3, [pc, #32]	; (80099f0 <HAL_PCD_MspInit+0xa0>)
 80099ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099d8:	2200      	movs	r2, #0
 80099da:	2100      	movs	r1, #0
 80099dc:	2043      	movs	r0, #67	; 0x43
 80099de:	f7f8 fd18 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099e2:	2043      	movs	r0, #67	; 0x43
 80099e4:	f7f8 fd31 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099e8:	bf00      	nop
 80099ea:	3728      	adds	r7, #40	; 0x28
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	40023800 	.word	0x40023800
 80099f4:	40020000 	.word	0x40020000

080099f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	f7fe fabb 	bl	8007f8a <USBD_LL_SetupStage>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	4613      	mov	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	4619      	mov	r1, r3
 8009a46:	f7fe faf5 	bl	8008034 <USBD_LL_DataOutStage>
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	3320      	adds	r3, #32
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f7fe fb97 	bl	80081ac <USBD_LL_DataInStage>
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe fcdb 	bl	8008450 <USBD_LL_SOF>
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	79db      	ldrb	r3, [r3, #7]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d001      	beq.n	8009aba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ab6:	f7f7 fc97 	bl	80013e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009ac0:	7bfa      	ldrb	r2, [r7, #15]
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe fc7f 	bl	80083c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe fc26 	bl	8008322 <USBD_LL_Reset>
}
 8009ad6:	bf00      	nop
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe fc7a 	bl	80083e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b06:	f043 0301 	orr.w	r3, r3, #1
 8009b0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	7adb      	ldrb	r3, [r3, #11]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b14:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <HAL_PCD_SuspendCallback+0x48>)
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	4a03      	ldr	r2, [pc, #12]	; (8009b28 <HAL_PCD_SuspendCallback+0x48>)
 8009b1a:	f043 0306 	orr.w	r3, r3, #6
 8009b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	e000ed00 	.word	0xe000ed00

08009b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fc70 	bl	8008420 <USBD_LL_Resume>
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009b5a:	78fa      	ldrb	r2, [r7, #3]
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fcc8 	bl	80084f4 <USBD_LL_IsoOUTIncomplete>
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe fc84 	bl	8008490 <USBD_LL_IsoINIncomplete>
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe fcda 	bl	8008558 <USBD_LL_DevConnected>
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fcd7 	bl	800856e <USBD_LL_DevDisconnected>
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d13c      	bne.n	8009c52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009bd8:	4a20      	ldr	r2, [pc, #128]	; (8009c5c <USBD_LL_Init+0x94>)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a1e      	ldr	r2, [pc, #120]	; (8009c5c <USBD_LL_Init+0x94>)
 8009be4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009be8:	4b1c      	ldr	r3, [pc, #112]	; (8009c5c <USBD_LL_Init+0x94>)
 8009bea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009bee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009bf0:	4b1a      	ldr	r3, [pc, #104]	; (8009c5c <USBD_LL_Init+0x94>)
 8009bf2:	2204      	movs	r2, #4
 8009bf4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009bf6:	4b19      	ldr	r3, [pc, #100]	; (8009c5c <USBD_LL_Init+0x94>)
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009bfc:	4b17      	ldr	r3, [pc, #92]	; (8009c5c <USBD_LL_Init+0x94>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c02:	4b16      	ldr	r3, [pc, #88]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c04:	2202      	movs	r2, #2
 8009c06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c08:	4b14      	ldr	r3, [pc, #80]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c14:	4b11      	ldr	r3, [pc, #68]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009c1a:	4b10      	ldr	r3, [pc, #64]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c20:	4b0e      	ldr	r3, [pc, #56]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c26:	480d      	ldr	r0, [pc, #52]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c28:	f7f9 fa96 	bl	8003158 <HAL_PCD_Init>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c32:	f7f7 fbd9 	bl	80013e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c36:	2180      	movs	r1, #128	; 0x80
 8009c38:	4808      	ldr	r0, [pc, #32]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c3a:	f7fa fcc2 	bl	80045c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c3e:	2240      	movs	r2, #64	; 0x40
 8009c40:	2100      	movs	r1, #0
 8009c42:	4806      	ldr	r0, [pc, #24]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c44:	f7fa fc76 	bl	8004534 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c48:	2280      	movs	r2, #128	; 0x80
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	4803      	ldr	r0, [pc, #12]	; (8009c5c <USBD_LL_Init+0x94>)
 8009c4e:	f7fa fc71 	bl	8004534 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000d10 	.word	0x20000d10

08009c60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7f9 fb7d 	bl	8003376 <HAL_PCD_Start>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 f942 	bl	8009f0c <USBD_Get_USB_Status>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	70fb      	strb	r3, [r7, #3]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70bb      	strb	r3, [r7, #2]
 8009cac:	4613      	mov	r3, r2
 8009cae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009cbe:	78bb      	ldrb	r3, [r7, #2]
 8009cc0:	883a      	ldrh	r2, [r7, #0]
 8009cc2:	78f9      	ldrb	r1, [r7, #3]
 8009cc4:	f7fa f851 	bl	8003d6a <HAL_PCD_EP_Open>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 f91c 	bl	8009f0c <USBD_Get_USB_Status>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cfc:	78fa      	ldrb	r2, [r7, #3]
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fa f89c 	bl	8003e3e <HAL_PCD_EP_Close>
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f8fd 	bl	8009f0c <USBD_Get_USB_Status>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d3a:	78fa      	ldrb	r2, [r7, #3]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fa f954 	bl	8003fec <HAL_PCD_EP_SetStall>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 f8de 	bl	8009f0c <USBD_Get_USB_Status>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	460b      	mov	r3, r1
 8009d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fa f998 	bl	80040b2 <HAL_PCD_EP_ClrStall>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 f8bf 	bl	8009f0c <USBD_Get_USB_Status>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da0b      	bge.n	8009dd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009db8:	78fb      	ldrb	r3, [r7, #3]
 8009dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dbe:	68f9      	ldr	r1, [r7, #12]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	3316      	adds	r3, #22
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	e00b      	b.n	8009de8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dd6:	68f9      	ldr	r1, [r7, #12]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	4413      	add	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	440b      	add	r3, r1
 8009de2:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009de6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e0e:	78fa      	ldrb	r2, [r7, #3]
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f9 ff85 	bl	8003d22 <HAL_PCD_SetAddress>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f874 	bl	8009f0c <USBD_Get_USB_Status>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	603b      	str	r3, [r7, #0]
 8009e3e:	460b      	mov	r3, r1
 8009e40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e50:	7af9      	ldrb	r1, [r7, #11]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	f7fa f88f 	bl	8003f78 <HAL_PCD_EP_Transmit>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 f853 	bl	8009f0c <USBD_Get_USB_Status>
 8009e66:	4603      	mov	r3, r0
 8009e68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	460b      	mov	r3, r1
 8009e82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e92:	7af9      	ldrb	r1, [r7, #11]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	f7fa f81b 	bl	8003ed2 <HAL_PCD_EP_Receive>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 f832 	bl	8009f0c <USBD_Get_USB_Status>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eac:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fa f83b 	bl	8003f48 <HAL_PCD_EP_GetRxCount>
 8009ed2:	4603      	mov	r3, r0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ee4:	4b03      	ldr	r3, [pc, #12]	; (8009ef4 <USBD_static_malloc+0x18>)
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	200011f4 	.word	0x200011f4

08009ef8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f1a:	79fb      	ldrb	r3, [r7, #7]
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d817      	bhi.n	8009f50 <USBD_Get_USB_Status+0x44>
 8009f20:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <USBD_Get_USB_Status+0x1c>)
 8009f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f26:	bf00      	nop
 8009f28:	08009f39 	.word	0x08009f39
 8009f2c:	08009f3f 	.word	0x08009f3f
 8009f30:	08009f45 	.word	0x08009f45
 8009f34:	08009f4b 	.word	0x08009f4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f3c:	e00b      	b.n	8009f56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	73fb      	strb	r3, [r7, #15]
    break;
 8009f42:	e008      	b.n	8009f56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f44:	2301      	movs	r3, #1
 8009f46:	73fb      	strb	r3, [r7, #15]
    break;
 8009f48:	e005      	b.n	8009f56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f4e:	e002      	b.n	8009f56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	73fb      	strb	r3, [r7, #15]
    break;
 8009f54:	bf00      	nop
  }
  return usb_status;
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <malloc>:
 8009f64:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <malloc+0xc>)
 8009f66:	4601      	mov	r1, r0
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	f000 b823 	b.w	8009fb4 <_malloc_r>
 8009f6e:	bf00      	nop
 8009f70:	20000150 	.word	0x20000150

08009f74 <sbrk_aligned>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4e0e      	ldr	r6, [pc, #56]	; (8009fb0 <sbrk_aligned+0x3c>)
 8009f78:	460c      	mov	r4, r1
 8009f7a:	6831      	ldr	r1, [r6, #0]
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	b911      	cbnz	r1, 8009f86 <sbrk_aligned+0x12>
 8009f80:	f000 f8ac 	bl	800a0dc <_sbrk_r>
 8009f84:	6030      	str	r0, [r6, #0]
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 f8a7 	bl	800a0dc <_sbrk_r>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	d00a      	beq.n	8009fa8 <sbrk_aligned+0x34>
 8009f92:	1cc4      	adds	r4, r0, #3
 8009f94:	f024 0403 	bic.w	r4, r4, #3
 8009f98:	42a0      	cmp	r0, r4
 8009f9a:	d007      	beq.n	8009fac <sbrk_aligned+0x38>
 8009f9c:	1a21      	subs	r1, r4, r0
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 f89c 	bl	800a0dc <_sbrk_r>
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d101      	bne.n	8009fac <sbrk_aligned+0x38>
 8009fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8009fac:	4620      	mov	r0, r4
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	20001418 	.word	0x20001418

08009fb4 <_malloc_r>:
 8009fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	1ccd      	adds	r5, r1, #3
 8009fba:	f025 0503 	bic.w	r5, r5, #3
 8009fbe:	3508      	adds	r5, #8
 8009fc0:	2d0c      	cmp	r5, #12
 8009fc2:	bf38      	it	cc
 8009fc4:	250c      	movcc	r5, #12
 8009fc6:	2d00      	cmp	r5, #0
 8009fc8:	4607      	mov	r7, r0
 8009fca:	db01      	blt.n	8009fd0 <_malloc_r+0x1c>
 8009fcc:	42a9      	cmp	r1, r5
 8009fce:	d905      	bls.n	8009fdc <_malloc_r+0x28>
 8009fd0:	230c      	movs	r3, #12
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a0b0 <_malloc_r+0xfc>
 8009fe0:	f000 f868 	bl	800a0b4 <__malloc_lock>
 8009fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe8:	461c      	mov	r4, r3
 8009fea:	bb5c      	cbnz	r4, 800a044 <_malloc_r+0x90>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f7ff ffc0 	bl	8009f74 <sbrk_aligned>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	d155      	bne.n	800a0a6 <_malloc_r+0xf2>
 8009ffa:	f8d8 4000 	ldr.w	r4, [r8]
 8009ffe:	4626      	mov	r6, r4
 800a000:	2e00      	cmp	r6, #0
 800a002:	d145      	bne.n	800a090 <_malloc_r+0xdc>
 800a004:	2c00      	cmp	r4, #0
 800a006:	d048      	beq.n	800a09a <_malloc_r+0xe6>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	4631      	mov	r1, r6
 800a00c:	4638      	mov	r0, r7
 800a00e:	eb04 0903 	add.w	r9, r4, r3
 800a012:	f000 f863 	bl	800a0dc <_sbrk_r>
 800a016:	4581      	cmp	r9, r0
 800a018:	d13f      	bne.n	800a09a <_malloc_r+0xe6>
 800a01a:	6821      	ldr	r1, [r4, #0]
 800a01c:	1a6d      	subs	r5, r5, r1
 800a01e:	4629      	mov	r1, r5
 800a020:	4638      	mov	r0, r7
 800a022:	f7ff ffa7 	bl	8009f74 <sbrk_aligned>
 800a026:	3001      	adds	r0, #1
 800a028:	d037      	beq.n	800a09a <_malloc_r+0xe6>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	442b      	add	r3, r5
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	f8d8 3000 	ldr.w	r3, [r8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d038      	beq.n	800a0aa <_malloc_r+0xf6>
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	42a2      	cmp	r2, r4
 800a03c:	d12b      	bne.n	800a096 <_malloc_r+0xe2>
 800a03e:	2200      	movs	r2, #0
 800a040:	605a      	str	r2, [r3, #4]
 800a042:	e00f      	b.n	800a064 <_malloc_r+0xb0>
 800a044:	6822      	ldr	r2, [r4, #0]
 800a046:	1b52      	subs	r2, r2, r5
 800a048:	d41f      	bmi.n	800a08a <_malloc_r+0xd6>
 800a04a:	2a0b      	cmp	r2, #11
 800a04c:	d917      	bls.n	800a07e <_malloc_r+0xca>
 800a04e:	1961      	adds	r1, r4, r5
 800a050:	42a3      	cmp	r3, r4
 800a052:	6025      	str	r5, [r4, #0]
 800a054:	bf18      	it	ne
 800a056:	6059      	strne	r1, [r3, #4]
 800a058:	6863      	ldr	r3, [r4, #4]
 800a05a:	bf08      	it	eq
 800a05c:	f8c8 1000 	streq.w	r1, [r8]
 800a060:	5162      	str	r2, [r4, r5]
 800a062:	604b      	str	r3, [r1, #4]
 800a064:	4638      	mov	r0, r7
 800a066:	f104 060b 	add.w	r6, r4, #11
 800a06a:	f000 f829 	bl	800a0c0 <__malloc_unlock>
 800a06e:	f026 0607 	bic.w	r6, r6, #7
 800a072:	1d23      	adds	r3, r4, #4
 800a074:	1af2      	subs	r2, r6, r3
 800a076:	d0ae      	beq.n	8009fd6 <_malloc_r+0x22>
 800a078:	1b9b      	subs	r3, r3, r6
 800a07a:	50a3      	str	r3, [r4, r2]
 800a07c:	e7ab      	b.n	8009fd6 <_malloc_r+0x22>
 800a07e:	42a3      	cmp	r3, r4
 800a080:	6862      	ldr	r2, [r4, #4]
 800a082:	d1dd      	bne.n	800a040 <_malloc_r+0x8c>
 800a084:	f8c8 2000 	str.w	r2, [r8]
 800a088:	e7ec      	b.n	800a064 <_malloc_r+0xb0>
 800a08a:	4623      	mov	r3, r4
 800a08c:	6864      	ldr	r4, [r4, #4]
 800a08e:	e7ac      	b.n	8009fea <_malloc_r+0x36>
 800a090:	4634      	mov	r4, r6
 800a092:	6876      	ldr	r6, [r6, #4]
 800a094:	e7b4      	b.n	800a000 <_malloc_r+0x4c>
 800a096:	4613      	mov	r3, r2
 800a098:	e7cc      	b.n	800a034 <_malloc_r+0x80>
 800a09a:	230c      	movs	r3, #12
 800a09c:	603b      	str	r3, [r7, #0]
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f000 f80e 	bl	800a0c0 <__malloc_unlock>
 800a0a4:	e797      	b.n	8009fd6 <_malloc_r+0x22>
 800a0a6:	6025      	str	r5, [r4, #0]
 800a0a8:	e7dc      	b.n	800a064 <_malloc_r+0xb0>
 800a0aa:	605b      	str	r3, [r3, #4]
 800a0ac:	deff      	udf	#255	; 0xff
 800a0ae:	bf00      	nop
 800a0b0:	20001414 	.word	0x20001414

0800a0b4 <__malloc_lock>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__malloc_lock+0x8>)
 800a0b6:	f000 b84b 	b.w	800a150 <__retarget_lock_acquire_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	20001558 	.word	0x20001558

0800a0c0 <__malloc_unlock>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__malloc_unlock+0x8>)
 800a0c2:	f000 b846 	b.w	800a152 <__retarget_lock_release_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	20001558 	.word	0x20001558

0800a0cc <memset>:
 800a0cc:	4402      	add	r2, r0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d100      	bne.n	800a0d6 <memset+0xa>
 800a0d4:	4770      	bx	lr
 800a0d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0da:	e7f9      	b.n	800a0d0 <memset+0x4>

0800a0dc <_sbrk_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d06      	ldr	r5, [pc, #24]	; (800a0f8 <_sbrk_r+0x1c>)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	602b      	str	r3, [r5, #0]
 800a0e8:	f7f7 fbb4 	bl	8001854 <_sbrk>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_sbrk_r+0x1a>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_sbrk_r+0x1a>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	20001554 	.word	0x20001554

0800a0fc <__errno>:
 800a0fc:	4b01      	ldr	r3, [pc, #4]	; (800a104 <__errno+0x8>)
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	20000150 	.word	0x20000150

0800a108 <__libc_init_array>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4d0d      	ldr	r5, [pc, #52]	; (800a140 <__libc_init_array+0x38>)
 800a10c:	4c0d      	ldr	r4, [pc, #52]	; (800a144 <__libc_init_array+0x3c>)
 800a10e:	1b64      	subs	r4, r4, r5
 800a110:	10a4      	asrs	r4, r4, #2
 800a112:	2600      	movs	r6, #0
 800a114:	42a6      	cmp	r6, r4
 800a116:	d109      	bne.n	800a12c <__libc_init_array+0x24>
 800a118:	4d0b      	ldr	r5, [pc, #44]	; (800a148 <__libc_init_array+0x40>)
 800a11a:	4c0c      	ldr	r4, [pc, #48]	; (800a14c <__libc_init_array+0x44>)
 800a11c:	f000 f81a 	bl	800a154 <_init>
 800a120:	1b64      	subs	r4, r4, r5
 800a122:	10a4      	asrs	r4, r4, #2
 800a124:	2600      	movs	r6, #0
 800a126:	42a6      	cmp	r6, r4
 800a128:	d105      	bne.n	800a136 <__libc_init_array+0x2e>
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a130:	4798      	blx	r3
 800a132:	3601      	adds	r6, #1
 800a134:	e7ee      	b.n	800a114 <__libc_init_array+0xc>
 800a136:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13a:	4798      	blx	r3
 800a13c:	3601      	adds	r6, #1
 800a13e:	e7f2      	b.n	800a126 <__libc_init_array+0x1e>
 800a140:	0800a1dc 	.word	0x0800a1dc
 800a144:	0800a1dc 	.word	0x0800a1dc
 800a148:	0800a1dc 	.word	0x0800a1dc
 800a14c:	0800a1e0 	.word	0x0800a1e0

0800a150 <__retarget_lock_acquire_recursive>:
 800a150:	4770      	bx	lr

0800a152 <__retarget_lock_release_recursive>:
 800a152:	4770      	bx	lr

0800a154 <_init>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	bf00      	nop
 800a158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15a:	bc08      	pop	{r3}
 800a15c:	469e      	mov	lr, r3
 800a15e:	4770      	bx	lr

0800a160 <_fini>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr
