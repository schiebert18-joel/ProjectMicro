
ProjectMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d38  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008ed0  08008ed0  00018ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f30  08008f30  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f38  08008f38  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f38  08008f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08008f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000157c  20000104  08009044  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001680  08009044  00021680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150a9  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003821  00000000  00000000  00035220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00038a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e32  00000000  00000000  00039ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a758  00000000  00000000  0003ab1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fc5  00000000  00000000  00055272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bbfb  00000000  00000000  0006d237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d84  00000000  00000000  00108e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0010dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008eb8 	.word	0x08008eb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08008eb8 	.word	0x08008eb8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <datafromUSB>:
/**
 * recibo la informacion enviada por puerto USB (lo enviado por QT), y guardo los bytes recibidos en el buffer circular bufferRx[] de la estructura datosComSerie
 * UNER = 55 4E 45 52 // Nbytes= 02 // ':' = 3A // Alive= F0 // 0xC4 = checksum
 */

void datafromUSB(uint8_t *buf, uint16_t length){
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	81fb      	strh	r3, [r7, #14]
 80004e4:	e016      	b.n	8000514 <datafromUSB+0x40>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 80004e6:	89fb      	ldrh	r3, [r7, #14]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a0f      	ldr	r2, [pc, #60]	; (800052c <datafromUSB+0x58>)
 80004ee:	f892 2207 	ldrb.w	r2, [r2, #519]	; 0x207
 80004f2:	4611      	mov	r1, r2
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <datafromUSB+0x58>)
 80004f8:	440b      	add	r3, r1
 80004fa:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	datosComSerie.indexWriteRx++;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <datafromUSB+0x58>)
 8000500:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8000504:	3301      	adds	r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <datafromUSB+0x58>)
 800050a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
  for (i = 0; i < length; i++) {
 800050e:	89fb      	ldrh	r3, [r7, #14]
 8000510:	3301      	adds	r3, #1
 8000512:	81fb      	strh	r3, [r7, #14]
 8000514:	89fa      	ldrh	r2, [r7, #14]
 8000516:	887b      	ldrh	r3, [r7, #2]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3e4      	bcc.n	80004e6 <datafromUSB+0x12>
  }

}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000024c 	.word	0x2000024c

08000530 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]

	//si llegó informacion entonces llamo a decodeheader para el analisis del protocolo "UNER"
	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){ //si Recepcion write =! Recepcion read => buffer lleno
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f893 2208 	ldrb.w	r2, [r3, #520]	; 0x208
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8000544:	429a      	cmp	r2, r3
 8000546:	d008      	beq.n	800055a <comunicationsTask+0x2a>
		DecodeHeader(datosCom);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f80d 	bl	8000568 <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <comunicationsTask+0x34>)
 8000550:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <comunicationsTask+0x34>)
 8000556:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
//	}
//
//	if(CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend) == USBD_OK){
//		datosComSerie.indexReadTx += datosComSerie.bytesTosend;
//	}
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000024c 	.word	0x2000024c

08000568 <DecodeHeader>:

/**
 * Máquina de estados que busca: 'U', 'N', 'E', 'R', nBytes, ':', Payload, Checksum
 * Si todo es válido, llama a: decodeData(datosCom);
 */
void DecodeHeader(_sDato *datosCom){ //Recibo un puntero a la estructura de comunicación que contiene los buffers y los índices
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;		//Variable estática para recordar cuántos bytes de payload quedan por procesar

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx; //Guardo una copia del índice de escritura para no interferir con interrupciones
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8000576:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000578:	e100      	b.n	800077c <DecodeHeader+0x214>
    {
        switch (estadoProtocolo) {					//Mientras haya nuevos datos no leídos en el buffer de recepción...
 800057a:	4b86      	ldr	r3, [pc, #536]	; (8000794 <DecodeHeader+0x22c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b06      	cmp	r3, #6
 8000580:	f200 80f8 	bhi.w	8000774 <DecodeHeader+0x20c>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <DecodeHeader+0x24>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	080005a9 	.word	0x080005a9
 8000590:	080005d7 	.word	0x080005d7
 8000594:	08000615 	.word	0x08000615
 8000598:	08000653 	.word	0x08000653
 800059c:	08000691 	.word	0x08000691
 80005a0:	080006c1 	.word	0x080006c1
 80005a4:	0800070d 	.word	0x0800070d
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	b2d1      	uxtb	r1, r2
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	f882 1208 	strb.w	r1, [r2, #520]	; 0x208
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 80005c2:	2b55      	cmp	r3, #85	; 0x55
 80005c4:	f040 80da 	bne.w	800077c <DecodeHeader+0x214>
                    estadoProtocolo=HEADER_1;
 80005c8:	4b72      	ldr	r3, [pc, #456]	; (8000794 <DecodeHeader+0x22c>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	709a      	strb	r2, [r3, #2]
                }
                break;
 80005d4:	e0d2      	b.n	800077c <DecodeHeader+0x214>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	b2d1      	uxtb	r1, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	f882 1208 	strb.w	r1, [r2, #520]	; 0x208
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 80005f0:	2b4e      	cmp	r3, #78	; 0x4e
 80005f2:	d103      	bne.n	80005fc <DecodeHeader+0x94>
                   estadoProtocolo=HEADER_2;
 80005f4:	4b67      	ldr	r3, [pc, #412]	; (8000794 <DecodeHeader+0x22c>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e0bf      	b.n	800077c <DecodeHeader+0x214>
                else{
                    datosCom->indexReadRx--;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000602:	3b01      	subs	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
                    estadoProtocolo=START;
 800060c:	4b61      	ldr	r3, [pc, #388]	; (8000794 <DecodeHeader+0x22c>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000612:	e0b3      	b.n	800077c <DecodeHeader+0x214>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	b2d1      	uxtb	r1, r2
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	f882 1208 	strb.w	r1, [r2, #520]	; 0x208
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800062e:	2b45      	cmp	r3, #69	; 0x45
 8000630:	d103      	bne.n	800063a <DecodeHeader+0xd2>
                    estadoProtocolo=HEADER_3;
 8000632:	4b58      	ldr	r3, [pc, #352]	; (8000794 <DecodeHeader+0x22c>)
 8000634:	2203      	movs	r2, #3
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e0a0      	b.n	800077c <DecodeHeader+0x214>
                else{
                    datosCom->indexReadRx--;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000640:	3b01      	subs	r3, #1
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
                   estadoProtocolo=START;
 800064a:	4b52      	ldr	r3, [pc, #328]	; (8000794 <DecodeHeader+0x22c>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000650:	e094      	b.n	800077c <DecodeHeader+0x214>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	b2d1      	uxtb	r1, r2
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	f882 1208 	strb.w	r1, [r2, #520]	; 0x208
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800066c:	2b52      	cmp	r3, #82	; 0x52
 800066e:	d103      	bne.n	8000678 <DecodeHeader+0x110>
					estadoProtocolo=NBYTES;
 8000670:	4b48      	ldr	r3, [pc, #288]	; (8000794 <DecodeHeader+0x22c>)
 8000672:	2204      	movs	r2, #4
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e081      	b.n	800077c <DecodeHeader+0x214>
				else{
					datosCom->indexReadRx--;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800067e:	3b01      	subs	r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
				    estadoProtocolo=START;
 8000688:	4b42      	ldr	r3, [pc, #264]	; (8000794 <DecodeHeader+0x22c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
				}
            break;
 800068e:	e075      	b.n	800077c <DecodeHeader+0x214>
            case NBYTES: //Leer byte de cantidad de datos (nBytes) y avanzar
                datosCom->indexStart=datosCom->indexReadRx;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 2208 	ldrb.w	r2, [r3, #520]	; 0x208
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	b2d1      	uxtb	r1, r2
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	f882 1208 	strb.w	r1, [r2, #520]	; 0x208
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	f893 220b 	ldrb.w	r2, [r3, #523]	; 0x20b
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <DecodeHeader+0x230>)
 80006b6:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <DecodeHeader+0x22c>)
 80006ba:	2205      	movs	r2, #5
 80006bc:	701a      	strb	r2, [r3, #0]
                break;
 80006be:	e05d      	b.n	800077c <DecodeHeader+0x214>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	b2d1      	uxtb	r1, r2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	f882 1208 	strb.w	r1, [r2, #520]	; 0x208
 80006d0:	461a      	mov	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 80006da:	2b3a      	cmp	r3, #58	; 0x3a
 80006dc:	d10a      	bne.n	80006f4 <DecodeHeader+0x18c>

                   estadoProtocolo=PAYLOAD;
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <DecodeHeader+0x22c>)
 80006e0:	2206      	movs	r2, #6
 80006e2:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <DecodeHeader+0x230>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	709a      	strb	r2, [r3, #2]
 80006f2:	e043      	b.n	800077c <DecodeHeader+0x214>
                }
                else{
                    datosCom->indexReadRx--;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
                    estadoProtocolo=START;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <DecodeHeader+0x22c>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
                }
                break;
 800070a:	e037      	b.n	800077c <DecodeHeader+0x214>
            case PAYLOAD:

                if (nBytes>1){
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <DecodeHeader+0x230>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d912      	bls.n	800073a <DecodeHeader+0x1d2>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	b2d1      	uxtb	r1, r2
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	f882 1208 	strb.w	r1, [r2, #520]	; 0x208
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	f893 220b 	ldrb.w	r2, [r3, #523]	; 0x20b
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	789b      	ldrb	r3, [r3, #2]
 8000732:	4053      	eors	r3, r2
 8000734:	b2da      	uxtb	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <DecodeHeader+0x230>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <DecodeHeader+0x230>)
 8000744:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){ //Cuando ya se leyeron todos los datos, compara el checksum. Si es correcto, llama a decodeData() para procesar el mensaje.
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <DecodeHeader+0x230>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d116      	bne.n	800077c <DecodeHeader+0x214>
                    estadoProtocolo=START;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <DecodeHeader+0x22c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	789a      	ldrb	r2, [r3, #2]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800075e:	4619      	mov	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	440b      	add	r3, r1
 8000764:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8000768:	429a      	cmp	r2, r3
 800076a:	d107      	bne.n	800077c <DecodeHeader+0x214>
                        decodeData(datosCom);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f815 	bl	800079c <decodeData>
                    }
                }

                break;
 8000772:	e003      	b.n	800077c <DecodeHeader+0x214>
            default:
                estadoProtocolo=START;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <DecodeHeader+0x22c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
                break;
 800077a:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	429a      	cmp	r2, r3
 8000786:	f47f aef8 	bne.w	800057a <DecodeHeader+0x12>
        }
    }
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000658 	.word	0x20000658
 8000798:	20000154 	.word	0x20000154

0800079c <decodeData>:

//si el protocolo fue valido => preparo respuestas
void decodeData(_sDato *datosCom){ //responde segun el ID recibido. Busca el ID del comando en la tercera posición del payload (después del token y del byte de longitud).
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]


    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2, /ID EN LA POSICION 2, porque es donde se adjunta el byte que te dice "ALIVE, FIRMWARE, ETC"
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	3302      	adds	r3, #2
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 80007be:	2bf1      	cmp	r3, #241	; 0xf1
 80007c0:	d01d      	beq.n	80007fe <decodeData+0x62>
 80007c2:	2bf1      	cmp	r3, #241	; 0xf1
 80007c4:	dc63      	bgt.n	800088e <decodeData+0xf2>
 80007c6:	2ba0      	cmp	r3, #160	; 0xa0
 80007c8:	d027      	beq.n	800081a <decodeData+0x7e>
 80007ca:	2bf0      	cmp	r3, #240	; 0xf0
 80007cc:	d15f      	bne.n	800088e <decodeData+0xf2>
    {

	case ALIVE:
		bufAux[indiceAux++] = ALIVE;   	// ID de respuesta
 80007ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80007d8:	3328      	adds	r3, #40	; 0x28
 80007da:	443b      	add	r3, r7
 80007dc:	22f0      	movs	r2, #240	; 0xf0
 80007de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		bufAux[indiceAux++] = 0x0D;    	// Respuesta: ACK
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80007ec:	3328      	adds	r3, #40	; 0x28
 80007ee:	443b      	add	r3, r7
 80007f0:	220d      	movs	r2, #13
 80007f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		bytes = 0x03;        			// NBYTES = 3 (ID + Dato + Checksum)
 80007f6:	2303      	movs	r3, #3
 80007f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	break;
 80007fc:	e055      	b.n	80008aa <decodeData+0x10e>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80007fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000808:	3328      	adds	r3, #40	; 0x28
 800080a:	443b      	add	r3, r7
 800080c:	22f1      	movs	r2, #241	; 0xf1
 800080e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		bytes=0x02;
 8000812:	2302      	movs	r3, #2
 8000814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    break;
 8000818:	e047      	b.n	80008aa <decodeData+0x10e>

    break;

    case IR:
		bufAux[indiceAux++] = IR;
 800081a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000824:	3328      	adds	r3, #40	; 0x28
 8000826:	443b      	add	r3, r7
 8000828:	22a0      	movs	r2, #160	; 0xa0
 800082a:	f803 2c1c 	strb.w	r2, [r3, #-28]
			for (int i = 0; i < 3; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
 8000832:	e026      	b.n	8000882 <decodeData+0xe6>
				w.u16[0] = irSensor[i].currentValue;
 8000834:	4923      	ldr	r1, [pc, #140]	; (80008c4 <decodeData+0x128>)
 8000836:	6a3a      	ldr	r2, [r7, #32]
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	440b      	add	r3, r1
 8000842:	881a      	ldrh	r2, [r3, #0]
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <decodeData+0x12c>)
 8000846:	801a      	strh	r2, [r3, #0]
				bufAux[indiceAux++] = w.u8[0];
 8000848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000852:	4619      	mov	r1, r3
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <decodeData+0x12c>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	f101 0328 	add.w	r3, r1, #40	; 0x28
 800085c:	443b      	add	r3, r7
 800085e:	f803 2c1c 	strb.w	r2, [r3, #-28]
				bufAux[indiceAux++] = w.u8[1];
 8000862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800086c:	4619      	mov	r1, r3
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <decodeData+0x12c>)
 8000870:	785a      	ldrb	r2, [r3, #1]
 8000872:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8000876:	443b      	add	r3, r7
 8000878:	f803 2c1c 	strb.w	r2, [r3, #-28]
			for (int i = 0; i < 3; i++) {
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	3301      	adds	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
 8000882:	6a3b      	ldr	r3, [r7, #32]
 8000884:	2b02      	cmp	r3, #2
 8000886:	ddd5      	ble.n	8000834 <decodeData+0x98>
			}
		bytes = 1 + (3 * 2);  // ID + 3 valores de 2 bytes
 8000888:	2307      	movs	r3, #7
 800088a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    default:
        bufAux[indiceAux++]=0xFF;
 800088e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8000898:	3328      	adds	r3, #40	; 0x28
 800089a:	443b      	add	r3, r7
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	f803 2c1c 	strb.w	r2, [r3, #-28]
        bytes=0x02;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    break;
 80008a8:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 80008aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f809 	bl	80008cc <SendInfo>
}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000124 	.word	0x20000124
 80008c8:	20000120 	.word	0x20000120

080008cc <SendInfo>:

//calculo y envio el checksum
void SendInfo(uint8_t bufferAux[], uint8_t bytes){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[20], indiceAux=0,cks=0,i=0;
 80008d8:	2300      	movs	r3, #0
 80008da:	77fb      	strb	r3, [r7, #31]
 80008dc:	2300      	movs	r3, #0
 80008de:	77bb      	strb	r3, [r7, #30]
 80008e0:	2300      	movs	r3, #0
 80008e2:	777b      	strb	r3, [r7, #29]

    bufAux[indiceAux++]='U';
 80008e4:	7ffb      	ldrb	r3, [r7, #31]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	77fa      	strb	r2, [r7, #31]
 80008ea:	3320      	adds	r3, #32
 80008ec:	443b      	add	r3, r7
 80008ee:	2255      	movs	r2, #85	; 0x55
 80008f0:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 80008f4:	7ffb      	ldrb	r3, [r7, #31]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	77fa      	strb	r2, [r7, #31]
 80008fa:	3320      	adds	r3, #32
 80008fc:	443b      	add	r3, r7
 80008fe:	224e      	movs	r2, #78	; 0x4e
 8000900:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000904:	7ffb      	ldrb	r3, [r7, #31]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	77fa      	strb	r2, [r7, #31]
 800090a:	3320      	adds	r3, #32
 800090c:	443b      	add	r3, r7
 800090e:	2245      	movs	r2, #69	; 0x45
 8000910:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000914:	7ffb      	ldrb	r3, [r7, #31]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	77fa      	strb	r2, [r7, #31]
 800091a:	3320      	adds	r3, #32
 800091c:	443b      	add	r3, r7
 800091e:	2252      	movs	r2, #82	; 0x52
 8000920:	f803 2c18 	strb.w	r2, [r3, #-24]

    bufAux[indiceAux++]=bytes;
 8000924:	7ffb      	ldrb	r3, [r7, #31]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	77fa      	strb	r2, [r7, #31]
 800092a:	3320      	adds	r3, #32
 800092c:	443b      	add	r3, r7
 800092e:	78fa      	ldrb	r2, [r7, #3]
 8000930:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	77fa      	strb	r2, [r7, #31]
 800093a:	3320      	adds	r3, #32
 800093c:	443b      	add	r3, r7
 800093e:	223a      	movs	r2, #58	; 0x3a
 8000940:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(i=0; i<bytes-1; i++){
 8000944:	2300      	movs	r3, #0
 8000946:	777b      	strb	r3, [r7, #29]
 8000948:	e00d      	b.n	8000966 <SendInfo+0x9a>
        bufAux[indiceAux++] = bufferAux[i];
 800094a:	7f7b      	ldrb	r3, [r7, #29]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	441a      	add	r2, r3
 8000950:	7ffb      	ldrb	r3, [r7, #31]
 8000952:	1c59      	adds	r1, r3, #1
 8000954:	77f9      	strb	r1, [r7, #31]
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	3320      	adds	r3, #32
 800095a:	443b      	add	r3, r7
 800095c:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(i=0; i<bytes-1; i++){
 8000960:	7f7b      	ldrb	r3, [r7, #29]
 8000962:	3301      	adds	r3, #1
 8000964:	777b      	strb	r3, [r7, #29]
 8000966:	7f7a      	ldrb	r2, [r7, #29]
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	3b01      	subs	r3, #1
 800096c:	429a      	cmp	r2, r3
 800096e:	dbec      	blt.n	800094a <SendInfo+0x7e>
    }

    cks	= 0;
 8000970:	2300      	movs	r3, #0
 8000972:	77bb      	strb	r3, [r7, #30]

    //Cargar en bufferTx con checksum:
    for(i=0 ;i<indiceAux;i++){
 8000974:	2300      	movs	r3, #0
 8000976:	777b      	strb	r3, [r7, #29]
 8000978:	e01d      	b.n	80009b6 <SendInfo+0xea>
        cks^= bufAux[i];
 800097a:	7f7b      	ldrb	r3, [r7, #29]
 800097c:	3320      	adds	r3, #32
 800097e:	443b      	add	r3, r7
 8000980:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000984:	7fbb      	ldrb	r3, [r7, #30]
 8000986:	4053      	eors	r3, r2
 8000988:	77bb      	strb	r3, [r7, #30]
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 800098a:	7f7a      	ldrb	r2, [r7, #29]
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <SendInfo+0x14c>)
 800098e:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8000992:	1c59      	adds	r1, r3, #1
 8000994:	b2c8      	uxtb	r0, r1
 8000996:	4920      	ldr	r1, [pc, #128]	; (8000a18 <SendInfo+0x14c>)
 8000998:	f881 0209 	strb.w	r0, [r1, #521]	; 0x209
 800099c:	4619      	mov	r1, r3
 800099e:	f102 0320 	add.w	r3, r2, #32
 80009a2:	443b      	add	r3, r7
 80009a4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <SendInfo+0x14c>)
 80009aa:	440b      	add	r3, r1
 80009ac:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    for(i=0 ;i<indiceAux;i++){
 80009b0:	7f7b      	ldrb	r3, [r7, #29]
 80009b2:	3301      	adds	r3, #1
 80009b4:	777b      	strb	r3, [r7, #29]
 80009b6:	7f7a      	ldrb	r2, [r7, #29]
 80009b8:	7ffb      	ldrb	r3, [r7, #31]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d3dd      	bcc.n	800097a <SendInfo+0xae>
    }
    // Agregar el checksum al final
    datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <SendInfo+0x14c>)
 80009c0:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	b2d1      	uxtb	r1, r2
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <SendInfo+0x14c>)
 80009ca:	f882 1209 	strb.w	r1, [r2, #521]	; 0x209
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <SendInfo+0x14c>)
 80009d2:	4413      	add	r3, r2
 80009d4:	7fba      	ldrb	r2, [r7, #30]
 80009d6:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    // Cantidad total de bytes a transmitir (incluyendo checksum)
    datosComSerie.bytesTosend = datosComSerie.indexWriteTx;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <SendInfo+0x14c>)
 80009dc:	f893 2209 	ldrb.w	r2, [r3, #521]	; 0x209
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <SendInfo+0x14c>)
 80009e2:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b

    // Paquete enviado hacia QT: 55 4E 45 52   01 	 3A     F0         0D          C8
    //							 'U''N''E''R''Nbytes'':''ID:Alive''Payload: ACK''Cheksum'
    CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend); //transmision por USB hacia QT
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <SendInfo+0x14c>)
 80009e8:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 80009ec:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80009f0:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <SendInfo+0x14c>)
 80009f2:	4413      	add	r3, r2
 80009f4:	3303      	adds	r3, #3
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <SendInfo+0x14c>)
 80009f8:	f892 240b 	ldrb.w	r2, [r2, #1035]	; 0x40b
 80009fc:	b292      	uxth	r2, r2
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f007 fdcb 	bl	800859c <CDC_Transmit_FS>
    datosComSerie.indexWriteTx = 0;
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SendInfo+0x14c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209

}
 8000a0e:	bf00      	nop
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000024c 	.word	0x2000024c

08000a1c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d104      	bne.n	8000a38 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a30:	7813      	ldrb	r3, [r2, #0]
 8000a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a36:	7013      	strb	r3, [r2, #0]
	}

}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40010000 	.word	0x40010000
 8000a48:	20000248 	.word	0x20000248

08000a4c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

	if (hadc->Instance == ADC1) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_ADC_ConvCpltCallback+0x50>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d115      	bne.n	8000a8e <HAL_ADC_ConvCpltCallback+0x42>
		for (i = 0; i < NUM_CHANNELS; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e00f      	b.n	8000a88 <HAL_ADC_ConvCpltCallback+0x3c>
			sensorIR[i].currentValue = adcBuffer[i];
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	7bfa      	ldrb	r2, [r7, #15]
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000a6e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8000a72:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	440b      	add	r3, r1
 8000a7e:	4602      	mov	r2, r0
 8000a80:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < NUM_CHANNELS; i++) {
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	3301      	adds	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d9ec      	bls.n	8000a68 <HAL_ADC_ConvCpltCallback+0x1c>
	//	          "PA0:%4U PA1:%4U PA2:%4U PA3:%4U PA4:%4U PA5:%4U PA6:%4U PA7:%4U\R\N",
	//			  ADCBUFFER[0], ADCBUFFER[1], ADCBUFFER[2], ADCBUFFER[3],
	//			  ADCBUFFER[4], ADCBUFFER[5], ADCBUFFER[6], ADCBUFFER[7]);
	//
	//	  CDC_TRANSMIT_FS((UINT8_T*)USBMSG, STRLEN(USBMSG));
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40012000 	.word	0x40012000
 8000aa0:	2000068c 	.word	0x2000068c
 8000aa4:	2000065c 	.word	0x2000065c

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t time250us = 0, time10ms = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f000 fb93 	bl	80011e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_Attach_Rx(&datafromUSB);
 8000aba:	482b      	ldr	r0, [pc, #172]	; (8000b68 <main+0xc0>)
 8000abc:	f007 fda6 	bl	800860c <CDC_Attach_Rx>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac0:	f000 f860 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f000 f9ea 	bl	8000e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ac8:	f000 f9c8 	bl	8000e5c <MX_DMA_Init>
  MX_TIM1_Init();
 8000acc:	f000 f976 	bl	8000dbc <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000ad0:	f007 fc48 	bl	8008364 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000ad4:	f000 f8be 	bl	8000c54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000ad8:	4824      	ldr	r0, [pc, #144]	; (8000b6c <main+0xc4>)
 8000ada:	f003 fd1f 	bl	800451c <HAL_TIM_Base_Start_IT>

  IS10MS = FALSE;
 8000ade:	4a24      	ldr	r2, [pc, #144]	; (8000b70 <main+0xc8>)
 8000ae0:	7813      	ldrb	r3, [r2, #0]
 8000ae2:	f36f 1386 	bfc	r3, #6, #1
 8000ae6:	7013      	strb	r3, [r2, #0]
  datosComSerie.indexReadRx = 0;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <main+0xcc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
  datosComSerie.indexWriteRx =0;
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <main+0xcc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
  myFlags.allFlags = 0;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <main+0xc8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  comunicationsTask(&datosComSerie);
 8000afe:	481d      	ldr	r0, [pc, #116]	; (8000b74 <main+0xcc>)
 8000b00:	f7ff fd16 	bl	8000530 <comunicationsTask>

	  if(IS10MS){
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <main+0xc8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f5      	beq.n	8000afe <main+0x56>
		  time250us++;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	3301      	adds	r3, #1
 8000b16:	71fb      	strb	r3, [r7, #7]
		  IS10MS =! IS10MS;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <main+0xc8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf0c      	ite	eq
 8000b26:	2301      	moveq	r3, #1
 8000b28:	2300      	movne	r3, #0
 8000b2a:	b2d9      	uxtb	r1, r3
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <main+0xc8>)
 8000b2e:	7813      	ldrb	r3, [r2, #0]
 8000b30:	f361 1386 	bfi	r3, r1, #6, #1
 8000b34:	7013      	strb	r3, [r2, #0]
		  if(time250us >= 40){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b27      	cmp	r3, #39	; 0x27
 8000b3a:	d9e0      	bls.n	8000afe <main+0x56>
			  time10ms++;
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	71bb      	strb	r3, [r7, #6]
			  time250us = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, NUM_CHANNELS);
 8000b46:	2203      	movs	r2, #3
 8000b48:	490b      	ldr	r1, [pc, #44]	; (8000b78 <main+0xd0>)
 8000b4a:	480c      	ldr	r0, [pc, #48]	; (8000b7c <main+0xd4>)
 8000b4c:	f000 fc22 	bl	8001394 <HAL_ADC_Start_DMA>
			  if(time10ms == 100){
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	2b64      	cmp	r3, #100	; 0x64
 8000b54:	d1d3      	bne.n	8000afe <main+0x56>
				  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	4809      	ldr	r0, [pc, #36]	; (8000b80 <main+0xd8>)
 8000b5c:	f001 fdf1 	bl	8002742 <HAL_GPIO_TogglePin>
				  time10ms = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	71bb      	strb	r3, [r7, #6]
	  comunicationsTask(&datosComSerie);
 8000b64:	e7cb      	b.n	8000afe <main+0x56>
 8000b66:	bf00      	nop
 8000b68:	080004d5 	.word	0x080004d5
 8000b6c:	20000200 	.word	0x20000200
 8000b70:	20000248 	.word	0x20000248
 8000b74:	2000024c 	.word	0x2000024c
 8000b78:	2000068c 	.word	0x2000068c
 8000b7c:	20000158 	.word	0x20000158
 8000b80:	40020800 	.word	0x40020800

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	; 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0320 	add.w	r3, r7, #32
 8000b8e:	2230      	movs	r2, #48	; 0x30
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f008 f964 	bl	8008e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <SystemClock_Config+0xc8>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <SystemClock_Config+0xc8>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <SystemClock_Config+0xc8>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <SystemClock_Config+0xcc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <SystemClock_Config+0xcc>)
 8000bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <SystemClock_Config+0xcc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bea:	2302      	movs	r3, #2
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bf4:	2319      	movs	r3, #25
 8000bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bf8:	23c0      	movs	r3, #192	; 0xc0
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 f807 	bl	8003c1c <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c14:	f000 f994 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2103      	movs	r1, #3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fa69 	bl	800410c <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c40:	f000 f97e 	bl	8000f40 <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3750      	adds	r7, #80	; 0x50
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c66:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c68:	4a52      	ldr	r2, [pc, #328]	; (8000db4 <MX_ADC1_Init+0x160>)
 8000c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c6c:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b4e      	ldr	r3, [pc, #312]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c7a:	4b4d      	ldr	r3, [pc, #308]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c80:	4b4b      	ldr	r3, [pc, #300]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8e:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c94:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c96:	4a48      	ldr	r2, [pc, #288]	; (8000db8 <MX_ADC1_Init+0x164>)
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9a:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000ca0:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ca6:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cae:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb4:	483e      	ldr	r0, [pc, #248]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000cb6:	f000 fb29 	bl	800130c <HAL_ADC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f000 f93e 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4836      	ldr	r0, [pc, #216]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000cd6:	f000 fc65 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f000 f92e 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	482f      	ldr	r0, [pc, #188]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000cf2:	f000 fc57 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000cfc:	f000 f920 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d04:	2303      	movs	r3, #3
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4828      	ldr	r0, [pc, #160]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000d0e:	f000 fc49 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d18:	f000 f912 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	4821      	ldr	r0, [pc, #132]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000d2a:	f000 fc3b 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d34:	f000 f904 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	481a      	ldr	r0, [pc, #104]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000d46:	f000 fc2d 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000d50:	f000 f8f6 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d54:	2305      	movs	r3, #5
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000d62:	f000 fc1f 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000d6c:	f000 f8e8 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d70:	2306      	movs	r3, #6
 8000d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000d74:	2307      	movs	r3, #7
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000d7e:	f000 fc11 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000d88:	f000 f8da 	bl	8000f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000d90:	2308      	movs	r3, #8
 8000d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_ADC1_Init+0x15c>)
 8000d9a:	f000 fc03 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000da4:	f000 f8cc 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000158 	.word	0x20000158
 8000db4:	40012000 	.word	0x40012000
 8000db8:	0f000001 	.word	0x0f000001

08000dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000dda:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <MX_TIM1_Init+0x9c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000dec:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000df0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000e06:	f003 fb39 	bl	800447c <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e10:	f000 f896 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000e22:	f003 fccd 	bl	80047c0 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e2c:	f000 f888 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_TIM1_Init+0x98>)
 8000e3e:	f003 fecf 	bl	8004be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e48:	f000 f87a 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000200 	.word	0x20000200
 8000e58:	40010000 	.word	0x40010000

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2038      	movs	r0, #56	; 0x38
 8000e84:	f000 ff19 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e88:	2038      	movs	r0, #56	; 0x38
 8000e8a:	f000 ff32 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_GPIO_Init+0x9c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <MX_GPIO_Init+0xa0>)
 8000f0e:	f001 fbff 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0xa0>)
 8000f2c:	f001 fa6c 	bl	8002408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020800 	.word	0x40020800

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <HAL_ADC_MspInit+0xd8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d156      	bne.n	800106c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <HAL_ADC_MspInit+0xdc>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a2c      	ldr	r2, [pc, #176]	; (8001078 <HAL_ADC_MspInit+0xdc>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_ADC_MspInit+0xdc>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_ADC_MspInit+0xdc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a25      	ldr	r2, [pc, #148]	; (8001078 <HAL_ADC_MspInit+0xdc>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_ADC_MspInit+0xdc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ff6:	23ff      	movs	r3, #255	; 0xff
 8000ff8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	481c      	ldr	r0, [pc, #112]	; (800107c <HAL_ADC_MspInit+0xe0>)
 800100a:	f001 f9fd 	bl	8002408 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001010:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <HAL_ADC_MspInit+0xe8>)
 8001012:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001028:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001034:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001038:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001052:	f000 fe69 	bl	8001d28 <HAL_DMA_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800105c:	f7ff ff70 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_ADC_MspInit+0xe4>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40012000 	.word	0x40012000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000
 8001080:	200001a0 	.word	0x200001a0
 8001084:	40026410 	.word	0x40026410

08001088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_TIM_Base_MspInit+0x48>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d115      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_TIM_Base_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_TIM_Base_MspInit+0x4c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_TIM_Base_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2019      	movs	r0, #25
 80010bc:	f000 fdfd 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010c0:	2019      	movs	r0, #25
 80010c2:	f000 fe16 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010000 	.word	0x40010000
 80010d4:	40023800 	.word	0x40023800

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f8ae 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001132:	f003 fa55 	bl	80045e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000200 	.word	0x20000200

08001140 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <DMA2_Stream0_IRQHandler+0x10>)
 8001146:	f000 fef5 	bl	8001f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001a0 	.word	0x200001a0

08001154 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <OTG_FS_IRQHandler+0x10>)
 800115a:	f001 fc50 	bl	80029fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000f7c 	.word	0x20000f7c

08001168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SystemInit+0x20>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <SystemInit+0x20>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001190:	f7ff ffea 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001196:	490d      	ldr	r1, [pc, #52]	; (80011cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ac:	4c0a      	ldr	r4, [pc, #40]	; (80011d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f007 fe59 	bl	8008e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fc73 	bl	8000aa8 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80011d0:	08008f40 	.word	0x08008f40
  ldr r2, =_sbss
 80011d4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80011d8:	20001680 	.word	0x20001680

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_Init+0x40>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_Init+0x40>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x40>)
 8001202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 fd4b 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fe9a 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fd63 	bl	8001d0e <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 fd2b 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000694 	.word	0x20000694

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000694 	.word	0x20000694

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008

0800130c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e033      	b.n	800138a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fe36 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001352:	f023 0302 	bic.w	r3, r3, #2
 8001356:	f043 0202 	orr.w	r2, r3, #2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fa52 	bl	8001808 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f023 0303 	bic.w	r3, r3, #3
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
 800137a:	e001      	b.n	8001380 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Start_DMA+0x22>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e0d0      	b.n	8001558 <HAL_ADC_Start_DMA+0x1c4>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d018      	beq.n	80013fe <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0201 	orr.w	r2, r2, #1
 80013da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_ADC_Start_DMA+0x1cc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a60      	ldr	r2, [pc, #384]	; (8001564 <HAL_ADC_Start_DMA+0x1d0>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9a      	lsrs	r2, r3, #18
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800140c:	d107      	bne.n	800141e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800141c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 8088 	bne.w	800153e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001458:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146c:	d106      	bne.n	800147c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f023 0206 	bic.w	r2, r3, #6
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
 800147a:	e002      	b.n	8001482 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148a:	4b37      	ldr	r3, [pc, #220]	; (8001568 <HAL_ADC_Start_DMA+0x1d4>)
 800148c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	4a36      	ldr	r2, [pc, #216]	; (800156c <HAL_ADC_Start_DMA+0x1d8>)
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	4a35      	ldr	r2, [pc, #212]	; (8001570 <HAL_ADC_Start_DMA+0x1dc>)
 800149c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a34      	ldr	r2, [pc, #208]	; (8001574 <HAL_ADC_Start_DMA+0x1e0>)
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014be:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ce:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	334c      	adds	r3, #76	; 0x4c
 80014da:	4619      	mov	r1, r3
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f000 fcd0 	bl	8001e84 <HAL_DMA_Start_IT>
 80014e4:	4603      	mov	r3, r0
 80014e6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10f      	bne.n	8001514 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d129      	bne.n	8001556 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	e020      	b.n	8001556 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_ADC_Start_DMA+0x1e4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d11b      	bne.n	8001556 <HAL_ADC_Start_DMA+0x1c2>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d114      	bne.n	8001556 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	e00b      	b.n	8001556 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f043 0210 	orr.w	r2, r3, #16
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001556:	7ffb      	ldrb	r3, [r7, #31]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	431bde83 	.word	0x431bde83
 8001568:	40012300 	.word	0x40012300
 800156c:	08001a01 	.word	0x08001a01
 8001570:	08001abb 	.word	0x08001abb
 8001574:	08001ad7 	.word	0x08001ad7
 8001578:	40012000 	.word	0x40012000

0800157c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1c>
 80015bc:	2302      	movs	r3, #2
 80015be:	e113      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x244>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d925      	bls.n	800161c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68d9      	ldr	r1, [r3, #12]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	3b1e      	subs	r3, #30
 80015e6:	2207      	movs	r2, #7
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43da      	mvns	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	400a      	ands	r2, r1
 80015f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68d9      	ldr	r1, [r3, #12]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	4603      	mov	r3, r0
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4403      	add	r3, r0
 800160e:	3b1e      	subs	r3, #30
 8001610:	409a      	lsls	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	e022      	b.n	8001662 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6919      	ldr	r1, [r3, #16]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	2207      	movs	r2, #7
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	400a      	ands	r2, r1
 800163e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	4603      	mov	r3, r0
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4403      	add	r3, r0
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b06      	cmp	r3, #6
 8001668:	d824      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b05      	subs	r3, #5
 800167c:	221f      	movs	r2, #31
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	400a      	ands	r2, r1
 800168a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b05      	subs	r3, #5
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
 80016b2:	e04c      	b.n	800174e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d824      	bhi.n	8001706 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b23      	subs	r3, #35	; 0x23
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	400a      	ands	r2, r1
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b23      	subs	r3, #35	; 0x23
 80016f8:	fa00 f203 	lsl.w	r2, r0, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
 8001704:	e023      	b.n	800174e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b41      	subs	r3, #65	; 0x41
 8001718:	221f      	movs	r2, #31
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b41      	subs	r3, #65	; 0x41
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_ADC_ConfigChannel+0x250>)
 8001750:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_ADC_ConfigChannel+0x254>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d10f      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d8>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b12      	cmp	r3, #18
 8001762:	d10b      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_ADC_ConfigChannel+0x254>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12b      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_ADC_ConfigChannel+0x258>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d003      	beq.n	8001798 <HAL_ADC_ConfigChannel+0x1f4>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b11      	cmp	r3, #17
 8001796:	d122      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_ADC_ConfigChannel+0x258>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d111      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_ADC_ConfigChannel+0x25c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_ADC_ConfigChannel+0x260>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9a      	lsrs	r2, r3, #18
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d0:	e002      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40012300 	.word	0x40012300
 80017f8:	40012000 	.word	0x40012000
 80017fc:	10000012 	.word	0x10000012
 8001800:	20000000 	.word	0x20000000
 8001804:	431bde83 	.word	0x431bde83

08001808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <ADC_Init+0x1f0>)
 8001812:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <ADC_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00f      	b.n	8001906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	035a      	lsls	r2, r3, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e007      	b.n	800197c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	051a      	lsls	r2, r3, #20
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019be:	025a      	lsls	r2, r3, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	029a      	lsls	r2, r3, #10
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13c      	bne.n	8001a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12b      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d127      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d119      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0220 	bic.w	r2, r2, #32
 8001a66:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7fe ffdd 	bl	8000a4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a92:	e00e      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7ff fd75 	bl	8001590 <HAL_ADC_ErrorCallback>
}
 8001aa6:	e004      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fd57 	bl	800157c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff fd4a 	bl	8001590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff faba 	bl	80012ac <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e099      	b.n	8001e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d64:	e00f      	b.n	8001d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d66:	f7ff faa1 	bl	80012ac <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d908      	bls.n	8001d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e078      	b.n	8001e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e8      	bne.n	8001d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_DMA_Init+0x158>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d107      	bne.n	8001df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	4313      	orrs	r3, r2
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f023 0307 	bic.w	r3, r3, #7
 8001e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d117      	bne.n	8001e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fa6f 	bl	8002310 <DMA_CheckFifoParam>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e46:	2301      	movs	r3, #1
 8001e48:	e016      	b.n	8001e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fa26 	bl	80022a4 <DMA_CalcBaseAndBitshift>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	223f      	movs	r2, #63	; 0x3f
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	f010803f 	.word	0xf010803f

08001e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Start_IT+0x26>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e040      	b.n	8001f2c <HAL_DMA_Start_IT+0xa8>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d12f      	bne.n	8001f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f9b8 	bl	8002248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	223f      	movs	r2, #63	; 0x3f
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0216 	orr.w	r2, r2, #22
 8001ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e005      	b.n	8001f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f40:	4b8e      	ldr	r3, [pc, #568]	; (800217c <HAL_DMA_IRQHandler+0x248>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a8e      	ldr	r2, [pc, #568]	; (8002180 <HAL_DMA_IRQHandler+0x24c>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0a9b      	lsrs	r3, r3, #10
 8001f4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2208      	movs	r2, #8
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d01a      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0204 	bic.w	r2, r2, #4
 8001f86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d012      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f043 0202 	orr.w	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	2204      	movs	r2, #4
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d012      	beq.n	800200c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f043 0204 	orr.w	r2, r3, #4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	2210      	movs	r2, #16
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d043      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03c      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	2210      	movs	r2, #16
 8002030:	409a      	lsls	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d018      	beq.n	8002076 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d108      	bne.n	8002064 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d024      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
 8002062:	e01f      	b.n	80020a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
 8002074:	e016      	b.n	80020a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0208 	bic.w	r2, r2, #8
 8002092:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	2220      	movs	r2, #32
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 808f 	beq.w	80021d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8087 	beq.w	80021d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2220      	movs	r2, #32
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d136      	bne.n	800214c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0216 	bic.w	r2, r2, #22
 80020ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d103      	bne.n	800210e <HAL_DMA_IRQHandler+0x1da>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0208 	bic.w	r2, r2, #8
 800211c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	223f      	movs	r2, #63	; 0x3f
 8002124:	409a      	lsls	r2, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213e:	2b00      	cmp	r3, #0
 8002140:	d07e      	beq.n	8002240 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4798      	blx	r3
        }
        return;
 800214a:	e079      	b.n	8002240 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01d      	beq.n	8002196 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10d      	bne.n	8002184 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	2b00      	cmp	r3, #0
 800216e:	d031      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
 8002178:	e02c      	b.n	80021d4 <HAL_DMA_IRQHandler+0x2a0>
 800217a:	bf00      	nop
 800217c:	20000000 	.word	0x20000000
 8002180:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
 8002194:	e01e      	b.n	80021d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10f      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0210 	bic.w	r2, r2, #16
 80021b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d032      	beq.n	8002242 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d022      	beq.n	800222e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2205      	movs	r2, #5
 80021ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3301      	adds	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	d307      	bcc.n	800221c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f2      	bne.n	8002200 <HAL_DMA_IRQHandler+0x2cc>
 800221a:	e000      	b.n	800221e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800221c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
 800223e:	e000      	b.n	8002242 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002240:	bf00      	nop
    }
  }
}
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	d108      	bne.n	8002288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002286:	e007      	b.n	8002298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3b10      	subs	r3, #16
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <DMA_CalcBaseAndBitshift+0x64>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <DMA_CalcBaseAndBitshift+0x68>)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d909      	bls.n	80022e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	1d1a      	adds	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	659a      	str	r2, [r3, #88]	; 0x58
 80022e4:	e007      	b.n	80022f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	aaaaaaab 	.word	0xaaaaaaab
 800230c:	08008f28 	.word	0x08008f28

08002310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11f      	bne.n	800236a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d856      	bhi.n	80023de <DMA_CheckFifoParam+0xce>
 8002330:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <DMA_CheckFifoParam+0x28>)
 8002332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002336:	bf00      	nop
 8002338:	08002349 	.word	0x08002349
 800233c:	0800235b 	.word	0x0800235b
 8002340:	08002349 	.word	0x08002349
 8002344:	080023df 	.word	0x080023df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d046      	beq.n	80023e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002358:	e043      	b.n	80023e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002362:	d140      	bne.n	80023e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e03d      	b.n	80023e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002372:	d121      	bne.n	80023b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d837      	bhi.n	80023ea <DMA_CheckFifoParam+0xda>
 800237a:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <DMA_CheckFifoParam+0x70>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	08002391 	.word	0x08002391
 8002384:	08002397 	.word	0x08002397
 8002388:	08002391 	.word	0x08002391
 800238c:	080023a9 	.word	0x080023a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      break;
 8002394:	e030      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d025      	beq.n	80023ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a6:	e022      	b.n	80023ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023b0:	d11f      	bne.n	80023f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023b6:	e01c      	b.n	80023f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d903      	bls.n	80023c6 <DMA_CheckFifoParam+0xb6>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d003      	beq.n	80023cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023c4:	e018      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ca:	e015      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	e00b      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      break;
 80023de:	bf00      	nop
 80023e0:	e00a      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
 80023e4:	e008      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
 80023e8:	e006      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ea:	bf00      	nop
 80023ec:	e004      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ee:	bf00      	nop
 80023f0:	e002      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023f2:	bf00      	nop
 80023f4:	e000      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
    }
  } 
  
  return status; 
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e159      	b.n	80026d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8148 	bne.w	80026d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	2b02      	cmp	r3, #2
 8002458:	d130      	bne.n	80024bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0201 	and.w	r2, r3, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d017      	beq.n	80024f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a2 	beq.w	80026d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_GPIO_Init+0x2ec>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a49      	ldr	r2, [pc, #292]	; (80026f8 <HAL_GPIO_Init+0x2f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x202>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a48      	ldr	r2, [pc, #288]	; (80026fc <HAL_GPIO_Init+0x2f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x1fe>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_GPIO_Init+0x2f8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x1fa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a46      	ldr	r2, [pc, #280]	; (8002704 <HAL_GPIO_Init+0x2fc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x1f6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a45      	ldr	r2, [pc, #276]	; (8002708 <HAL_GPIO_Init+0x300>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x1f2>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x204>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	; (80026f4 <HAL_GPIO_Init+0x2ec>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_GPIO_Init+0x304>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a2f      	ldr	r2, [pc, #188]	; (800270c <HAL_GPIO_Init+0x304>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_GPIO_Init+0x304>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a24      	ldr	r2, [pc, #144]	; (800270c <HAL_GPIO_Init+0x304>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_GPIO_Init+0x304>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <HAL_GPIO_Init+0x304>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_GPIO_Init+0x304>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_GPIO_Init+0x304>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f aea2 	bls.w	8002424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800272c:	e003      	b.n	8002736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	041a      	lsls	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	041a      	lsls	r2, r3, #16
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	43d9      	mvns	r1, r3
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	400b      	ands	r3, r1
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af02      	add	r7, sp, #8
 800277c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e101      	b.n	800298c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f006 f852 	bl	800884c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2203      	movs	r2, #3
 80027ac:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b6:	d102      	bne.n	80027be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fba5 	bl	8004f12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7c1a      	ldrb	r2, [r3, #16]
 80027d0:	f88d 2000 	strb.w	r2, [sp]
 80027d4:	3304      	adds	r3, #4
 80027d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d8:	f002 fa84 	bl	8004ce4 <USB_CoreInit>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0ce      	b.n	800298c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fb9d 	bl	8004f34 <USB_SetCurrentMode>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0bf      	b.n	800298c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e04a      	b.n	80028a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3315      	adds	r3, #21
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3314      	adds	r3, #20
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	b298      	uxth	r0, r3
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	332e      	adds	r3, #46	; 0x2e
 800284e:	4602      	mov	r2, r0
 8002850:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	3318      	adds	r3, #24
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	331c      	adds	r3, #28
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3320      	adds	r3, #32
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3324      	adds	r3, #36	; 0x24
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	3301      	adds	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	791b      	ldrb	r3, [r3, #4]
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3af      	bcc.n	8002812 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e044      	b.n	8002942 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	f203 2355 	addw	r3, r3, #597	; 0x255
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	3301      	adds	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	791b      	ldrb	r3, [r3, #4]
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	429a      	cmp	r2, r3
 800294a:	d3b5      	bcc.n	80028b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7c1a      	ldrb	r2, [r3, #16]
 8002954:	f88d 2000 	strb.w	r2, [sp]
 8002958:	3304      	adds	r3, #4
 800295a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295c:	f002 fb36 	bl	8004fcc <USB_DevInit>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e00c      	b.n	800298c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fb80 	bl	800608a <USB_DevDisconnect>

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_PCD_Start+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e022      	b.n	80029f6 <HAL_PCD_Start+0x62>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 fa87 	bl	8004ef0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fb2e 	bl	8006048 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029fe:	b590      	push	{r4, r7, lr}
 8002a00:	b08d      	sub	sp, #52	; 0x34
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 fbec 	bl	80061f2 <USB_GetMode>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f040 848c 	bne.w	800333a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fb50 	bl	80060cc <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8482 	beq.w	8003338 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f003 fb3d 	bl	80060cc <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d107      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f002 0202 	and.w	r2, r2, #2
 8002a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fb2b 	bl	80060cc <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d161      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0210 	bic.w	r2, r2, #16
 8002a8e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f003 020f 	and.w	r2, r3, #15
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	0c5b      	lsrs	r3, r3, #17
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d124      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d035      	beq.n	8002b34 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6a38      	ldr	r0, [r7, #32]
 8002adc:	f003 f962 	bl	8005da4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aec:	441a      	add	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002afe:	441a      	add	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	615a      	str	r2, [r3, #20]
 8002b04:	e016      	b.n	8002b34 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	0c5b      	lsrs	r3, r3, #17
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d110      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b18:	2208      	movs	r2, #8
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6a38      	ldr	r0, [r7, #32]
 8002b1e:	f003 f941 	bl	8005da4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b2e:	441a      	add	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0210 	orr.w	r2, r2, #16
 8002b42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fabf 	bl	80060cc <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b58:	f040 80a7 	bne.w	8002caa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fac4 	bl	80060f2 <USB_ReadDevAllOutEpInterrupt>
 8002b6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b6c:	e099      	b.n	8002ca2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 808e 	beq.w	8002c96 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fae8 	bl	800615a <USB_ReadDevOutEPInterrupt>
 8002b8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fea4 	bl	80038f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2308      	movs	r3, #8
 8002bca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 ff7a 	bl	8003ac8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bea:	461a      	mov	r2, r3
 8002bec:	2310      	movs	r3, #16
 8002bee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d030      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d109      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c18:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	78db      	ldrb	r3, [r3, #3]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d108      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f005 fefd 	bl	8008a44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	461a      	mov	r2, r3
 8002c58:	2302      	movs	r3, #2
 8002c5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	2320      	movs	r3, #32
 8002c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	3301      	adds	r3, #1
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f47f af62 	bne.w	8002b6e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 fa0c 	bl	80060cc <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cbe:	f040 80db 	bne.w	8002e78 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 fa2d 	bl	8006126 <USB_ReadDevAllInEpInterrupt>
 8002ccc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cd2:	e0cd      	b.n	8002e70 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80c2 	beq.w	8002e64 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fa53 	bl	8006196 <USB_ReadDevInEPInterrupt>
 8002cf0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d057      	beq.n	8002dac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	2201      	movs	r2, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69f9      	ldr	r1, [r7, #28]
 8002d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2301      	movs	r3, #1
 8002d30:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	799b      	ldrb	r3, [r3, #6]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d132      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3320      	adds	r3, #32
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4403      	add	r3, r0
 8002d5a:	331c      	adds	r3, #28
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4419      	add	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4403      	add	r3, r0
 8002d6e:	3320      	adds	r3, #32
 8002d70:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d113      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x3a2>
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3324      	adds	r3, #36	; 0x24
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d108      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	f003 fa5a 	bl	8006254 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f005 fdd1 	bl	800894e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dde:	461a      	mov	r2, r3
 8002de0:	2310      	movs	r3, #16
 8002de2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2340      	movs	r3, #64	; 0x40
 8002dfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d023      	beq.n	8002e52 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0c:	6a38      	ldr	r0, [r7, #32]
 8002e0e:	f002 fa41 	bl	8005294 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	3310      	adds	r3, #16
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	3304      	adds	r3, #4
 8002e24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	78db      	ldrb	r3, [r3, #3]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d108      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f005 fe14 	bl	8008a68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2302      	movs	r3, #2
 8002e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fcbd 	bl	80037de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	3301      	adds	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f47f af2e 	bne.w	8002cd4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 f925 	bl	80060cc <USB_ReadInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e8c:	d122      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fea4 	bl	8003c04 <HAL_PCDEx_LPM_Callback>
 8002ebc:	e002      	b.n	8002ec4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f005 fdb2 	bl	8008a28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 f8f7 	bl	80060cc <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee8:	d112      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f005 fd6e 	bl	80089dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f0e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 f8d9 	bl	80060cc <USB_ReadInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	f040 80b7 	bne.w	8003096 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2110      	movs	r1, #16
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 f9a6 	bl	8005294 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4c:	e046      	b.n	8002fdc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f72:	0151      	lsls	r1, r2, #5
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	440a      	add	r2, r1
 8002f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa6:	0151      	lsls	r1, r2, #5
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	440a      	add	r2, r1
 8002fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc6:	0151      	lsls	r1, r2, #5
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	440a      	add	r2, r1
 8002fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	3301      	adds	r3, #1
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	791b      	ldrb	r3, [r3, #4]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d3b2      	bcc.n	8002f4e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ffa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7bdb      	ldrb	r3, [r3, #15]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d016      	beq.n	8003032 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003014:	f043 030b 	orr.w	r3, r3, #11
 8003018:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302a:	f043 030b 	orr.w	r3, r3, #11
 800302e:	6453      	str	r3, [r2, #68]	; 0x44
 8003030:	e015      	b.n	800305e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003040:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003044:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003048:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003058:	f043 030b 	orr.w	r3, r3, #11
 800305c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800306c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003070:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003080:	461a      	mov	r2, r3
 8003082:	f003 f8e7 	bl	8006254 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003094:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f003 f816 	bl	80060cc <USB_ReadInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030aa:	d123      	bne.n	80030f4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 f8ac 	bl	800620e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f002 f963 	bl	8005386 <USB_GetDevSpeed>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681c      	ldr	r4, [r3, #0]
 80030cc:	f001 f9ca 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80030d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030d6:	461a      	mov	r2, r3
 80030d8:	4620      	mov	r0, r4
 80030da:	f001 fe67 	bl	8004dac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f005 fc5d 	bl	800899e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f002 ffe7 	bl	80060cc <USB_ReadInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d10a      	bne.n	800311e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f005 fc3a 	bl	8008982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 0208 	and.w	r2, r2, #8
 800311c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f002 ffd2 	bl	80060cc <USB_ReadInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d123      	bne.n	800317a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313e:	2301      	movs	r3, #1
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	e014      	b.n	800316e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	b2db      	uxtb	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fb0a 	bl	800377c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	3301      	adds	r3, #1
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	791b      	ldrb	r3, [r3, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	4293      	cmp	r3, r2
 8003178:	d3e4      	bcc.n	8003144 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f002 ffa4 	bl	80060cc <USB_ReadInterrupts>
 8003184:	4603      	mov	r3, r0
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318e:	d13c      	bne.n	800320a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	e02b      	b.n	80031ee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3318      	adds	r3, #24
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d115      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da12      	bge.n	80031e8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3317      	adds	r3, #23
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4619      	mov	r1, r3
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 faca 	bl	800377c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	3301      	adds	r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	791b      	ldrb	r3, [r3, #4]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d3cd      	bcc.n	8003196 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 ff5c 	bl	80060cc <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800321e:	d156      	bne.n	80032ce <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003220:	2301      	movs	r3, #1
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	e045      	b.n	80032b2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d12e      	bne.n	80032ac <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800324e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003250:	2b00      	cmp	r3, #0
 8003252:	da2b      	bge.n	80032ac <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	0c1a      	lsrs	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800325e:	4053      	eors	r3, r2
 8003260:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003264:	2b00      	cmp	r3, #0
 8003266:	d121      	bne.n	80032ac <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	f203 2357 	addw	r3, r3, #599	; 0x257
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a8:	6053      	str	r3, [r2, #4]
            break;
 80032aa:	e008      	b.n	80032be <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	3301      	adds	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	791b      	ldrb	r3, [r3, #4]
 80032b6:	461a      	mov	r2, r3
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d3b3      	bcc.n	8003226 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fefa 	bl	80060cc <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d10a      	bne.n	80032fa <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f005 fbd1 	bl	8008a8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 fee4 	bl	80060cc <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d115      	bne.n	800333a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f005 fbc1 	bl	8008aa8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	e000      	b.n	800333a <HAL_PCD_IRQHandler+0x93c>
      return;
 8003338:	bf00      	nop
    }
  }
}
 800333a:	3734      	adds	r7, #52	; 0x34
 800333c:	46bd      	mov	sp, r7
 800333e:	bd90      	pop	{r4, r7, pc}

08003340 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_SetAddress+0x1a>
 8003356:	2302      	movs	r3, #2
 8003358:	e012      	b.n	8003380 <HAL_PCD_SetAddress+0x40>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f002 fe43 	bl	8005ffc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	70fb      	strb	r3, [r7, #3]
 800339a:	460b      	mov	r3, r1
 800339c:	803b      	strh	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da0f      	bge.n	80033ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	3310      	adds	r3, #16
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	3304      	adds	r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	705a      	strb	r2, [r3, #1]
 80033cc:	e00f      	b.n	80033ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80033fa:	883b      	ldrh	r3, [r7, #0]
 80033fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	78ba      	ldrb	r2, [r7, #2]
 8003408:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800341c:	78bb      	ldrb	r3, [r7, #2]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d102      	bne.n	8003428 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_PCD_EP_Open+0xae>
 8003432:	2302      	movs	r3, #2
 8003434:	e00e      	b.n	8003454 <HAL_PCD_EP_Open+0xcc>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	4618      	mov	r0, r3
 8003446:	f001 ffc3 	bl	80053d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003452:	7afb      	ldrb	r3, [r7, #11]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800346c:	2b00      	cmp	r3, #0
 800346e:	da0f      	bge.n	8003490 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	3310      	adds	r3, #16
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	3304      	adds	r3, #4
 8003486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	705a      	strb	r2, [r3, #1]
 800348e:	e00f      	b.n	80034b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_PCD_EP_Close+0x6e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e00e      	b.n	80034e8 <HAL_PCD_EP_Close+0x8c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f002 f801 	bl	80054e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	460b      	mov	r3, r1
 80034fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003500:	7afb      	ldrb	r3, [r7, #11]
 8003502:	f003 020f 	and.w	r2, r3, #15
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4413      	add	r3, r2
 8003516:	3304      	adds	r3, #4
 8003518:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2200      	movs	r2, #0
 8003530:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	b2da      	uxtb	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	799b      	ldrb	r3, [r3, #6]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	799b      	ldrb	r3, [r3, #6]
 8003554:	461a      	mov	r2, r3
 8003556:	6979      	ldr	r1, [r7, #20]
 8003558:	f002 f89e 	bl	8005698 <USB_EPStartXfer>

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	460b      	mov	r3, r1
 8003570:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003588:	681b      	ldr	r3, [r3, #0]
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	460b      	mov	r3, r1
 80035a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	f003 020f 	and.w	r2, r3, #15
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	3310      	adds	r3, #16
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	3304      	adds	r3, #4
 80035bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2201      	movs	r2, #1
 80035d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d6:	7afb      	ldrb	r3, [r7, #11]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	799b      	ldrb	r3, [r3, #6]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	799b      	ldrb	r3, [r3, #6]
 80035f8:	461a      	mov	r2, r3
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	f002 f84c 	bl	8005698 <USB_EPStartXfer>

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	7912      	ldrb	r2, [r2, #4]
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e04f      	b.n	80036c8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800362c:	2b00      	cmp	r3, #0
 800362e:	da0f      	bge.n	8003650 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	3310      	adds	r3, #16
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	3304      	adds	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	705a      	strb	r2, [r3, #1]
 800364e:	e00d      	b.n	800366c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_PCD_EP_SetStall+0x82>
 8003688:	2302      	movs	r3, #2
 800368a:	e01d      	b.n	80036c8 <HAL_PCD_EP_SetStall+0xbe>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68f9      	ldr	r1, [r7, #12]
 800369a:	4618      	mov	r0, r3
 800369c:	f002 fbda 	bl	8005e54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7999      	ldrb	r1, [r3, #6]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036b8:	461a      	mov	r2, r3
 80036ba:	f002 fdcb 	bl	8006254 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	7912      	ldrb	r2, [r2, #4]
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e042      	b.n	8003774 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da0f      	bge.n	8003716 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	f003 020f 	and.w	r2, r3, #15
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	3310      	adds	r3, #16
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	3304      	adds	r3, #4
 800370c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	705a      	strb	r2, [r3, #1]
 8003714:	e00f      	b.n	8003736 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	3304      	adds	r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	b2da      	uxtb	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_PCD_EP_ClrStall+0x86>
 8003752:	2302      	movs	r3, #2
 8003754:	e00e      	b.n	8003774 <HAL_PCD_EP_ClrStall+0xa4>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	4618      	mov	r0, r3
 8003766:	f002 fbe3 	bl	8005f30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800378c:	2b00      	cmp	r3, #0
 800378e:	da0c      	bge.n	80037aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 020f 	and.w	r2, r3, #15
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	3310      	adds	r3, #16
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4413      	add	r3, r2
 80037a4:	3304      	adds	r3, #4
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e00c      	b.n	80037c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 020f 	and.w	r2, r3, #15
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68f9      	ldr	r1, [r7, #12]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f002 fa02 	bl	8005bd4 <USB_EPStopXfer>
 80037d0:	4603      	mov	r3, r0
 80037d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037d4:	7afb      	ldrb	r3, [r7, #11]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b08a      	sub	sp, #40	; 0x28
 80037e2:	af02      	add	r7, sp, #8
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3310      	adds	r3, #16
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	3304      	adds	r3, #4
 8003804:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	d901      	bls.n	8003816 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	429a      	cmp	r2, r3
 800382a:	d902      	bls.n	8003832 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3303      	adds	r3, #3
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800383a:	e02a      	b.n	8003892 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	429a      	cmp	r2, r3
 8003850:	d902      	bls.n	8003858 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3303      	adds	r3, #3
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68d9      	ldr	r1, [r3, #12]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	4603      	mov	r3, r0
 8003874:	6978      	ldr	r0, [r7, #20]
 8003876:	f002 fa57 	bl	8005d28 <USB_WritePacket>

    ep->xfer_buff  += len;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	441a      	add	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d809      	bhi.n	80038bc <PCD_WriteEmptyTxFifo+0xde>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d203      	bcs.n	80038bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1bf      	bne.n	800383c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d811      	bhi.n	80038ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	2201      	movs	r2, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	6939      	ldr	r1, [r7, #16]
 80038e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038e8:	4013      	ands	r3, r2
 80038ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	333c      	adds	r3, #60	; 0x3c
 8003910:	3304      	adds	r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	799b      	ldrb	r3, [r3, #6]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d17b      	bne.n	8003a26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4a61      	ldr	r2, [pc, #388]	; (8003ac0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	f240 80b9 	bls.w	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80b3 	beq.w	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	461a      	mov	r2, r3
 800395c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003960:	6093      	str	r3, [r2, #8]
 8003962:	e0a7      	b.n	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	461a      	mov	r2, r3
 800397c:	2320      	movs	r3, #32
 800397e:	6093      	str	r3, [r2, #8]
 8003980:	e098      	b.n	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 8093 	bne.w	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4a4b      	ldr	r2, [pc, #300]	; (8003ac0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d90f      	bls.n	80039b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	e07e      	b.n	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	3304      	adds	r3, #4
 80039ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	0159      	lsls	r1, r3, #5
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	440b      	add	r3, r1
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e2:	1ad2      	subs	r2, r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d114      	bne.n	8003a18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a00:	461a      	mov	r2, r3
 8003a02:	2101      	movs	r1, #1
 8003a04:	f002 fc26 	bl	8006254 <USB_EP0_OutStart>
 8003a08:	e006      	b.n	8003a18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	441a      	add	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f004 ff7a 	bl	8008918 <HAL_PCD_DataOutStageCallback>
 8003a24:	e046      	b.n	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d124      	bne.n	8003a78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	461a      	mov	r2, r3
 8003a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4a:	6093      	str	r3, [r2, #8]
 8003a4c:	e032      	b.n	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	2320      	movs	r3, #32
 8003a68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f004 ff51 	bl	8008918 <HAL_PCD_DataOutStageCallback>
 8003a76:	e01d      	b.n	8003ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d114      	bne.n	8003aa8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f002 fbd6 	bl	8006254 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	4619      	mov	r1, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f004 ff32 	bl	8008918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	4f54300a 	.word	0x4f54300a
 8003ac4:	4f54310a 	.word	0x4f54310a

08003ac8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	333c      	adds	r3, #60	; 0x3c
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d90e      	bls.n	8003b1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	461a      	mov	r2, r3
 8003b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f004 fee9 	bl	80088f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d90c      	bls.n	8003b44 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	799b      	ldrb	r3, [r3, #6]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d108      	bne.n	8003b44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f002 fb88 	bl	8006254 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	4f54300a 	.word	0x4f54300a

08003b54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
 8003b60:	4613      	mov	r3, r2
 8003b62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b72:	883b      	ldrh	r3, [r7, #0]
 8003b74:	0419      	lsls	r1, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b80:	e028      	b.n	8003bd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e00d      	b.n	8003bb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	3340      	adds	r3, #64	; 0x40
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4413      	add	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d3ec      	bcc.n	8003b96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bbc:	883b      	ldrh	r3, [r7, #0]
 8003bbe:	0418      	lsls	r0, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4302      	orrs	r2, r0
 8003bcc:	3340      	adds	r3, #64	; 0x40
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e267      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d075      	beq.n	8003d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c3a:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d00c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c46:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d112      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b82      	ldr	r3, [pc, #520]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5e:	d10b      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	4b7e      	ldr	r3, [pc, #504]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d05b      	beq.n	8003d24 <HAL_RCC_OscConfig+0x108>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d157      	bne.n	8003d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e242      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d106      	bne.n	8003c90 <HAL_RCC_OscConfig+0x74>
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a75      	ldr	r2, [pc, #468]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e01d      	b.n	8003ccc <HAL_RCC_OscConfig+0xb0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x98>
 8003c9a:	4b70      	ldr	r3, [pc, #448]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6f      	ldr	r2, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b6d      	ldr	r3, [pc, #436]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6c      	ldr	r2, [pc, #432]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0xb0>
 8003cb4:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a68      	ldr	r2, [pc, #416]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a65      	ldr	r2, [pc, #404]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d013      	beq.n	8003cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fd faea 	bl	80012ac <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fd fae6 	bl	80012ac <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e207      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	4b5b      	ldr	r3, [pc, #364]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0xc0>
 8003cfa:	e014      	b.n	8003d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fd fad6 	bl	80012ac <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fd fad2 	bl	80012ac <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1f3      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	4b51      	ldr	r3, [pc, #324]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0xe8>
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d063      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d32:	4b4a      	ldr	r3, [pc, #296]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3e:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d11c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b44      	ldr	r3, [pc, #272]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d116      	bne.n	8003d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d56:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_RCC_OscConfig+0x152>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e1c7      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4937      	ldr	r1, [pc, #220]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	e03a      	b.n	8003dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d8c:	4b34      	ldr	r3, [pc, #208]	; (8003e60 <HAL_RCC_OscConfig+0x244>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fd fa8b 	bl	80012ac <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9a:	f7fd fa87 	bl	80012ac <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e1a8      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4925      	ldr	r1, [pc, #148]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
 8003dcc:	e015      	b.n	8003dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_OscConfig+0x244>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fa6a 	bl	80012ac <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fd fa66 	bl	80012ac <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e187      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d036      	beq.n	8003e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_RCC_OscConfig+0x248>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fd fa4a 	bl	80012ac <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e1c:	f7fd fa46 	bl	80012ac <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e167      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_OscConfig+0x240>)
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x200>
 8003e3a:	e01b      	b.n	8003e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_OscConfig+0x248>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e42:	f7fd fa33 	bl	80012ac <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	e00e      	b.n	8003e68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7fd fa2f 	bl	80012ac <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d907      	bls.n	8003e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e150      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	42470000 	.word	0x42470000
 8003e64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e68:	4b88      	ldr	r3, [pc, #544]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ea      	bne.n	8003e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8097 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	4b81      	ldr	r3, [pc, #516]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	4b7d      	ldr	r3, [pc, #500]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a7c      	ldr	r2, [pc, #496]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b7a      	ldr	r3, [pc, #488]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb2:	4b77      	ldr	r3, [pc, #476]	; (8004090 <HAL_RCC_OscConfig+0x474>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d118      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ebe:	4b74      	ldr	r3, [pc, #464]	; (8004090 <HAL_RCC_OscConfig+0x474>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a73      	ldr	r2, [pc, #460]	; (8004090 <HAL_RCC_OscConfig+0x474>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eca:	f7fd f9ef 	bl	80012ac <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fd f9eb 	bl	80012ac <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e10c      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	4b6a      	ldr	r3, [pc, #424]	; (8004090 <HAL_RCC_OscConfig+0x474>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d106      	bne.n	8003f06 <HAL_RCC_OscConfig+0x2ea>
 8003ef8:	4b64      	ldr	r3, [pc, #400]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4a63      	ldr	r2, [pc, #396]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6713      	str	r3, [r2, #112]	; 0x70
 8003f04:	e01c      	b.n	8003f40 <HAL_RCC_OscConfig+0x324>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x30c>
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a5e      	ldr	r2, [pc, #376]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f14:	f043 0304 	orr.w	r3, r3, #4
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1a:	4b5c      	ldr	r3, [pc, #368]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a5b      	ldr	r2, [pc, #364]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	e00b      	b.n	8003f40 <HAL_RCC_OscConfig+0x324>
 8003f28:	4b58      	ldr	r3, [pc, #352]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	4a57      	ldr	r2, [pc, #348]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	6713      	str	r3, [r2, #112]	; 0x70
 8003f34:	4b55      	ldr	r3, [pc, #340]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	4a54      	ldr	r2, [pc, #336]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f3a:	f023 0304 	bic.w	r3, r3, #4
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f48:	f7fd f9b0 	bl	80012ac <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f50:	f7fd f9ac 	bl	80012ac <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0cb      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f66:	4b49      	ldr	r3, [pc, #292]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ee      	beq.n	8003f50 <HAL_RCC_OscConfig+0x334>
 8003f72:	e014      	b.n	8003f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f74:	f7fd f99a 	bl	80012ac <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fd f996 	bl	80012ac <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0b5      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f92:	4b3e      	ldr	r3, [pc, #248]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ee      	bne.n	8003f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa4:	4b39      	ldr	r3, [pc, #228]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	4a38      	ldr	r2, [pc, #224]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80a1 	beq.w	80040fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fba:	4b34      	ldr	r3, [pc, #208]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d05c      	beq.n	8004080 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d141      	bne.n	8004052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fce:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_RCC_OscConfig+0x478>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fd f96a 	bl	80012ac <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd f966 	bl	80012ac <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e087      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	3b01      	subs	r3, #1
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	061b      	lsls	r3, r3, #24
 800401e:	491b      	ldr	r1, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_RCC_OscConfig+0x478>)
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fd f93f 	bl	80012ac <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004032:	f7fd f93b 	bl	80012ac <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e05c      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x416>
 8004050:	e054      	b.n	80040fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_RCC_OscConfig+0x478>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fd f928 	bl	80012ac <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fd f924 	bl	80012ac <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e045      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_OscConfig+0x470>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x444>
 800407e:	e03d      	b.n	80040fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e038      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
 800408c:	40023800 	.word	0x40023800
 8004090:	40007000 	.word	0x40007000
 8004094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x4ec>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d028      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d121      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d11a      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	3b01      	subs	r3, #1
 80040e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800

0800410c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0cc      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b68      	ldr	r3, [pc, #416]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d90c      	bls.n	8004148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b65      	ldr	r3, [pc, #404]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b63      	ldr	r3, [pc, #396]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b8      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004160:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800416a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a52      	ldr	r2, [pc, #328]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	494d      	ldr	r1, [pc, #308]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d044      	beq.n	800422c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d119      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d003      	beq.n	80041ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	4b3f      	ldr	r3, [pc, #252]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e06f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041da:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e067      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f023 0203 	bic.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4934      	ldr	r1, [pc, #208]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041fc:	f7fd f856 	bl	80012ac <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	e00a      	b.n	800421a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004204:	f7fd f852 	bl	80012ac <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e04f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 020c 	and.w	r2, r3, #12
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	429a      	cmp	r2, r3
 800422a:	d1eb      	bne.n	8004204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d20c      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e032      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4916      	ldr	r1, [pc, #88]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004292:	f000 f821 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004296:	4602      	mov	r2, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	490a      	ldr	r1, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x1c0>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc ffb6 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08008f18 	.word	0x08008f18
 80042d0:	20000000 	.word	0x20000000
 80042d4:	20000004 	.word	0x20000004

080042d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b090      	sub	sp, #64	; 0x40
 80042de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f0:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d00d      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x40>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	f200 80a1 	bhi.w	8004444 <HAL_RCC_GetSysClockFreq+0x16c>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x34>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x3a>
 800430a:	e09b      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_RCC_GetSysClockFreq+0x184>)
 800430e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004310:	e09b      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004312:	4b53      	ldr	r3, [pc, #332]	; (8004460 <HAL_RCC_GetSysClockFreq+0x188>)
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004316:	e098      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004318:	4b4f      	ldr	r3, [pc, #316]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004322:	4b4d      	ldr	r3, [pc, #308]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d028      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	2200      	movs	r2, #0
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	627a      	str	r2, [r7, #36]	; 0x24
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004340:	2100      	movs	r1, #0
 8004342:	4b47      	ldr	r3, [pc, #284]	; (8004460 <HAL_RCC_GetSysClockFreq+0x188>)
 8004344:	fb03 f201 	mul.w	r2, r3, r1
 8004348:	2300      	movs	r3, #0
 800434a:	fb00 f303 	mul.w	r3, r0, r3
 800434e:	4413      	add	r3, r2
 8004350:	4a43      	ldr	r2, [pc, #268]	; (8004460 <HAL_RCC_GetSysClockFreq+0x188>)
 8004352:	fba0 1202 	umull	r1, r2, r0, r2
 8004356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004358:	460a      	mov	r2, r1
 800435a:	62ba      	str	r2, [r7, #40]	; 0x28
 800435c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435e:	4413      	add	r3, r2
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	2200      	movs	r2, #0
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	61fa      	str	r2, [r7, #28]
 800436a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004372:	f7fb ff31 	bl	80001d8 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4613      	mov	r3, r2
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437e:	e053      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004380:	4b35      	ldr	r3, [pc, #212]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	2200      	movs	r2, #0
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	617a      	str	r2, [r7, #20]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004392:	f04f 0b00 	mov.w	fp, #0
 8004396:	4652      	mov	r2, sl
 8004398:	465b      	mov	r3, fp
 800439a:	f04f 0000 	mov.w	r0, #0
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	0159      	lsls	r1, r3, #5
 80043a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a8:	0150      	lsls	r0, r2, #5
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	ebb2 080a 	subs.w	r8, r2, sl
 80043b2:	eb63 090b 	sbc.w	r9, r3, fp
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043ca:	ebb2 0408 	subs.w	r4, r2, r8
 80043ce:	eb63 0509 	sbc.w	r5, r3, r9
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	00eb      	lsls	r3, r5, #3
 80043dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043e0:	00e2      	lsls	r2, r4, #3
 80043e2:	4614      	mov	r4, r2
 80043e4:	461d      	mov	r5, r3
 80043e6:	eb14 030a 	adds.w	r3, r4, sl
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	eb45 030b 	adc.w	r3, r5, fp
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fe:	4629      	mov	r1, r5
 8004400:	028b      	lsls	r3, r1, #10
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004408:	4621      	mov	r1, r4
 800440a:	028a      	lsls	r2, r1, #10
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	2200      	movs	r2, #0
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	60fa      	str	r2, [r7, #12]
 8004418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800441c:	f7fb fedc 	bl	80001d8 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_GetSysClockFreq+0x180>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	3301      	adds	r3, #1
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004442:	e002      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetSysClockFreq+0x184>)
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800444c:	4618      	mov	r0, r3
 800444e:	3740      	adds	r7, #64	; 0x40
 8004450:	46bd      	mov	sp, r7
 8004452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	00f42400 	.word	0x00f42400
 8004460:	017d7840 	.word	0x017d7840

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000

0800447c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e041      	b.n	8004512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fc fdf0 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f000 fa70 	bl	80049a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d001      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e044      	b.n	80045be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <HAL_TIM_Base_Start_IT+0xb0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x6c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d013      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x6c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x6c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a19      	ldr	r2, [pc, #100]	; (80045d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x6c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x6c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a16      	ldr	r2, [pc, #88]	; (80045dc <HAL_TIM_Base_Start_IT+0xc0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d010      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	e007      	b.n	80045bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40014000 	.word	0x40014000

080045e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d020      	beq.n	8004644 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01b      	beq.n	8004644 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0202 	mvn.w	r2, #2
 8004614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f999 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 8004630:	e005      	b.n	800463e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f98b 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f99c 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d020      	beq.n	8004690 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0204 	mvn.w	r2, #4
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f973 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f965 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f976 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d020      	beq.n	80046dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0208 	mvn.w	r2, #8
 80046ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2204      	movs	r2, #4
 80046b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f94d 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 80046c8:	e005      	b.n	80046d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f93f 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f950 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d020      	beq.n	8004728 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0210 	mvn.w	r2, #16
 80046f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2208      	movs	r2, #8
 80046fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f927 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 8004714:	e005      	b.n	8004722 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f919 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f92a 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0201 	mvn.w	r2, #1
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc f968 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fab0 	bl	8004cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00c      	beq.n	8004794 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8fb 	bl	800498a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0220 	mvn.w	r2, #32
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa82 	bl	8004cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIM_ConfigClockSource+0x1c>
 80047d8:	2302      	movs	r3, #2
 80047da:	e0b4      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x186>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004814:	d03e      	beq.n	8004894 <HAL_TIM_ConfigClockSource+0xd4>
 8004816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481a:	f200 8087 	bhi.w	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004822:	f000 8086 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x172>
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482a:	d87f      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b70      	cmp	r3, #112	; 0x70
 800482e:	d01a      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0xa6>
 8004830:	2b70      	cmp	r3, #112	; 0x70
 8004832:	d87b      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b60      	cmp	r3, #96	; 0x60
 8004836:	d050      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x11a>
 8004838:	2b60      	cmp	r3, #96	; 0x60
 800483a:	d877      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b50      	cmp	r3, #80	; 0x50
 800483e:	d03c      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0xfa>
 8004840:	2b50      	cmp	r3, #80	; 0x50
 8004842:	d873      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d058      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x13a>
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d86f      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b30      	cmp	r3, #48	; 0x30
 800484e:	d064      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b30      	cmp	r3, #48	; 0x30
 8004852:	d86b      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b20      	cmp	r3, #32
 8004856:	d060      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	2b20      	cmp	r3, #32
 800485a:	d867      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d05c      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004860:	2b10      	cmp	r3, #16
 8004862:	d05a      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	e062      	b.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004876:	f000 f993 	bl	8004ba0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	609a      	str	r2, [r3, #8]
      break;
 8004892:	e04f      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048a4:	f000 f97c 	bl	8004ba0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b6:	609a      	str	r2, [r3, #8]
      break;
 80048b8:	e03c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	461a      	mov	r2, r3
 80048c8:	f000 f8f0 	bl	8004aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2150      	movs	r1, #80	; 0x50
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f949 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 80048d8:	e02c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e6:	461a      	mov	r2, r3
 80048e8:	f000 f90f 	bl	8004b0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2160      	movs	r1, #96	; 0x60
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f939 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 80048f8:	e01c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004906:	461a      	mov	r2, r3
 8004908:	f000 f8d0 	bl	8004aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2140      	movs	r1, #64	; 0x40
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f929 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 8004918:	e00c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f000 f920 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 800492a:	e003      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      break;
 8004930:	e000      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a37      	ldr	r2, [pc, #220]	; (8004a90 <TIM_Base_SetConfig+0xf0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00f      	beq.n	80049d8 <TIM_Base_SetConfig+0x38>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049be:	d00b      	beq.n	80049d8 <TIM_Base_SetConfig+0x38>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a34      	ldr	r2, [pc, #208]	; (8004a94 <TIM_Base_SetConfig+0xf4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_Base_SetConfig+0x38>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a33      	ldr	r2, [pc, #204]	; (8004a98 <TIM_Base_SetConfig+0xf8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_Base_SetConfig+0x38>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a32      	ldr	r2, [pc, #200]	; (8004a9c <TIM_Base_SetConfig+0xfc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d108      	bne.n	80049ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <TIM_Base_SetConfig+0xf0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01b      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d017      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a25      	ldr	r2, [pc, #148]	; (8004a94 <TIM_Base_SetConfig+0xf4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a24      	ldr	r2, [pc, #144]	; (8004a98 <TIM_Base_SetConfig+0xf8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <TIM_Base_SetConfig+0xfc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a22      	ldr	r2, [pc, #136]	; (8004aa0 <TIM_Base_SetConfig+0x100>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a21      	ldr	r2, [pc, #132]	; (8004aa4 <TIM_Base_SetConfig+0x104>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a20      	ldr	r2, [pc, #128]	; (8004aa8 <TIM_Base_SetConfig+0x108>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a0c      	ldr	r2, [pc, #48]	; (8004a90 <TIM_Base_SetConfig+0xf0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d103      	bne.n	8004a6a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f043 0204 	orr.w	r2, r3, #4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	601a      	str	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800

08004aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0201 	bic.w	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f023 030a 	bic.w	r3, r3, #10
 8004ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b087      	sub	sp, #28
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f023 0210 	bic.w	r2, r3, #16
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	031b      	lsls	r3, r3, #12
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f043 0307 	orr.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	021a      	lsls	r2, r3, #8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	609a      	str	r2, [r3, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e050      	b.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1c      	ldr	r2, [pc, #112]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d018      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d013      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a18      	ldr	r2, [pc, #96]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d10c      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40000800 	.word	0x40000800
 8004cb4:	40000c00 	.word	0x40000c00
 8004cb8:	40014000 	.word	0x40014000

08004cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	f107 001c 	add.w	r0, r7, #28
 8004cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cf6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d123      	bne.n	8004d46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d105      	bne.n	8004d3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f001 fae8 	bl	8006310 <USB_CoreReset>
 8004d40:	4603      	mov	r3, r0
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e01b      	b.n	8004d7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f001 fadc 	bl	8006310 <USB_CoreReset>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d70:	e005      	b.n	8004d7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d7e:	7fbb      	ldrb	r3, [r7, #30]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d10b      	bne.n	8004d9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f043 0206 	orr.w	r2, r3, #6
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004da8:	b004      	add	sp, #16
 8004daa:	4770      	bx	lr

08004dac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d165      	bne.n	8004e8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a41      	ldr	r2, [pc, #260]	; (8004ec8 <USB_SetTurnaroundTime+0x11c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d906      	bls.n	8004dd6 <USB_SetTurnaroundTime+0x2a>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a40      	ldr	r2, [pc, #256]	; (8004ecc <USB_SetTurnaroundTime+0x120>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d202      	bcs.n	8004dd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e062      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4a3c      	ldr	r2, [pc, #240]	; (8004ecc <USB_SetTurnaroundTime+0x120>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d306      	bcc.n	8004dec <USB_SetTurnaroundTime+0x40>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4a3b      	ldr	r2, [pc, #236]	; (8004ed0 <USB_SetTurnaroundTime+0x124>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d202      	bcs.n	8004dec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004de6:	230e      	movs	r3, #14
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e057      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a38      	ldr	r2, [pc, #224]	; (8004ed0 <USB_SetTurnaroundTime+0x124>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d306      	bcc.n	8004e02 <USB_SetTurnaroundTime+0x56>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a37      	ldr	r2, [pc, #220]	; (8004ed4 <USB_SetTurnaroundTime+0x128>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d202      	bcs.n	8004e02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dfc:	230d      	movs	r3, #13
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e04c      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a33      	ldr	r2, [pc, #204]	; (8004ed4 <USB_SetTurnaroundTime+0x128>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d306      	bcc.n	8004e18 <USB_SetTurnaroundTime+0x6c>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a32      	ldr	r2, [pc, #200]	; (8004ed8 <USB_SetTurnaroundTime+0x12c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d802      	bhi.n	8004e18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e12:	230c      	movs	r3, #12
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e041      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <USB_SetTurnaroundTime+0x12c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d906      	bls.n	8004e2e <USB_SetTurnaroundTime+0x82>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a2e      	ldr	r2, [pc, #184]	; (8004edc <USB_SetTurnaroundTime+0x130>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d802      	bhi.n	8004e2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e28:	230b      	movs	r3, #11
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e036      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <USB_SetTurnaroundTime+0x130>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d906      	bls.n	8004e44 <USB_SetTurnaroundTime+0x98>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <USB_SetTurnaroundTime+0x134>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d802      	bhi.n	8004e44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e3e:	230a      	movs	r3, #10
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e02b      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <USB_SetTurnaroundTime+0x134>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d906      	bls.n	8004e5a <USB_SetTurnaroundTime+0xae>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <USB_SetTurnaroundTime+0x138>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d202      	bcs.n	8004e5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e54:	2309      	movs	r3, #9
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e020      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <USB_SetTurnaroundTime+0x138>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d306      	bcc.n	8004e70 <USB_SetTurnaroundTime+0xc4>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <USB_SetTurnaroundTime+0x13c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d802      	bhi.n	8004e70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e015      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <USB_SetTurnaroundTime+0x13c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d906      	bls.n	8004e86 <USB_SetTurnaroundTime+0xda>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <USB_SetTurnaroundTime+0x140>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d202      	bcs.n	8004e86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e80:	2307      	movs	r3, #7
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e00a      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e86:	2306      	movs	r3, #6
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e007      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e92:	2309      	movs	r3, #9
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	e001      	b.n	8004e9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e98:	2309      	movs	r3, #9
 8004e9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	00d8acbf 	.word	0x00d8acbf
 8004ecc:	00e4e1c0 	.word	0x00e4e1c0
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	01067380 	.word	0x01067380
 8004ed8:	011a499f 	.word	0x011a499f
 8004edc:	01312cff 	.word	0x01312cff
 8004ee0:	014ca43f 	.word	0x014ca43f
 8004ee4:	016e3600 	.word	0x016e3600
 8004ee8:	01a6ab1f 	.word	0x01a6ab1f
 8004eec:	01e84800 	.word	0x01e84800

08004ef0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d115      	bne.n	8004f82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f62:	200a      	movs	r0, #10
 8004f64:	f7fc f9ae 	bl	80012c4 <HAL_Delay>
      ms += 10U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	330a      	adds	r3, #10
 8004f6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 f93f 	bl	80061f2 <USB_GetMode>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d01e      	beq.n	8004fb8 <USB_SetCurrentMode+0x84>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2bc7      	cmp	r3, #199	; 0xc7
 8004f7e:	d9f0      	bls.n	8004f62 <USB_SetCurrentMode+0x2e>
 8004f80:	e01a      	b.n	8004fb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d115      	bne.n	8004fb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f94:	200a      	movs	r0, #10
 8004f96:	f7fc f995 	bl	80012c4 <HAL_Delay>
      ms += 10U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	330a      	adds	r3, #10
 8004f9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f001 f926 	bl	80061f2 <USB_GetMode>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <USB_SetCurrentMode+0x84>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2bc7      	cmp	r3, #199	; 0xc7
 8004fb0:	d9f0      	bls.n	8004f94 <USB_SetCurrentMode+0x60>
 8004fb2:	e001      	b.n	8004fb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e005      	b.n	8004fc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2bc8      	cmp	r3, #200	; 0xc8
 8004fbc:	d101      	bne.n	8004fc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fcc:	b084      	sub	sp, #16
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b086      	sub	sp, #24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	e009      	b.n	8005000 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3340      	adds	r3, #64	; 0x40
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b0e      	cmp	r3, #14
 8005004:	d9f2      	bls.n	8004fec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005006:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800500a:	2b00      	cmp	r3, #0
 800500c:	d11c      	bne.n	8005048 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
 8005046:	e00b      	b.n	8005060 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005066:	461a      	mov	r2, r3
 8005068:	2300      	movs	r3, #0
 800506a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800506c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005070:	2b01      	cmp	r3, #1
 8005072:	d10d      	bne.n	8005090 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800507c:	2100      	movs	r1, #0
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f968 	bl	8005354 <USB_SetDevSpeed>
 8005084:	e008      	b.n	8005098 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005086:	2101      	movs	r1, #1
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f963 	bl	8005354 <USB_SetDevSpeed>
 800508e:	e003      	b.n	8005098 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005090:	2103      	movs	r1, #3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f95e 	bl	8005354 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005098:	2110      	movs	r1, #16
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f8fa 	bl	8005294 <USB_FlushTxFifo>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f924 	bl	80052f8 <USB_FlushRxFifo>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c0:	461a      	mov	r2, r3
 80050c2:	2300      	movs	r3, #0
 80050c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050cc:	461a      	mov	r2, r3
 80050ce:	2300      	movs	r3, #0
 80050d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d8:	461a      	mov	r2, r3
 80050da:	2300      	movs	r3, #0
 80050dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e043      	b.n	800516c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fa:	d118      	bne.n	800512e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	461a      	mov	r2, r3
 8005110:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e013      	b.n	8005140 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	461a      	mov	r2, r3
 8005126:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	e008      	b.n	8005140 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	461a      	mov	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	461a      	mov	r2, r3
 800514e:	2300      	movs	r3, #0
 8005150:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	461a      	mov	r2, r3
 8005160:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005164:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005170:	461a      	mov	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4293      	cmp	r3, r2
 8005176:	d3b5      	bcc.n	80050e4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	e043      	b.n	8005206 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005194:	d118      	bne.n	80051c8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	461a      	mov	r2, r3
 80051aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e013      	b.n	80051da <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051be:	461a      	mov	r2, r3
 80051c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e008      	b.n	80051da <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	461a      	mov	r2, r3
 80051e8:	2300      	movs	r3, #0
 80051ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	461a      	mov	r2, r3
 80051fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	3301      	adds	r3, #1
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800520a:	461a      	mov	r2, r3
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4293      	cmp	r3, r2
 8005210:	d3b5      	bcc.n	800517e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005224:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005232:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f043 0210 	orr.w	r2, r3, #16
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699a      	ldr	r2, [r3, #24]
 800524c:	4b10      	ldr	r3, [pc, #64]	; (8005290 <USB_DevInit+0x2c4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005254:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f043 0208 	orr.w	r2, r3, #8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005268:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005278:	f043 0304 	orr.w	r3, r3, #4
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005280:	7dfb      	ldrb	r3, [r7, #23]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800528c:	b004      	add	sp, #16
 800528e:	4770      	bx	lr
 8005290:	803c3800 	.word	0x803c3800

08005294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3301      	adds	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052ae:	d901      	bls.n	80052b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e01b      	b.n	80052ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	daf2      	bge.n	80052a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	019b      	lsls	r3, r3, #6
 80052c4:	f043 0220 	orr.w	r2, r3, #32
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052d8:	d901      	bls.n	80052de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e006      	b.n	80052ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d0f0      	beq.n	80052cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005310:	d901      	bls.n	8005316 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e018      	b.n	8005348 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	daf2      	bge.n	8005304 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2210      	movs	r2, #16
 8005326:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005334:	d901      	bls.n	800533a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e006      	b.n	8005348 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b10      	cmp	r3, #16
 8005344:	d0f0      	beq.n	8005328 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005374:	4313      	orrs	r3, r2
 8005376:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b087      	sub	sp, #28
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0306 	and.w	r3, r3, #6
 800539e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]
 80053aa:	e00a      	b.n	80053c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d002      	beq.n	80053b8 <USB_GetDevSpeed+0x32>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d102      	bne.n	80053be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053b8:	2302      	movs	r3, #2
 80053ba:	75fb      	strb	r3, [r7, #23]
 80053bc:	e001      	b.n	80053c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053be:	230f      	movs	r3, #15
 80053c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d13a      	bne.n	8005462 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	2101      	movs	r1, #1
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	68f9      	ldr	r1, [r7, #12]
 8005406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800540a:	4313      	orrs	r3, r2
 800540c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d155      	bne.n	80054d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	791b      	ldrb	r3, [r3, #4]
 800543e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005440:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	059b      	lsls	r3, r3, #22
 8005446:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005448:	4313      	orrs	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e036      	b.n	80054d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	2101      	movs	r1, #1
 8005474:	fa01 f303 	lsl.w	r3, r1, r3
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005480:	4313      	orrs	r3, r2
 8005482:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d11a      	bne.n	80054d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	791b      	ldrb	r3, [r3, #4]
 80054b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054b6:	430b      	orrs	r3, r1
 80054b8:	4313      	orrs	r3, r2
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d161      	bne.n	80055c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800550e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005512:	d11f      	bne.n	8005554 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005532:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	b29b      	uxth	r3, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	68f9      	ldr	r1, [r7, #12]
 8005570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005574:	4013      	ands	r3, r2
 8005576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	2101      	movs	r1, #1
 800558a:	fa01 f303 	lsl.w	r3, r1, r3
 800558e:	b29b      	uxth	r3, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005598:	4013      	ands	r3, r2
 800559a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	0159      	lsls	r1, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	440b      	add	r3, r1
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	4619      	mov	r1, r3
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <USB_DeactivateEndpoint+0x1b0>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]
 80055be:	e060      	b.n	8005682 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055d6:	d11f      	bne.n	8005618 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	041b      	lsls	r3, r3, #16
 8005630:	43db      	mvns	r3, r3
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005638:	4013      	ands	r3, r2
 800563a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	2101      	movs	r1, #1
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	43db      	mvns	r3, r3
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565c:	4013      	ands	r3, r2
 800565e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	0159      	lsls	r1, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	440b      	add	r3, r1
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	4619      	mov	r1, r3
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <USB_DeactivateEndpoint+0x1b4>)
 800567e:	4013      	ands	r3, r2
 8005680:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	ec337800 	.word	0xec337800
 8005694:	eff37800 	.word	0xeff37800

08005698 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	f040 817f 	bne.w	80059b8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d132      	bne.n	8005728 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005720:	0cdb      	lsrs	r3, r3, #19
 8005722:	04db      	lsls	r3, r3, #19
 8005724:	6113      	str	r3, [r2, #16]
 8005726:	e097      	b.n	8005858 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005742:	0cdb      	lsrs	r3, r3, #19
 8005744:	04db      	lsls	r3, r3, #19
 8005746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005762:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005766:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800576a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11a      	bne.n	80057a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	d903      	bls.n	8005786 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a4:	6113      	str	r3, [r2, #16]
 80057a6:	e044      	b.n	8005832 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4413      	add	r3, r2
 80057b2:	1e5a      	subs	r2, r3, #1
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057bc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	8afb      	ldrh	r3, [r7, #22]
 80057ce:	04d9      	lsls	r1, r3, #19
 80057d0:	4ba4      	ldr	r3, [pc, #656]	; (8005a64 <USB_EPStartXfer+0x3cc>)
 80057d2:	400b      	ands	r3, r1
 80057d4:	69b9      	ldr	r1, [r7, #24]
 80057d6:	0148      	lsls	r0, r1, #5
 80057d8:	69f9      	ldr	r1, [r7, #28]
 80057da:	4401      	add	r1, r0
 80057dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057e0:	4313      	orrs	r3, r2
 80057e2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	791b      	ldrb	r3, [r3, #4]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d122      	bne.n	8005832 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800580a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	8afb      	ldrh	r3, [r7, #22]
 800581c:	075b      	lsls	r3, r3, #29
 800581e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	0148      	lsls	r0, r1, #5
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	4401      	add	r1, r0
 800582a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800582e:	4313      	orrs	r3, r2
 8005830:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	0148      	lsls	r0, r1, #5
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	4401      	add	r1, r0
 8005850:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005854:	4313      	orrs	r3, r2
 8005856:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d14b      	bne.n	80058f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	791b      	ldrb	r3, [r3, #4]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d128      	bne.n	80058d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d110      	bne.n	80058b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e00f      	b.n	80058d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	e166      	b.n	8005bc4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005914:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	791b      	ldrb	r3, [r3, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d015      	beq.n	800594a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 814e 	beq.w	8005bc4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	2101      	movs	r1, #1
 800593a:	fa01 f303 	lsl.w	r3, r1, r3
 800593e:	69f9      	ldr	r1, [r7, #28]
 8005940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005944:	4313      	orrs	r3, r2
 8005946:	634b      	str	r3, [r1, #52]	; 0x34
 8005948:	e13c      	b.n	8005bc4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d110      	bne.n	800597c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e00f      	b.n	800599c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68d9      	ldr	r1, [r3, #12]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	781a      	ldrb	r2, [r3, #0]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	b298      	uxth	r0, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4603      	mov	r3, r0
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f9b9 	bl	8005d28 <USB_WritePacket>
 80059b6:	e105      	b.n	8005bc4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d2:	0cdb      	lsrs	r3, r3, #19
 80059d4:	04db      	lsls	r3, r3, #19
 80059d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d132      	bne.n	8005a68 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a30:	69b9      	ldr	r1, [r7, #24]
 8005a32:	0148      	lsls	r0, r1, #5
 8005a34:	69f9      	ldr	r1, [r7, #28]
 8005a36:	4401      	add	r1, r0
 8005a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a5e:	6113      	str	r3, [r2, #16]
 8005a60:	e062      	b.n	8005b28 <USB_EPStartXfer+0x490>
 8005a62:	bf00      	nop
 8005a64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d123      	bne.n	8005ab8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a86:	69b9      	ldr	r1, [r7, #24]
 8005a88:	0148      	lsls	r0, r1, #5
 8005a8a:	69f9      	ldr	r1, [r7, #28]
 8005a8c:	4401      	add	r1, r0
 8005a8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a92:	4313      	orrs	r3, r2
 8005a94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab4:	6113      	str	r3, [r2, #16]
 8005ab6:	e037      	b.n	8005b28 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	1e5a      	subs	r2, r3, #1
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	8afa      	ldrh	r2, [r7, #22]
 8005ad4:	fb03 f202 	mul.w	r2, r3, r2
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	8afb      	ldrh	r3, [r7, #22]
 8005aec:	04d9      	lsls	r1, r3, #19
 8005aee:	4b38      	ldr	r3, [pc, #224]	; (8005bd0 <USB_EPStartXfer+0x538>)
 8005af0:	400b      	ands	r3, r1
 8005af2:	69b9      	ldr	r1, [r7, #24]
 8005af4:	0148      	lsls	r0, r1, #5
 8005af6:	69f9      	ldr	r1, [r7, #28]
 8005af8:	4401      	add	r1, r0
 8005afa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005afe:	4313      	orrs	r3, r2
 8005b00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b18:	69b9      	ldr	r1, [r7, #24]
 8005b1a:	0148      	lsls	r0, r1, #5
 8005b1c:	69f9      	ldr	r1, [r7, #28]
 8005b1e:	4401      	add	r1, r0
 8005b20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b24:	4313      	orrs	r3, r2
 8005b26:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10d      	bne.n	8005b4a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	68d9      	ldr	r1, [r3, #12]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	460a      	mov	r2, r1
 8005b48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	791b      	ldrb	r3, [r3, #4]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d128      	bne.n	8005ba4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d110      	bne.n	8005b84 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e00f      	b.n	8005ba4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	1ff80000 	.word	0x1ff80000

08005bd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d14a      	bne.n	8005c88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0a:	f040 8086 	bne.w	8005d1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	7812      	ldrb	r2, [r2, #0]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d902      	bls.n	8005c6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
          break;
 8005c6a:	e056      	b.n	8005d1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c84:	d0e7      	beq.n	8005c56 <USB_EPStopXfer+0x82>
 8005c86:	e048      	b.n	8005d1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca0:	d13b      	bne.n	8005d1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	7812      	ldrb	r2, [r2, #0]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	7812      	ldrb	r2, [r2, #0]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ce8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d902      	bls.n	8005d00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8005cfe:	e00c      	b.n	8005d1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d18:	d0e7      	beq.n	8005cea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4611      	mov	r1, r2
 8005d34:	461a      	mov	r2, r3
 8005d36:	460b      	mov	r3, r1
 8005d38:	71fb      	strb	r3, [r7, #7]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d123      	bne.n	8005d96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d4e:	88bb      	ldrh	r3, [r7, #4]
 8005d50:	3303      	adds	r3, #3
 8005d52:	089b      	lsrs	r3, r3, #2
 8005d54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	e018      	b.n	8005d8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	031a      	lsls	r2, r3, #12
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	461a      	mov	r2, r3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	3301      	adds	r3, #1
 8005d86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d3e2      	bcc.n	8005d5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3724      	adds	r7, #36	; 0x24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b08b      	sub	sp, #44	; 0x2c
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	089b      	lsrs	r3, r3, #2
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dca:	2300      	movs	r3, #0
 8005dcc:	623b      	str	r3, [r7, #32]
 8005dce:	e014      	b.n	8005dfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	3301      	adds	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	3301      	adds	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	3301      	adds	r3, #1
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	3301      	adds	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	3301      	adds	r3, #1
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d3e6      	bcc.n	8005dd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e02:	8bfb      	ldrh	r3, [r7, #30]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01e      	beq.n	8005e46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e12:	461a      	mov	r2, r3
 8005e14:	f107 0310 	add.w	r3, r7, #16
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	701a      	strb	r2, [r3, #0]
      i++;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	3301      	adds	r3, #1
 8005e32:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	3301      	adds	r3, #1
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e3a:	8bfb      	ldrh	r3, [r7, #30]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e40:	8bfb      	ldrh	r3, [r7, #30]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1ea      	bne.n	8005e1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	372c      	adds	r7, #44	; 0x2c
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d12c      	bne.n	8005eca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	db12      	blt.n	8005ea8 <USB_EPSetStall+0x54>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00f      	beq.n	8005ea8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	e02b      	b.n	8005f22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db12      	blt.n	8005f02 <USB_EPSetStall+0xae>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00f      	beq.n	8005f02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d128      	bne.n	8005f9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	791b      	ldrb	r3, [r3, #4]
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d003      	beq.n	8005f7c <USB_EPClearStall+0x4c>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	791b      	ldrb	r3, [r3, #4]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d138      	bne.n	8005fee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	e027      	b.n	8005fee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	791b      	ldrb	r3, [r3, #4]
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d003      	beq.n	8005fce <USB_EPClearStall+0x9e>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	791b      	ldrb	r3, [r3, #4]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d10f      	bne.n	8005fee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800601e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006030:	68f9      	ldr	r1, [r7, #12]
 8006032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006036:	4313      	orrs	r3, r2
 8006038:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006076:	f023 0302 	bic.w	r3, r3, #2
 800607a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060a4:	f023 0303 	bic.w	r3, r3, #3
 80060a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b8:	f043 0302 	orr.w	r3, r3, #2
 80060bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4013      	ands	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060e4:	68fb      	ldr	r3, [r7, #12]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	4013      	ands	r3, r2
 8006114:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	0c1b      	lsrs	r3, r3, #16
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	b29b      	uxth	r3, r3
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	460b      	mov	r3, r1
 8006164:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	4013      	ands	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006188:	68bb      	ldr	r3, [r7, #8]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006196:	b480      	push	{r7}
 8006198:	b087      	sub	sp, #28
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4013      	ands	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061e4:	68bb      	ldr	r3, [r7, #8]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0301 	and.w	r3, r3, #1
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006228:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800622c:	f023 0307 	bic.w	r3, r3, #7
 8006230:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	460b      	mov	r3, r1
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	333c      	adds	r3, #60	; 0x3c
 800626a:	3304      	adds	r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4a26      	ldr	r2, [pc, #152]	; (800630c <USB_EP0_OutStart+0xb8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d90a      	bls.n	800628e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006288:	d101      	bne.n	800628e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e037      	b.n	80062fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062bc:	f043 0318 	orr.w	r3, r3, #24
 80062c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062d6:	7afb      	ldrb	r3, [r7, #11]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10f      	bne.n	80062fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	4f54300a 	.word	0x4f54300a

08006310 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006328:	d901      	bls.n	800632e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e022      	b.n	8006374 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	daf2      	bge.n	800631c <USB_CoreReset+0xc>

  count = 10U;
 8006336:	230a      	movs	r3, #10
 8006338:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800633a:	e002      	b.n	8006342 <USB_CoreReset+0x32>
  {
    count--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3b01      	subs	r3, #1
 8006340:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f9      	bne.n	800633c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f043 0201 	orr.w	r2, r3, #1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3301      	adds	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006360:	d901      	bls.n	8006366 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e006      	b.n	8006374 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b01      	cmp	r3, #1
 8006370:	d0f0      	beq.n	8006354 <USB_CoreReset+0x44>

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800638c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006390:	f002 fd22 	bl	8008dd8 <USBD_static_malloc>
 8006394:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	32b0      	adds	r2, #176	; 0xb0
 80063a6:	2100      	movs	r1, #0
 80063a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063ac:	2302      	movs	r3, #2
 80063ae:	e0d4      	b.n	800655a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80063b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80063b4:	2100      	movs	r1, #0
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f002 fd52 	bl	8008e60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	32b0      	adds	r2, #176	; 0xb0
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	32b0      	adds	r2, #176	; 0xb0
 80063d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	7c1b      	ldrb	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d138      	bne.n	800645a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063e8:	4b5e      	ldr	r3, [pc, #376]	; (8006564 <USBD_CDC_Init+0x1e4>)
 80063ea:	7819      	ldrb	r1, [r3, #0]
 80063ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f0:	2202      	movs	r2, #2
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f002 fbcd 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063f8:	4b5a      	ldr	r3, [pc, #360]	; (8006564 <USBD_CDC_Init+0x1e4>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	3323      	adds	r3, #35	; 0x23
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006412:	4b55      	ldr	r3, [pc, #340]	; (8006568 <USBD_CDC_Init+0x1e8>)
 8006414:	7819      	ldrb	r1, [r3, #0]
 8006416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800641a:	2202      	movs	r2, #2
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f002 fbb8 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006422:	4b51      	ldr	r3, [pc, #324]	; (8006568 <USBD_CDC_Init+0x1e8>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f003 020f 	and.w	r2, r3, #15
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	f203 1363 	addw	r3, r3, #355	; 0x163
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800643e:	4b4b      	ldr	r3, [pc, #300]	; (800656c <USBD_CDC_Init+0x1ec>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f003 020f 	and.w	r2, r3, #15
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	331c      	adds	r3, #28
 8006454:	2210      	movs	r2, #16
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e035      	b.n	80064c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800645a:	4b42      	ldr	r3, [pc, #264]	; (8006564 <USBD_CDC_Init+0x1e4>)
 800645c:	7819      	ldrb	r1, [r3, #0]
 800645e:	2340      	movs	r3, #64	; 0x40
 8006460:	2202      	movs	r2, #2
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f002 fb95 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006468:	4b3e      	ldr	r3, [pc, #248]	; (8006564 <USBD_CDC_Init+0x1e4>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3323      	adds	r3, #35	; 0x23
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006482:	4b39      	ldr	r3, [pc, #228]	; (8006568 <USBD_CDC_Init+0x1e8>)
 8006484:	7819      	ldrb	r1, [r3, #0]
 8006486:	2340      	movs	r3, #64	; 0x40
 8006488:	2202      	movs	r2, #2
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f002 fb81 	bl	8008b92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006490:	4b35      	ldr	r3, [pc, #212]	; (8006568 <USBD_CDC_Init+0x1e8>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	f203 1363 	addw	r3, r3, #355	; 0x163
 80064a8:	2201      	movs	r2, #1
 80064aa:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064ac:	4b2f      	ldr	r3, [pc, #188]	; (800656c <USBD_CDC_Init+0x1ec>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f003 020f 	and.w	r2, r3, #15
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	331c      	adds	r3, #28
 80064c2:	2210      	movs	r2, #16
 80064c4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064c6:	4b29      	ldr	r3, [pc, #164]	; (800656c <USBD_CDC_Init+0x1ec>)
 80064c8:	7819      	ldrb	r1, [r3, #0]
 80064ca:	2308      	movs	r3, #8
 80064cc:	2203      	movs	r2, #3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f002 fb5f 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80064d4:	4b25      	ldr	r3, [pc, #148]	; (800656c <USBD_CDC_Init+0x1ec>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f003 020f 	and.w	r2, r3, #15
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	440b      	add	r3, r1
 80064e8:	3323      	adds	r3, #35	; 0x23
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	33b0      	adds	r3, #176	; 0xb0
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006524:	2302      	movs	r3, #2
 8006526:	e018      	b.n	800655a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	7c1b      	ldrb	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006530:	4b0d      	ldr	r3, [pc, #52]	; (8006568 <USBD_CDC_Init+0x1e8>)
 8006532:	7819      	ldrb	r1, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800653a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f002 fc16 	bl	8008d70 <USBD_LL_PrepareReceive>
 8006544:	e008      	b.n	8006558 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006546:	4b08      	ldr	r3, [pc, #32]	; (8006568 <USBD_CDC_Init+0x1e8>)
 8006548:	7819      	ldrb	r1, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006550:	2340      	movs	r3, #64	; 0x40
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f002 fc0c 	bl	8008d70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000093 	.word	0x20000093
 8006568:	20000094 	.word	0x20000094
 800656c:	20000095 	.word	0x20000095

08006570 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800657c:	4b3a      	ldr	r3, [pc, #232]	; (8006668 <USBD_CDC_DeInit+0xf8>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f002 fb2b 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006588:	4b37      	ldr	r3, [pc, #220]	; (8006668 <USBD_CDC_DeInit+0xf8>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	f003 020f 	and.w	r2, r3, #15
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	3323      	adds	r3, #35	; 0x23
 800659e:	2200      	movs	r2, #0
 80065a0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80065a2:	4b32      	ldr	r3, [pc, #200]	; (800666c <USBD_CDC_DeInit+0xfc>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f002 fb18 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80065ae:	4b2f      	ldr	r3, [pc, #188]	; (800666c <USBD_CDC_DeInit+0xfc>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	f003 020f 	and.w	r2, r3, #15
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	f203 1363 	addw	r3, r3, #355	; 0x163
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80065ca:	4b29      	ldr	r3, [pc, #164]	; (8006670 <USBD_CDC_DeInit+0x100>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f002 fb04 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80065d6:	4b26      	ldr	r3, [pc, #152]	; (8006670 <USBD_CDC_DeInit+0x100>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	3323      	adds	r3, #35	; 0x23
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80065f0:	4b1f      	ldr	r3, [pc, #124]	; (8006670 <USBD_CDC_DeInit+0x100>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	f003 020f 	and.w	r2, r3, #15
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	331c      	adds	r3, #28
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	32b0      	adds	r2, #176	; 0xb0
 8006614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01f      	beq.n	800665c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	33b0      	adds	r3, #176	; 0xb0
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	32b0      	adds	r2, #176	; 0xb0
 800663a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663e:	4618      	mov	r0, r3
 8006640:	f002 fbd8 	bl	8008df4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	32b0      	adds	r2, #176	; 0xb0
 800664e:	2100      	movs	r1, #0
 8006650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000093 	.word	0x20000093
 800666c:	20000094 	.word	0x20000094
 8006670:	20000095 	.word	0x20000095

08006674 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	32b0      	adds	r2, #176	; 0xb0
 8006688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e0bf      	b.n	8006824 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d050      	beq.n	8006752 <USBD_CDC_Setup+0xde>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	f040 80af 	bne.w	8006814 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	88db      	ldrh	r3, [r3, #6]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d03a      	beq.n	8006734 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	b25b      	sxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	da1b      	bge.n	8006700 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	33b0      	adds	r3, #176	; 0xb0
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80066de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	88d2      	ldrh	r2, [r2, #6]
 80066e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	88db      	ldrh	r3, [r3, #6]
 80066ea:	2b07      	cmp	r3, #7
 80066ec:	bf28      	it	cs
 80066ee:	2307      	movcs	r3, #7
 80066f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	89fa      	ldrh	r2, [r7, #14]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 fdab 	bl	8008254 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80066fe:	e090      	b.n	8006822 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	785a      	ldrb	r2, [r3, #1]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	88db      	ldrh	r3, [r3, #6]
 800670e:	2b3f      	cmp	r3, #63	; 0x3f
 8006710:	d803      	bhi.n	800671a <USBD_CDC_Setup+0xa6>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	88db      	ldrh	r3, [r3, #6]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	e000      	b.n	800671c <USBD_CDC_Setup+0xa8>
 800671a:	2240      	movs	r2, #64	; 0x40
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006722:	6939      	ldr	r1, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800672a:	461a      	mov	r2, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fdc0 	bl	80082b2 <USBD_CtlPrepareRx>
      break;
 8006732:	e076      	b.n	8006822 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	33b0      	adds	r3, #176	; 0xb0
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	7850      	ldrb	r0, [r2, #1]
 800674a:	2200      	movs	r2, #0
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	4798      	blx	r3
      break;
 8006750:	e067      	b.n	8006822 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b0b      	cmp	r3, #11
 8006758:	d851      	bhi.n	80067fe <USBD_CDC_Setup+0x18a>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <USBD_CDC_Setup+0xec>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	08006791 	.word	0x08006791
 8006764:	0800680d 	.word	0x0800680d
 8006768:	080067ff 	.word	0x080067ff
 800676c:	080067ff 	.word	0x080067ff
 8006770:	080067ff 	.word	0x080067ff
 8006774:	080067ff 	.word	0x080067ff
 8006778:	080067ff 	.word	0x080067ff
 800677c:	080067ff 	.word	0x080067ff
 8006780:	080067ff 	.word	0x080067ff
 8006784:	080067ff 	.word	0x080067ff
 8006788:	080067bb 	.word	0x080067bb
 800678c:	080067e5 	.word	0x080067e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b03      	cmp	r3, #3
 800679a:	d107      	bne.n	80067ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800679c:	f107 030a 	add.w	r3, r7, #10
 80067a0:	2202      	movs	r2, #2
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fd55 	bl	8008254 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067aa:	e032      	b.n	8006812 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fcd3 	bl	800815a <USBD_CtlError>
            ret = USBD_FAIL;
 80067b4:	2303      	movs	r3, #3
 80067b6:	75fb      	strb	r3, [r7, #23]
          break;
 80067b8:	e02b      	b.n	8006812 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d107      	bne.n	80067d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067c6:	f107 030d 	add.w	r3, r7, #13
 80067ca:	2201      	movs	r2, #1
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fd40 	bl	8008254 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067d4:	e01d      	b.n	8006812 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fcbe 	bl	800815a <USBD_CtlError>
            ret = USBD_FAIL;
 80067de:	2303      	movs	r3, #3
 80067e0:	75fb      	strb	r3, [r7, #23]
          break;
 80067e2:	e016      	b.n	8006812 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d00f      	beq.n	8006810 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fcb1 	bl	800815a <USBD_CtlError>
            ret = USBD_FAIL;
 80067f8:	2303      	movs	r3, #3
 80067fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067fc:	e008      	b.n	8006810 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fcaa 	bl	800815a <USBD_CtlError>
          ret = USBD_FAIL;
 8006806:	2303      	movs	r3, #3
 8006808:	75fb      	strb	r3, [r7, #23]
          break;
 800680a:	e002      	b.n	8006812 <USBD_CDC_Setup+0x19e>
          break;
 800680c:	bf00      	nop
 800680e:	e008      	b.n	8006822 <USBD_CDC_Setup+0x1ae>
          break;
 8006810:	bf00      	nop
      }
      break;
 8006812:	e006      	b.n	8006822 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fc9f 	bl	800815a <USBD_CtlError>
      ret = USBD_FAIL;
 800681c:	2303      	movs	r3, #3
 800681e:	75fb      	strb	r3, [r7, #23]
      break;
 8006820:	bf00      	nop
  }

  return (uint8_t)ret;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800683e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	32b0      	adds	r2, #176	; 0xb0
 800684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	e065      	b.n	8006922 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	32b0      	adds	r2, #176	; 0xb0
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3314      	adds	r3, #20
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02f      	beq.n	80068e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	f003 020f 	and.w	r2, r3, #15
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	3314      	adds	r3, #20
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	f003 010f 	and.w	r1, r3, #15
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	460b      	mov	r3, r1
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	440b      	add	r3, r1
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4403      	add	r3, r0
 80068a8:	331c      	adds	r3, #28
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d112      	bne.n	80068e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	f003 020f 	and.w	r2, r3, #15
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	3314      	adds	r3, #20
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068d2:	78f9      	ldrb	r1, [r7, #3]
 80068d4:	2300      	movs	r3, #0
 80068d6:	2200      	movs	r2, #0
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f002 fa28 	bl	8008d2e <USBD_LL_Transmit>
 80068de:	e01f      	b.n	8006920 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	33b0      	adds	r3, #176	; 0xb0
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	33b0      	adds	r3, #176	; 0xb0
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	32b0      	adds	r2, #176	; 0xb0
 8006940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006944:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	32b0      	adds	r2, #176	; 0xb0
 8006950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006958:	2303      	movs	r3, #3
 800695a:	e01a      	b.n	8006992 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f002 fa26 	bl	8008db2 <USBD_LL_GetRxDataSize>
 8006966:	4602      	mov	r2, r0
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	33b0      	adds	r3, #176	; 0xb0
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800698c:	4611      	mov	r1, r2
 800698e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	32b0      	adds	r2, #176	; 0xb0
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e025      	b.n	8006a08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	33b0      	adds	r3, #176	; 0xb0
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01a      	beq.n	8006a06 <USBD_CDC_EP0_RxReady+0x6c>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80069d6:	2bff      	cmp	r3, #255	; 0xff
 80069d8:	d015      	beq.n	8006a06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	33b0      	adds	r3, #176	; 0xb0
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80069f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069fa:	b292      	uxth	r2, r2
 80069fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	22ff      	movs	r2, #255	; 0xff
 8006a02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a18:	2182      	movs	r1, #130	; 0x82
 8006a1a:	4818      	ldr	r0, [pc, #96]	; (8006a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a1c:	f000 fd62 	bl	80074e4 <USBD_GetEpDesc>
 8006a20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a22:	2101      	movs	r1, #1
 8006a24:	4815      	ldr	r0, [pc, #84]	; (8006a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a26:	f000 fd5d 	bl	80074e4 <USBD_GetEpDesc>
 8006a2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a2c:	2181      	movs	r1, #129	; 0x81
 8006a2e:	4813      	ldr	r0, [pc, #76]	; (8006a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a30:	f000 fd58 	bl	80074e4 <USBD_GetEpDesc>
 8006a34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2210      	movs	r2, #16
 8006a40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d006      	beq.n	8006a56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a50:	711a      	strb	r2, [r3, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d006      	beq.n	8006a6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a64:	711a      	strb	r2, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2243      	movs	r2, #67	; 0x43
 8006a6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a70:	4b02      	ldr	r3, [pc, #8]	; (8006a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000050 	.word	0x20000050

08006a80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a88:	2182      	movs	r1, #130	; 0x82
 8006a8a:	4818      	ldr	r0, [pc, #96]	; (8006aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a8c:	f000 fd2a 	bl	80074e4 <USBD_GetEpDesc>
 8006a90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a92:	2101      	movs	r1, #1
 8006a94:	4815      	ldr	r0, [pc, #84]	; (8006aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a96:	f000 fd25 	bl	80074e4 <USBD_GetEpDesc>
 8006a9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a9c:	2181      	movs	r1, #129	; 0x81
 8006a9e:	4813      	ldr	r0, [pc, #76]	; (8006aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006aa0:	f000 fd20 	bl	80074e4 <USBD_GetEpDesc>
 8006aa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2210      	movs	r2, #16
 8006ab0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d006      	beq.n	8006ac6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2200      	movs	r2, #0
 8006abc:	711a      	strb	r2, [r3, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f042 0202 	orr.w	r2, r2, #2
 8006ac4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	711a      	strb	r2, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f042 0202 	orr.w	r2, r2, #2
 8006ad8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2243      	movs	r2, #67	; 0x43
 8006ade:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ae0:	4b02      	ldr	r3, [pc, #8]	; (8006aec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000050 	.word	0x20000050

08006af0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006af8:	2182      	movs	r1, #130	; 0x82
 8006afa:	4818      	ldr	r0, [pc, #96]	; (8006b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006afc:	f000 fcf2 	bl	80074e4 <USBD_GetEpDesc>
 8006b00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b02:	2101      	movs	r1, #1
 8006b04:	4815      	ldr	r0, [pc, #84]	; (8006b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b06:	f000 fced 	bl	80074e4 <USBD_GetEpDesc>
 8006b0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b0c:	2181      	movs	r1, #129	; 0x81
 8006b0e:	4813      	ldr	r0, [pc, #76]	; (8006b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b10:	f000 fce8 	bl	80074e4 <USBD_GetEpDesc>
 8006b14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2210      	movs	r2, #16
 8006b20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d006      	beq.n	8006b36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b30:	711a      	strb	r2, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b44:	711a      	strb	r2, [r3, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2243      	movs	r2, #67	; 0x43
 8006b4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000050 	.word	0x20000050

08006b60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	220a      	movs	r2, #10
 8006b6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b6e:	4b03      	ldr	r3, [pc, #12]	; (8006b7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	2000000c 	.word	0x2000000c

08006b80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e009      	b.n	8006ba8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	33b0      	adds	r3, #176	; 0xb0
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	32b0      	adds	r2, #176	; 0xb0
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e008      	b.n	8006bec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	32b0      	adds	r2, #176	; 0xb0
 8006c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e004      	b.n	8006c26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	32b0      	adds	r2, #176	; 0xb0
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e025      	b.n	8006ca6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11f      	bne.n	8006ca4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <USBD_CDC_TransmitPacket+0x7c>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	f003 020f 	and.w	r2, r3, #15
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4403      	add	r3, r0
 8006c86:	3314      	adds	r3, #20
 8006c88:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006c8a:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <USBD_CDC_TransmitPacket+0x7c>)
 8006c8c:	7819      	ldrb	r1, [r3, #0]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f002 f847 	bl	8008d2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000093 	.word	0x20000093

08006cb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	32b0      	adds	r2, #176	; 0xb0
 8006cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	32b0      	adds	r2, #176	; 0xb0
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e018      	b.n	8006d14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	7c1b      	ldrb	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cea:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <USBD_CDC_ReceivePacket+0x68>)
 8006cec:	7819      	ldrb	r1, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f002 f839 	bl	8008d70 <USBD_LL_PrepareReceive>
 8006cfe:	e008      	b.n	8006d12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <USBD_CDC_ReceivePacket+0x68>)
 8006d02:	7819      	ldrb	r1, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d0a:	2340      	movs	r3, #64	; 0x40
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f002 f82f 	bl	8008d70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000094 	.word	0x20000094

08006d20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e01f      	b.n	8006d78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	79fa      	ldrb	r2, [r7, #7]
 8006d6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f001 fea9 	bl	8008ac4 <USBD_LL_Init>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e025      	b.n	8006de4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32ae      	adds	r2, #174	; 0xae
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00f      	beq.n	8006dd4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	32ae      	adds	r2, #174	; 0xae
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	f107 020e 	add.w	r2, r7, #14
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
 8006dcc:	4602      	mov	r2, r0
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 feb1 	bl	8008b5c <USBD_LL_Start>
 8006dfa:	4603      	mov	r3, r0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f924 	bl	80080e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006eac:	461a      	mov	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d01a      	beq.n	8006ef8 <USBD_LL_SetupStage+0x72>
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d822      	bhi.n	8006f0c <USBD_LL_SetupStage+0x86>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <USBD_LL_SetupStage+0x4a>
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d00a      	beq.n	8006ee4 <USBD_LL_SetupStage+0x5e>
 8006ece:	e01d      	b.n	8006f0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fb79 	bl	80075d0 <USBD_StdDevReq>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee2:	e020      	b.n	8006f26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fbe1 	bl	80076b4 <USBD_StdItfReq>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef6:	e016      	b.n	8006f26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc43 	bl	800778c <USBD_StdEPReq>
 8006f06:	4603      	mov	r3, r0
 8006f08:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0a:	e00c      	b.n	8006f26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fe7e 	bl	8008c1c <USBD_LL_StallEP>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]
      break;
 8006f24:	bf00      	nop
  }

  return ret;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d177      	bne.n	8007038 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	f040 80a1 	bne.w	800709e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	8992      	ldrh	r2, [r2, #12]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d91c      	bls.n	8006fa2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	8992      	ldrh	r2, [r2, #12]
 8006f70:	1a9a      	subs	r2, r3, r2
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	8992      	ldrh	r2, [r2, #12]
 8006f7e:	441a      	add	r2, r3
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	6919      	ldr	r1, [r3, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	899b      	ldrh	r3, [r3, #12]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4293      	cmp	r3, r2
 8006f94:	bf38      	it	cc
 8006f96:	4613      	movcc	r3, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f001 f9aa 	bl	80082f4 <USBD_CtlContinueRx>
 8006fa0:	e07d      	b.n	800709e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d014      	beq.n	8006fda <USBD_LL_DataOutStage+0xaa>
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d81d      	bhi.n	8006ff0 <USBD_LL_DataOutStage+0xc0>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <USBD_LL_DataOutStage+0x8e>
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d003      	beq.n	8006fc4 <USBD_LL_DataOutStage+0x94>
 8006fbc:	e018      	b.n	8006ff0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75bb      	strb	r3, [r7, #22]
            break;
 8006fc2:	e018      	b.n	8006ff6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	4619      	mov	r1, r3
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fa6e 	bl	80074b0 <USBD_CoreFindIF>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	75bb      	strb	r3, [r7, #22]
            break;
 8006fd8:	e00d      	b.n	8006ff6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fa70 	bl	80074ca <USBD_CoreFindEP>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75bb      	strb	r3, [r7, #22]
            break;
 8006fee:	e002      	b.n	8006ff6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ff4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ff6:	7dbb      	ldrb	r3, [r7, #22]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d119      	bne.n	8007030 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b03      	cmp	r3, #3
 8007006:	d113      	bne.n	8007030 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007008:	7dba      	ldrb	r2, [r7, #22]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	32ae      	adds	r2, #174	; 0xae
 800700e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007018:	7dba      	ldrb	r2, [r7, #22]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007020:	7dba      	ldrb	r2, [r7, #22]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	32ae      	adds	r2, #174	; 0xae
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f001 f970 	bl	8008316 <USBD_CtlSendStatus>
 8007036:	e032      	b.n	800709e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007038:	7afb      	ldrb	r3, [r7, #11]
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fa41 	bl	80074ca <USBD_CoreFindEP>
 8007048:	4603      	mov	r3, r0
 800704a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800704c:	7dbb      	ldrb	r3, [r7, #22]
 800704e:	2bff      	cmp	r3, #255	; 0xff
 8007050:	d025      	beq.n	800709e <USBD_LL_DataOutStage+0x16e>
 8007052:	7dbb      	ldrb	r3, [r7, #22]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d122      	bne.n	800709e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b03      	cmp	r3, #3
 8007062:	d117      	bne.n	8007094 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007064:	7dba      	ldrb	r2, [r7, #22]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	32ae      	adds	r2, #174	; 0xae
 800706a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00f      	beq.n	8007094 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007074:	7dba      	ldrb	r2, [r7, #22]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800707c:	7dba      	ldrb	r2, [r7, #22]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	32ae      	adds	r2, #174	; 0xae
 8007082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	7afa      	ldrb	r2, [r7, #11]
 800708a:	4611      	mov	r1, r2
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	4798      	blx	r3
 8007090:	4603      	mov	r3, r0
 8007092:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	e000      	b.n	80070a0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	460b      	mov	r3, r1
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d178      	bne.n	80071ae <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3314      	adds	r3, #20
 80070c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d163      	bne.n	8007194 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	8992      	ldrh	r2, [r2, #12]
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d91c      	bls.n	8007112 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	8992      	ldrh	r2, [r2, #12]
 80070e0:	1a9a      	subs	r2, r3, r2
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	8992      	ldrh	r2, [r2, #12]
 80070ee:	441a      	add	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	6919      	ldr	r1, [r3, #16]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	461a      	mov	r2, r3
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f001 f8c6 	bl	8008290 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007104:	2300      	movs	r3, #0
 8007106:	2200      	movs	r2, #0
 8007108:	2100      	movs	r1, #0
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f001 fe30 	bl	8008d70 <USBD_LL_PrepareReceive>
 8007110:	e040      	b.n	8007194 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	899b      	ldrh	r3, [r3, #12]
 8007116:	461a      	mov	r2, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	429a      	cmp	r2, r3
 800711e:	d11c      	bne.n	800715a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007128:	4293      	cmp	r3, r2
 800712a:	d316      	bcc.n	800715a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007136:	429a      	cmp	r2, r3
 8007138:	d20f      	bcs.n	800715a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800713a:	2200      	movs	r2, #0
 800713c:	2100      	movs	r1, #0
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f001 f8a6 	bl	8008290 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800714c:	2300      	movs	r3, #0
 800714e:	2200      	movs	r2, #0
 8007150:	2100      	movs	r1, #0
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f001 fe0c 	bl	8008d70 <USBD_LL_PrepareReceive>
 8007158:	e01c      	b.n	8007194 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b03      	cmp	r3, #3
 8007164:	d10f      	bne.n	8007186 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007186:	2180      	movs	r1, #128	; 0x80
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f001 fd47 	bl	8008c1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 f8d4 	bl	800833c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d03a      	beq.n	8007214 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff fe30 	bl	8006e04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071ac:	e032      	b.n	8007214 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071ae:	7afb      	ldrb	r3, [r7, #11]
 80071b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	4619      	mov	r1, r3
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f986 	bl	80074ca <USBD_CoreFindEP>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	2bff      	cmp	r3, #255	; 0xff
 80071c6:	d025      	beq.n	8007214 <USBD_LL_DataInStage+0x16c>
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d122      	bne.n	8007214 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d11c      	bne.n	8007214 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80071da:	7dfa      	ldrb	r2, [r7, #23]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	32ae      	adds	r2, #174	; 0xae
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d014      	beq.n	8007214 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80071ea:	7dfa      	ldrb	r2, [r7, #23]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80071f2:	7dfa      	ldrb	r2, [r7, #23]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	32ae      	adds	r2, #174	; 0xae
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	7afa      	ldrb	r2, [r7, #11]
 8007200:	4611      	mov	r1, r2
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	4798      	blx	r3
 8007206:	4603      	mov	r3, r0
 8007208:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800720a:	7dbb      	ldrb	r3, [r7, #22]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007210:	7dbb      	ldrb	r3, [r7, #22]
 8007212:	e000      	b.n	8007216 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d014      	beq.n	8007284 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00e      	beq.n	8007284 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6852      	ldr	r2, [r2, #4]
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	4611      	mov	r1, r2
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007284:	2340      	movs	r3, #64	; 0x40
 8007286:	2200      	movs	r2, #0
 8007288:	2100      	movs	r1, #0
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fc81 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2240      	movs	r2, #64	; 0x40
 800729c:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072a0:	2340      	movs	r3, #64	; 0x40
 80072a2:	2200      	movs	r2, #0
 80072a4:	2180      	movs	r1, #128	; 0x80
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fc73 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2240      	movs	r2, #64	; 0x40
 80072b8:	841a      	strh	r2, [r3, #32]

  return ret;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d006      	beq.n	8007306 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2204      	movs	r2, #4
 800730a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b04      	cmp	r3, #4
 800732e:	d106      	bne.n	800733e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007336:	b2da      	uxtb	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b03      	cmp	r3, #3
 800735e:	d110      	bne.n	8007382 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	32ae      	adds	r2, #174	; 0xae
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e01c      	b.n	80073e8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d115      	bne.n	80073e6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32ae      	adds	r2, #174	; 0xae
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	32ae      	adds	r2, #174	; 0xae
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	78fa      	ldrb	r2, [r7, #3]
 80073e0:	4611      	mov	r1, r2
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	32ae      	adds	r2, #174	; 0xae
 8007406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800740e:	2303      	movs	r3, #3
 8007410:	e01c      	b.n	800744c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d115      	bne.n	800744a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	32ae      	adds	r2, #174	; 0xae
 8007428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	32ae      	adds	r2, #174	; 0xae
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00e      	beq.n	80074a6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6852      	ldr	r2, [r2, #4]
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	4611      	mov	r1, r2
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074a2:	2303      	movs	r3, #3
 80074a4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	885b      	ldrh	r3, [r3, #2]
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	429a      	cmp	r2, r3
 800750a:	d920      	bls.n	800754e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007514:	e013      	b.n	800753e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007516:	f107 030a 	add.w	r3, r7, #10
 800751a:	4619      	mov	r1, r3
 800751c:	6978      	ldr	r0, [r7, #20]
 800751e:	f000 f81b 	bl	8007558 <USBD_GetNextDesc>
 8007522:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	2b05      	cmp	r3, #5
 800752a:	d108      	bne.n	800753e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	789b      	ldrb	r3, [r3, #2]
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	429a      	cmp	r2, r3
 8007538:	d008      	beq.n	800754c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	885b      	ldrh	r3, [r3, #2]
 8007542:	b29a      	uxth	r2, r3
 8007544:	897b      	ldrh	r3, [r7, #10]
 8007546:	429a      	cmp	r2, r3
 8007548:	d8e5      	bhi.n	8007516 <USBD_GetEpDesc+0x32>
 800754a:	e000      	b.n	800754e <USBD_GetEpDesc+0x6a>
          break;
 800754c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800754e:	693b      	ldr	r3, [r7, #16]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	881a      	ldrh	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	4413      	add	r3, r2
 8007572:	b29a      	uxth	r2, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007584:	68fb      	ldr	r3, [r7, #12]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007592:	b480      	push	{r7}
 8007594:	b087      	sub	sp, #28
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	3301      	adds	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075b0:	8a3b      	ldrh	r3, [r7, #16]
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	b21a      	sxth	r2, r3
 80075b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	b21b      	sxth	r3, r3
 80075be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075c0:	89fb      	ldrh	r3, [r7, #14]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
	...

080075d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075e6:	2b40      	cmp	r3, #64	; 0x40
 80075e8:	d005      	beq.n	80075f6 <USBD_StdDevReq+0x26>
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d857      	bhi.n	800769e <USBD_StdDevReq+0xce>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00f      	beq.n	8007612 <USBD_StdDevReq+0x42>
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d153      	bne.n	800769e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	32ae      	adds	r2, #174	; 0xae
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]
      break;
 8007610:	e04a      	b.n	80076a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2b09      	cmp	r3, #9
 8007618:	d83b      	bhi.n	8007692 <USBD_StdDevReq+0xc2>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <USBD_StdDevReq+0x50>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007675 	.word	0x08007675
 8007624:	08007689 	.word	0x08007689
 8007628:	08007693 	.word	0x08007693
 800762c:	0800767f 	.word	0x0800767f
 8007630:	08007693 	.word	0x08007693
 8007634:	08007653 	.word	0x08007653
 8007638:	08007649 	.word	0x08007649
 800763c:	08007693 	.word	0x08007693
 8007640:	0800766b 	.word	0x0800766b
 8007644:	0800765d 	.word	0x0800765d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa3e 	bl	8007acc <USBD_GetDescriptor>
          break;
 8007650:	e024      	b.n	800769c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fba3 	bl	8007da0 <USBD_SetAddress>
          break;
 800765a:	e01f      	b.n	800769c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fbe2 	bl	8007e28 <USBD_SetConfig>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
          break;
 8007668:	e018      	b.n	800769c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fc85 	bl	8007f7c <USBD_GetConfig>
          break;
 8007672:	e013      	b.n	800769c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fcb6 	bl	8007fe8 <USBD_GetStatus>
          break;
 800767c:	e00e      	b.n	800769c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fce5 	bl	8008050 <USBD_SetFeature>
          break;
 8007686:	e009      	b.n	800769c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fd09 	bl	80080a2 <USBD_ClrFeature>
          break;
 8007690:	e004      	b.n	800769c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fd60 	bl	800815a <USBD_CtlError>
          break;
 800769a:	bf00      	nop
      }
      break;
 800769c:	e004      	b.n	80076a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fd5a 	bl	800815a <USBD_CtlError>
      break;
 80076a6:	bf00      	nop
  }

  return ret;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop

080076b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d005      	beq.n	80076da <USBD_StdItfReq+0x26>
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d852      	bhi.n	8007778 <USBD_StdItfReq+0xc4>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <USBD_StdItfReq+0x26>
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d14e      	bne.n	8007778 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d840      	bhi.n	800776a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	889b      	ldrh	r3, [r3, #4]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d836      	bhi.n	8007760 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	889b      	ldrh	r3, [r3, #4]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fed8 	bl	80074b0 <USBD_CoreFindIF>
 8007700:	4603      	mov	r3, r0
 8007702:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2bff      	cmp	r3, #255	; 0xff
 8007708:	d01d      	beq.n	8007746 <USBD_StdItfReq+0x92>
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d11a      	bne.n	8007746 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007710:	7bba      	ldrb	r2, [r7, #14]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	32ae      	adds	r2, #174	; 0xae
 8007716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00f      	beq.n	8007740 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007720:	7bba      	ldrb	r2, [r7, #14]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007728:	7bba      	ldrb	r2, [r7, #14]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32ae      	adds	r2, #174	; 0xae
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800773e:	e004      	b.n	800774a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007744:	e001      	b.n	800774a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007746:	2303      	movs	r3, #3
 8007748:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	88db      	ldrh	r3, [r3, #6]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d110      	bne.n	8007774 <USBD_StdItfReq+0xc0>
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10d      	bne.n	8007774 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fddc 	bl	8008316 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800775e:	e009      	b.n	8007774 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fcf9 	bl	800815a <USBD_CtlError>
          break;
 8007768:	e004      	b.n	8007774 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fcf4 	bl	800815a <USBD_CtlError>
          break;
 8007772:	e000      	b.n	8007776 <USBD_StdItfReq+0xc2>
          break;
 8007774:	bf00      	nop
      }
      break;
 8007776:	e004      	b.n	8007782 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fced 	bl	800815a <USBD_CtlError>
      break;
 8007780:	bf00      	nop
  }

  return ret;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	889b      	ldrh	r3, [r3, #4]
 800779e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d007      	beq.n	80077bc <USBD_StdEPReq+0x30>
 80077ac:	2b40      	cmp	r3, #64	; 0x40
 80077ae:	f200 8181 	bhi.w	8007ab4 <USBD_StdEPReq+0x328>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d02a      	beq.n	800780c <USBD_StdEPReq+0x80>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	f040 817c 	bne.w	8007ab4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff fe82 	bl	80074ca <USBD_CoreFindEP>
 80077c6:	4603      	mov	r3, r0
 80077c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077ca:	7b7b      	ldrb	r3, [r7, #13]
 80077cc:	2bff      	cmp	r3, #255	; 0xff
 80077ce:	f000 8176 	beq.w	8007abe <USBD_StdEPReq+0x332>
 80077d2:	7b7b      	ldrb	r3, [r7, #13]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 8172 	bne.w	8007abe <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80077da:	7b7a      	ldrb	r2, [r7, #13]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80077e2:	7b7a      	ldrb	r2, [r7, #13]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	32ae      	adds	r2, #174	; 0xae
 80077e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 8165 	beq.w	8007abe <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80077f4:	7b7a      	ldrb	r2, [r7, #13]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32ae      	adds	r2, #174	; 0xae
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800780a:	e158      	b.n	8007abe <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b03      	cmp	r3, #3
 8007812:	d008      	beq.n	8007826 <USBD_StdEPReq+0x9a>
 8007814:	2b03      	cmp	r3, #3
 8007816:	f300 8147 	bgt.w	8007aa8 <USBD_StdEPReq+0x31c>
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 809b 	beq.w	8007956 <USBD_StdEPReq+0x1ca>
 8007820:	2b01      	cmp	r3, #1
 8007822:	d03c      	beq.n	800789e <USBD_StdEPReq+0x112>
 8007824:	e140      	b.n	8007aa8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d002      	beq.n	8007838 <USBD_StdEPReq+0xac>
 8007832:	2b03      	cmp	r3, #3
 8007834:	d016      	beq.n	8007864 <USBD_StdEPReq+0xd8>
 8007836:	e02c      	b.n	8007892 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00d      	beq.n	800785a <USBD_StdEPReq+0xce>
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b80      	cmp	r3, #128	; 0x80
 8007842:	d00a      	beq.n	800785a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 f9e7 	bl	8008c1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800784e:	2180      	movs	r1, #128	; 0x80
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 f9e3 	bl	8008c1c <USBD_LL_StallEP>
 8007856:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007858:	e020      	b.n	800789c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc7c 	bl	800815a <USBD_CtlError>
              break;
 8007862:	e01b      	b.n	800789c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	885b      	ldrh	r3, [r3, #2]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10e      	bne.n	800788a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <USBD_StdEPReq+0xfe>
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b80      	cmp	r3, #128	; 0x80
 8007876:	d008      	beq.n	800788a <USBD_StdEPReq+0xfe>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	88db      	ldrh	r3, [r3, #6]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f9c9 	bl	8008c1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fd43 	bl	8008316 <USBD_CtlSendStatus>

              break;
 8007890:	e004      	b.n	800789c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fc60 	bl	800815a <USBD_CtlError>
              break;
 800789a:	bf00      	nop
          }
          break;
 800789c:	e109      	b.n	8007ab2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d002      	beq.n	80078b0 <USBD_StdEPReq+0x124>
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d016      	beq.n	80078dc <USBD_StdEPReq+0x150>
 80078ae:	e04b      	b.n	8007948 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00d      	beq.n	80078d2 <USBD_StdEPReq+0x146>
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	2b80      	cmp	r3, #128	; 0x80
 80078ba:	d00a      	beq.n	80078d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 f9ab 	bl	8008c1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078c6:	2180      	movs	r1, #128	; 0x80
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 f9a7 	bl	8008c1c <USBD_LL_StallEP>
 80078ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078d0:	e040      	b.n	8007954 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fc40 	bl	800815a <USBD_CtlError>
              break;
 80078da:	e03b      	b.n	8007954 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d136      	bne.n	8007952 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 f9b1 	bl	8008c5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fd0c 	bl	8008316 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fde1 	bl	80074ca <USBD_CoreFindEP>
 8007908:	4603      	mov	r3, r0
 800790a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800790c:	7b7b      	ldrb	r3, [r7, #13]
 800790e:	2bff      	cmp	r3, #255	; 0xff
 8007910:	d01f      	beq.n	8007952 <USBD_StdEPReq+0x1c6>
 8007912:	7b7b      	ldrb	r3, [r7, #13]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11c      	bne.n	8007952 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007918:	7b7a      	ldrb	r2, [r7, #13]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007920:	7b7a      	ldrb	r2, [r7, #13]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	32ae      	adds	r2, #174	; 0xae
 8007926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d010      	beq.n	8007952 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007930:	7b7a      	ldrb	r2, [r7, #13]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	32ae      	adds	r2, #174	; 0xae
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007946:	e004      	b.n	8007952 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fc05 	bl	800815a <USBD_CtlError>
              break;
 8007950:	e000      	b.n	8007954 <USBD_StdEPReq+0x1c8>
              break;
 8007952:	bf00      	nop
          }
          break;
 8007954:	e0ad      	b.n	8007ab2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d002      	beq.n	8007968 <USBD_StdEPReq+0x1dc>
 8007962:	2b03      	cmp	r3, #3
 8007964:	d033      	beq.n	80079ce <USBD_StdEPReq+0x242>
 8007966:	e099      	b.n	8007a9c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d007      	beq.n	800797e <USBD_StdEPReq+0x1f2>
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b80      	cmp	r3, #128	; 0x80
 8007972:	d004      	beq.n	800797e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fbef 	bl	800815a <USBD_CtlError>
                break;
 800797c:	e093      	b.n	8007aa6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800797e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007982:	2b00      	cmp	r3, #0
 8007984:	da0b      	bge.n	800799e <USBD_StdEPReq+0x212>
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	3310      	adds	r3, #16
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	3304      	adds	r3, #4
 800799c:	e00b      	b.n	80079b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a4:	4613      	mov	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	3304      	adds	r3, #4
 80079b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2200      	movs	r2, #0
 80079bc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	330e      	adds	r3, #14
 80079c2:	2202      	movs	r2, #2
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fc44 	bl	8008254 <USBD_CtlSendData>
              break;
 80079cc:	e06b      	b.n	8007aa6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	da11      	bge.n	80079fa <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	3323      	adds	r3, #35	; 0x23
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d117      	bne.n	8007a20 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fbb1 	bl	800815a <USBD_CtlError>
                  break;
 80079f8:	e055      	b.n	8007aa6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	f003 020f 	and.w	r2, r3, #15
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	f203 1363 	addw	r3, r3, #355	; 0x163
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d104      	bne.n	8007a20 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fb9e 	bl	800815a <USBD_CtlError>
                  break;
 8007a1e:	e042      	b.n	8007aa6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	da0b      	bge.n	8007a40 <USBD_StdEPReq+0x2b4>
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	3310      	adds	r3, #16
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	e00b      	b.n	8007a58 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	4413      	add	r3, r2
 8007a56:	3304      	adds	r3, #4
 8007a58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <USBD_StdEPReq+0x2da>
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b80      	cmp	r3, #128	; 0x80
 8007a64:	d103      	bne.n	8007a6e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	739a      	strb	r2, [r3, #14]
 8007a6c:	e00e      	b.n	8007a8c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 f910 	bl	8008c98 <USBD_LL_IsStallEP>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2201      	movs	r2, #1
 8007a82:	739a      	strb	r2, [r3, #14]
 8007a84:	e002      	b.n	8007a8c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	330e      	adds	r3, #14
 8007a90:	2202      	movs	r2, #2
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fbdd 	bl	8008254 <USBD_CtlSendData>
              break;
 8007a9a:	e004      	b.n	8007aa6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fb5b 	bl	800815a <USBD_CtlError>
              break;
 8007aa4:	bf00      	nop
          }
          break;
 8007aa6:	e004      	b.n	8007ab2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fb55 	bl	800815a <USBD_CtlError>
          break;
 8007ab0:	bf00      	nop
      }
      break;
 8007ab2:	e005      	b.n	8007ac0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fb4f 	bl	800815a <USBD_CtlError>
      break;
 8007abc:	e000      	b.n	8007ac0 <USBD_StdEPReq+0x334>
      break;
 8007abe:	bf00      	nop
  }

  return ret;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	0a1b      	lsrs	r3, r3, #8
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	2b06      	cmp	r3, #6
 8007aee:	f200 8128 	bhi.w	8007d42 <USBD_GetDescriptor+0x276>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USBD_GetDescriptor+0x2c>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b15 	.word	0x08007b15
 8007afc:	08007b2d 	.word	0x08007b2d
 8007b00:	08007b6d 	.word	0x08007b6d
 8007b04:	08007d43 	.word	0x08007d43
 8007b08:	08007d43 	.word	0x08007d43
 8007b0c:	08007ce3 	.word	0x08007ce3
 8007b10:	08007d0f 	.word	0x08007d0f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	7c12      	ldrb	r2, [r2, #16]
 8007b20:	f107 0108 	add.w	r1, r7, #8
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	60f8      	str	r0, [r7, #12]
      break;
 8007b2a:	e112      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7c1b      	ldrb	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10d      	bne.n	8007b50 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3c:	f107 0208 	add.w	r2, r7, #8
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b4e:	e100      	b.n	8007d52 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	f107 0208 	add.w	r2, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	2202      	movs	r2, #2
 8007b68:	701a      	strb	r2, [r3, #0]
      break;
 8007b6a:	e0f2      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	885b      	ldrh	r3, [r3, #2]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b05      	cmp	r3, #5
 8007b74:	f200 80ac 	bhi.w	8007cd0 <USBD_GetDescriptor+0x204>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <USBD_GetDescriptor+0xb4>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007b99 	.word	0x08007b99
 8007b84:	08007bcd 	.word	0x08007bcd
 8007b88:	08007c01 	.word	0x08007c01
 8007b8c:	08007c35 	.word	0x08007c35
 8007b90:	08007c69 	.word	0x08007c69
 8007b94:	08007c9d 	.word	0x08007c9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7c12      	ldrb	r2, [r2, #16]
 8007bb0:	f107 0108 	add.w	r1, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bba:	e091      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 facb 	bl	800815a <USBD_CtlError>
            err++;
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bca:	e089      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	7c12      	ldrb	r2, [r2, #16]
 8007be4:	f107 0108 	add.w	r1, r7, #8
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bee:	e077      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fab1 	bl	800815a <USBD_CtlError>
            err++;
 8007bf8:	7afb      	ldrb	r3, [r7, #11]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfe:	e06f      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	7c12      	ldrb	r2, [r2, #16]
 8007c18:	f107 0108 	add.w	r1, r7, #8
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4798      	blx	r3
 8007c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c22:	e05d      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa97 	bl	800815a <USBD_CtlError>
            err++;
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	72fb      	strb	r3, [r7, #11]
          break;
 8007c32:	e055      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	7c12      	ldrb	r2, [r2, #16]
 8007c4c:	f107 0108 	add.w	r1, r7, #8
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c56:	e043      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa7d 	bl	800815a <USBD_CtlError>
            err++;
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	3301      	adds	r3, #1
 8007c64:	72fb      	strb	r3, [r7, #11]
          break;
 8007c66:	e03b      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00b      	beq.n	8007c8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	7c12      	ldrb	r2, [r2, #16]
 8007c80:	f107 0108 	add.w	r1, r7, #8
 8007c84:	4610      	mov	r0, r2
 8007c86:	4798      	blx	r3
 8007c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c8a:	e029      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa63 	bl	800815a <USBD_CtlError>
            err++;
 8007c94:	7afb      	ldrb	r3, [r7, #11]
 8007c96:	3301      	adds	r3, #1
 8007c98:	72fb      	strb	r3, [r7, #11]
          break;
 8007c9a:	e021      	b.n	8007ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	7c12      	ldrb	r2, [r2, #16]
 8007cb4:	f107 0108 	add.w	r1, r7, #8
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cbe:	e00f      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa49 	bl	800815a <USBD_CtlError>
            err++;
 8007cc8:	7afb      	ldrb	r3, [r7, #11]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cce:	e007      	b.n	8007ce0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa41 	bl	800815a <USBD_CtlError>
          err++;
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007cde:	bf00      	nop
      }
      break;
 8007ce0:	e037      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	7c1b      	ldrb	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	f107 0208 	add.w	r2, r7, #8
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	4798      	blx	r3
 8007cfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cfc:	e029      	b.n	8007d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fa2a 	bl	800815a <USBD_CtlError>
        err++;
 8007d06:	7afb      	ldrb	r3, [r7, #11]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d0c:	e021      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	7c1b      	ldrb	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10d      	bne.n	8007d32 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	f107 0208 	add.w	r2, r7, #8
 8007d22:	4610      	mov	r0, r2
 8007d24:	4798      	blx	r3
 8007d26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	2207      	movs	r2, #7
 8007d2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d30:	e00f      	b.n	8007d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fa10 	bl	800815a <USBD_CtlError>
        err++;
 8007d3a:	7afb      	ldrb	r3, [r7, #11]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d40:	e007      	b.n	8007d52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa08 	bl	800815a <USBD_CtlError>
      err++;
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d50:	bf00      	nop
  }

  if (err != 0U)
 8007d52:	7afb      	ldrb	r3, [r7, #11]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11e      	bne.n	8007d96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	88db      	ldrh	r3, [r3, #6]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d016      	beq.n	8007d8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d60:	893b      	ldrh	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00e      	beq.n	8007d84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	88da      	ldrh	r2, [r3, #6]
 8007d6a:	893b      	ldrh	r3, [r7, #8]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	bf28      	it	cs
 8007d70:	4613      	movcs	r3, r2
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d76:	893b      	ldrh	r3, [r7, #8]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa69 	bl	8008254 <USBD_CtlSendData>
 8007d82:	e009      	b.n	8007d98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f9e7 	bl	800815a <USBD_CtlError>
 8007d8c:	e004      	b.n	8007d98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fac1 	bl	8008316 <USBD_CtlSendStatus>
 8007d94:	e000      	b.n	8007d98 <USBD_GetDescriptor+0x2cc>
    return;
 8007d96:	bf00      	nop
  }
}
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop

08007da0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	889b      	ldrh	r3, [r3, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d131      	bne.n	8007e16 <USBD_SetAddress+0x76>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	88db      	ldrh	r3, [r3, #6]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d12d      	bne.n	8007e16 <USBD_SetAddress+0x76>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	885b      	ldrh	r3, [r3, #2]
 8007dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc0:	d829      	bhi.n	8007e16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d104      	bne.n	8007de4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f9bc 	bl	800815a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de2:	e01d      	b.n	8007e20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7bfa      	ldrb	r2, [r7, #15]
 8007de8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 ff7d 	bl	8008cf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa8d 	bl	8008316 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2202      	movs	r2, #2
 8007e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0a:	e009      	b.n	8007e20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e14:	e004      	b.n	8007e20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f99e 	bl	800815a <USBD_CtlError>
  }
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	885b      	ldrh	r3, [r3, #2]
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	4b4e      	ldr	r3, [pc, #312]	; (8007f78 <USBD_SetConfig+0x150>)
 8007e3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e40:	4b4d      	ldr	r3, [pc, #308]	; (8007f78 <USBD_SetConfig+0x150>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d905      	bls.n	8007e54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f985 	bl	800815a <USBD_CtlError>
    return USBD_FAIL;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e08c      	b.n	8007f6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d002      	beq.n	8007e66 <USBD_SetConfig+0x3e>
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d029      	beq.n	8007eb8 <USBD_SetConfig+0x90>
 8007e64:	e075      	b.n	8007f52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e66:	4b44      	ldr	r3, [pc, #272]	; (8007f78 <USBD_SetConfig+0x150>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d020      	beq.n	8007eb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e6e:	4b42      	ldr	r3, [pc, #264]	; (8007f78 <USBD_SetConfig+0x150>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e78:	4b3f      	ldr	r3, [pc, #252]	; (8007f78 <USBD_SetConfig+0x150>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fe ffcb 	bl	8006e1a <USBD_SetClassConfig>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d008      	beq.n	8007ea0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f962 	bl	800815a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e9e:	e065      	b.n	8007f6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fa38 	bl	8008316 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007eae:	e05d      	b.n	8007f6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa30 	bl	8008316 <USBD_CtlSendStatus>
      break;
 8007eb6:	e059      	b.n	8007f6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007eb8:	4b2f      	ldr	r3, [pc, #188]	; (8007f78 <USBD_SetConfig+0x150>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d112      	bne.n	8007ee6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ec8:	4b2b      	ldr	r3, [pc, #172]	; (8007f78 <USBD_SetConfig+0x150>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ed2:	4b29      	ldr	r3, [pc, #164]	; (8007f78 <USBD_SetConfig+0x150>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7fe ffba 	bl	8006e52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa19 	bl	8008316 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ee4:	e042      	b.n	8007f6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <USBD_SetConfig+0x150>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d02a      	beq.n	8007f4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7fe ffa8 	bl	8006e52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f02:	4b1d      	ldr	r3, [pc, #116]	; (8007f78 <USBD_SetConfig+0x150>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f0c:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <USBD_SetConfig+0x150>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fe ff81 	bl	8006e1a <USBD_SetClassConfig>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00f      	beq.n	8007f42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f918 	bl	800815a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fe ff8d 	bl	8006e52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f40:	e014      	b.n	8007f6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f9e7 	bl	8008316 <USBD_CtlSendStatus>
      break;
 8007f48:	e010      	b.n	8007f6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9e3 	bl	8008316 <USBD_CtlSendStatus>
      break;
 8007f50:	e00c      	b.n	8007f6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f900 	bl	800815a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f5a:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <USBD_SetConfig+0x150>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7fe ff76 	bl	8006e52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f66:	2303      	movs	r3, #3
 8007f68:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6a:	bf00      	nop
  }

  return ret;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000698 	.word	0x20000698

08007f7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	88db      	ldrh	r3, [r3, #6]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d004      	beq.n	8007f98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f8e2 	bl	800815a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f96:	e023      	b.n	8007fe0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	dc02      	bgt.n	8007faa <USBD_GetConfig+0x2e>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dc03      	bgt.n	8007fb0 <USBD_GetConfig+0x34>
 8007fa8:	e015      	b.n	8007fd6 <USBD_GetConfig+0x5a>
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d00b      	beq.n	8007fc6 <USBD_GetConfig+0x4a>
 8007fae:	e012      	b.n	8007fd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f948 	bl	8008254 <USBD_CtlSendData>
        break;
 8007fc4:	e00c      	b.n	8007fe0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f940 	bl	8008254 <USBD_CtlSendData>
        break;
 8007fd4:	e004      	b.n	8007fe0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f8be 	bl	800815a <USBD_CtlError>
        break;
 8007fde:	bf00      	nop
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d81e      	bhi.n	800803e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	88db      	ldrh	r3, [r3, #6]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d004      	beq.n	8008012 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f8a5 	bl	800815a <USBD_CtlError>
        break;
 8008010:	e01a      	b.n	8008048 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f043 0202 	orr.w	r2, r3, #2
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	330c      	adds	r3, #12
 8008032:	2202      	movs	r2, #2
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f90c 	bl	8008254 <USBD_CtlSendData>
      break;
 800803c:	e004      	b.n	8008048 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f88a 	bl	800815a <USBD_CtlError>
      break;
 8008046:	bf00      	nop
  }
}
 8008048:	bf00      	nop
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d107      	bne.n	8008072 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f953 	bl	8008316 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008070:	e013      	b.n	800809a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	885b      	ldrh	r3, [r3, #2]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d10b      	bne.n	8008092 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	889b      	ldrh	r3, [r3, #4]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	b2da      	uxtb	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f943 	bl	8008316 <USBD_CtlSendStatus>
}
 8008090:	e003      	b.n	800809a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f860 	bl	800815a <USBD_CtlError>
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	3b01      	subs	r3, #1
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d80b      	bhi.n	80080d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	885b      	ldrh	r3, [r3, #2]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d10c      	bne.n	80080dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f923 	bl	8008316 <USBD_CtlSendStatus>
      }
      break;
 80080d0:	e004      	b.n	80080dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f840 	bl	800815a <USBD_CtlError>
      break;
 80080da:	e000      	b.n	80080de <USBD_ClrFeature+0x3c>
      break;
 80080dc:	bf00      	nop
  }
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	781a      	ldrb	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3301      	adds	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff fa3e 	bl	8007592 <SWAPBYTE>
 8008116:	4603      	mov	r3, r0
 8008118:	461a      	mov	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff fa31 	bl	8007592 <SWAPBYTE>
 8008130:	4603      	mov	r3, r0
 8008132:	461a      	mov	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3301      	adds	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f7ff fa24 	bl	8007592 <SWAPBYTE>
 800814a:	4603      	mov	r3, r0
 800814c:	461a      	mov	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	80da      	strh	r2, [r3, #6]
}
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008164:	2180      	movs	r1, #128	; 0x80
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fd58 	bl	8008c1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800816c:	2100      	movs	r1, #0
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fd54 	bl	8008c1c <USBD_LL_StallEP>
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d042      	beq.n	8008218 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008196:	6938      	ldr	r0, [r7, #16]
 8008198:	f000 f842 	bl	8008220 <USBD_GetLen>
 800819c:	4603      	mov	r3, r0
 800819e:	3301      	adds	r3, #1
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081a6:	d808      	bhi.n	80081ba <USBD_GetString+0x3e>
 80081a8:	6938      	ldr	r0, [r7, #16]
 80081aa:	f000 f839 	bl	8008220 <USBD_GetLen>
 80081ae:	4603      	mov	r3, r0
 80081b0:	3301      	adds	r3, #1
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	e001      	b.n	80081be <USBD_GetString+0x42>
 80081ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	4413      	add	r3, r2
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	7812      	ldrb	r2, [r2, #0]
 80081cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	3301      	adds	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	4413      	add	r3, r2
 80081da:	2203      	movs	r2, #3
 80081dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	3301      	adds	r3, #1
 80081e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081e4:	e013      	b.n	800820e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	4413      	add	r3, r2
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	3301      	adds	r3, #1
 80081f6:	613b      	str	r3, [r7, #16]
    idx++;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	3301      	adds	r3, #1
 80081fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	2200      	movs	r2, #0
 8008206:	701a      	strb	r2, [r3, #0]
    idx++;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	3301      	adds	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e7      	bne.n	80081e6 <USBD_GetString+0x6a>
 8008216:	e000      	b.n	800821a <USBD_GetString+0x9e>
    return;
 8008218:	bf00      	nop
  }
}
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008230:	e005      	b.n	800823e <USBD_GetLen+0x1e>
  {
    len++;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	3301      	adds	r3, #1
 8008236:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	3301      	adds	r3, #1
 800823c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1f5      	bne.n	8008232 <USBD_GetLen+0x12>
  }

  return len;
 8008246:	7bfb      	ldrb	r3, [r7, #15]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2202      	movs	r2, #2
 8008264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	2100      	movs	r1, #0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fd54 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	2100      	movs	r1, #0
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fd43 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2203      	movs	r2, #3
 80082c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	2100      	movs	r1, #0
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fd43 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	2100      	movs	r1, #0
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fd32 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008326:	2300      	movs	r3, #0
 8008328:	2200      	movs	r2, #0
 800832a:	2100      	movs	r1, #0
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fcfe 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2205      	movs	r2, #5
 8008348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800834c:	2300      	movs	r3, #0
 800834e:	2200      	movs	r2, #0
 8008350:	2100      	movs	r1, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fd0c 	bl	8008d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008368:	2200      	movs	r2, #0
 800836a:	4912      	ldr	r1, [pc, #72]	; (80083b4 <MX_USB_DEVICE_Init+0x50>)
 800836c:	4812      	ldr	r0, [pc, #72]	; (80083b8 <MX_USB_DEVICE_Init+0x54>)
 800836e:	f7fe fcd7 	bl	8006d20 <USBD_Init>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008378:	f7f8 fde2 	bl	8000f40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800837c:	490f      	ldr	r1, [pc, #60]	; (80083bc <MX_USB_DEVICE_Init+0x58>)
 800837e:	480e      	ldr	r0, [pc, #56]	; (80083b8 <MX_USB_DEVICE_Init+0x54>)
 8008380:	f7fe fcfe 	bl	8006d80 <USBD_RegisterClass>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800838a:	f7f8 fdd9 	bl	8000f40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800838e:	490c      	ldr	r1, [pc, #48]	; (80083c0 <MX_USB_DEVICE_Init+0x5c>)
 8008390:	4809      	ldr	r0, [pc, #36]	; (80083b8 <MX_USB_DEVICE_Init+0x54>)
 8008392:	f7fe fbf5 	bl	8006b80 <USBD_CDC_RegisterInterface>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800839c:	f7f8 fdd0 	bl	8000f40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083a0:	4805      	ldr	r0, [pc, #20]	; (80083b8 <MX_USB_DEVICE_Init+0x54>)
 80083a2:	f7fe fd23 	bl	8006dec <USBD_Start>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083ac:	f7f8 fdc8 	bl	8000f40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083b0:	bf00      	nop
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	200000b4 	.word	0x200000b4
 80083b8:	2000069c 	.word	0x2000069c
 80083bc:	20000018 	.word	0x20000018
 80083c0:	200000a0 	.word	0x200000a0

080083c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083c8:	2200      	movs	r2, #0
 80083ca:	4905      	ldr	r1, [pc, #20]	; (80083e0 <CDC_Init_FS+0x1c>)
 80083cc:	4805      	ldr	r0, [pc, #20]	; (80083e4 <CDC_Init_FS+0x20>)
 80083ce:	f7fe fbf1 	bl	8006bb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083d2:	4905      	ldr	r1, [pc, #20]	; (80083e8 <CDC_Init_FS+0x24>)
 80083d4:	4803      	ldr	r0, [pc, #12]	; (80083e4 <CDC_Init_FS+0x20>)
 80083d6:	f7fe fc0f 	bl	8006bf8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083dc:	4618      	mov	r0, r3
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000b78 	.word	0x20000b78
 80083e4:	2000069c 	.word	0x2000069c
 80083e8:	20000978 	.word	0x20000978

080083ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	6039      	str	r1, [r7, #0]
 8008406:	71fb      	strb	r3, [r7, #7]
 8008408:	4613      	mov	r3, r2
 800840a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b23      	cmp	r3, #35	; 0x23
 8008410:	f200 8098 	bhi.w	8008544 <CDC_Control_FS+0x148>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <CDC_Control_FS+0x20>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008545 	.word	0x08008545
 8008420:	08008545 	.word	0x08008545
 8008424:	08008545 	.word	0x08008545
 8008428:	08008545 	.word	0x08008545
 800842c:	08008545 	.word	0x08008545
 8008430:	08008545 	.word	0x08008545
 8008434:	08008545 	.word	0x08008545
 8008438:	08008545 	.word	0x08008545
 800843c:	08008545 	.word	0x08008545
 8008440:	08008545 	.word	0x08008545
 8008444:	08008545 	.word	0x08008545
 8008448:	08008545 	.word	0x08008545
 800844c:	08008545 	.word	0x08008545
 8008450:	08008545 	.word	0x08008545
 8008454:	08008545 	.word	0x08008545
 8008458:	08008545 	.word	0x08008545
 800845c:	08008545 	.word	0x08008545
 8008460:	08008545 	.word	0x08008545
 8008464:	08008545 	.word	0x08008545
 8008468:	08008545 	.word	0x08008545
 800846c:	08008545 	.word	0x08008545
 8008470:	08008545 	.word	0x08008545
 8008474:	08008545 	.word	0x08008545
 8008478:	08008545 	.word	0x08008545
 800847c:	08008545 	.word	0x08008545
 8008480:	08008545 	.word	0x08008545
 8008484:	08008545 	.word	0x08008545
 8008488:	08008545 	.word	0x08008545
 800848c:	08008545 	.word	0x08008545
 8008490:	08008545 	.word	0x08008545
 8008494:	08008545 	.word	0x08008545
 8008498:	08008545 	.word	0x08008545
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	080084f1 	.word	0x080084f1
 80084a4:	08008545 	.word	0x08008545
 80084a8:	08008545 	.word	0x08008545
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	431a      	orrs	r2, r3
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	3302      	adds	r3, #2
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	041b      	lsls	r3, r3, #16
 80084c4:	431a      	orrs	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	3303      	adds	r3, #3
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	061b      	lsls	r3, r3, #24
 80084ce:	4313      	orrs	r3, r2
 80084d0:	461a      	mov	r2, r3
 80084d2:	4b20      	ldr	r3, [pc, #128]	; (8008554 <CDC_Control_FS+0x158>)
 80084d4:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	791a      	ldrb	r2, [r3, #4]
 80084da:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <CDC_Control_FS+0x158>)
 80084dc:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	795a      	ldrb	r2, [r3, #5]
 80084e2:	4b1c      	ldr	r3, [pc, #112]	; (8008554 <CDC_Control_FS+0x158>)
 80084e4:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	799a      	ldrb	r2, [r3, #6]
 80084ea:	4b1a      	ldr	r3, [pc, #104]	; (8008554 <CDC_Control_FS+0x158>)
 80084ec:	719a      	strb	r2, [r3, #6]
    break;
 80084ee:	e02a      	b.n	8008546 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80084f0:	4b18      	ldr	r3, [pc, #96]	; (8008554 <CDC_Control_FS+0x158>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80084fa:	4b16      	ldr	r3, [pc, #88]	; (8008554 <CDC_Control_FS+0x158>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	0a1a      	lsrs	r2, r3, #8
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008508:	4b12      	ldr	r3, [pc, #72]	; (8008554 <CDC_Control_FS+0x158>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	0c1a      	lsrs	r2, r3, #16
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3302      	adds	r3, #2
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <CDC_Control_FS+0x158>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	0e1a      	lsrs	r2, r3, #24
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	3303      	adds	r3, #3
 8008520:	b2d2      	uxtb	r2, r2
 8008522:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	3304      	adds	r3, #4
 8008528:	4a0a      	ldr	r2, [pc, #40]	; (8008554 <CDC_Control_FS+0x158>)
 800852a:	7912      	ldrb	r2, [r2, #4]
 800852c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	3305      	adds	r3, #5
 8008532:	4a08      	ldr	r2, [pc, #32]	; (8008554 <CDC_Control_FS+0x158>)
 8008534:	7952      	ldrb	r2, [r2, #5]
 8008536:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	3306      	adds	r3, #6
 800853c:	4a05      	ldr	r2, [pc, #20]	; (8008554 <CDC_Control_FS+0x158>)
 800853e:	7992      	ldrb	r2, [r2, #6]
 8008540:	701a      	strb	r2, [r3, #0]
    break;
 8008542:	e000      	b.n	8008546 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008544:	bf00      	nop
  }

  return (USBD_OK);
 8008546:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	20000098 	.word	0x20000098

08008558 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(MyPtrRx != NULL)
 8008562:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <CDC_Receive_FS+0x3c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <CDC_Receive_FS+0x22>
		MyPtrRx(Buf, *Len);
 800856a:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <CDC_Receive_FS+0x3c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	b292      	uxth	r2, r2
 8008574:	4611      	mov	r1, r2
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	4806      	ldr	r0, [pc, #24]	; (8008598 <CDC_Receive_FS+0x40>)
 800857e:	f7fe fb3b 	bl	8006bf8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008582:	4805      	ldr	r0, [pc, #20]	; (8008598 <CDC_Receive_FS+0x40>)
 8008584:	f7fe fb96 	bl	8006cb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008588:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000d78 	.word	0x20000d78
 8008598:	2000069c 	.word	0x2000069c

0800859c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <CDC_Transmit_FS+0x48>)
 80085ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085be:	2301      	movs	r3, #1
 80085c0:	e00b      	b.n	80085da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085c2:	887b      	ldrh	r3, [r7, #2]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	4806      	ldr	r0, [pc, #24]	; (80085e4 <CDC_Transmit_FS+0x48>)
 80085ca:	f7fe faf3 	bl	8006bb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085ce:	4805      	ldr	r0, [pc, #20]	; (80085e4 <CDC_Transmit_FS+0x48>)
 80085d0:	f7fe fb30 	bl	8006c34 <USBD_CDC_TransmitPacket>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	2000069c 	.word	0x2000069c

080085e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
	...

0800860c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*PtrRx)(uint8_t *buf, uint16_t Len)) //la interfaZ va a llamar cada vez que se envian datos desde el USB hacia la PC
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8008614:	4a04      	ldr	r2, [pc, #16]	; (8008628 <CDC_Attach_Rx+0x1c>)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6013      	str	r3, [r2, #0]
}
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	20000d78 	.word	0x20000d78

0800862c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2212      	movs	r2, #18
 800863c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800863e:	4b03      	ldr	r3, [pc, #12]	; (800864c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	200000d0 	.word	0x200000d0

08008650 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2204      	movs	r2, #4
 8008660:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008662:	4b03      	ldr	r3, [pc, #12]	; (8008670 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	200000e4 	.word	0x200000e4

08008674 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	4907      	ldr	r1, [pc, #28]	; (80086a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800868a:	4808      	ldr	r0, [pc, #32]	; (80086ac <USBD_FS_ProductStrDescriptor+0x38>)
 800868c:	f7ff fd76 	bl	800817c <USBD_GetString>
 8008690:	e004      	b.n	800869c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	4904      	ldr	r1, [pc, #16]	; (80086a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008696:	4805      	ldr	r0, [pc, #20]	; (80086ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008698:	f7ff fd70 	bl	800817c <USBD_GetString>
  }
  return USBD_StrDesc;
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000d7c 	.word	0x20000d7c
 80086ac:	08008ed0 	.word	0x08008ed0

080086b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	4904      	ldr	r1, [pc, #16]	; (80086d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086c0:	4804      	ldr	r0, [pc, #16]	; (80086d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086c2:	f7ff fd5b 	bl	800817c <USBD_GetString>
  return USBD_StrDesc;
 80086c6:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20000d7c 	.word	0x20000d7c
 80086d4:	08008ee8 	.word	0x08008ee8

080086d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	6039      	str	r1, [r7, #0]
 80086e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	221a      	movs	r2, #26
 80086e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086ea:	f000 f843 	bl	8008774 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086ee:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	200000e8 	.word	0x200000e8

080086fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	6039      	str	r1, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d105      	bne.n	800871a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	4907      	ldr	r1, [pc, #28]	; (8008730 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008712:	4808      	ldr	r0, [pc, #32]	; (8008734 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008714:	f7ff fd32 	bl	800817c <USBD_GetString>
 8008718:	e004      	b.n	8008724 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	4904      	ldr	r1, [pc, #16]	; (8008730 <USBD_FS_ConfigStrDescriptor+0x34>)
 800871e:	4805      	ldr	r0, [pc, #20]	; (8008734 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008720:	f7ff fd2c 	bl	800817c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008724:	4b02      	ldr	r3, [pc, #8]	; (8008730 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000d7c 	.word	0x20000d7c
 8008734:	08008efc 	.word	0x08008efc

08008738 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	6039      	str	r1, [r7, #0]
 8008742:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d105      	bne.n	8008756 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	4907      	ldr	r1, [pc, #28]	; (800876c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800874e:	4808      	ldr	r0, [pc, #32]	; (8008770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008750:	f7ff fd14 	bl	800817c <USBD_GetString>
 8008754:	e004      	b.n	8008760 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	4904      	ldr	r1, [pc, #16]	; (800876c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800875a:	4805      	ldr	r0, [pc, #20]	; (8008770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800875c:	f7ff fd0e 	bl	800817c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008760:	4b02      	ldr	r3, [pc, #8]	; (800876c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000d7c 	.word	0x20000d7c
 8008770:	08008f08 	.word	0x08008f08

08008774 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800877a:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <Get_SerialNum+0x44>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008780:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <Get_SerialNum+0x48>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008786:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <Get_SerialNum+0x4c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800879a:	2208      	movs	r2, #8
 800879c:	4909      	ldr	r1, [pc, #36]	; (80087c4 <Get_SerialNum+0x50>)
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f814 	bl	80087cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087a4:	2204      	movs	r2, #4
 80087a6:	4908      	ldr	r1, [pc, #32]	; (80087c8 <Get_SerialNum+0x54>)
 80087a8:	68b8      	ldr	r0, [r7, #8]
 80087aa:	f000 f80f 	bl	80087cc <IntToUnicode>
  }
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	1fff7a10 	.word	0x1fff7a10
 80087bc:	1fff7a14 	.word	0x1fff7a14
 80087c0:	1fff7a18 	.word	0x1fff7a18
 80087c4:	200000ea 	.word	0x200000ea
 80087c8:	200000fa 	.word	0x200000fa

080087cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087de:	2300      	movs	r3, #0
 80087e0:	75fb      	strb	r3, [r7, #23]
 80087e2:	e027      	b.n	8008834 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	0f1b      	lsrs	r3, r3, #28
 80087e8:	2b09      	cmp	r3, #9
 80087ea:	d80b      	bhi.n	8008804 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	0f1b      	lsrs	r3, r3, #28
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	4619      	mov	r1, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	440b      	add	r3, r1
 80087fc:	3230      	adds	r2, #48	; 0x30
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	e00a      	b.n	800881a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	0f1b      	lsrs	r3, r3, #28
 8008808:	b2da      	uxtb	r2, r3
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	4619      	mov	r1, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	440b      	add	r3, r1
 8008814:	3237      	adds	r2, #55	; 0x37
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	3301      	adds	r3, #1
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	4413      	add	r3, r2
 800882a:	2200      	movs	r2, #0
 800882c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	3301      	adds	r3, #1
 8008832:	75fb      	strb	r3, [r7, #23]
 8008834:	7dfa      	ldrb	r2, [r7, #23]
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	429a      	cmp	r2, r3
 800883a:	d3d3      	bcc.n	80087e4 <IntToUnicode+0x18>
  }
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008854:	f107 0314 	add.w	r3, r7, #20
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	609a      	str	r2, [r3, #8]
 8008860:	60da      	str	r2, [r3, #12]
 8008862:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800886c:	d13a      	bne.n	80088e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	4b1e      	ldr	r3, [pc, #120]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	6313      	str	r3, [r2, #48]	; 0x30
 800887e:	4b1b      	ldr	r3, [pc, #108]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800888a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800888e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008890:	2302      	movs	r3, #2
 8008892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008894:	2300      	movs	r3, #0
 8008896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008898:	2303      	movs	r3, #3
 800889a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800889c:	230a      	movs	r3, #10
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	4619      	mov	r1, r3
 80088a6:	4812      	ldr	r0, [pc, #72]	; (80088f0 <HAL_PCD_MspInit+0xa4>)
 80088a8:	f7f9 fdae 	bl	8002408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	4a0e      	ldr	r2, [pc, #56]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b6:	6353      	str	r3, [r2, #52]	; 0x34
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c0:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088c6:	6453      	str	r3, [r2, #68]	; 0x44
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	2043      	movs	r0, #67	; 0x43
 80088da:	f7f9 f9ee 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088de:	2043      	movs	r0, #67	; 0x43
 80088e0:	f7f9 fa07 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088e4:	bf00      	nop
 80088e6:	3728      	adds	r7, #40	; 0x28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	40023800 	.word	0x40023800
 80088f0:	40020000 	.word	0x40020000

080088f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7fe fabb 	bl	8006e86 <USBD_LL_SetupStage>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	4619      	mov	r1, r3
 8008942:	f7fe faf5 	bl	8006f30 <USBD_LL_DataOutStage>
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	3320      	adds	r3, #32
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	4619      	mov	r1, r3
 8008976:	f7fe fb97 	bl	80070a8 <USBD_LL_DataInStage>
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe fcdb 	bl	800734c <USBD_LL_SOF>
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089a6:	2301      	movs	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	79db      	ldrb	r3, [r3, #7]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d001      	beq.n	80089b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089b2:	f7f8 fac5 	bl	8000f40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089bc:	7bfa      	ldrb	r2, [r7, #15]
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fc7f 	bl	80072c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe fc26 	bl	800721e <USBD_LL_Reset>
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fc7a 	bl	80072e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a02:	f043 0301 	orr.w	r3, r3, #1
 8008a06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	7adb      	ldrb	r3, [r3, #11]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <HAL_PCD_SuspendCallback+0x48>)
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	4a03      	ldr	r2, [pc, #12]	; (8008a24 <HAL_PCD_SuspendCallback+0x48>)
 8008a16:	f043 0306 	orr.w	r3, r3, #6
 8008a1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	e000ed00 	.word	0xe000ed00

08008a28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe fc70 	bl	800731c <USBD_LL_Resume>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fcc8 	bl	80073f0 <USBD_LL_IsoOUTIncomplete>
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fc84 	bl	800738c <USBD_LL_IsoINIncomplete>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fcda 	bl	8007454 <USBD_LL_DevConnected>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fcd7 	bl	800746a <USBD_LL_DevDisconnected>
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d13c      	bne.n	8008b4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ad4:	4a20      	ldr	r2, [pc, #128]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a1e      	ldr	r2, [pc, #120]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ae0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <USBD_LL_Init+0x94>)
 8008ae6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008aea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <USBD_LL_Init+0x94>)
 8008aee:	2204      	movs	r2, #4
 8008af0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008af2:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <USBD_LL_Init+0x94>)
 8008af4:	2202      	movs	r2, #2
 8008af6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008af8:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <USBD_LL_Init+0x94>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008afe:	4b16      	ldr	r3, [pc, #88]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b00:	2202      	movs	r2, #2
 8008b02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b04:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b10:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b1c:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b22:	480d      	ldr	r0, [pc, #52]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b24:	f7f9 fe27 	bl	8002776 <HAL_PCD_Init>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b2e:	f7f8 fa07 	bl	8000f40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b32:	2180      	movs	r1, #128	; 0x80
 8008b34:	4808      	ldr	r0, [pc, #32]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b36:	f7fb f854 	bl	8003be2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b3a:	2240      	movs	r2, #64	; 0x40
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4806      	ldr	r0, [pc, #24]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b40:	f7fb f808 	bl	8003b54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b44:	2280      	movs	r2, #128	; 0x80
 8008b46:	2101      	movs	r1, #1
 8008b48:	4803      	ldr	r0, [pc, #12]	; (8008b58 <USBD_LL_Init+0x94>)
 8008b4a:	f7fb f803 	bl	8003b54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20000f7c 	.word	0x20000f7c

08008b5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f9 ff0e 	bl	8002994 <HAL_PCD_Start>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f942 	bl	8008e08 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	70fb      	strb	r3, [r7, #3]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70bb      	strb	r3, [r7, #2]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bba:	78bb      	ldrb	r3, [r7, #2]
 8008bbc:	883a      	ldrh	r2, [r7, #0]
 8008bbe:	78f9      	ldrb	r1, [r7, #3]
 8008bc0:	f7fa fbe2 	bl	8003388 <HAL_PCD_EP_Open>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 f91c 	bl	8008e08 <USBD_Get_USB_Status>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fa fc2d 	bl	800345c <HAL_PCD_EP_Close>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f8fd 	bl	8008e08 <USBD_Get_USB_Status>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fa fce5 	bl	800360a <HAL_PCD_EP_SetStall>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f8de 	bl	8008e08 <USBD_Get_USB_Status>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c74:	78fa      	ldrb	r2, [r7, #3]
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fa fd29 	bl	80036d0 <HAL_PCD_EP_ClrStall>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f8bf 	bl	8008e08 <USBD_Get_USB_Status>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008caa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da0b      	bge.n	8008ccc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	3316      	adds	r3, #22
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	e00b      	b.n	8008ce4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008ce2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fa fb16 	bl	8003340 <HAL_PCD_SetAddress>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 f874 	bl	8008e08 <USBD_Get_USB_Status>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d4c:	7af9      	ldrb	r1, [r7, #11]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f7fa fc20 	bl	8003596 <HAL_PCD_EP_Transmit>
 8008d56:	4603      	mov	r3, r0
 8008d58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f853 	bl	8008e08 <USBD_Get_USB_Status>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d66:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	607a      	str	r2, [r7, #4]
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d8e:	7af9      	ldrb	r1, [r7, #11]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	f7fa fbac 	bl	80034f0 <HAL_PCD_EP_Receive>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f832 	bl	8008e08 <USBD_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008da8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dc4:	78fa      	ldrb	r2, [r7, #3]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fa fbcc 	bl	8003566 <HAL_PCD_EP_GetRxCount>
 8008dce:	4603      	mov	r3, r0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008de0:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <USBD_static_malloc+0x18>)
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20001460 	.word	0x20001460

08008df4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]

}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d817      	bhi.n	8008e4c <USBD_Get_USB_Status+0x44>
 8008e1c:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBD_Get_USB_Status+0x1c>)
 8008e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e22:	bf00      	nop
 8008e24:	08008e35 	.word	0x08008e35
 8008e28:	08008e3b 	.word	0x08008e3b
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e47 	.word	0x08008e47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
    break;
 8008e38:	e00b      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3e:	e008      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
    break;
 8008e44:	e005      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e46:	2303      	movs	r3, #3
 8008e48:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4a:	e002      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e50:	bf00      	nop
  }
  return usb_status;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <memset>:
 8008e60:	4402      	add	r2, r0
 8008e62:	4603      	mov	r3, r0
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d100      	bne.n	8008e6a <memset+0xa>
 8008e68:	4770      	bx	lr
 8008e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6e:	e7f9      	b.n	8008e64 <memset+0x4>

08008e70 <__libc_init_array>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	4d0d      	ldr	r5, [pc, #52]	; (8008ea8 <__libc_init_array+0x38>)
 8008e74:	4c0d      	ldr	r4, [pc, #52]	; (8008eac <__libc_init_array+0x3c>)
 8008e76:	1b64      	subs	r4, r4, r5
 8008e78:	10a4      	asrs	r4, r4, #2
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	d109      	bne.n	8008e94 <__libc_init_array+0x24>
 8008e80:	4d0b      	ldr	r5, [pc, #44]	; (8008eb0 <__libc_init_array+0x40>)
 8008e82:	4c0c      	ldr	r4, [pc, #48]	; (8008eb4 <__libc_init_array+0x44>)
 8008e84:	f000 f818 	bl	8008eb8 <_init>
 8008e88:	1b64      	subs	r4, r4, r5
 8008e8a:	10a4      	asrs	r4, r4, #2
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	d105      	bne.n	8008e9e <__libc_init_array+0x2e>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e98:	4798      	blx	r3
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	e7ee      	b.n	8008e7c <__libc_init_array+0xc>
 8008e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea2:	4798      	blx	r3
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	e7f2      	b.n	8008e8e <__libc_init_array+0x1e>
 8008ea8:	08008f38 	.word	0x08008f38
 8008eac:	08008f38 	.word	0x08008f38
 8008eb0:	08008f38 	.word	0x08008f38
 8008eb4:	08008f3c 	.word	0x08008f3c

08008eb8 <_init>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	bf00      	nop
 8008ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ebe:	bc08      	pop	{r3}
 8008ec0:	469e      	mov	lr, r3
 8008ec2:	4770      	bx	lr

08008ec4 <_fini>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	bf00      	nop
 8008ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eca:	bc08      	pop	{r3}
 8008ecc:	469e      	mov	lr, r3
 8008ece:	4770      	bx	lr
